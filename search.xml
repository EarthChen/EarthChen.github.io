<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[LeetCode刷题记录]]></title>
      <url>/2017/08/06/LeetCode_record/</url>
      <content type="html"><![CDATA[<p>leetcode刷题记录<br>本文记录一下leetcode刷题记录，记录一下自己的解法和心得。</p>
<a id="more"></a>
<h1 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h1><h2 id="Two-Sum"><a href="#Two-Sum" class="headerlink" title="Two Sum"></a>Two Sum</h2><p>题目:<a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="external">two sum</a></p>
<blockquote>
<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Given nums = [2, 7, 11, 15], target = 9,</div><div class="line"></div><div class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</div><div class="line">return [0, 1].</div></pre></td></tr></table></figure></p>
<p>题意分析:<br>找出数组numbers中的两个数，它们的和为给定的一个数target，并返回这两个数的索引(不需要去重)</p>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>题目要求说白了就是找出这个给的数组中有哪两个数相加等于目标结果</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p> 很容易想到我们可以遍历两次数组，在内循环中判断两次循环中的数相加是否等于target<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">        length = len(nums)  <span class="comment"># 计算输入的列表长度</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(length):</div><div class="line">                <span class="keyword">if</span> nums[i] + nums[j] == target:</div><div class="line">                    <span class="keyword">return</span> [i, j]</div></pre></td></tr></table></figure></p>
<p>这是一种很简单很容易能想到的方法，但此方法的时间复杂度是O(N^2),在leetcode会超时，所以不行，想要通过，肯定要降低时间复杂度</p>
<p>为了降低时间复杂度，我们可以牺牲空间来换取时间，使用一次循环，将时间复杂度降为O(N)，所以我们可以有以下解法</p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>可以使用字段存储遍历过的num和它的下标放置一个字典中，在循环这个列表，用目标结果target减正在循环的这个数，并判断结果是否在字典中(即是否循已经遍历过)，如果结果存在如字典中，即找到相加等于结果的两个值，如果不存在，即把值和对应下标存入字典中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">        arr = &#123;&#125;  <span class="comment"># 使用字典存储遍历过的num和对应下标&#123;num:index&#125;</span></div><div class="line">        length = len(nums)  <span class="comment"># 计算输入的列表长度</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            <span class="keyword">if</span> (target - nums[i]) <span class="keyword">in</span> arr:</div><div class="line">                <span class="comment"># 如果target-当前num的差在arr中，则表示已经找到答案，返回结果即可</span></div><div class="line">                <span class="keyword">return</span> [arr[target - nums[i]], i]</div><div class="line">            <span class="comment"># 否则，将该num及其下标存入arr中</span></div><div class="line">            arr[nums[i]] = i</div></pre></td></tr></table></figure></p>
<p>此时就牺牲了一个字典的空间，来换取了O(N)的复杂度，在leetcode也能通过</p>
<h2 id="Reverse-Integer"><a href="#Reverse-Integer" class="headerlink" title="Reverse Integer"></a>Reverse Integer</h2><p>题目:<a href="https://leetcode.com/problems/reverse-integer/description/" target="_blank" rel="external">Reverse Integer</a></p>
<blockquote>
<p>Reverse digits of an integer.</p>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Example1: x = 123, return 321</div><div class="line">Example2: x = -123, return -321</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注:The input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows.</p>
</blockquote>
<p>题意分析:<br>题目很简单，将数字倒置而已，最后结果要求判断是否为32位有符号整数</p>
<h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p>想要倒置，又由于是int类型，我们可以使用除10求余的方式，循环求余，在每一步求出的余数放到一个数组李存起来，最后在将数组拼起来成为一个int类型整数。</p>
<p>但是，以上方法想想就很复杂，操作起来也很麻烦，想到基本每种语言都带有字符串倒置的方法，我们可以先将数字转换为字符串，在调用内置方法倒置字符串。如果是传入的x是负数，在将其转为为负数即可</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="comment"># 对x判断为正还是为负</span></div><div class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span>:</div><div class="line">            x = abs(x)</div><div class="line">            <span class="comment"># 先将数字转为字符串，再用反向切片操作(其他语言也都有字符串倒置函数)</span></div><div class="line">            <span class="keyword">return</span> self.isOverFlows(-int(str(x)[::<span class="number">-1</span>]))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> self.isOverFlows(int(str(x)[::<span class="number">-1</span>]))</div><div class="line"></div><div class="line">    <span class="comment"># 判断x是否在32位有符号数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isOverFlows</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="keyword">if</span> pow(<span class="number">-2</span>, <span class="number">31</span>) &lt; x &lt; pow(<span class="number">2</span>, <span class="number">31</span>):</div><div class="line">            <span class="keyword">return</span> x</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>使用了内置的字符串高效反向切片方法，并且将判断结果是否是属于32位有符号数分离出一个方法，减少耦合</p>
<h2 id="Palindrome-Number"><a href="#Palindrome-Number" class="headerlink" title="Palindrome Number"></a>Palindrome Number</h2><p>题目:<a href="https://leetcode.com/problems/palindrome-number/description/" target="_blank" rel="external">Palindrome Number</a></p>
<blockquote>
<p>Determine whether an integer is a palindrome. Do this without extra space.</p>
</blockquote>
<p>题意分析:<br>判断一个整形是否是回文，不能使用额外空间</p>
<h3 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h3><p>判断回文，首先需要知道回文的定义，就是正向和反向都一样的数字，也就是说这个数字需要前后对称，所以我们只需要用每个下标和它对称的下标上的数进行比较是否相等，如果不相等就不是回文，如果每个下标和对称位都相等就是回文，简单点可以直接从0循环到n-1，此时时间复杂度是O(N)，但其实只需要循环到一半即可，因为如果超过一半就会重复了，没有任何意义。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-2"><a href="#方法一-2" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="comment"># 将数字转换为字符串</span></div><div class="line">        x = str(x)</div><div class="line">        <span class="comment"># 得到字符串的长度</span></div><div class="line">        n = len(x)</div><div class="line">        <span class="comment"># 对字符串进行迭代</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">            <span class="comment"># 判断头和尾是否相等并且头要小于尾</span></div><div class="line">            <span class="keyword">if</span> x[i] != x[n - i - <span class="number">1</span>] <span class="keyword">and</span> i &lt; n - i - <span class="number">1</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>很明显，此方法时间复杂度是O(N/2)，算较好的方法</p>
<h2 id="Longest-Common-Prefix"><a href="#Longest-Common-Prefix" class="headerlink" title="Longest Common Prefix"></a>Longest Common Prefix</h2><p>题目:<a href="https://leetcode.com/problems/longest-common-prefix/description/" target="_blank" rel="external">Longest Common Prefix</a></p>
<blockquote>
<p>Write a function to find the longest common prefix string amongst an array of strings..</p>
</blockquote>
<p>题意分析:<br>求出一个字符串数组中所有字符串的最长共同前缀，如<br>[‘aaa’,’ab’]  ==&gt; a<br>[‘aaa’]  ==&gt; aaa<br>[]==&gt; ‘’</p>
<h3 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h3><p>题目想要我们求出字符串数组中，所有字符串之间的共同的最长前缀，<br>想要求出最长的，这个最长的前缀，范围肯定是0到所有字符串中最短的字符串长度，所以得到最短的字符串和它自身的长度是很关键的，如果没有最短长度，我们根本不会知道循环的次数，如果随意选择一个字符串进行循环，如果这个字符串较长，就会造成越界错误</p>
<p>所以我们首先需要得到最短字符串和它自身的长度，来确定外循环次数，内循环去循环遍历每个字符串。</p>
<p>要得到最长共同前缀，其实这个和在一个数组里求最大的数的思路一样，我们需要先设第一个值为最大值，后面值分别与设的最大值相比较，如果比假设的最大值还要大，就需要更新假设最大值。</p>
<p>这里也一样，我们首先假设最长共同前缀为最短字符串的前1个字符，在内循环中判断每个字符的前i+1个子字符串是否等于假设的最长共同前缀，如果不相同，我们还需要判断当前i+1是否等于1，如果等于，那就是第一个字符都不相同，那就需要返回空，如果都相同，需要判断当前最长共同前缀是否等于最短字符串，如果等于，说明最长共同子串等于最短字符串，否则需要更新最长共同前缀，将其赋值为前i+1+1位的子字符串。进入下一次外循环。</p>
<p>在外循环中更新了最长共同前缀之后，在进入内循环判断，如果前i+1位子串不等于最长共同前缀，那就得返回前i位子串，此时前为i为子串即为最长共同前缀。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-3"><a href="#方法一-3" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs)</span>:</span></div><div class="line">        <span class="comment"># 判断字符串列表是否为空</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</div><div class="line">            <span class="keyword">return</span> <span class="string">''</span></div><div class="line">        <span class="comment"># 计算字符串列表中最短的字符串</span></div><div class="line">        min_str = min(strs)</div><div class="line">        <span class="comment"># 计算最短字符串的长度</span></div><div class="line">        min_length = len(min_str)</div><div class="line">        <span class="comment"># 初始令最长共同前缀字符串为最短字符串的第一个字符</span></div><div class="line">        max_common_str = min_str[:<span class="number">1</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min_length):</div><div class="line">            <span class="keyword">for</span> str <span class="keyword">in</span> strs:</div><div class="line">                <span class="comment"># 判断字符串列表中每个字符串的前i+1位是否与最长共同字符串相同</span></div><div class="line">                <span class="comment"># 不同则判断当前字符串是否为第1个，是则返回空，不是则返回前i位字符串</span></div><div class="line">                <span class="keyword">if</span> str[:i + <span class="number">1</span>] != max_common_str:</div><div class="line">                    <span class="keyword">if</span> i == <span class="number">0</span>:</div><div class="line">                        <span class="keyword">return</span> <span class="string">''</span></div><div class="line">                    <span class="keyword">return</span> str[:i]</div><div class="line">            <span class="comment"># 当每个字符串前i+1位都与共同前缀字符相同时，判断字符串是否最短字符串相同</span></div><div class="line">            <span class="comment"># 相同则返回最长共同前缀字符</span></div><div class="line">            <span class="keyword">if</span> min_str == max_common_str:</div><div class="line">                <span class="keyword">return</span> max_common_str</div><div class="line">            <span class="comment"># 不相同则返回前i+1+1位字符串(使字符串向后移动一位)</span></div><div class="line">            max_common_str = min_str[:i + <span class="number">1</span> + <span class="number">1</span>]</div><div class="line">        <span class="keyword">return</span> max_common_str</div></pre></td></tr></table></figure>
<p>此解法时间复杂度是O(N^2)，目前我想不到更好的解法。。但是leetcode能通过</p>
<h2 id="Valid-Parentheses"><a href="#Valid-Parentheses" class="headerlink" title="Valid Parentheses"></a>Valid Parentheses</h2><p>题目:<a href="https://leetcode.com/problems/valid-parentheses/description/" target="_blank" rel="external">Valid Parentheses</a></p>
<blockquote>
<p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p>
<p>The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.</p>
</blockquote>
<p>题意分析:<br>判断一个只有字符’(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ 和 ‘]’的字符串，并且每对括号都需要正确的关闭，也就是说括号需要成对出现</p>
<h3 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h3><p>判断成对出现的东西，我们很容易想到栈（先进后出）这种数据结构。</p>
<p>括号亦是如此，如果出现左括号，我们就将其入栈，当在出现了右括号，我们在将其出栈，如果最后的栈为空，即括号刚好是成对出现的。</p>
<p>但我们还需要判断三种括号之间的对应关系（即左小括号对应右小括号等），为了实现这种需求，在python里可以使用字典(java里可以使用map)存储对应关系。</p>
<p>循环字符串时，如果当前字符为左字符串，则向栈(列表/数组)尾部加上这个字符，如果不等于左括号，则判断此时栈是否为空或者当前的右括号字符在字典中所对应的左括号是否等于出栈的元素，如果不相等，则返回false</p>
<p>循环完毕还需要判断栈是否为空，如果为空，则返回true，反之，返回false</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-4"><a href="#方法一-4" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">lass Solution:</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        :param s: str</div><div class="line">        :return: bool</div><div class="line">        '''</div><div class="line">        left_char = <span class="string">'(&#123;['</span></div><div class="line">        mp = &#123;</div><div class="line">            <span class="string">')'</span>: <span class="string">'('</span>,</div><div class="line">            <span class="string">']'</span>: <span class="string">'['</span>,</div><div class="line">            <span class="string">'&#125;'</span>: <span class="string">'&#123;'</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment"># 初始化一个空列表作为栈</span></div><div class="line">        stack = []</div><div class="line">        <span class="comment"># 循环遍历字符串</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</div><div class="line">            <span class="comment"># 如果字符是左括号就入栈</span></div><div class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> left_char:</div><div class="line">                stack.append(i)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="comment"># 如果也想加上对其他字符串匹配</span></div><div class="line">                <span class="comment"># if i in mp.keys():</span></div><div class="line">                    <span class="comment"># 栈为空或者传入的右括号不等于栈尾的左括号，即不符合条件</span></div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stack <span class="keyword">or</span> mp[i] != stack.pop():</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="comment"># 判断栈是否为空，为空即成立</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> stack:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>用列表来替代模拟栈，时间复杂度为O(N)，顺利通过leetcode检测</p>
<blockquote>
<p>注：</p>
<ul>
<li>以上代码见github:<a href="https://github.com/EarthChen/LeetCode_Record" target="_blank" rel="external">https://github.com/EarthChen/LeetCode_Record</a></li>
<li>上述环境在<strong>ubuntu16.04 lts和python3.5</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[es6学习笔记]]></title>
      <url>/2017/07/29/es6_study/</url>
      <content type="html"><![CDATA[<p>ECMAScript 6.0（ 以下简称ES6） 是JavaScript语言的下一代标准。</p>
<p>ECMAScript和JavaScript的关系是， 前者是后者的规格， 后者是前者的一种实现（ 另外的ECMAScript方言还有Jscript和ActionScript） 。 日常场合， 这两个词是可以互换的。</p>
<p>在前端工程化的现在，学习es6还是有必要的。<br>本文为个人根据<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">阮老师的es6标准入门</a>学习笔记。<br><a id="more"></a></p>
<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="let和const命令"><a href="#let和const命令" class="headerlink" title="let和const命令"></a>let和const命令</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ol>
<li>let用来声明变量。 它的用法类似于var， 但是所声明的变量， 只在let命令所在的代码块内有效</li>
<li>在循环中，如果变量i是var声明的， 在全局范围内都有效。 所以每一次循环，新的i值都会覆盖旧值，如果变量i是let声明的， 当前的i只在本轮循环有效， 所以每一次循环的i其实都是一个新的变量。</li>
<li>let不像var那样会发生“变量提升”现象。 所以， 变量一定要在声明后使用， 否则报错</li>
<li>let不允许在相同作用域内， 重复声明同一个变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//所声明的变量， 只在let命令所在的代码块内有效</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'a='</span> + a + <span class="string">'\nb='</span> + b);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'let代码块外b='</span> + b);</div><div class="line"><span class="comment">// console.log('let代码块外b=' + a);</span></div><div class="line"></div><div class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 变量i是var声明的， 在全局范围内都有效。 所以每一次循环，</div><div class="line"> * 新的i值都会覆盖旧值， 导致最后输出的是最后一轮的i的值</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    a[i] = i;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(i);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 变量i是let声明的， 当前的i只在本轮循环有效， 所以每一次循环的i其实都是一个新的变量， 所以最后输出的是6</div><div class="line"> * @type &#123;Array&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    a[i] = i;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a[<span class="number">6</span>]);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 只要块级作用域内存在let命令， 它所声明的变量就“绑定”（ binding） 这个区域， 不再受外部的影响</div><div class="line"> *存在全局变量tmp， 但是块级作用域内let又声明了一个局部变量tmp， 导致后者绑定这个块级作用域， 所以在let声明变量前， 对tmp赋</div><div class="line"> 值会报错。</div><div class="line"> 如果区块中存在let和const命令， 这个区块对这些命令声明的变量， 从一开始就形成了封闭作用域。 凡是在声明之前就使用这些变</div><div class="line"> 量， 就会报错。</div><div class="line"> 总之， 在代码块内， 使用let命令声明变量之前， 该变量都是不可用的</div><div class="line"> 暂时性死区”也意味着typeof不再是一个百分之百安全的操作</div><div class="line"> * @type &#123;number&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">    <span class="comment">//tmp = 'abc'; // ReferenceError</span></div><div class="line">    <span class="keyword">let</span> tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *调用bar函数之所以报错</div><div class="line"> *参数x默认值等于另一个参数y， 而此时y还没有声明</div><div class="line"> * @param x</div><div class="line"> * @param y</div><div class="line"> * @returns &#123;[null,null]&#125;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x = y, y = <span class="number">2</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> [x, y];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//bar();  //报错</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x = <span class="number">2</span>, y = x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> [x, y];</div><div class="line">&#125;</div><div class="line">bar();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * let不允许在相同作用域内， 重复声明同一个变量,都会报错</div><div class="line"> */</div><div class="line"><span class="comment">// function () &#123;</span></div><div class="line"><span class="comment">//     let a = 10;</span></div><div class="line"><span class="comment">//     var a = 1;</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// function () &#123;</span></div><div class="line"><span class="comment">//     let a = 10;</span></div><div class="line"><span class="comment">//     let a = 1;</span></div><div class="line"><span class="comment">// &#125;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>结果为:<br><img src="http://objects.earthchen.cn/es6_study_let%E7%BB%93%E6%9E%9C.png" alt="let结果"></p>
<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ol>
<li>const声明一个只读的常量。 一旦声明， 常量的值就不能改变。</li>
<li>const声明的变量不得改变值， 这意味着， const一旦声明变量， 就必须立即初始化， 不能留到以后赋值。</li>
<li>onst的作用域与let命令相同： 只在声明所在的块级作用域内有效。</li>
<li>const命令声明的常量也是不提升， 同样存在暂时性死区， 只能在声明的位置后面使用</li>
<li>const声明的常量， 也与let一样不可重复声明<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> PI=<span class="number">3.1415</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(PI);</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 量a是一个数组， 这个数组本身是可写的， 但是如果将另一个数组赋值给a， 就会报错</div><div class="line"> * @type &#123;Array&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">const</span> a=[];</div><div class="line">a.push(<span class="string">'hello'</span>);</div><div class="line"><span class="comment">//a = ['Dave'];</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="全局对象的属性"><a href="#全局对象的属性" class="headerlink" title="全局对象的属性"></a>全局对象的属性</h3><ol>
<li>var命令和function命令声明的全局变量， 依旧是全局对象的属性</li>
<li>let命令、 const命令、 class命令声明的全局变量， 不属于全局对象的属性 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="comment">// 如果在Node的REPL环境， 可以写成global.a</span></div><div class="line"><span class="comment">// 或者采用通用方法， 写成this.a</span></div><div class="line"><span class="keyword">this</span>.a <span class="comment">// 1</span></div><div class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</div><div class="line"><span class="comment">//window.b // undefined</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><ol>
<li>ES6允许按照一定模式， 从数组和对象中提取值， 对变量进行赋值， 这被称为解构（ Destructuring） </li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 同时给abc赋值可以用一下方式</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a='</span>+a+<span class="string">'  b='</span>+b+<span class="string">'  c='</span>+c);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 这种写法属于“模式匹配”， 只要等号两边的模式相同， 左边的变量就会被赋予对应的值</div><div class="line"> */</div><div class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'foo='</span>+foo+<span class="string">'  bar='</span>+bar+<span class="string">'  baz='</span>+baz);</div><div class="line"></div><div class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'third='</span>+third);</div><div class="line"></div><div class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'x='</span>+x+<span class="string">'  y='</span>+y);</div><div class="line"></div><div class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'head='</span>+head+<span class="string">' tail='</span>+tail);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *另一种情况是不完全解构， 即等号左边的模式， 只匹配一部分的等号右边的数组</div><div class="line"> */</div><div class="line"><span class="keyword">let</span> [x2, y2] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'x2='</span>+x2+<span class="string">'  y2='</span>+y2);</div><div class="line"></div><div class="line"><span class="keyword">let</span> [a2, [b2], c2] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a2='</span>+a2+<span class="string">'  b='</span>+b2+<span class="string">'  c2='</span>+c2);</div></pre></td></tr></table></figure>
<p>结果为:<br><img src="http://objects.earthchen.cn/es6_study_%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%90%E8%B5%8B%E5%80%BC.png" alt="数组的解构赋值"></p>
<blockquote>
<p>注：</p>
<ul>
<li>只要某种数据结构具有Iterator接口， 都可以采用数组形式的解构赋值</li>
<li>解构赋值允许指定默认值,ES6内部使用严格相等运算符（ ===） ， 判断一个位置是否有值。 所以， 如果一个数组成员不严格等于undefined， 默认值是不会生效的</li>
</ul>
</blockquote>
<h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><p>解构不仅可以用于数组， 还可以用于对象</p>
<ol>
<li>对象的解构与数组有一个重要的不同。 数组的元素是按次序排列的， 变量的取值由它的位置决定； 而对象的属性没有次序， 变量必须与属性同名， 才<br>能取到正确的值。</li>
<li>对象的解构也可以指定默认值。默认值生效的条件是， 对象的属性值严格等于undefined。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> &#123;foo, bar&#125; = &#123;<span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'foo='</span> + foo + <span class="string">' bar='</span> + bar);</div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;<span class="attr">foo2</span>: foo2, <span class="attr">bar2</span>: bar2&#125; = &#123;<span class="attr">foo2</span>: <span class="string">"aaa"</span>, <span class="attr">bar2</span>: <span class="string">"bbb"</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'foo2='</span> + foo2 + <span class="string">' bar2='</span> + bar2);</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 真正被赋值的是变量baz， 而不是模式foo。</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> &#123;<span class="attr">foo</span>: baz&#125; = &#123;<span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(baz);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 和数组一样， 解构也可以用于嵌套结构的对象</div><div class="line"> * 这时p是模式， 不是变量， 因此不会被赋值</div><div class="line"> * @type &#123;&#123;p: [string,null]&#125;&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">p</span>: [</div><div class="line">        <span class="string">'Hello'</span>,</div><div class="line">        &#123;<span class="attr">y</span>: <span class="string">'World'</span>&#125;</div><div class="line">    ]</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> &#123;<span class="attr">p</span>: [x, &#123;y&#125;]&#125; = obj;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'x='</span> + x + <span class="string">' y='</span> + y);</div><div class="line"><span class="comment">/**</span></div><div class="line"> * line和column是变量， loc和start都是模式， 不会被赋值</div><div class="line"> * @type &#123;&#123;loc: &#123;start: &#123;line: number, column: number&#125;&#125;&#125;&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> node = &#123;</div><div class="line">    <span class="attr">loc</span>: &#123;</div><div class="line">        <span class="attr">start</span>: &#123;</div><div class="line">            <span class="attr">line</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">column</span>: <span class="number">5</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> &#123;<span class="attr">loc</span>: &#123;<span class="attr">start</span>: &#123;line, column&#125;&#125;&#125; = node;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'line='</span> + line + <span class="string">' column='</span> + column);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 嵌套赋值</div><div class="line"> *  let命令下面一行的圆括号是必须的， 否则会报错。 因为解析器会将起首的大括号， 理解成一个代码块， 而不是赋值语句。</div><div class="line"> * @type &#123;&#123;&#125;&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">let</span> obj2 = &#123;&#125;;</div><div class="line"><span class="keyword">let</span> arr = [];</div><div class="line">(&#123;<span class="attr">foo</span>: obj2.prop, <span class="attr">bar</span>: arr[<span class="number">0</span>]&#125; = &#123;<span class="attr">foo</span>: <span class="number">123</span>, <span class="attr">bar</span>: <span class="literal">true</span>&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'obj2.prop='</span>+obj2.prop+<span class="string">' arr='</span>+arr);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 对象的解构赋值， 可以很方便地将现有对象的方法， 赋值到某个变量</div><div class="line"> * 将Math对象的对数、 正弦、 余弦三个方法， 赋值到对应的变量上</div><div class="line"> */</div><div class="line"><span class="keyword">let</span> &#123; log, sin, cos &#125; = <span class="built_in">Math</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>结果为:<br><img src="http://objects.earthchen.cn/es6_study_object%E8%A7%A3%E6%9E%90%E8%B5%8B%E5%80%BC.png" alt="对象解析赋值"></p>
<h3 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h3><p>字符串也可以解构赋值。 这是因为此时， 字符串被转换成了一个类似数组的对象</p>
<blockquote>
<p>注:类似数组的对象都有一个length属性， 因此还可以对这个属性解构赋值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</div><div class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span> : len&#125; = <span class="string">'hello'</span>;</div><div class="line"><span class="built_in">console</span>.log(a+b+c+d+e+<span class="string">'  length='</span>+len);</div></pre></td></tr></table></figure></p>
</blockquote>
<p>结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello  length=5</div></pre></td></tr></table></figure></p>
<h3 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h3><p>函数的参数也可以使用解构赋值。</p>
<p>函数add的参数表面上是一个数组， 但在传入参数的那一刻， 数组参数就被解构成变量x和y<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(add([<span class="number">1</span>, <span class="number">2</span>]));</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用默认值</div><div class="line"> * @param x</div><div class="line"> * @param y</div><div class="line"> * @returns &#123;[null,null]&#125;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> [x, y];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="圆括号问题"><a href="#圆括号问题" class="headerlink" title="圆括号问题"></a>圆括号问题</h3><p>只要有可能导致解构的歧义， 就不得使用圆括号</p>
<h4 id="不能使用圆括号的情况"><a href="#不能使用圆括号的情况" class="headerlink" title="不能使用圆括号的情况"></a>不能使用圆括号的情况</h4><ol>
<li>变量声明语句中， 不能带有圆括号</li>
<li>函数参数中， 模式不能带有圆括号。</li>
<li>赋值语句中， 不能将整个模式， 或嵌套模式中的一层， 放在圆括号之中。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 全部报错</span></div><div class="line"><span class="keyword">var</span> [(a)] = [<span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> &#123;<span class="attr">x</span>: (c)&#125; = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> (&#123;<span class="attr">x</span>: c&#125;) = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> &#123;(x: c)&#125; = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> &#123;(x): c&#125; = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> &#123; <span class="attr">o</span>: (&#123; <span class="attr">p</span>: p &#125;) &#125; = &#123; <span class="attr">o</span>: &#123; <span class="attr">p</span>: <span class="number">2</span> &#125; &#125;;</div><div class="line"></div><div class="line"><span class="comment">// 报错</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[(z</span>)]) </span>&#123; <span class="keyword">return</span> z; &#125;</div><div class="line"></div><div class="line"><span class="comment">// 全部报错</span></div><div class="line">(&#123; <span class="attr">p</span>: a &#125;) = &#123; <span class="attr">p</span>: <span class="number">42</span> &#125;;</div><div class="line">([a]) = [<span class="number">5</span>];</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="可以使用圆括号的情况"><a href="#可以使用圆括号的情况" class="headerlink" title="可以使用圆括号的情况"></a>可以使用圆括号的情况</h4><p>赋值语句的非模式部分， 可以使用圆括号。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[(b)] = [<span class="number">3</span>]; <span class="comment">// 正确</span></div><div class="line">(&#123; <span class="attr">p</span>: (d) &#125; = &#123;&#125;); <span class="comment">// 正确</span></div><div class="line">[(<span class="built_in">parseInt</span>.prop)] = [<span class="number">3</span>]; <span class="comment">// 正确</span></div></pre></td></tr></table></figure></p>
<h3 id="变量的解构赋值用途"><a href="#变量的解构赋值用途" class="headerlink" title="变量的解构赋值用途"></a>变量的解构赋值用途</h3><h4 id="交换变量的值"><a href="#交换变量的值" class="headerlink" title="交换变量的值"></a>交换变量的值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[x, y] = [y, x];</div></pre></td></tr></table></figure>
<h4 id="从函数返回多个值"><a href="#从函数返回多个值" class="headerlink" title="从函数返回多个值"></a>从函数返回多个值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 返回一个数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> [a, b, c] = example();</div><div class="line"></div><div class="line"><span class="comment">// 返回一个对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">foo</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">bar</span>: <span class="number">2</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;foo, bar&#125; = example();</div></pre></td></tr></table></figure>
<h4 id="提取JSON数据"><a href="#提取JSON数据" class="headerlink" title="提取JSON数据"></a>提取JSON数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jsonData = &#123;</div><div class="line">    <span class="attr">id</span>: <span class="number">42</span>,</div><div class="line">    <span class="attr">status</span>: <span class="string">"OK"</span>,</div><div class="line">    <span class="attr">data</span>: [<span class="number">867</span>, <span class="number">5309</span>]</div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> &#123;id, status, <span class="attr">data</span>: number&#125; = jsonData;</div></pre></td></tr></table></figure>
<h4 id="遍历Map结构"><a href="#遍历Map结构" class="headerlink" title="遍历Map结构"></a>遍历Map结构</h4><p>任何部署了Iterator接口的对象， 都可以用for…of循环遍历。 Map结构原生支持Iterator接口， 配合变量的解构赋值， 获取键名和键值就非常方便。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">map.set(<span class="string">'first'</span>, <span class="string">'hello'</span>);</div><div class="line">map.set(<span class="string">'second'</span>, <span class="string">'world'</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</div><div class="line">    <span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果只想获取键名， 或者只想获取键值， 可以写成下面这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取键名</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key] <span class="keyword">of</span> map) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125; </div><div class="line"><span class="comment">// 获取键值</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [,value] <span class="keyword">of</span> map) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串的遍历器接口"><a href="#字符串的遍历器接口" class="headerlink" title="字符串的遍历器接口"></a>字符串的遍历器接口</h3><p>字符串可以被for…of循环遍历<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> codePoint <span class="keyword">of</span> <span class="string">'hello'</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(codePoint)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="常用的新方法"><a href="#常用的新方法" class="headerlink" title="常用的新方法"></a>常用的新方法</h3><h4 id="includes-startsWith-endsWith"><a href="#includes-startsWith-endsWith" class="headerlink" title="includes(), startsWith(), endsWith()"></a>includes(), startsWith(), endsWith()</h4><ul>
<li>includes()： 返回布尔值， 表示是否找到了参数字符串</li>
<li>startsWith()： 返回布尔值， 表示参数字符串是否在源字符串的头部</li>
<li>endsWith()： 返回布尔值， 表示参数字符串是否在源字符串的尾部。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'Hello world!'</span>;</div><div class="line">s.startsWith(<span class="string">'Hello'</span>) <span class="comment">// true</span></div><div class="line">s.endsWith(<span class="string">'!'</span>) <span class="comment">// true</span></div><div class="line">s.includes(<span class="string">'o'</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<ul>
<li>三个方法都支持第二个参数， 表示开始搜索的位置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'Hello world!'</span>;</div><div class="line">s.startsWith(<span class="string">'world'</span>, <span class="number">6</span>) <span class="comment">// true </span></div><div class="line">s.endsWith(<span class="string">'Hello'</span>, <span class="number">5</span>) <span class="comment">// true</span></div><div class="line">s.includes(<span class="string">'Hello'</span>, <span class="number">6</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h4><p>repeat 方法返回一个新字符串， 表示将原字符串重复n 次。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">'x'</span>.repeat(<span class="number">3</span>) <span class="comment">// "xxx"</span></div><div class="line"><span class="string">'hello'</span>.repeat(<span class="number">2</span>) <span class="comment">// "hellohello"</span></div><div class="line"><span class="string">'na'</span>.repeat(<span class="number">0</span>) <span class="comment">// ""</span></div></pre></td></tr></table></figure></p>
<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>模板字符串（ template string） 是增强版的字符串， 用反引号（ `） 标识。 它可以当作普通字符串使用， 也可以用来定义多行字符串， 或者在字符串中<br>嵌入变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 普通字符串</span></div><div class="line"><span class="string">`In JavaScript '\n' is a line-feed.`</span></div><div class="line"></div><div class="line"><span class="comment">// 多行字符串</span></div><div class="line"><span class="string">`In JavaScript this is</span></div><div class="line">not legal.`</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`string text line 1</span></div><div class="line">string text line 2`);</div><div class="line"></div><div class="line"><span class="comment">// 字符串中嵌入变量</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">"Bob"</span>, time = <span class="string">"today"</span>;</div><div class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you <span class="subst">$&#123;time&#125;</span>?`</span></div><div class="line"></div><div class="line"><span class="comment">//可以放入任意的JavaScript表达式， 可以进行运算</span></div><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> y = <span class="number">2</span>;</div><div class="line"><span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y&#125;</span> = <span class="subst">$&#123;x + y&#125;</span>`</span></div><div class="line"><span class="comment">// "1 + 2 = 3"</span></div><div class="line"></div><div class="line"><span class="comment">//调用函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello World"</span>;</div><div class="line">&#125; </div><div class="line"><span class="string">`foo <span class="subst">$&#123;fn()&#125;</span> bar`</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>注:</p>
<ul>
<li>如果在模板字符串中需要使用反引号， 则前面要用反斜杠转义</li>
<li>如果使用模板字符串表示多行字符串， 所有的空格和缩进都会被保留在输出之中</li>
<li>模板字符串中嵌入变量， 需要将变量名写在${}之中</li>
<li>大括号内部可以放入任意的JavaScript表达式， 可以进行运算， 以及引用对象属性</li>
<li>模板字符串之中还能调用函数</li>
</ul>
</blockquote>
<h2 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h2><h3 id="Math对象的扩展"><a href="#Math对象的扩展" class="headerlink" title="Math对象的扩展"></a>Math对象的扩展</h3><h4 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc()"></a>Math.trunc()</h4><p>Math.trunc方法用于去除一个数的小数部分， 返回整数部分</p>
<h4 id="Math-sign"><a href="#Math-sign" class="headerlink" title="Math.sign()"></a>Math.sign()</h4><p>Math.sign方法用来判断一个数到底是正数、 负数、 还是零</p>
<h4 id="Math-cbrt"><a href="#Math-cbrt" class="headerlink" title="Math.cbrt()"></a>Math.cbrt()</h4><p>Math.cbrt方法用于计算一个数的立方根</p>
<h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p>Array.from方法用于将两类对象转为真正的数组： 类似数组的对象（ array-like object） 和可遍历（ iterable） 的对象（ 包括ES6新增的数据结构Set和<br>Map） 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//常见的类似数组的对象是DOM操作返回的NodeList集合</span></div><div class="line"><span class="keyword">let</span> ps = <span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);</div><div class="line"><span class="built_in">Array</span>.from(ps).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(p);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//只要是部署了Iterator接口的数据结构， Array.from都能将其转为数组</span></div><div class="line"><span class="built_in">Array</span>.from(<span class="string">'hello'</span>)</div><div class="line"><span class="keyword">let</span> namesSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>])</div><div class="line"><span class="built_in">Array</span>.from(namesSet) <span class="comment">// ['a', 'b']</span></div></pre></td></tr></table></figure></p>
<h3 id="数组实例的find-和findIndex"><a href="#数组实例的find-和findIndex" class="headerlink" title="数组实例的find()和findIndex()"></a>数组实例的find()和findIndex()</h3><p>数组实例的find方法， 用于找出第一个符合条件的数组成员。 它的参数是一个回调函数， 所有数组成员依次执行该回调函数， 直到找出第一个返回值<br>为true的成员， 然后返回该成员。 如果没有符合条件的成员， 则返回undefined。</p>
<h3 id="数组实例的fill"><a href="#数组实例的fill" class="headerlink" title="数组实例的fill()"></a>数组实例的fill()</h3><p>fill方法使用给定值， 填充一个数组</p>
<ul>
<li>fill方法还可以接受第二个和第三个参数， 用于指定填充的起始位置和结束位置</li>
</ul>
<h3 id="数组实例的entries-，-keys-和values"><a href="#数组实例的entries-，-keys-和values" class="headerlink" title="数组实例的entries()， keys()和values()"></a>数组实例的entries()， keys()和values()</h3><p>可以用for…of循环进行遍历， 唯一的区别是keys()是对键名的遍历、 values()是对键值的遍历， entries()是对键值对的遍历。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</div><div class="line">    <span class="built_in">console</span>.log(index);</div><div class="line">&#125; </div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].values()) &#123;</div><div class="line">    <span class="built_in">console</span>.log(elem);</div><div class="line">&#125; </div><div class="line"><span class="comment">// 'a'</span></div><div class="line"><span class="comment">// 'b'</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</div><div class="line">    <span class="built_in">console</span>.log(index, elem);</div><div class="line">&#125; </div><div class="line"><span class="comment">// 0 "a"</span></div><div class="line"><span class="comment">// 1 "b"</span></div><div class="line"></div><div class="line"><span class="comment">//如果不使用for...of循环， 可以手动调用遍历器对象的next方法， 进行遍历</span></div><div class="line"><span class="keyword">let</span> letter = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"><span class="keyword">let</span> entries = letter.entries();</div><div class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [0, 'a']</span></div><div class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [1, 'b']</span></div><div class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [2, 'c']</span></div></pre></td></tr></table></figure></p>
<h3 id="数组实例的includes"><a href="#数组实例的includes" class="headerlink" title="数组实例的includes()"></a>数组实例的includes()</h3><p>表示某个数组是否包含给定的值， 与字符串的includes方法类似<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>); <span class="comment">// true</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>); <span class="comment">// false</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>该方法的第二个参数表示搜索的起始位置， 默认为0。 如果第二个参数为负数， 则表示倒数的位置， 如果这时它大于数组长度（ 比如第二个参数为-4，<br>但数组长度为3） ， 则会重置为从0开始<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// false</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h2 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h2><h3 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h3><p>ES6允许为函数的参数设置默认值， 即直接写在参数定义的后面<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x, y = <span class="string">'World'</span></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x, y);</div><div class="line">&#125; </div><div class="line">log(<span class="string">'Hello'</span>) <span class="comment">// Hello World</span></div><div class="line">log(<span class="string">'Hello'</span>, <span class="string">'China'</span>) <span class="comment">// Hello China</span></div><div class="line">log(<span class="string">'Hello'</span>, <span class="string">''</span>) <span class="comment">// Hello</span></div></pre></td></tr></table></figure></p>
<h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>ES6引入rest参数（ 形式为“…变量名”） ， 用于获取函数的多余参数， 这样就不需要使用arguments对象了。 rest参数搭配的变量是一个数组， 该变量将多余的参数放入数组中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//利用rest参数， 可以向该函数传入任意数目的参数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...values</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) &#123;</div><div class="line">        sum += val;</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125; </div><div class="line"></div><div class="line">add(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></div><div class="line"></div><div class="line"><span class="comment">//rest参数中的变量代表一个数组， 所以数组特有的方法都可以用于这个变量</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">array, ...items</span>) </span>&#123;</div><div class="line">    items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">        array.push(item);</div><div class="line">        <span class="built_in">console</span>.log(item);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = [];</div><div class="line">push(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注:rest参数之后不能再有其他参数（ 即只能是最后一个参数）</p>
</blockquote>
<h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p>扩展运算符（ spread） 是三个点（ …） 。 它好比rest参数的逆运算， 将一个数组转为用逗号分隔的参数序列。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="comment">// 1 2 3</span></div><div class="line"><span class="built_in">console</span>.log(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)</div><div class="line"><span class="comment">// 1 2 3 4 5</span></div><div class="line">[...document.querySelectorAll(<span class="string">'div'</span>)]</div><div class="line"><span class="comment">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></div><div class="line"></div><div class="line"><span class="comment">//合并数组</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, ...more]</div><div class="line">[...arr1, ...arr2, ...arr3]</div><div class="line"></div><div class="line"><span class="comment">//转为真正的数组。</span></div><div class="line"><span class="keyword">var</span> nodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</div><div class="line"><span class="keyword">var</span> array = [...nodeList];</div><div class="line"></div><div class="line"><span class="comment">//map转数组</span></div><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</div><div class="line">    [<span class="number">1</span>, <span class="string">'one'</span>],</div><div class="line">    [<span class="number">2</span>, <span class="string">'two'</span>],</div><div class="line">    [<span class="number">3</span>, <span class="string">'three'</span>],</div><div class="line">]);</div><div class="line"><span class="keyword">let</span> arr = [...map.keys()]; <span class="comment">// [1, 2, 3]</span></div></pre></td></tr></table></figure></p>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>使用“箭头”（ =&gt;） 定义函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</div><div class="line"><span class="comment">//等同于</span></div><div class="line"><span class="comment">// var f = function (v) &#123;</span></div><div class="line"><span class="comment">//     return v;</span></div><div class="line"><span class="comment">// &#125;;</span></div><div class="line"></div><div class="line"><span class="comment">//如果箭头函数不需要参数或需要多个参数， 就使用一个圆括号代表参数部分</span></div><div class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">5</span>;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="comment">// var f = function () &#123; return 5 &#125;;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="comment">// var sum = function(num1, num2) &#123;</span></div><div class="line"><span class="comment">//     return num1 + num2;</span></div><div class="line"><span class="comment">// &#125;;</span></div><div class="line"></div><div class="line"><span class="comment">//如果箭头函数的代码块部分多于一条语句， 就要使用大括号将它们括起来， 并且使用return语句返回</span></div><div class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//由于大括号被解释为代码块， 所以如果箭头函数直接返回一个对象， 必须在对象外面加上括号</span></div><div class="line"><span class="keyword">var</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> (&#123;<span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">"Temp"</span>&#125;);</div><div class="line"><span class="built_in">console</span>.log(getTempItem(<span class="number">5</span>));</div><div class="line"></div><div class="line"><span class="keyword">const</span> full = <span class="function">(<span class="params">&#123; first, last &#125;</span>) =&gt;</span> first + <span class="string">' '</span> + last;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="comment">// function full(person) &#123;</span></div><div class="line"><span class="comment">//     return person.first + ' ' + person.last;</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x));</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注:</p>
<ul>
<li>函数体内的this对象， 就是定义时所在的对象， 而不是使用时所在的对象。</li>
<li>不可以当作构造函数， 也就是说， 不可以使用new命令， 否则会抛出一个错误</li>
</ul>
</blockquote>
<h3 id="函数绑定"><a href="#函数绑定" class="headerlink" title="函数绑定"></a>函数绑定</h3><p>箭头函数可以绑定this对象， 大大减少了显式绑定this对象的写法（ call、 apply、 bind） 。</p>
<p>函数绑定运算符是并排的两个双冒号（ ::） ， 双冒号左边是一个对象， 右边是一个函数。 该运算符会自动将左边的对象， 作为上下文环境（ 即this对象） ， 绑定到右边的函数上面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">foo::bar;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line">bar.bind(foo);</div><div class="line">foo::bar(...arguments);</div><div class="line"><span class="comment">// 等同于</span></div><div class="line">bar.apply(foo, <span class="built_in">arguments</span>);</div><div class="line"></div><div class="line"><span class="comment">//如果双冒号左边为空， 右边是一个对象的方法， 则等于将该方法绑定在该对象上面。</span></div><div class="line"><span class="keyword">var</span> method = obj::obj.foo;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">var</span> method = ::obj.foo;</div><div class="line"><span class="keyword">let</span> log = ::<span class="built_in">console</span>.log;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">var</span> log = <span class="built_in">console</span>.log.bind(<span class="built_in">console</span>);</div></pre></td></tr></table></figure></p>
<h3 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h3><h4 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a>尾调用</h4><p>某个函数的最后一步是调用另一个函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> g(x);</div><div class="line">&#125;</div><div class="line"><span class="comment">//函数f的最后一步是调用函数g， 这就叫尾调用</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> m(x)</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> n(x);</div><div class="line">&#125;</div><div class="line"><span class="comment">//函数m和n都属于尾调用， 因为它们都是函数f的最后一步操作</span></div></pre></td></tr></table></figure></p>
<h2 id="Set和Map数据结构"><a href="#Set和Map数据结构" class="headerlink" title="Set和Map数据结构"></a>Set和Map数据结构</h2><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>提供了新的数据结构Set。 它类似于数组， 但是成员的值都是唯一的， 没有重复的值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Set本身是一个构造函数， 用来生成Set数据结构</span></div><div class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> s.add(x));</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> s) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Set函数接受数组作为参数</span></div><div class="line"><span class="comment">//Set函数可以接受一个数组（ 或类似数组的对象） 作为参数， 用来初始化</span></div><div class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</div><div class="line"></div><div class="line"><span class="comment">// 例二</span></div><div class="line"><span class="keyword">var</span> items = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]);</div><div class="line"><span class="built_in">console</span>.log(items.size) <span class="comment">// 5</span></div><div class="line"></div><div class="line"><span class="comment">//接受类似数组的对象作为参数</span></div><div class="line"><span class="comment">// 例三</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">divs</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> [...document.querySelectorAll(<span class="string">'div'</span>)];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> set2 = <span class="keyword">new</span> <span class="built_in">Set</span>(divs());</div><div class="line"><span class="built_in">console</span>.log(set2.size); <span class="comment">// 56</span></div><div class="line"><span class="comment">// 类似于</span></div><div class="line">divs().forEach(<span class="function"><span class="params">div</span> =&gt;</span> set.add(div));</div><div class="line"><span class="built_in">console</span>.log(set2.size); <span class="comment">// 56</span></div></pre></td></tr></table></figure></p>
<h4 id="Set实例的属性和方法"><a href="#Set实例的属性和方法" class="headerlink" title="Set实例的属性和方法"></a>Set实例的属性和方法</h4><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ul>
<li>Set.prototype.constructor： 构造函数， 默认就是Set函数</li>
<li>Set.prototype.size： 返回Set实例的成员总数。</li>
</ul>
<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ol>
<li>操作方法：</li>
</ol>
<ul>
<li>add(value)： 添加某个值， 返回Set结构本身</li>
<li>delete(value)： 删除某个值， 返回一个布尔值， 表示删除是否成功</li>
<li>has(value)： 返回一个布尔值， 表示该值是否为Set的成员</li>
<li>clear()： 清除所有成员， 没有返回值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">s.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">2</span>);</div><div class="line"><span class="comment">// 注意2被加入了两次</span></div><div class="line">s.size <span class="comment">// 2</span></div><div class="line">s.has(<span class="number">1</span>) <span class="comment">// true</span></div><div class="line">s.has(<span class="number">2</span>) <span class="comment">// true</span></div><div class="line">s.has(<span class="number">3</span>) <span class="comment">// false</span></div><div class="line">s.delete(<span class="number">2</span>);</div><div class="line">s.has(<span class="number">2</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure>
<ol>
<li>遍历方法</li>
</ol>
<ul>
<li>keys()： 返回键名的遍历器</li>
<li>values()： 返回键值的遍历器</li>
<li>entries()： 返回键值对的遍历器</li>
<li>forEach()： 使用回调函数遍历每个成员</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.keys()) &#123;</div><div class="line">    <span class="built_in">console</span>.log(item);</div><div class="line">&#125; </div><div class="line"><span class="comment">// red</span></div><div class="line"><span class="comment">// green</span></div><div class="line"><span class="comment">// blue</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.values()) &#123;</div><div class="line">    <span class="built_in">console</span>.log(item);</div><div class="line">&#125; </div><div class="line"><span class="comment">// red</span></div><div class="line"><span class="comment">// green</span></div><div class="line"><span class="comment">// blue</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.entries()) &#123;</div><div class="line">    <span class="built_in">console</span>.log(item);</div><div class="line">&#125; </div><div class="line"><span class="comment">// ["red", "red"]</span></div><div class="line"><span class="comment">// ["green", "green"]</span></div><div class="line"><span class="comment">// ["blue", "blue"]</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line">set.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="built_in">console</span>.log(value * <span class="number">2</span>) )</div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// 6</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注:由于Set结构没有键名， 只有键值（ 或者说键名和键值是同一个值） ， 所以key方法和value方法的行为完全一致。</p>
</blockquote>
<ol>
<li>应用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//扩展运算符（ ...） 内部使用for...of循环， 所以也可以用于Set结构</span></div><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]);</div><div class="line"><span class="keyword">let</span> arr = [...set];</div><div class="line"><span class="comment">// ['red', 'green', 'blue']</span></div><div class="line"></div><div class="line"><span class="comment">//去除数组的重复成员。</span></div><div class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">let</span> unique = [...new <span class="built_in">Set</span>(arr)];</div><div class="line"><span class="comment">// [3, 5, 2]</span></div><div class="line"></div><div class="line"><span class="comment">//数组的map和filter方法也可以用于Set</span></div><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line">set = <span class="keyword">new</span> <span class="built_in">Set</span>([...set].map(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>));</div><div class="line"><span class="comment">// 返回Set结构： &#123;2, 4, 6&#125;</span></div><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</div><div class="line">set = <span class="keyword">new</span> <span class="built_in">Set</span>([...set].filter(<span class="function"><span class="params">x</span> =&gt;</span> (x % <span class="number">2</span>) == <span class="number">0</span>));</div><div class="line"><span class="comment">// 返回Set结构： &#123;2, 4&#125;</span></div><div class="line"></div><div class="line"><span class="comment">//并集（ Union） 、 交集（ Intersect） 和差集（ Difference）</span></div><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</div><div class="line"><span class="comment">// 并集</span></div><div class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]);</div><div class="line"><span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></div><div class="line"><span class="comment">// 交集</span></div><div class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> b.has(x)));</div><div class="line"><span class="comment">// set &#123;2, 3&#125;</span></div><div class="line"><span class="comment">// 差集</span></div><div class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> !b.has(x)));</div><div class="line"><span class="comment">// Set &#123;1&#125;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map结构提供了“值—值”的对应， 是一种更完善的Hash结构实现。 如果你需要“键值对”的<br>数据结构，请使用Map<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"><span class="keyword">var</span> o = &#123;<span class="attr">p</span>: <span class="string">'Hello World'</span>&#125;;</div><div class="line">m.set(o, <span class="string">'content'</span>)</div><div class="line">m.get(o) <span class="comment">// "content"</span></div><div class="line">m.has(o) <span class="comment">// true</span></div><div class="line">m.delete(o) <span class="comment">// true</span></div><div class="line">m.has(o) <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="comment">// Map也可以接受一个数组作为参数。 该数组的成员是一个个表示键值对的数组</span></div><div class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</div><div class="line">    [<span class="string">'name'</span>, <span class="string">'张三'</span>],</div><div class="line">    [<span class="string">'title'</span>, <span class="string">'Author'</span>]</div><div class="line">]);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(map); <span class="comment">//Map &#123; 'name' =&gt; '张三', 'title' =&gt; 'Author' &#125;</span></div><div class="line">map.size <span class="comment">// 2</span></div><div class="line">map.has(<span class="string">'name'</span>) <span class="comment">// true</span></div><div class="line">map.get(<span class="string">'name'</span>) <span class="comment">// "张三"</span></div><div class="line">map.has(<span class="string">'title'</span>) <span class="comment">// true</span></div><div class="line">map.get(<span class="string">'title'</span>) <span class="comment">// "Author"</span></div><div class="line"></div><div class="line"><span class="comment">//如果对同一个键多次赋值， 后面的值将覆盖前面的值</span></div><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">map</div><div class="line">    .set(<span class="number">1</span>, <span class="string">'aaa'</span>)</div><div class="line">    .set(<span class="number">1</span>, <span class="string">'bbb'</span>);</div><div class="line">map.get(<span class="number">1</span>) <span class="comment">// "bbb"</span></div></pre></td></tr></table></figure></p>
<h4 id="属性和操作方法"><a href="#属性和操作方法" class="headerlink" title="属性和操作方法"></a>属性和操作方法</h4><h5 id="size属性"><a href="#size属性" class="headerlink" title="size属性"></a>size属性</h5><p>size属性返回Map结构的成员总数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">map.set(<span class="string">'foo'</span>, <span class="literal">true</span>);</div><div class="line">map.set(<span class="string">'bar'</span>, <span class="literal">false</span>);</div><div class="line">map.size <span class="comment">// 2</span></div></pre></td></tr></table></figure></p>
<h5 id="set-key-value"><a href="#set-key-value" class="headerlink" title="set(key, value)"></a>set(key, value)</h5><p>set方法设置key所对应的键值， 然后返回整个Map结构。 如果key已经有值， 则键值会被更新， 否则就新生成该键<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">m.set(<span class="string">"edition"</span>, <span class="number">6</span>) <span class="comment">// 键是字符串</span></div><div class="line">m.set(<span class="number">262</span>, <span class="string">"standard"</span>) <span class="comment">// 键是数值</span></div><div class="line">m.set(<span class="literal">undefined</span>, <span class="string">"nah"</span>) <span class="comment">// 键是undefined</span></div></pre></td></tr></table></figure></p>
<h5 id="get-key"><a href="#get-key" class="headerlink" title="get(key)"></a>get(key)</h5><p>get方法读取key对应的键值， 如果找不到key， 返回undefined<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"><span class="keyword">var</span> hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">"hello"</span>);&#125;</div><div class="line">m.set(hello, <span class="string">"Hello ES6!"</span>) <span class="comment">// 键是函数</span></div><div class="line">m.get(hello) <span class="comment">// Hello ES6!</span></div></pre></td></tr></table></figure></p>
<h5 id="has-key"><a href="#has-key" class="headerlink" title="has(key)"></a>has(key)</h5><p>has方法返回一个布尔值， 表示某个键是否在Map数据结构中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">m.set(<span class="string">"edition"</span>, <span class="number">6</span>);</div><div class="line">m.set(<span class="number">262</span>, <span class="string">"standard"</span>);</div><div class="line">m.set(<span class="literal">undefined</span>, <span class="string">"nah"</span>);</div><div class="line">m.has(<span class="string">"edition"</span>) <span class="comment">// true</span></div><div class="line">m.has(<span class="string">"years"</span>) <span class="comment">// false</span></div><div class="line">m.has(<span class="number">262</span>) <span class="comment">// true</span></div><div class="line">m.has(<span class="literal">undefined</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h5 id="delete-key"><a href="#delete-key" class="headerlink" title="delete(key)"></a>delete(key)</h5><p>delete方法删除某个键， 返回true。 如果删除失败， 返回false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">m.set(<span class="literal">undefined</span>, <span class="string">"nah"</span>);</div><div class="line">m.has(<span class="literal">undefined</span>) <span class="comment">// true</span></div><div class="line">m.delete(<span class="literal">undefined</span>)</div><div class="line">m.has(<span class="literal">undefined</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<h5 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h5><p>clear方法清除所有成员， 没有返回值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">map.set(<span class="string">'foo'</span>, <span class="literal">true</span>);</div><div class="line">map.set(<span class="string">'bar'</span>, <span class="literal">false</span>);</div><div class="line">map.size <span class="comment">// 2</span></div><div class="line">map.clear()</div><div class="line">map.size <span class="comment">// 0</span></div></pre></td></tr></table></figure></p>
<h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><ul>
<li>keys()： 返回键名的遍历器。</li>
<li>values()： 返回键值的遍历器</li>
<li>entries()： 返回所有成员的遍历器。</li>
<li>forEach()： 遍历Map的所有成员</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</div><div class="line">    [<span class="string">'F'</span>, <span class="string">'no'</span>],</div><div class="line">    [<span class="string">'T'</span>, <span class="string">'yes'</span>],</div><div class="line">]);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</div><div class="line">    <span class="built_in">console</span>.log(key);</div><div class="line">&#125; </div><div class="line"><span class="comment">// "F"</span></div><div class="line"><span class="comment">// "T"</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.values()) &#123;</div><div class="line">    <span class="built_in">console</span>.log(value);</div><div class="line">&#125; </div><div class="line"><span class="comment">// "no"</span></div><div class="line"><span class="comment">// "yes"</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.entries()) &#123;</div><div class="line">    <span class="built_in">console</span>.log(item[<span class="number">0</span>], item[<span class="number">1</span>]);</div><div class="line">&#125; </div><div class="line"><span class="comment">// "F" "no"</span></div><div class="line"><span class="comment">// "T" "yes"</span></div><div class="line"><span class="comment">// 或者</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.entries()) &#123;</div><div class="line">    <span class="built_in">console</span>.log(key, value);</div><div class="line">&#125; </div><div class="line"><span class="comment">// 等同于使用map.entries()</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</div><div class="line">    <span class="built_in">console</span>.log(key, value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">map.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, key, map</span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Key: %s, Value: %s"</span>, key, value);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>结合数组的map方法、 filter方法， 可以实现Map的遍历和过滤（ Map本身没有map和filter方法）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map0 = <span class="keyword">new</span> <span class="built_in">Map</span>()</div><div class="line">    .set(<span class="number">1</span>, <span class="string">'a'</span>)</div><div class="line">    .set(<span class="number">2</span>, <span class="string">'b'</span>)</div><div class="line">    .set(<span class="number">3</span>, <span class="string">'c'</span>);</div><div class="line"><span class="keyword">let</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>(</div><div class="line">    [...map0].filter(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> k &lt; <span class="number">3</span>)</div><div class="line">);</div><div class="line"><span class="comment">// 产生Map结构 &#123;1 =&gt; 'a', 2 =&gt; 'b'&#125;</span></div><div class="line"><span class="keyword">let</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>(</div><div class="line">    [...map0].map(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> [k * <span class="number">2</span>, <span class="string">'_'</span> + v])</div><div class="line">);</div><div class="line"><span class="comment">// 产生Map结构 &#123;2 =&gt; '_a', 4 =&gt; '_b', 6 =&gt; '_c'&#125;</span></div></pre></td></tr></table></figure></p>
<p>map与其他数据结构的互相转换：</p>
<ol>
<li><p>Map转为数组<br>Map转为数组最方便的方法， 就是使用扩展运算符（ …） 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="literal">true</span>, <span class="number">7</span>).set(&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">'abc'</span>]);</div><div class="line">[...myMap]</div><div class="line"><span class="comment">// [ [ true, 7 ], [ &#123; foo: 3 &#125;, [ 'abc' ] ] ]</span></div></pre></td></tr></table></figure>
</li>
<li><p>数组转为Map<br>将数组转入Map构造函数， 就可以转为Map</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="literal">true</span>, <span class="number">7</span>], [&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">'abc'</span>]]])</div><div class="line"><span class="comment">// Map &#123;true =&gt; 7, Object &#123;foo: 3&#125; =&gt; ['abc']&#125;</span></div></pre></td></tr></table></figure>
</li>
<li><p>Map转为JSON<br>Map转为JSON要区分两种情况：</p>
</li>
</ol>
<ul>
<li><p>Map的键名都是字符串， 这时可以选择转为对象JSON</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">strMapToJson</span>(<span class="params">strMap</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(strMapToObj(strMap));</div><div class="line">&#125; </div><div class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">'yes'</span>, <span class="literal">true</span>).set(<span class="string">'no'</span>, <span class="literal">false</span>);</div><div class="line">strMapToJson(myMap)</div><div class="line"><span class="comment">// '&#123;"yes":true,"no":false&#125;'</span></div></pre></td></tr></table></figure>
</li>
<li><p>Map的键名有非字符串， 这时可以选择转为数组JSON</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapToArrayJson</span>(<span class="params">map</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="built_in">JSON</span>.stringify([...map]);</div><div class="line">&#125; </div><div class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="literal">true</span>, <span class="number">7</span>).set(&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">'abc'</span>]);</div><div class="line">mapToArrayJson(myMap)</div><div class="line"><span class="comment">// '[[true,7],[&#123;"foo":3&#125;,["abc"]]]'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>JSON转为Map<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonToStrMap</span>(<span class="params">jsonStr</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> objToStrMap(<span class="built_in">JSON</span>.parse(jsonStr));</div><div class="line">&#125; </div><div class="line">jsonToStrMap(<span class="string">'&#123;"yes":true,"no":false&#125;'</span>)</div><div class="line"><span class="comment">// Map &#123;'yes' =&gt; true, 'no' =&gt; false&#125;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator 函数"></a>Generator 函数</h2><p>Generator函数是ES6提供的一种异步编程解决方案， 语法行为与传统函数完全不同。</p>
<p>执行Generator函数会返回一个遍历器对象， 也就是说， Generator函数除了状态机，还是一个遍历器对象生成函数。 返回的遍历器对象， 可以依次遍历Generator函数内部的每一个状态。</p>
<p>形式上， Generator函数是一个普通函数， 但是有两个特征。 </p>
<ul>
<li>function关键字与函数名之间有一个星号； </li>
<li>函数体内部使用yield语句， 定义不同的内部状态（ yield语句在英语里的意思就是“产出”） 。</li>
</ul>
<p>Generator函数的调用方法与普通函数一样， 也是在函数名后面加上一对圆括号。 不同的是， 调用Generator函数后， 该函数并不执行， 返回的也不是函数运行结果， 而是一个指向内部状态的指针对象， 也就是上一章介绍的遍历器对象（ Iterator Object） </p>
<p>必须调用遍历器对象的next方法， 使得指针移向下一个状态。 也就是说， 每次调用next方法， 内部指针就从函数头部或上一次停下来的地方开始执行， 直到遇到下一个yield语句（ 或return语句） 为止。 换言之， Generator函数是分段执行的，yield语句是暂停执行的标记， 而next方法可<br>以恢复执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'hello'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'world'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="string">'ending'</span>;</div><div class="line">&#125; </div><div class="line"><span class="keyword">var</span> hw = helloWorldGenerator();</div><div class="line"></div><div class="line">hw.next()</div><div class="line"><span class="comment">// &#123; value: 'hello', done: false &#125;</span></div><div class="line">hw.next()</div><div class="line"><span class="comment">// &#123; value: 'world', done: false &#125;</span></div><div class="line">hw.next()</div><div class="line"><span class="comment">// &#123; value: 'ending', done: true &#125;</span></div><div class="line">hw.next()</div><div class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>
<h3 id="yield语句"><a href="#yield语句" class="headerlink" title="yield语句"></a>yield语句</h3><p>遍历器对象的next方法的运行逻辑如下</p>
<ul>
<li>遇到yield语句， 就暂停执行后面的操作， 并将紧跟在yield后面的那个表达式的值， 作为返回的对象的value属性值</li>
<li>下一次调用next方法时， 再继续往下执行， 直到遇到下一个yield语句。</li>
<li>如果没有再遇到新的yield语句， 就一直运行到函数结束， 直到return语句为止， 并将return语句后面的表达式的值， 作为返回的对象的value属性值。</li>
<li>如果该函数没有return语句， 则返回的对象的value属性值为undefined<blockquote>
<p>注: yield语句不能用在普通函数中， 否则会报错</p>
</blockquote>
</li>
</ul>
<h2 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h2><p>所谓Promise， 简单说就是一个容器， 里面保存着某个未来才会结束的事件（ 通常是一个异步操作） 的结果。 从语法上说， Promise是一个对象， 从它可以获取异步操作的消息</p>
<p>Promise对象有以下两个特点:</p>
<ul>
<li>对象的状态不受外界影响。 Promise对象代表一个异步操作， 有三种状态： Pending（ 进行中） 、 Resolved（ 已完成， 又称Fulfilled）和Rejected（ 已失败） 。 只有异步操作的结果， 可以决定当前是哪一种状态， 任何其他操作都无法改变这个状态。 这也是Promise这个名字的由来， 它的英语意思就是“承诺”， 表示其他手段无法改变</li>
<li>一旦状态改变， 就不会再变， 任何时候都可以得到这个结果。 Promise对象的状态改变， 只有两种可能： 从Pending变为Resolved和从Pending变为Rejected。 只要这两种情况发生， 状态就凝固了， 不会再变了， 会一直保持这个结果。 就算改变已经发生了， 你再对Promise对象添加回调函数， 也会立即得到这个结果。 这与事件（ Event） 完全不同， 事件的特点是， 如果你错过了它， 再去监听， 是得不到结果的。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创造了一个Promise实例。</span></div><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="comment">// ... some code</span></div><div class="line">    <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</div><div class="line">        resolve(value);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        reject(error);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//可以用then方法分别指定Resolved状态和Reject状态的回调函数</span></div><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="comment">// success</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="comment">// failure</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//用Promise对象实现的Ajax操作的例子</span></div><div class="line"><span class="keyword">var</span> getJSON = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">        client.open(<span class="string">"GET"</span>, url);</div><div class="line">        client.onreadystatechange = handler;</div><div class="line">        client.responseType = <span class="string">"json"</span>;</div><div class="line">        client.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</div><div class="line">        client.send();</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="number">200</span>)</div><div class="line">            &#123;</div><div class="line">                resolve(<span class="keyword">this</span>.response);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> promise;</div><div class="line">&#125;;</div><div class="line">getJSON(<span class="string">"/posts.json"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">json</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Contents: '</span> + json);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">'出错了'</span>, error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h2><p>async函数就是Generator函数的语法糖。</p>
<p>async函数就是将Generator函数的星号（ *） 替换成async， 将yield替换成await， 仅此而已<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//async函数返回一个Promise对象， 可以使用then方法添加回调函数。 当函数执行的时候， 一旦遇到await就会先返回， 等到触发的异步操作完成， 再接着执行函数体内后面的语句。</span></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getStockPriceByName</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> symbol = <span class="keyword">await</span> getStockSymbol(name);</div><div class="line">    <span class="keyword">var</span> stockPrice = <span class="keyword">await</span> getStockPrice(symbol);</div><div class="line">    <span class="keyword">return</span> stockPrice;</div><div class="line">&#125;</div><div class="line"></div><div class="line">getStockPriceByName(<span class="string">'goog'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(result);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//指定多少毫秒后输出一个值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</div><div class="line">        setTimeout(resolve, ms);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncPrint</span>(<span class="params">value, ms</span>) </span>&#123;</div><div class="line">    <span class="keyword">await</span> timeout(ms);</div><div class="line">    <span class="built_in">console</span>.log(value)</div><div class="line">&#125;</div><div class="line"></div><div class="line">asyncPrint(<span class="string">'hello world'</span>, <span class="number">50</span>);</div><div class="line"></div><div class="line"><span class="comment">//Async函数有多种使用形式。</span></div><div class="line"><span class="comment">// 函数声明</span></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="comment">// 函数表达式</span></div><div class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="comment">// 对象的方法</span></div><div class="line"><span class="keyword">let</span> obj = &#123; <span class="keyword">async</span> foo() &#123;&#125; &#125;;</div><div class="line"><span class="comment">// 箭头函数</span></div><div class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> () =&gt; &#123;&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">        <span class="keyword">this</span>.y = y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    toString() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">`x=<span class="subst">$&#123;<span class="keyword">this</span>.x&#125;</span>    y=<span class="subst">$&#123;<span class="keyword">this</span>.y&#125;</span>`</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> point = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(point.toString()); <span class="comment">//x=1    y=2</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注:定义“类”的方法的时候， 前面不需要加上function这个关键字， 直接把函数定义放进去了就可以了。 另外， 方法之间不需要逗号分隔， 加了会报错。</p>
</blockquote>
<h3 id="constructor方法"><a href="#constructor方法" class="headerlink" title="constructor方法"></a>constructor方法</h3><p>constructor方法是类的默认方法， 通过new命令生成对象实例时， 自动调用该方法。 一个类必须有constructor方法， 如果没有显式定义， 一个空的constructor方法会被默认添加<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"><span class="keyword">new</span> Foo() <span class="keyword">instanceof</span> Foo</div></pre></td></tr></table></figure></p>
<h3 id="Class的继承"><a href="#Class的继承" class="headerlink" title="Class的继承"></a>Class的继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(x, y, color) &#123;</div><div class="line">        <span class="keyword">super</span>(x, y); <span class="comment">// 调用父类的constructor(x, y)</span></div><div class="line">        <span class="keyword">this</span>.color = color;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    toString() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.color + <span class="string">' '</span> + <span class="keyword">super</span>.toString(); <span class="comment">// 调用父类的toString()</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注:</p>
<ul>
<li>子类必须在constructor方法中调用super方法， 否则新建实例时会报错。 这是因为子类没有自己的this对象， 而是继承父类的this对象， 然后对其进行加工</li>
<li>在子类的构造函数中， 只有调用super之后， 才可以使用this关键字， 否则会报错</li>
</ul>
</blockquote>
<h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>模块功能主要由两个命令构成： export和import。 export命令用于规定模块的对外接口， import命令用于输入其他模块提供的功能。<br>一个模块就是一个独立的文件。 该文件内部的所有变量， 外部无法获取。 如果你希望外部能够读取模块内部的某个变量， 就必须使用export关键字输出该变量</p>
<h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用export命令对外部输出了三个变量</span></div><div class="line"><span class="comment">// profile.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</div><div class="line"></div><div class="line"><span class="comment">//另外一种写法</span></div><div class="line"><span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</div><div class="line"><span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</div><div class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</div><div class="line"><span class="keyword">export</span> &#123;firstName, lastName, year&#125;;</div><div class="line"></div><div class="line"><span class="comment">//export命令除了输出变量， 还可以输出函数或类（ class） 。</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x * y;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//export输出的变量就是本来的名字， 但是可以使用as关键字重命名。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">v1</span>(<span class="params"></span>) </span>&#123; ... &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">v2</span>(<span class="params"></span>) </span>&#123; ... &#125;</div><div class="line"><span class="keyword">export</span> &#123;</div><div class="line">    v1 <span class="keyword">as</span> streamV1,</div><div class="line">    v2 <span class="keyword">as</span> streamV2,</div><div class="line">    v2 <span class="keyword">as</span> streamLatestVersion</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//export命令规定的是对外的接口， 必须与模块内部的变量建立一一对应关系</span></div><div class="line"><span class="comment">// 写法一</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> m = <span class="number">1</span>;</div><div class="line"><span class="comment">// 写法二</span></div><div class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</div><div class="line"><span class="keyword">export</span> &#123;m&#125;;</div><div class="line"><span class="comment">// 写法三</span></div><div class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</div><div class="line"><span class="keyword">export</span> &#123;n <span class="keyword">as</span> m&#125;;</div></pre></td></tr></table></figure>
<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>使用export命令定义了模块的对外接口以后， 其他JS文件就可以通过import命令加载这个模块（ 文件）<br> import命令接受一个对象（ 用大括号表示） ， 里面指定要从其他模块导入的变量名。 大括号里面的变量名， 必须与被导入模块（ profile.js） 对外接口的名称相同。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//从profile中导入firstName, lastName, year</span></div><div class="line"><span class="keyword">import</span> &#123;firstName, lastName, year&#125; <span class="keyword">from</span> <span class="string">'./profile'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    element.textContent = firstName + <span class="string">' '</span> + lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//import命令要使用as关键字， 将输入的变量重命名</span></div><div class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">'./profile'</span>;</div></pre></td></tr></table></figure>
<h3 id="模块的整体加载"><a href="#模块的整体加载" class="headerlink" title="模块的整体加载"></a>模块的整体加载</h3><p>除了指定加载某个输出值， 还可以使用整体加载， 即用星号（ *） 指定一个对象， 所有输出值都加载在这个对象上面<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// circle.js</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">radius</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * radius * radius;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">circumference</span>(<span class="params">radius</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * radius;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//整体加载</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">'./circle'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'圆面积： '</span> + circle.area(<span class="number">4</span>));</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'圆周长： '</span> + circle.circumference(<span class="number">14</span>));</div></pre></td></tr></table></figure></p>
<h3 id="export-default命令"><a href="#export-default命令" class="headerlink" title="export default命令"></a>export default命令</h3><p>为模块指定默认输出<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// export-default.js</span></div><div class="line"><span class="comment">//默认输出是一个函数。</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// import-default.js</span></div><div class="line"><span class="comment">//import命令可以为该匿名函数指定任意名字。</span></div><div class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'./export-default'</span>;</div><div class="line">customName(); <span class="comment">// 'foo'</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>注:一个模块只能有一个默认输出， 因此export deault命令只能使用一次。 所以， import命令后面才不用加大括号， 因为只可能对应一个方法。</p>
</blockquote>
<h3 id="跨模块常量"><a href="#跨模块常量" class="headerlink" title="跨模块常量"></a>跨模块常量</h3><p>const声明的常量只在当前代码块有效。 如果想设置跨模块的常量（ 即跨多个文件） ， 可以采用下面的写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// constants.js 模块</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> A = <span class="number">1</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> B = <span class="number">3</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> C = <span class="number">4</span>;</div><div class="line"><span class="comment">// test1.js 模块</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">'./constants'</span>;</div><div class="line"><span class="built_in">console</span>.log(constants.A); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(constants.B); <span class="comment">// 3</span></div><div class="line"><span class="comment">// test2.js 模块</span></div><div class="line"><span class="keyword">import</span> &#123;A, B&#125; <span class="keyword">from</span> <span class="string">'./constants'</span>;</div><div class="line"><span class="built_in">console</span>.log(A); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(B); <span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Webpack学习笔记]]></title>
      <url>/2017/07/27/Webpack_study/</url>
      <content type="html"><![CDATA[<p>Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。<br>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个浏览器可识别的JavaScript文件。</p>
<h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><a id="more"></a>
<h3 id="安装Webpack"><a href="#安装Webpack" class="headerlink" title="安装Webpack"></a>安装Webpack</h3><p>webpack是建立在node.js环境下的，所以要使用它我们需要先安装node和npm，其相关知识这里将不介绍。</p>
<h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p>在终端输入以下命令即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install nodejs</div></pre></td></tr></table></figure></p>
<h4 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h4><p>在终端输入以下命令即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install npm</div></pre></td></tr></table></figure></p>
<p>为了保证下载速度，我们直接永久设置为淘宝源为npm的registry地址。在终端里输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<ul>
<li>配置成功后输入以下命令来查看是否成功<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config get registry</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如图所示即为成功<br><img src="http://objects.earthchen.cn/webpack_study_%E8%AE%BE%E7%BD%AEnpm%E4%B8%BA%E6%B7%98%E5%AE%9D%E6%BA%90.png" alt="设置npm为淘宝源"></p>
<h4 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h4><ol>
<li><p>全局安装<br>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g webpack</div></pre></td></tr></table></figure>
</li>
<li><p>局部安装<br>进入项目目录，并在终端中输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev webpack</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="使用Webpack"><a href="#使用Webpack" class="headerlink" title="使用Webpack"></a>使用Webpack</h3><ol>
<li>创建一个工作目录，并进入这个目录创建一个项目，在终端输入以下命令，会自动生成一个<strong>package.json</strong>文件，这是一个标准的npm说明文件，里面包含了一些信息，包含了项目的依赖模块，自定义脚本任务等。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure>
</li>
</ol>
<p>输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。</p>
<ol>
<li><p>在本项目中安装Webpack作为依赖包，在终端输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev webpack</div></pre></td></tr></table></figure>
</li>
<li><p>创建app和public文件夹</p>
<ul>
<li>app文件夹用来存放原始数据和我们将写的JavaScript模块</li>
<li>public文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）</li>
</ul>
</li>
<li><p>创建几个html和js文件做一个简单的例子</p>
<ul>
<li><p>在<strong>public</strong>下创建<strong>index.html</strong>文件，加载通过webpack打包之后的<strong>bundle.js</strong>文件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Sample Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'root'</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在<strong>app</strong>目录下创建<strong>Greeter.js</strong>，用来返回一个简单的文字信息的html元素的函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> greet = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">    greet.textContent = <span class="string">"Hi there and greetings!"</span>;</div><div class="line">    <span class="keyword">return</span> greet;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>在<strong>app</strong>目录下创建<strong>main.js</strong>，用来把<strong>Greeter模块</strong>返回的结点插入页面</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> greeter = <span class="built_in">require</span>(<span class="string">'./Greeter.js'</span>);</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'root'</span>).appendChild(greeter());</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用<strong>webpack</strong>进行打包<br>基本命令为</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack &#123;entry file/入口文件&#125; &#123;destination <span class="keyword">for</span> bundled file/存放bundle.js的地方&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>只需要指定一个入口文件，webpack将自动识别项目所依赖的其它文件，不过需要注意的是如果你的webpack没有进行全局安装，那么当你在终端中使用此命令时，需要额外指定其在node_modules中的地址，继续上面的例子，在终端中属于如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node_modules/.bin/webpack app/main.js public/bundle.js</div></pre></td></tr></table></figure></p>
<p>执行结果如下，可以看到帮我们打包了两个文件<br><img src="http://objects.earthchen.cn/webpack_study_webpack%E5%91%BD%E4%BB%A4%E6%89%93%E5%8C%85.png" alt="webpack命令打包"><br>打开浏览器访问index.html可以看到如下结果<br><img src="http://objects.earthchen.cn/webpack_study_webpack%E5%91%BD%E4%BB%A4%E6%89%93%E5%8C%85%E5%90%8Eindex%E7%BB%93%E6%9E%9C.png" alt="打包后index结果"></p>
<ul>
<li><p>webpack还有许多功能，通过命令行都可以实现，但是命令多了不好记也容易出错，所以webpack也提供了配置文件方式，在项目根目录下创建<strong>webpack.config.js</strong>文件，在其中编写我们所需要的配置。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">//唯一入口文件</span></div><div class="line">    entry: __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="comment">//打包后的文件存放的地方</span></div><div class="line">        path: __dirname + <span class="string">"/public"</span>,</div><div class="line">        <span class="comment">//打包后输出文件的文件名</span></div><div class="line">        filename: <span class="string">"bundle.js"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注:<strong>__dirname</strong>是node.js中的一个全局变量，它指向当前执行脚本所在的目录。<br>接下来指定打包命令只需要在终端中输入<strong>webpack</strong>即可。执行的结果和用命令一致。</p>
</blockquote>
</li>
<li><p>打包操作还可以更简单，为了解决命令复杂且多的问题，npm还提供了引导任务执行的功能。对其进行配置后可以使用简单的npm start命令来代替这些繁琐的命令。在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "name": "first_webpack_project",</div><div class="line">  "version": "1.0.0",</div><div class="line">  "description": "",</div><div class="line">  "main": "index.js",</div><div class="line">  "scripts": &#123;</div><div class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</div><div class="line">    //配置start命令</div><div class="line">    "start": "webpack"</div><div class="line">  &#125;,</div><div class="line">  "author": "",</div><div class="line">  "license": "ISC",</div><div class="line">  "devDependencies": &#123;</div><div class="line">    "webpack": "^3.4.1"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>注:npm的start是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用<strong>npm start</strong>就可以执行相关命令，如果对应的此脚本名称不是<strong>start</strong>，想要在命令行中运行时，需要这样用<strong>npm run {script name}</strong>如<strong>npm run build</strong>，以下是执行<strong>npm start</strong>后命令行的输出显示<br><img src="http://objects.earthchen.cn/webpack_study_npm_start%E7%BB%93%E6%9E%9C.png" alt="npm start结果"></p>
</blockquote>
<h3 id="Webpack功能"><a href="#Webpack功能" class="headerlink" title="Webpack功能"></a>Webpack功能</h3><h4 id="生成Source-Maps"><a href="#生成Source-Maps" class="headerlink" title="生成Source Maps"></a>生成Source Maps</h4><p>开发总是离不开调试，如果可以更加方便的调试当然就能提高开发效率，不过打包后的文件有时候你是不容易找到出错了的地方对应的源代码的位置的，Source Maps就是来帮我们解决这个问题的。</p>
<p>通过简单的配置后，Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。</p>
<p>在webpack的配置文件中配置source maps，需要配置<strong>devtool</strong>，它有以下四种不同的配置选项，各具优缺点，描述如下：<br>|devtool选项|配置结果|<br>|——|———–|<br>|source-map|在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度|<br>|cheap-module-source-map|在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便|<br>|eval-source-map|使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项|<br>|cheap-module-eval-source-map|这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点|</p>
<p>按照说明选择一种你希望的生成方式，在<strong>webpack.config.js</strong>中进行配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">//配置生成Source Maps，选择合适的选项</span></div><div class="line">    devtool: <span class="string">"eval-source-map"</span>,</div><div class="line">    <span class="comment">//唯一入口文件</span></div><div class="line">    entry: __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="comment">//打包后的文件存放的地方</span></div><div class="line">        path: __dirname + <span class="string">"/public"</span>,</div><div class="line">        <span class="comment">//打包后输出文件的文件名</span></div><div class="line">        filename: <span class="string">"bundle.js"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="使用webpack构建本地服务器"><a href="#使用webpack构建本地服务器" class="headerlink" title="使用webpack构建本地服务器"></a>使用webpack构建本地服务器</h4><p>Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现监测你的代码的修改，并自动刷新修改后的结果，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖。安装命令如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev webpack-dev-server</div></pre></td></tr></table></figure></p>
<p>devserver作为webpack配置选项中的一项，具有以下配置选项</p>
<table>
<thead>
<tr>
<th>devserver配置选项</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>contentBase</td>
<td>默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录）</td>
</tr>
<tr>
<td>port</td>
<td>设置默认监听端口，如果省略，默认为”8080“</td>
</tr>
<tr>
<td>inline</td>
<td>设置为true，当源文件改变时会自动刷新页面</td>
</tr>
<tr>
<td>colors</td>
<td>设置为true，使终端输出的文件为彩色的</td>
</tr>
<tr>
<td>historyApiFallback</td>
<td>在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</td>
</tr>
</tbody>
</table>
<p>在<strong>webpack.config.js</strong>中进行配置devserver：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">//配置生成Source Maps，选择合适的选项</span></div><div class="line">    devtool: <span class="string">"eval-source-map"</span>,</div><div class="line">    <span class="comment">//唯一入口文件</span></div><div class="line">    entry: __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="comment">//打包后的文件存放的地方</span></div><div class="line">        path: __dirname + <span class="string">"/public"</span>,</div><div class="line">        <span class="comment">//打包后输出文件的文件名</span></div><div class="line">        filename: <span class="string">"bundle.js"</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">devServer</span>: &#123;</div><div class="line">        <span class="comment">//本地服务器所加载的页面所在的目录</span></div><div class="line">        contentBase: <span class="string">"./public"</span>,</div><div class="line">        <span class="comment">//终端中输出结果为彩色</span></div><div class="line">        colors: <span class="literal">true</span>,</div><div class="line">        <span class="comment">//不跳转</span></div><div class="line">        historyApiFallback: <span class="literal">true</span>,</div><div class="line">        <span class="comment">//实时刷新</span></div><div class="line">        inline: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h4><p>通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。</p>
<p>Loaders需要单独安装并且需要在webpack.config.js下的modules关键字下进行配置，Loaders的配置选项包括以下几方面:</p>
<p>|选项|描述|是否必须|<br>|test|一个匹配loaders所处理的文件的拓展名的正则表达式|是|<br>|loader|loader的名称|是|<br>|include/exclude|手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）|否|<br>|query|为loaders提供额外的设置选项|否|</p>
<p>我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下：</p>
<ol>
<li><p>首先安装可以读取json文件的值的loader</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev json-loader</div></pre></td></tr></table></figure>
</li>
<li><p>在<strong>webpack.config.js</strong>中进行配置json-loader：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">//在配置文件里添加JSON loader</span></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.json$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">"json-loader"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建带有问候信息的JSON文件(在<strong>app</strong>下创建<strong>config.json</strong>文件)</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"greetText"</span>: <span class="string">"Hi there and greetings from JSON!"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>更新<strong>app/Greeter.js</strong>的内容为:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//从config.json读取</span></div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./config.json'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> greet = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">    greet.textContent = config.greetText;</div><div class="line">    <span class="keyword">return</span> greet;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h4><p>Babel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：</p>
<ul>
<li>下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持</li>
<li>使用基于JavaScript进行了拓展的语言，比如React的JSX</li>
</ul>
<ol>
<li><p>安装所有Babel所有的依赖包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react</div></pre></td></tr></table></figure>
</li>
<li><p>在<strong>webpack.config.js</strong>中进行配置<strong>babel</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">//在配置文件里添加JSON loader</span></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.json$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">"json-loader"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">                <span class="comment">//在webpack的module部分的loaders里进行配置即可</span></div><div class="line">                loader: <span class="string">'babel-loader'</span>,</div><div class="line">                <span class="attr">query</span>: &#123;</div><div class="line">                    <span class="attr">presets</span>: [<span class="string">'es2015'</span>, <span class="string">'react'</span>]</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。</p>
<p>现在使用React进行测试，先安装 React 和 React-DOM，在终端中输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save react react-dom</div></pre></td></tr></table></figure></p>
<ol>
<li><p>更新<strong>app/Greeter.js</strong>的内容为:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Greeter,js</span></div><div class="line"><span class="comment">//导入React</span></div><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="comment">//从config.json读取</span></div><div class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config.json'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        &#123;config.greetText&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Greeter</div></pre></td></tr></table></figure>
</li>
<li><p>更新<strong>app/main.js</strong>内容为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> Greeter <span class="keyword">from</span> <span class="string">'./Greeter'</span>;</div><div class="line"></div><div class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">Greeter</span> /&gt;</span>, document.getElementById('root'));</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="Babel的配置选项"><a href="#Babel的配置选项" class="headerlink" title="Babel的配置选项"></a>Babel的配置选项</h5><p>Babel可以在<strong>webpack.config.js</strong>中进行配置页可以分块单独配置，当配置较多时，最好单独配置创建一个<strong>.babelrc</strong>的babel配置文件，webpack会自动调用<strong>.babelrc</strong>其中的配置选项。</p>
<ol>
<li><p>更新<strong>webpack.config.js</strong>内容为:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">//在配置文件里添加JSON loader</span></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.json$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">"json-loader"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">                <span class="comment">//在webpack的module部分的loaders里进行配置即可</span></div><div class="line">                loader: <span class="string">'babel-loader'</span>,</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建<strong>.babelrc</strong>文件并添加内容如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [<span class="string">"react"</span>, <span class="string">"es2015"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>Webpack有一个不可不说的优点，它把所有的文件都可以当做模块处理，包括你的JavaScript代码，也包括CSS和fonts以及图片等等等，只有通过合适的loaders，它们都可以被当做模块被处理。</p>
<h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><p>webpack提供两个工具处理样式表，<strong>css-loader</strong> 和 <strong>style-loader</strong>，二者处理的任务不同，<strong>css-loader</strong>使你能够使用类似<strong>@import</strong> 和 <strong>url(…)</strong>的方法实现 <strong>require()</strong>的功能,<strong>style-loader</strong>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>
<ol>
<li><p>安装<strong>css-loader</strong> 和 <strong>style-loader</strong>模块，在终端输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev style-loader css-loader</div></pre></td></tr></table></figure>
</li>
<li><p>更新<strong>webpack.config.js</strong>内容,使其能够使用<strong>css-loader</strong>和 <strong>style-loader</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">//在配置文件里添加JSON loader</span></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.json$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">"json-loader"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">                <span class="comment">//在webpack的module部分的loaders里进行配置即可</span></div><div class="line">                loader: <span class="string">'babel-loader'</span>,</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">                <span class="comment">//添加对样式表的处理</span></div><div class="line">                loader: <span class="string">'style-loader!css-loader'</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注:感叹号的作用在于使同一文件能够使用不同类型的loader</p>
</blockquote>
</li>
<li><p>在<strong>app</strong>文件夹下创建<strong>main.css</strong>的文件，设置某些元素的样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> &#123;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">-ms-text-size-adjust</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">box-sizing</span>: inherit;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">'Helvetica Neue'</span>, Helvetica, Arial, sans-serif;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">ul</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>由于webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，更新后的<strong>main.js</strong>文件内容为:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> Greeter <span class="keyword">from</span> <span class="string">'./Greeter'</span>;</div><div class="line"></div><div class="line"><span class="comment">//使用require导入css文件</span></div><div class="line"><span class="keyword">import</span> <span class="string">'./main.css'</span>;</div><div class="line"></div><div class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">Greeter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="CSS-module"><a href="#CSS-module" class="headerlink" title="CSS module"></a>CSS module</h4><p>CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递都所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中具有相同的类名可能会造成的问题.</p>
<ol>
<li><p>更新<strong>webpack.config.js</strong>内容,使其能使用<strong>CSS module</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">//在配置文件里添加JSON loader</span></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.json$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">"json-loader"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">                <span class="comment">//在webpack的module部分的loaders里进行配置即可</span></div><div class="line">                loader: <span class="string">'babel-loader'</span>,</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">                <span class="comment">//添加对样式表的处理</span></div><div class="line">                <span class="comment">//仅仅添加了?modules-loader</span></div><div class="line">                loader: <span class="string">'style-loader!css-loader?modules-loader'</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在<strong>app</strong>文件夹下创建<strong>Greeter.css</strong>并增加内容为:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.root</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#ccc</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>导入<strong>.root</strong>到<strong>Greeter.js</strong>中，更新<strong>Greeter.js</strong>内容为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config.json'</span>;</div><div class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./Greeter.css'</span>;<span class="comment">//导入</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.root&#125;</span>&gt;</span>//添加类名</span></div><div class="line">        &#123;config.greetText&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Greeter</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="CSS预处理器"><a href="#CSS预处理器" class="headerlink" title="CSS预处理器"></a>CSS预处理器</h4><p>Sass 和 Less之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，</p>
<p>常用的CSS处理器loaders:</p>
<ul>
<li>Less Loader</li>
<li>Sass Loader</li>
<li>Stylus Loader</li>
</ul>
<ol>
<li><p>安装<strong>postcss-loader</strong> 和 <strong>autoprefixer</strong>（自动添加前缀的插件）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev postcss-loader autoprefixer</div></pre></td></tr></table></figure>
</li>
<li><p>更新<strong>webpack.config.js</strong>内容,使其能使用<strong>postcss-loader</strong> 和 <strong>autoprefixer</strong>,只需要新建一个postcss关键字，并在里面申明依赖的插件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">//在配置文件里添加JSON loader</span></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.json$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">"json-loader"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">                <span class="comment">//在webpack的module部分的loaders里进行配置即可</span></div><div class="line">                loader: <span class="string">'babel-loader'</span>,</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">                <span class="comment">//添加对样式表的处理</span></div><div class="line">                <span class="comment">//仅仅添加了?modules</span></div><div class="line">                loader: <span class="string">'style-loader!css-loader?modules-loader!postcss-loader'</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在<strong>webpack.config.js</strong>同级目录下创建<strong>postcss.config.js</strong>文件，配置内容如下；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。</p>
<h4 id="如何使用插件"><a href="#如何使用插件" class="headerlink" title="如何使用插件"></a>如何使用插件</h4><p>要使用某个插件，我们需要通过npm安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）</p>
<ol>
<li>添加一个显示版权声明的插件，在<strong>webpack.config.js</strong>中更新内容如下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"></div><div class="line">    plugins: [</div><div class="line">        <span class="comment">//在这个数组中new一个就可以了</span></div><div class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">"Copyright Flying Unicorns inc."</span>)</div><div class="line">  ],</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h4><p>这个插件的作用是依据一个简单的模板，帮你生成最终的Html5文件，这个文件中自动引用了你打包后的JS文件。每次编译都在文件名中插入一个不同的哈希值。</p>
<p>这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些改变：</p>
<ol>
<li><p>移除public文件夹，利用此插件，HTML5文件会自动生成，此外CSS已经通过前面的操作打包到JS中了，public文件夹里。</p>
</li>
<li><p>在app目录下，创建一个Html文件模板，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，在本例中我们命名模板文件名称为index.tmpl.html，模板源代码如下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Sample Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'root'</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>更新webpack的配置文件，方法同上,新建一个build文件夹用来存放最终的输出文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"></div><div class="line">    output: &#123;</div><div class="line">        <span class="comment">//打包后的文件存放的地方</span></div><div class="line">        path: __dirname + <span class="string">"/build"</span>,</div><div class="line">        <span class="comment">//打包后输出文件的文件名</span></div><div class="line">        filename: <span class="string">"bundle.js"</span></div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"></div><div class="line">    plugins: [</div><div class="line">         <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">            <span class="attr">template</span>: __dirname + <span class="string">"/app/index.tmpl.html"</span><span class="comment">//new 一个这个插件的实例，并传入相关的参数</span></div><div class="line">        &#125;)</div><div class="line">  ],</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="优化插件"><a href="#优化插件" class="headerlink" title="优化插件"></a>优化插件</h3><p>webpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能</p>
<ul>
<li>OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</li>
<li>UglifyJsPlugin：压缩JS代码；</li>
<li>ExtractTextPlugin：分离CSS和JS文件</li>
</ul>
<ol>
<li><p>安装插件,在终端中输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev extract-text-webpack-plugin</div></pre></td></tr></table></figure>
</li>
<li><p>在在<strong>webpack.config.js</strong>中更新配置内容如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    .</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"></div><div class="line">    plugins: [</div><div class="line">         <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">            <span class="attr">template</span>: __dirname + <span class="string">"/app/index.tmpl.html"</span><span class="comment">//new 一个这个插件的实例，并传入相关的参数</span></div><div class="line">            <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin(),</div><div class="line">            <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</div><div class="line">            <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"style.css"</span>)</div><div class="line">        &#125;)</div><div class="line">  ],</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注：</p>
<ul>
<li>本文参考 <a href="http://www.jianshu.com/p/42e11515c10f，作为个人学习笔记" target="_blank" rel="external">http://www.jianshu.com/p/42e11515c10f，作为个人学习笔记</a></li>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式学习笔记]]></title>
      <url>/2017/07/23/RegularExpression_study/</url>
      <content type="html"><![CDATA[<p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。<br>在各大编程语言中都能发挥出很大的作用。每种语言也都有关于正则表达式模块的实现。<br>本文以Python举例说明。</p>
<h2 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h2><a id="more"></a>
<h3 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符"></a>匹配单个字符</h3><h4 id="匹配纯文本"><a href="#匹配纯文本" class="headerlink" title="匹配纯文本"></a>匹配纯文本</h4><p>匹配纯文本其实我们一般不用正则表达式就可以，使用正则表达式只是能说明这个问题<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#待匹配的文本</span></div><div class="line">s = <span class="string">'hello my name is ben'</span></div><div class="line">print(re.findall(<span class="string">'ben'</span>, s))</div><div class="line"><span class="comment">#待匹配的文本</span></div><div class="line">s = <span class="string">'hello my name is ben and my friend name is ben'</span></div><div class="line">print(<span class="string">'只返回第一个匹配结果为&#123;&#125;'</span>.format(re.search(<span class="string">'ben'</span>, s).span()))</div><div class="line">print(<span class="string">'返回所有匹配结果&#123;&#125;'</span>.format(re.findall(<span class="string">'ben'</span>, s)))</div></pre></td></tr></table></figure></p>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[&apos;ben&apos;]</div><div class="line">只返回第一个匹配结果为(17, 20)</div><div class="line">返回所有匹配结果[&apos;ben&apos;, &apos;ben&apos;]</div></pre></td></tr></table></figure></p>
<h4 id="匹配任意字符"><a href="#匹配任意字符" class="headerlink" title="匹配任意字符"></a>匹配任意字符</h4><p>使用<strong>.</strong>匹配任意一个字符<br><strong>.</strong>字符可以匹配任何单个的字符、字母、数字或者<strong>.</strong>本身<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#待匹配的文本</span></div><div class="line">s = <span class="string">'sales1.txt'</span> \</div><div class="line">    <span class="string">'sales2.txt'</span> \</div><div class="line">    <span class="string">'salese.txt'</span> \</div><div class="line">    <span class="string">'nae.txt'</span> \</div><div class="line">    <span class="string">'sns.txt'</span> \</div><div class="line">    <span class="string">'sn.txt'</span></div><div class="line"></div><div class="line">print(<span class="string">'使用sale.匹配的所有结果为&#123;&#125;'</span>.format(re.findall(<span class="string">r'sales.'</span>, s)))</div><div class="line">print(<span class="string">'使用.a.匹配的所有结果为&#123;&#125;'</span>.format(re.findall(<span class="string">r'.a.'</span>, s)))</div><div class="line">print(<span class="string">'使用\转义匹配含有.的结果&#123;&#125;'</span>.format(re.findall(<span class="string">r'.a.\.'</span>, s)))</div></pre></td></tr></table></figure></p>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">使用sale.匹配的所有结果为[&apos;sales1&apos;, &apos;sales2&apos;, &apos;salese&apos;]</div><div class="line">使用.a.匹配的所有结果为[&apos;sal&apos;, &apos;sal&apos;, &apos;sal&apos;, &apos;nae&apos;]</div><div class="line">使用\转义匹配含有.的结果[&apos;nae.&apos;]</div></pre></td></tr></table></figure></p>
<h3 id="匹配一组字符"><a href="#匹配一组字符" class="headerlink" title="匹配一组字符"></a>匹配一组字符</h3><h4 id="匹配多个字符中的某一个"><a href="#匹配多个字符中的某一个" class="headerlink" title="匹配多个字符中的某一个"></a>匹配多个字符中的某一个</h4><p>使用<strong>[ab]</strong>确定可选的字符<br>使用<strong>[0-9]</strong>确定可选的字符范围<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'na.txt'</span> \</div><div class="line">    <span class="string">'na2.txt'</span> \</div><div class="line">    <span class="string">'sa1.txt'</span> \</div><div class="line">    <span class="string">'ca1.txt'</span> \</div><div class="line">    <span class="string">'nam.txt'</span></div><div class="line"></div><div class="line">print(<span class="string">'匹配na或sa.txt的结果为&#123;&#125;'</span>.format(re.findall(<span class="string">r'[ns]a.\.txt'</span>, s)))</div><div class="line">print(<span class="string">'限制a后面字符仅为数字的结果为&#123;&#125;'</span>.format(re.findall(<span class="string">r'[ns]a[0-9]\.txt'</span>,s)))</div></pre></td></tr></table></figure></p>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">匹配na或sa.txt的结果为[&apos;na2.txt&apos;, &apos;sa1.txt&apos;, &apos;nam.txt&apos;]</div><div class="line">限制a后面字符仅为数字的结果为[&apos;na2.txt&apos;, &apos;sa1.txt&apos;]</div></pre></td></tr></table></figure></p>
<ul>
<li>注: 在同一个字符集合里页可以给出多个字符区间，会匹配到多个区间中的任何一个字符</li>
</ul>
<h4 id="取非匹配"><a href="#取非匹配" class="headerlink" title="取非匹配"></a>取非匹配</h4><p>我们使用正则表达式也不是都需要匹配集合其中的字符，有时也需要匹配非集合中的字符，在正则表达式中，我们可以使用<strong>^</strong>字符对集合进行取非操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'na.txt'</span> \</div><div class="line">    <span class="string">'na2.txt'</span> \</div><div class="line">    <span class="string">'sa1.txt'</span> \</div><div class="line">    <span class="string">'ca1.txt'</span> \</div><div class="line">    <span class="string">'nam.txt'</span></div><div class="line"></div><div class="line">print(<span class="string">'限制a后面字符不为数字的结果为&#123;&#125;'</span>.format(re.findall(<span class="string">r'[ns]a[^0-9]\.txt'</span>, s)))</div></pre></td></tr></table></figure></p>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">限制a后面字符不为数字的结果为[&apos;nam.txt&apos;]</div></pre></td></tr></table></figure></p>
<h3 id="使用元字符"><a href="#使用元字符" class="headerlink" title="使用元字符"></a>使用元字符</h3><h4 id="对特殊字符进行转义"><a href="#对特殊字符进行转义" class="headerlink" title="对特殊字符进行转义"></a>对特殊字符进行转义</h4><p>使用<strong>\</strong>对元字符进行转义<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'list[0]   list[1]   list[2]'</span></div><div class="line">print(<span class="string">'使用\对中括号进行转义使其匹配&#123;&#125;'</span>.format(re.findall(<span class="string">r'list\[[0-9]\]'</span>, s)))</div><div class="line">path = <span class="string">'\home\\ben\sales'</span></div><div class="line">print(<span class="string">'将\替换成/为&#123;&#125;'</span>.format(re.compile(<span class="string">r'\\'</span>).subn(<span class="string">'/'</span>, path)))</div></pre></td></tr></table></figure></p>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">使用\对中括号进行转义使其匹配[&apos;list[0]&apos;, &apos;list[1]&apos;, &apos;list[2]&apos;]</div><div class="line">将\替换成/为(&apos;/home/ben/sales&apos;, 3)</div></pre></td></tr></table></figure></p>
<h4 id="匹配特定的字符类别"><a href="#匹配特定的字符类别" class="headerlink" title="匹配特定的字符类别"></a>匹配特定的字符类别</h4><p>空白元字符表                     </p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>[\b]</strong></td>
<td>回退符</td>
</tr>
<tr>
<td><strong>\f</strong></td>
<td>换页符</td>
</tr>
<tr>
<td><strong>\n</strong></td>
<td>换行符</td>
</tr>
<tr>
<td><strong>\r</strong></td>
<td>回车符</td>
</tr>
<tr>
<td><strong>\t</strong></td>
<td>制表符</td>
</tr>
<tr>
<td><strong>\v</strong></td>
<td>垂直制表符</td>
</tr>
</tbody>
</table>
<p>数字元字符</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>\d</strong></td>
<td>任何一个数字 (等价于[0-9])</td>
</tr>
<tr>
<td><strong>\D</strong></td>
<td>任何一个非数字(等价于[^0-9])</td>
</tr>
</tbody>
</table>
<p>字母数字元字符</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>\w</strong></td>
<td>任何一个字母数字字符(大小写均可)或下划线字符 (等价于[a-zA-Z0-9_])</td>
</tr>
<tr>
<td><strong>\W</strong></td>
<td>任何一个非字母数字字符(等价于[^a-zA-Z0-9_])</td>
</tr>
</tbody>
</table>
<p>空白字符元字符</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>\s</strong></td>
<td>任何一个空白字符 (等价于[\f\n\r\t\v])</td>
</tr>
<tr>
<td><strong>\S</strong></td>
<td>任何一个非空白字符(等价于[^\f\n\r\t\v])</td>
</tr>
</tbody>
</table>
<h3 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配"></a>重复匹配</h3><h4 id="匹配一个或多个字符"><a href="#匹配一个或多个字符" class="headerlink" title="匹配一个或多个字符"></a>匹配一个或多个字符</h4><p>匹配同一个字符或(字符集合)的多次重复，只要在其后面加上一个+即可。<br>+匹配一个或多个字符(至少一个，不包含0个)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'1234545@qq.com   fdfsd@163.com test.sddf@163.com.cn'</span></div><div class="line">print(<span class="string">'匹配邮箱&#123;&#125;'</span>.format(re.findall(<span class="string">r'[\w.]+@[\w.]+\.\w+'</span>, s)))</div></pre></td></tr></table></figure></p>
<p>结果为；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">匹配邮箱[&apos;1234545@qq.com&apos;, &apos;fdfsd@163.com&apos;]</div></pre></td></tr></table></figure></p>
<h4 id="匹配零个或多个字符"><a href="#匹配零个或多个字符" class="headerlink" title="匹配零个或多个字符"></a>匹配零个或多个字符</h4><p><strong>*</strong> 和+类似，只是可以允许匹配0个或多个的情况</p>
<h4 id="匹配零个或一个字符"><a href="#匹配零个或一个字符" class="headerlink" title="匹配零个或一个字符"></a>匹配零个或一个字符</h4><p><strong>？</strong>只能匹配一个字符(或字符集合)的零次或一次出现，最多不能超过一次。</p>
<h4 id="匹配的重复次数"><a href="#匹配的重复次数" class="headerlink" title="匹配的重复次数"></a>匹配的重复次数</h4><ol>
<li>使用<strong>{}</strong>将数值写在其中来表示重复次数 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'123abc   45abc'</span></div><div class="line">print(<span class="string">'匹配三个数字&#123;&#125;'</span>.format(re.findall(<span class="string">r'\d&#123;3&#125;\w&#123;3&#125;'</span>, s)))</div></pre></td></tr></table></figure>
</li>
</ol>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">匹配三个数字[&apos;123abc&apos;]</div></pre></td></tr></table></figure></p>
<ol>
<li>为重复匹配次数设定一个区间<br>使用<strong>{a,b}</strong>的形式来确定区间，a为最少重复次数，b为最多重复次数<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'4/8/03   '</span> \</div><div class="line">    <span class="string">'10-6-2004   '</span> \</div><div class="line">    <span class="string">'2/2/2   '</span> \</div><div class="line">    <span class="string">'01-01-01   '</span></div><div class="line"></div><div class="line">print(<span class="string">'匹配所有格式的日期&#123;&#125;'</span>.format(re.findall(<span class="string">r'\d&#123;1,2&#125;[-\/]\d&#123;1,2&#125;[-\/]\d&#123;2,4&#125;'</span>, s)))</div></pre></td></tr></table></figure>
</li>
</ol>
<p>结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">匹配所有格式的日期[&apos;4/8/03&apos;, &apos;10-6-2004&apos;, &apos;01-01-01&apos;]</div></pre></td></tr></table></figure></p>
<ol>
<li><p>匹配至少重复多少次<br>使用<strong>{a,}</strong>的形式的形式来确定最少重复的次数</p>
</li>
<li><p>防止过度匹配<br>*和+都是贪婪形元字符，使用他们在进行匹配时，会进可能的匹配而不是适可而止。他们会从一段文本的开头一直匹配到文本的末尾。在这种情况可能导致原本我们需要匹配多个结果，最后变成了一个结果,例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;B&gt;TEST&lt;/B&gt;AND &lt;B&gt;TEST1&lt;/B&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>会被正则表达式&lt;[Bb]&gt;.*&lt;/[Bb]&gt;匹配为一个整体的结果<br>此时应该使用懒惰型版本<br>常用的贪婪性元字符和它们的懒惰型版本</p>
<table>
<thead>
<tr>
<th>贪婪型元字符</th>
<th>懒惰型元字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>*?</td>
</tr>
<tr>
<td>+</td>
<td>+?</td>
</tr>
<tr>
<td>{n,}</td>
<td>{n,}?</td>
</tr>
</tbody>
</table>
<p>用懒惰型元字符时的正则表达式应是&lt;[Bb]&gt;.*?&lt;/[Bb]&gt;</p>
<h3 id="位置匹配"><a href="#位置匹配" class="headerlink" title="位置匹配"></a>位置匹配</h3><h4 id="单词边界"><a href="#单词边界" class="headerlink" title="单词边界"></a>单词边界</h4><p>使用\b限定单词边界，用来匹配一个单词的开始或结尾<br>使用\B限定一个前后都不是单词边界的单词<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'the cat scattered his food all over the room color - red'</span></div><div class="line">print(<span class="string">'匹配单词边界&#123;&#125;'</span>.format(re.findall(<span class="string">r'\bcat\b'</span>, s)))</div><div class="line">print(<span class="string">'不匹配单词边界&#123;&#125;'</span>.format(re.findall(<span class="string">r'\-\B'</span>, s)))</div></pre></td></tr></table></figure></p>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">匹配单词边界[&apos;cat&apos;]</div><div class="line">不匹配单词边界[&apos;-&apos;]</div></pre></td></tr></table></figure></p>
<h4 id="字符串边界"><a href="#字符串边界" class="headerlink" title="字符串边界"></a>字符串边界</h4><p>^限定字符串开头，$限定字符串的结尾</p>
<h3 id="使用子表达式"><a href="#使用子表达式" class="headerlink" title="使用子表达式"></a>使用子表达式</h3><p>用<strong>()</strong>来将需要的子表达式划分出来，子表达式可以嵌套<br>用<strong>|</strong>表示或，例如19|20表示为(19|20)匹配19或20<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'hello &amp;nbsp;&amp;nbsp; the world'</span></div><div class="line">print(<span class="string">'匹配两个&amp;nbsp;的结果为&#123;&#125;'</span>.format(re.findall(<span class="string">r'(&amp;nbsp;)&#123;2,&#125;'</span>, s)))</div><div class="line"></div><div class="line">s = <span class="string">'ping 12.159.46.200'</span></div><div class="line">p = re.compile(<span class="string">r'(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;'</span>)</div><div class="line">print(<span class="string">'使用子表达式匹配ip地址为&#123;&#125;'</span>.format(p.findall(s)))</div><div class="line"></div><div class="line">s = <span class="string">'1997     2005'</span></div><div class="line">print(<span class="string">'&#123;&#125;'</span>.format(re.findall(<span class="string">r'(19|20)\d&#123;2&#125;'</span>, s)))</div></pre></td></tr></table></figure></p>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">匹配两个&amp;nbsp;的结果为[&apos;&amp;nbsp;&amp;nbsp;&apos;]</div><div class="line">使用子表达式匹配ip地址为[&apos;12.159.46.200&apos;]</div><div class="line">[&apos;19&apos;, &apos;20&apos;]</div></pre></td></tr></table></figure></p>
<h3 id="回溯引用，前后一致"><a href="#回溯引用，前后一致" class="headerlink" title="回溯引用，前后一致"></a>回溯引用，前后一致</h3><p>使用\n代表模式里的第几个子表达式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'this is and and or or not not'</span></div><div class="line">print(<span class="string">'&#123;&#125;'</span>.format(re.findall(<span class="string">r'[ ]+(\w+)[ ]+\1'</span>, s)))</div></pre></td></tr></table></figure></p>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&apos;and&apos;, &apos;or&apos;, &apos;not&apos;]</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注:</p>
<ul>
<li>回溯引用只能用来引用模式里的子表达式(用()括起来的正则表达式片段)</li>
<li>回溯引用匹配通常用1开始技术(\1 \2等)。在许多实现里，第0个匹配(\0)可以用来代表整个正则表达式</li>
</ul>
</blockquote>
<h3 id="前后查找"><a href="#前后查找" class="headerlink" title="前后查找"></a>前后查找</h3><p>这种模式，包含的匹配本身并不返回，而是用于确定正确的匹配位置，它并不是匹配结果的一部分。<br>前后查找分为向前查找和向后查找，但常见的正则表达式实现都支持向前查找。所以只说明前者</p>
<h4 id="向前查找"><a href="#向前查找" class="headerlink" title="向前查找"></a>向前查找</h4><p>向前查找指定了一个必须匹配但不在结果中返回的模式。向前查找实际就是一个子表达式。<br>从语法上看，一个向前查找模式就是一个以?=开头的子表达式，需要匹配的文本跟在=的后面。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'http://www.baidu.com \n'</span> \</div><div class="line">    <span class="string">'https://www.baidu.com \n'</span> \</div><div class="line">    <span class="string">'ftp://ftp.baidu.com    \n'</span></div><div class="line"></div><div class="line">print(<span class="string">'向前查找url中的协议名为&#123;&#125;'</span>.format(re.findall(<span class="string">r'.&#123;3,6&#125;(?=:)'</span>, s)))</div></pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">向前查找url中的协议名为[&apos;http&apos;, &apos;https&apos;, &apos;ftp&apos;]</div></pre></td></tr></table></figure></p>
<h4 id="向后查找"><a href="#向后查找" class="headerlink" title="向后查找"></a>向后查找</h4><p>与向前查找相类似，查找出现在被匹配文本之前的字符（但不消费它）,向后查找的操作符使?&lt;=</p>
<h3 id="嵌入条件"><a href="#嵌入条件" class="headerlink" title="嵌入条件"></a>嵌入条件</h3><p>正则表达式里的条件要用?来定义</p>
<ul>
<li>?匹配前一个字符或表达式，如果它存在的话</li>
<li>?= 和?&lt;=匹配前面或后面的文本，如果它存在的话</li>
<li>根据一个回溯引用来进行条件处理</li>
<li>根据一个前后查找来进行条件处理</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts Python3.5</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Regular Expression </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio 使用本地离线Gradle]]></title>
      <url>/2017/07/08/AndroidStudio/</url>
      <content type="html"><![CDATA[<p>在进行Android开发时，我们通常使用Android Studio,不过最近在使用Android Stduio最新版2.3.3出现了一个问题，虽然已经用了vpn，但是gradle还是下载不动，应该使他没有走系统代理，只能自己下载离线gradle版本，但在以前的方法放到用户的.gradle目录下，依然不能用。。。。</p>
<a id="more"></a>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li><p>新版as没有选择gradle版本的地方，所以我们需要知道他创建工程时使用的gradle版本是多少，先使用as创建一个工程，as会自动在用户的.gradle下创建一个gradle-x.x-all文件夹，其中x.x就是版本号。（此时as会一直卡在building…….）</p>
</li>
<li><p>使用任务管理器结束as。从<a href="http://services.gradle.org/distributions/" target="_blank" rel="external">gradle下载地址</a>下载上面显示的版本号。gradle-x.x-all.zip</p>
</li>
<li><p>将下载好的gradle-x.x-all.zip放到用户目录下的.gradle/wrapper/dists/gradle-x.x-all/sdfsdhfsdkfsdfsdfd/中<br>sdfsdhfsdkfsdfsdfd是一串字符串每个人的可能不一样，反正看见一大串字符就对了<br>gradle-x.x-all.zip放进去之后不要解压，不要解压,不要解压，重要的问题说三遍，as会自动解压<br>windows下路径 c:\user\你的用户.gradle\wrapper\dist\<br>Linux下路径   /home/用户名/.gradle/wrapper/dist/</p>
</li>
</ol>
<p>4.然后重新打开as,最好在翻墙状态，as就会联网自动下载其他所需要的文件和库了</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 解决方案 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[跨域请求的解决方案]]></title>
      <url>/2017/06/30/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>在请求或提供api的时候，我们经常会遇到跨域问题，这是由于安全问题，但是有时候我们必须去允许跨域请求，不然我们将拿不到后端传过来的数据<br>所以，笔者在这里总结了一下相关解决方案</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><a id="more"></a>
<h3 id="使用jsonp解决"><a href="#使用jsonp解决" class="headerlink" title="使用jsonp解决"></a>使用jsonp解决</h3><p>使用jsonp方式去请求数据能以get方式请求，但是不能以post方式发送数据<br>使用这种方式需要前后段都做相应的修改</p>
<h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p>笔者这里使用jQuery来进行ajax请求<br>我们需要在前端请求的url中添加一个callback回调参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $.getJSON(<span class="string">"http://10.127.48.204:8000/snippets/1/?callback=?"</span>,  <span class="comment">//注意结尾的callback</span></div><div class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (result) &#123;</div><div class="line">                    <span class="built_in">document</span>.write(result.style);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><p>笔者这里是用的django的后台，其他语言自行探索一下，都是大同小异的<br>定义好路由之后，我们只需要在view里进行一点简单的修改就好<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></div><div class="line">   callback = request.GET[<span class="string">'callback'</span>]</div><div class="line">   <span class="keyword">return</span> HttpResponse(<span class="string">'%s(%s)'</span> % (callback,json.dumps(&#123;<span class="string">'name'</span>: <span class="string">'test'</span>&#125;)))</div></pre></td></tr></table></figure></p>
<p>得到ajax传来的callback然后返回就好</p>
<p>这样就实现了很简单的跨域请求数据，不过需要前后端都进行支持，比较麻烦。。。。。</p>
<h3 id="修改请求头解决"><a href="#修改请求头解决" class="headerlink" title="修改请求头解决"></a>修改请求头解决</h3><p>在后端直接修改允许的请求头<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myview</span><span class="params">(request)</span>:</span> </div><div class="line">    response = HttpResponse(json.dumps(&#123;“key”: “value”, “key2”: “value”&#125;)) </div><div class="line">    response[“Access-Control-Allow-Origin”] = “*” </div><div class="line">    response[“Access-Control-Allow-Methods”] = “POST, GET, OPTIONS” </div><div class="line">    response[“Access-Control-Max-Age”] = “<span class="number">1000</span>” </div><div class="line">    response[“Access-Control-Allow-Headers”] = “*” </div><div class="line">    <span class="keyword">return</span> response</div></pre></td></tr></table></figure></p>
<h3 id="安装django-cors-headers解决"><a href="#安装django-cors-headers解决" class="headerlink" title="安装django-cors-headers解决"></a>安装django-cors-headers解决</h3><p>笔者用的是django，刚好有人写好了一个库</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install django-cors-headers</div></pre></td></tr></table></figure>
<h4 id="在settings-py中设置"><a href="#在settings-py中设置" class="headerlink" title="在settings.py中设置"></a>在<strong>settings.py</strong>中设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = [</div><div class="line">    ...</div><div class="line">    <span class="string">'corsheaders'</span>，</div><div class="line">    ...</div><div class="line"> ] </div><div class="line"></div><div class="line">MIDDLEWARE_CLASSES = (</div><div class="line">    ...</div><div class="line">    <span class="string">'corsheaders.middleware.CorsMiddleware'</span>,</div><div class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>, <span class="comment"># 注意顺序</span></div><div class="line">    ...</div><div class="line">)</div><div class="line"></div><div class="line">CORS_ORIGIN_WHITELIST = (</div><div class="line">    <span class="comment">#'*'</span></div><div class="line">    <span class="string">'127.0.0.1:8080'</span>,<span class="comment"># 请求的域名</span></div><div class="line">    <span class="string">'localhost:8080'</span>,</div><div class="line">    <span class="string">'localhost'</span>,</div><div class="line">)</div></pre></td></tr></table></figure>
<p>配置好允许的域就可以跨域了</p>
<h3 id="在服务器端-nginx-解决"><a href="#在服务器端-nginx-解决" class="headerlink" title="在服务器端(nginx)解决"></a>在服务器端(nginx)解决</h3><p>笔者认为这是最经济划算的一种方法，这样前后端代码就都不需要更改，依然按之前的就可以了<br>但在服务端也有两种方式：</p>
<ol>
<li>修改请求头</li>
<li>进行反向代理</li>
</ol>
<h4 id="修改请求头"><a href="#修改请求头" class="headerlink" title="修改请求头"></a>修改请求头</h4><p>在nginx的配置文件里添加如下配置即可<br><strong>nginx.conf</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">  ......</div><div class="line">  add_header Access-Control-Allow-Origin *;</div><div class="line">  add_header Access-Control-Allow-Headers X-Requested-With;</div><div class="line">  add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</div><div class="line">  ......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就可以实现GET,POST,OPTIONS的跨域请求的支持<br>也可以 add_header Access-Control-Allow-Origin <a href="http://127.0.0.1:8000" target="_blank" rel="external">http://127.0.0.1:8000</a>; –指定允许的url;</p>
<h4 id="进行反向代理"><a href="#进行反向代理" class="headerlink" title="进行反向代理"></a>进行反向代理</h4><p>同样在万能的nginx配置文件修改即可<br><strong>/etc/nginx/sites-enabled/8001test</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 8001;</div><div class="line">    server_name _;</div><div class="line">    index index.html;</div><div class="line">    location / &#123;</div><div class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    location /apis &#123;</div><div class="line">        rewrite ^.+apis/?(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</div><div class="line">        include uwsgi_params;</div><div class="line">        proxy_pass http://127.0.0.1:8000;  <span class="comment">#需要代理到的地址</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：</p>
<ul>
<li>/apis是需要在请求中加的前缀，请求到这个参数会通过转换url然后代理到新的地址</li>
<li>proxy_pass <a href="http://127.0.0.1:8000" target="_blank" rel="external">http://127.0.0.1:8000</a>  需要代理到的地址<br>前端只需要在请求url中加个apis前缀就好<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="comment">//利用反向代理解决跨域测试</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">nginx_test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: <span class="string">"/apis/test/"</span>,</div><div class="line">        <span class="attr">type</span>:<span class="string">"get"</span>,</div><div class="line">        <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">            alert(result.name);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p>笔者比较推荐最后一种方法，个人觉得这种方法最经济划算。也可以根据需求来选择是否需要跨域代理</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中搭建测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 解决方案 </tag>
            
            <tag> Nginx </tag>
            
            <tag> AJAX </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu下的进程控制系统————Supervisor]]></title>
      <url>/2017/06/30/ubuntu_supervisor/</url>
      <content type="html"><![CDATA[<p>我们在部署网站或者在ssh到服务器上去进行一些长时间操作的任务时候，通常不喜欢长时间开启终端在其中等待，尤其是Windows下putty这类软件，长时间不操作就会结束，尴尬的是，我们跑的进程也会直接终端，为了解决这个问题，我们需要把进程扔到后台，让他自己运行</p>
<p>在这里我们介绍一个名叫<strong>Supervisor</strong>的进程控制系统，<br>它是一个C/S系统(注意: 其提供WEB接口给用户查询和控制), 它允许用户去监控和控制在类UNIX系统的进程. 它的目标与launchd, daemontools和runit有些相似, 但是与它们不一样的是, 它不是作为init(进程号pid是1)运行. 它是被用来控制进程, 并且它在启动的时候和一般程序并无二致<br>supervisor是一个制作守护进程的工具,用户可以在UNIX系统中监控、管理进程。常用于管理与某个用户或项目相关的进程。去帮我们维护各种服务器的进程，即使有软件崩了也能帮我们自动重启</p>
<h2 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h2><a id="more"></a>
<p>首先先把官网丢上来<a href="http://supervisord.org/" target="_blank" rel="external">http://supervisord.org/</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>两种方式去安装</p>
<ol>
<li><p>直接使用apt包管理安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install supervisor</div></pre></td></tr></table></figure>
</li>
<li><p>通过pip安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip install supervisor</div></pre></td></tr></table></figure>
</li>
</ol>
<p>安装成功后,supervisor就会默认启动</p>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>很多地方都有不同的使用方式，个人比较倾向把每个进程的文件单独拆分放在/etc/supervisor/conf.d/目录下，以conf为扩展名<br>这里以我自己的一个项目的进程作为例子（进程名为x508server）</p>
<ol>
<li><p>创建并编写<strong>x508server.conf</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[program:x508server]</div><div class="line">command=python /home/webserver/web/WebServer/manage.py runserver 0.0.0.0:8000 ; 被监控的进程路径</div><div class="line">numprocs=1                    ; 启动几个进程</div><div class="line">directory=/home/webserver/web/WebServer/               ; 执行前要不要先cd到目录去，一般不用</div><div class="line">autostart=true                ; 随着supervisord的启动而启动</div><div class="line">autorestart=true              ; 自动重启。。当然要选上了</div><div class="line">startretries=10               ; 启动失败时的最多重试次数</div><div class="line">exitcodes=0                   ; 正常退出代码</div><div class="line">stopsignal=KILL               ; 用来杀死进程的信号</div><div class="line">stopwaitsecs=10               ; 发送SIGKILL前的等待时间</div><div class="line">redirect_stderr=true          ; 重定向stderr到stdout</div><div class="line">stdout_logfile=logfile        ; 指定日志文件</div><div class="line">; 默认为 false，如果设置为 true，当进程收到 stop 信号时，会自动将该信号发给该进程的子进程。如果这个配置项为 true，那么也隐含 killasgroup 为 true。例如在 Debug 模式使用 Flask 时，Flask 不会将接收到的 stop 信号也传递给它的子进程，因此就需要设置这个配置项。</div><div class="line">stopasgroup=true             ; send stop signal to the UNIX process </div><div class="line">; 默认为 false，如果设置为 true，当进程收到 kill 信号时，会自动将该信号发给该进程的子进程。如果这个程序使用了 python 的 multiprocessing 时，就能自动停止它的子线程。</div><div class="line">killasgroup=true             ; SIGKILL the UNIX process group (def false</div></pre></td></tr></table></figure>
</li>
<li><p>让supervisor重新加载配置文件，然后启动x508server进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ supervisorctl reload</div><div class="line">$ supervisorctl start x508server</div></pre></td></tr></table></figure>
</li>
<li><p>结束指定进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ supervisorctl x508serevr stop</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol>
<li><p>启动某个进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ supervisorctl start x508serevr</div></pre></td></tr></table></figure>
</li>
<li><p>关闭某个进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ supervisorctl stop x508serevr</div></pre></td></tr></table></figure>
</li>
<li><p>停止全部进程，注：start、restart、stop都不会载入最新的配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ supervisorctl stop all</div></pre></td></tr></table></figure>
</li>
<li><p>载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ supervisorctl reload</div></pre></td></tr></table></figure>
</li>
<li><p>根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ supervisorctl update</div></pre></td></tr></table></figure>
</li>
<li><p>启动supervisord</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo supervisord -c /etc/supervisor/supervisord.conf</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><ol>
<li><p>每个进程的配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">;*为必须填写项</div><div class="line">;*[program:应用名称]</div><div class="line">[program:cat]</div><div class="line"></div><div class="line">;*命令路径,如果使用python启动的程序应该为 python /home/test.py, </div><div class="line">;不建议放入/home/user/, 对于非user用户一般情况下是不能访问</div><div class="line"><span class="built_in">command</span>=/bin/cat</div><div class="line"></div><div class="line">;当numprocs为1时,process_name=%(program_name)s</div><div class="line">;当numprocs&gt;=2时,%(program_name)s_%(process_num)02d</div><div class="line">process_name=%(program_name)s</div><div class="line"></div><div class="line">;进程数量</div><div class="line">numprocs=1</div><div class="line"></div><div class="line">;执行目录,若有/home/supervisor_test/<span class="built_in">test</span>1.py</div><div class="line">;将directory设置成/home/supervisor_test</div><div class="line">;则<span class="built_in">command</span>只需设置成python <span class="built_in">test</span>1.py</div><div class="line">;否则<span class="built_in">command</span>必须设置成绝对执行目录</div><div class="line">directory=/tmp</div><div class="line"></div><div class="line">;掩码:--- -w- -w-, 转换后rwx r-x w-x</div><div class="line"><span class="built_in">umask</span>=022</div><div class="line"></div><div class="line">;优先级,值越高,最后启动,最先被关闭,默认值999</div><div class="line">priority=999</div><div class="line"></div><div class="line">;如果是<span class="literal">true</span>,当supervisor启动时,程序将会自动启动</div><div class="line">autostart=<span class="literal">true</span></div><div class="line"></div><div class="line">;*自动重启</div><div class="line">autorestart=<span class="literal">true</span></div><div class="line"></div><div class="line">;启动延时执行,默认1秒</div><div class="line">startsecs=10</div><div class="line"></div><div class="line">;启动尝试次数,默认3次</div><div class="line">startretries=3</div><div class="line"></div><div class="line">;当退出码是0,2时,执行重启,默认值0,2</div><div class="line">exitcodes=0,2</div><div class="line"></div><div class="line">;停止信号,默认TERM</div><div class="line">;中断:INT(类似于Ctrl+C)(<span class="built_in">kill</span> -INT pid),退出后会将写文件或日志(推荐)</div><div class="line">;终止:TERM(<span class="built_in">kill</span> -TERM pid)</div><div class="line">;挂起:HUP(<span class="built_in">kill</span> -HUP pid),注意与Ctrl+Z/<span class="built_in">kill</span> -stop pid不同</div><div class="line">;从容停止:QUIT(<span class="built_in">kill</span> -QUIT pid)</div><div class="line">;KILL, USR1, USR2其他见命令(<span class="built_in">kill</span> <span class="_">-l</span>),说明1</div><div class="line">stopsignal=TERM</div><div class="line"></div><div class="line">stopwaitsecs=10</div><div class="line"></div><div class="line">;*以root用户执行</div><div class="line">user=root</div><div class="line"></div><div class="line">;重定向</div><div class="line">redirect_stderr=<span class="literal">false</span></div><div class="line"></div><div class="line">stdout_logfile=/a/path</div><div class="line">stdout_logfile_maxbytes=1MB</div><div class="line">stdout_logfile_backups=10</div><div class="line">stdout_capture_maxbytes=1MB</div><div class="line">stderr_logfile=/a/path</div><div class="line">stderr_logfile_maxbytes=1MB</div><div class="line">stderr_logfile_backups=10</div><div class="line">stderr_capture_maxbytes=1MB</div><div class="line"></div><div class="line">;环境变量设置</div><div class="line">environment=A=<span class="string">"1"</span>,B=<span class="string">"2"</span></div><div class="line"></div><div class="line">serverurl=AUTO</div></pre></td></tr></table></figure>
</li>
<li><p>(inet_http_server)配置说明</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[inet_http_server]         ; inet (TCP) server disabled by default</div><div class="line">port=0.0.0.0:9001          ; (ip_address:port specifier, *:port <span class="keyword">for</span> all iface)</div><div class="line">username=user              ; 用户名 (default is no username (open server))</div><div class="line">password=123               ; 密码 (default is no password (open server))</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[django+nginx+gunicorn部署配置]]></title>
      <url>/2017/06/30/django_nginx_gunicorn/</url>
      <content type="html"><![CDATA[<p>在部署django开发的站点时，通常有两种选择方式，nginx+django+uwsgi或者django+nginx+gunicorn，本文不讨论apache方式，在linux下通常都使用nginx，速度快，还经常做代理服务器，功能强大。。<br>nginx+django+uwsgi个人觉得uwsgi配置较为麻烦，所以选择了gunicorn，一个开源Python WSGI UNIX的HTTP服务器，据说速度快（配置快、运行快）、简单，默认是同步工作，支持Gevent、Eventlet异步，支持Tornado。有兴趣可以自行查阅官方文档</p>
<h1 id="django-nginx-gunicorn"><a href="#django-nginx-gunicorn" class="headerlink" title="django+nginx+gunicorn"></a>django+nginx+gunicorn</h1><a id="more"></a>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>需要在服务器端安装我们所需要的环境nginx  Python  nginx gunicorn…<br>django等站点需要的依赖将不进行介绍</p>
<h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>在ubuntu上支持apt-get 直接安装，其他系统请自行搜索安装方式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install nginx</div></pre></td></tr></table></figure></p>
<h3 id="gunicorn"><a href="#gunicorn" class="headerlink" title="gunicorn"></a>gunicorn</h3><p>gunicorn只是一个Python的库 这里建议使用pip安装，简单方便<br>ps:要么网络好，要么建议更改pip源为豆瓣源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip install gunicorn</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：</p>
<ul>
<li>如果没有pip需要首先安装pip</li>
<li>如果是Python3 请使用pip3</li>
<li>由于服务器就跑一个Python应用，就使用了全局安装,如果你的服务器上运行了多个Python应用，并使用了不同的环境(版本号),建议使用不同的虚拟环境</li>
</ul>
</blockquote>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>其实也很简单，要想简单的跑起来只需要更改几个配置文件即可<br>首先请把你的django站点放在服务器合适的地方</p>
<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><p>一般网站都配置在80端口上，域名默认解析到80端口，所以nginx配置文件如下，在更改nginx的配置文件之前建议把默认文件进行备份，以备后续出现问题参照使用<br>打开nginx配置文件<strong>/etc/ningx/sites-enable/default</strong><br>进行修改为如下内容:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name 192.168.84.199;</div><div class="line">    server_name_in_redirect off;</div><div class="line">    access_log /home/webserver/web/nginx.access.log;</div><div class="line">    error_log /home/webserver/web/nginx.error.log;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://127.0.0.1:8000;</div><div class="line">        proxy_pass_header       Authorization;</div><div class="line">        proxy_pass_header       WWW-Authenticate;</div><div class="line">        proxy_set_header Host <span class="variable">$host</span>;</div><div class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location /static/ &#123;</div><div class="line">        root /home/webserver/web/WebServer/;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>核心配置文件就上述那么多，重点使将请求转发到django的服务器上</p>
<blockquote>
<p>注：</p>
<ul>
<li>listen是所需要监听的端口</li>
<li>server_name是需要绑定的域名，暂时没有域名时，请使用ip</li>
<li>access_log是确定正常状态下log文件位置</li>
<li>error_log使确定发生错误时log文件位置</li>
<li>location / 是当访问到根下的时候，将所有请求转发到127.0.0.1:8000,本文使转发到gunicorn启动的django应用上，中间配置的是需要转发的内容，基本上述内容可以满足大多需求，如需特殊需求请自行查看nginx官方文档</li>
<li>location /static/ 配置了静态文件所在的路径，静态文件由nginx处理，动态转发到django，如不配置会出现站点引用的所有js css都找不到</li>
</ul>
</blockquote>
<h3 id="gunicorn配置"><a href="#gunicorn配置" class="headerlink" title="gunicorn配置"></a>gunicorn配置</h3><p>gunicorn启动一般有两种方式，可以在项目目录下建立<strong>gunicorn.conf.py</strong>配置文件，也可以在启动gunicorn时直接加上相关命令</p>
<h4 id="需要在项目的settings-py中的INSTALLED-APPS添加gunicorn："><a href="#需要在项目的settings-py中的INSTALLED-APPS添加gunicorn：" class="headerlink" title="需要在项目的settings.py中的INSTALLED_APPS添加gunicorn："></a>需要在项目的settings.py中的<strong>INSTALLED_APPS</strong>添加gunicorn：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = [</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    <span class="string">'gunicorn'</span>,  <span class="comment"># 部署用</span></div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="gunicorn-conf-py文件"><a href="#gunicorn-conf-py文件" class="headerlink" title="gunicorn.conf.py文件"></a>gunicorn.conf.py文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> multiprocessing</div><div class="line"></div><div class="line">bind = <span class="string">"127.0.0.1:8000"</span>   <span class="comment">#绑定的ip与端口</span></div><div class="line">workers = <span class="number">2</span>                <span class="comment">#核心数</span></div><div class="line">errorlog = <span class="string">'/home/xxx/xxx/gunicorn.error.log'</span> <span class="comment">#发生错误时log的路径</span></div><div class="line">accesslog = <span class="string">'/home/xxx/xxx/gunicorn.access.log'</span> <span class="comment">#正常时的log路径</span></div><div class="line"><span class="comment">#loglevel = 'debug'   #日志等级</span></div><div class="line">proc_name = <span class="string">'gunicorn_project'</span>   <span class="comment">#进程名</span></div></pre></td></tr></table></figure>
<p>如还需要其他配置，可以自行查看官方文档</p>
<h4 id="直接使用gunicron启动"><a href="#直接使用gunicron启动" class="headerlink" title="直接使用gunicron启动"></a>直接使用gunicron启动</h4><p>gunicron需要启动后需要长期运行在后台，如果直接启动会在关闭终端后进程就被杀死，这肯定不是我们的需求，所以这里给出两种解决方式  </p>
<ol>
<li>使用Linux自带的nohup命令<br>不使用gunicorn配置文件(需进入项目目录)<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo nohup gunicorn 项目名.wsgi:application -b 127.0.0.1:8000&amp;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>使用配置文件方式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo nohup gunicorn 项目名.wsgi:application -c /home/xxx/xxx/gunicorn.conf.py&amp;</div></pre></td></tr></table></figure></p>
<ol>
<li>使用supervistor进程管理器<br>supervistor这个工具的用法这里就不在多讲，需要了解可以看我的另一篇博客<a href="http://earthchen.cn/2017/06/30/ubuntu_supervisor/">ubuntu下的进程控制系统—Supervisor</a>,也可以直接查看官方文档<br>用法可以参照我的配置文件:<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[program:x508server]</div><div class="line"><span class="built_in">command</span>=gunicorn x508server.wsgi:application -b 0.0.0.0:8000  ; 被监控的进程路径</div><div class="line">directory=/home/webserver/web/WebServer/               ; 执行前要不要先<span class="built_in">cd</span>到目录$</div><div class="line">autostart=<span class="literal">true</span>                ; 随着supervisord的启动而启动</div><div class="line">autorestart=<span class="literal">true</span>              ; 自动重启。。当然要选上了</div><div class="line">startretries=10               ; 启动失败时的最多重试次数</div><div class="line">exitcodes=0                   ; 正常退出代码</div><div class="line">stopsignal=KILL               ; 用来杀死进程的信号</div><div class="line">stopwaitsecs=10               ; 发送SIGKILL前的等待时间</div><div class="line">redirect_stderr=<span class="literal">true</span>          ; 重定向stderr到stdout</div><div class="line">stdout_logfile=/home/webserver/web/logfile.log        ; 指定日志文件</div><div class="line">; 默认为 <span class="literal">false</span>，如果设置为 <span class="literal">true</span>，当进程收到 stop 信号时，会自动将该信号发给该进$</div><div class="line">stopasgroup=<span class="literal">true</span>             ; send stop signal to the UNIX process</div><div class="line">; 默认为 <span class="literal">false</span>，如果设置为 <span class="literal">true</span>，当进程收到 <span class="built_in">kill</span> 信号时，会自动将该信号发给该进$</div><div class="line">killasgroup=<span class="literal">true</span>             ; SIGKILL the UNIX process group (def <span class="literal">false</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="启动站点"><a href="#启动站点" class="headerlink" title="启动站点"></a>启动站点</h2><ol>
<li><p>加载nginx配置文件重启nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo service nginx reload</div><div class="line">$ sudo service nginx restart </div><div class="line">//执行一种即可</div></pre></td></tr></table></figure>
</li>
<li><p>启动gunicorn</p>
</li>
</ol>
<ul>
<li><p>如果使用supervistor:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo supervisorctl reload</div></pre></td></tr></table></figure>
</li>
<li><p>如果使用nohup</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo nohup gunicorn 项目名.wsgi:application -b 127.0.0.1:8000&amp;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="特殊配置"><a href="#特殊配置" class="headerlink" title="特殊配置"></a>特殊配置</h2><ol>
<li><p>在一些前后端分离项目，可能还需要配置前端静态页面，此时就不能将所有url都转发到django了，需要配置一个前缀，但此时，django自带的后台管理也会出现问题，建议配置一个/admin,所以，最后我的配置nginx文件如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name 192.168.84.199;</div><div class="line">    server_name_in_redirect off;</div><div class="line">    access_log /home/webserver/web/nginx.access.log;</div><div class="line">    error_log /home/webserver/web/nginx.error.log;</div><div class="line"></div><div class="line">    index login.html;</div><div class="line">    root /home/webserver/web/html/WebHtml/;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location /apis &#123;</div><div class="line">        rewrite ^.+apis/?(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</div><div class="line">        proxy_pass http://127.0.0.1:8000;</div><div class="line">        proxy_pass_header       Authorization;</div><div class="line">        proxy_pass_header       WWW-Authenticate;</div><div class="line">        proxy_set_header Host <span class="variable">$host</span>;</div><div class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location /admin &#123;</div><div class="line">        proxy_pass http://127.0.0.1:8000;</div><div class="line">        proxy_pass_header       Authorization;</div><div class="line">        proxy_pass_header       WWW-Authenticate;</div><div class="line">        proxy_set_header Host <span class="variable">$host</span>;</div><div class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location /static/ &#123;</div><div class="line">        root /home/webserver/web/WebServer/;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>收集使用的admin或者其他库含有的静态文件<br>在django项目的<strong>settings.py</strong>添加如下代码:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 收集app静态文件到项目目录使nginx能访问到</span></div><div class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">"static"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 执行python manage.py collectstatic</span></div><div class="line">STATICFILES_FINDERS = (</div><div class="line">    <span class="string">"django.contrib.staticfiles.finders.FileSystemFinder"</span>,</div><div class="line">    <span class="string">"django.contrib.staticfiles.finders.AppDirectoriesFinder"</span></div><div class="line">)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>然后在终端中进入项目目录在终端执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python manage.py collectstatic</div></pre></td></tr></table></figure></p>
<p>将会自动将app中所含有的静态文件自动收集到项目的setting目录下，解决了某些app，比如admin在部署后找不到静态文件的现象</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中搭建测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu修复linux和windows双系统下挂载ntfs硬盘出错问题]]></title>
      <url>/2017/06/28/ubuntu%E4%BF%AE%E5%A4%8D%E4%B8%8D%E8%83%BD%E6%8C%82%E8%BD%BDNTFS%E7%A1%AC%E7%9B%98/</url>
      <content type="html"><![CDATA[<p>在windows和Ubuntu双系统下，在打开Windows后，在进入linux时，在去访问windows的ntfs分区经常会出现不能挂载问题，<br>出现 Error mounting /dev/sda8 at /media/my/XXX: Command-line `mount -t “ntfs” -o错误，以下给出对此的解决方案</p>
<a id="more"></a>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="安装ntfs-3g"><a href="#安装ntfs-3g" class="headerlink" title="安装ntfs-3g"></a>安装ntfs-3g</h3><p>在终端中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install ntfs-3g</div></pre></td></tr></table></figure></p>
<h3 id="修复错误"><a href="#修复错误" class="headerlink" title="修复错误"></a>修复错误</h3><p>修复挂载错误的相应的分区如提示中的/dev/sda8，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ntfsfix /dev/sda8</div></pre></td></tr></table></figure></p>
<p>基本上错误就可以解决</p>
<blockquote>
<p>注：修复windows系统盘的时候还是会失败，会提示Operation not permitted错误</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 解决方案 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[django使用django-crontab实现定时任务]]></title>
      <url>/2017/06/17/django_timing_task/</url>
      <content type="html"><![CDATA[<p>在做一个django项目的时候，我遇到了一个定时任务的需求，我这里是需要定时扫描数据库并发送邮件，在查阅相关资料后，总结出如下几个方法</p>
<ol>
<li>使用while创建一个死循环，判断时间，从而执行一些函数</li>
<li>使用APScheduler库实现定时任务 （详情可以见<a href="http://blog.csdn.net/hui3909/article/details/46652623）" target="_blank" rel="external">http://blog.csdn.net/hui3909/article/details/46652623）</a></li>
<li>django-crontab实现定时任务</li>
<li>django-celery实现定时任务</li>
</ol>
<h2 id="django-crontab实现定时任务"><a href="#django-crontab实现定时任务" class="headerlink" title="django-crontab实现定时任务"></a>django-crontab实现定时任务</h2><p>在我斟酌再三，最终还是选择了django-crontab这个方法，这个方法最契合我的需求，同时也相对简单，所以本文也就着重介绍一下</p>
<a id="more"></a>
<h3 id="django-crontab安装"><a href="#django-crontab安装" class="headerlink" title="django-crontab安装"></a>django-crontab安装</h3><h4 id="安装django-crontab库"><a href="#安装django-crontab库" class="headerlink" title="安装django-crontab库"></a>安装django-crontab库</h4><p>这里使用pip安装即可，在终端输入以下命令即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install django-crontab</div></pre></td></tr></table></figure></p>
<h4 id="在工程里使用django-crontab"><a href="#在工程里使用django-crontab" class="headerlink" title="在工程里使用django-crontab"></a>在工程里使用django-crontab</h4><p>在django项目的<strong>settings.py</strong>的<strong>INSTALLED_APPS</strong>添加django-crontab<br><img src="http://objects.earthchen.cn/django_timing_task_django-crontab%E5%AE%89%E8%A3%85.png" alt="在app中加入django-crontab"><br>如图示即可</p>
<h3 id="django-crontab配置"><a href="#django-crontab配置" class="headerlink" title="django-crontab配置"></a>django-crontab配置</h3><p>django-crontab可以定时运行自定义命令和函数两种方式</p>
<h4 id="定时函数"><a href="#定时函数" class="headerlink" title="定时函数"></a>定时函数</h4><p>在django项目的<strong>settings.py</strong>中添加以下命令<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CRONJOBS = (</div><div class="line">    (<span class="string">'*/1 * * * *'</span>, <span class="string">'你的app名.定时函数所在的py文件名.定时函数名'</span>),</div><div class="line">    (<span class="string">'0   0 1 * *'</span>, <span class="string">'你的app名.定时函数所在的py文件名.定时函数名'</span>, <span class="string">'&gt; 输出文件路径和名称'</span>),</div><div class="line">)</div></pre></td></tr></table></figure></p>
<ul>
<li>第一种的意思就是每一分钟执行一次你的定时函数</li>
<li>第二种时定时函数输出的内容到指定文件（如果该路径或文件不存在将会自动创建）</li>
</ul>
<h4 id="定时命令"><a href="#定时命令" class="headerlink" title="定时命令"></a>定时命令</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CRONJOBS = (</div><div class="line">    (<span class="string">'10 12 * * *'</span>, <span class="string">'django.core.management.call_command'</span>, [<span class="string">'要执行的命令'</span>]),</div><div class="line">)</div></pre></td></tr></table></figure>
<ul>
<li>意思是在12点10分执行命令</li>
</ul>
<h3 id="定时任务的操作"><a href="#定时任务的操作" class="headerlink" title="定时任务的操作"></a>定时任务的操作</h3><ol>
<li>python manage.py crontab add　　添加定时任务</li>
<li>python manage.py crontab remove  清除定时任务</li>
<li>python manage.py crontab show   显示定时任务</li>
</ol>
<ul>
<li>当你添加了或者修改的定时任务，只需执行命令1即可</li>
<li>如果你想删除定时任务，请执行命令2</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>当定时任务执行时，如果你只是一些输出语句，那么你将看不到任何内容。请不要怀疑没有执行</li>
<li>上述环境在<strong>ubuntu16.04 lts</strong>  <strong>django1.9</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[django-rest-framework配置json web token进行接口的认证]]></title>
      <url>/2017/06/15/django_rest_framework_jwt/</url>
      <content type="html"><![CDATA[<p>使用django-rest-framework开发api并使用json web token进行身份验证<br>在这里使用django-rest-framework-jwt这个库来帮助我们简单的使用jwt进行身份验证<br>并解决一些前后端分离而产生的跨域问题</p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装django-rest-framework"><a href="#安装django-rest-framework" class="headerlink" title="安装django-rest-framework"></a>安装django-rest-framework</h4><p>现在接口一般都是restful风格,所以我们直接使用这个框架</p>
<ol>
<li><p>在终端输入以下命令安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install djangorestframe</div></pre></td></tr></table></figure>
</li>
<li><p>在settings.py的INSTALLED_APPS中加入：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = [</div><div class="line">    ...</div><div class="line">    <span class="string">'rest_framework'</span>,</div><div class="line">    <span class="string">'rest_framework.authtoken'</span>,  <span class="comment"># 设置token</span></div><div class="line">    ...</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="安装django-rest-framework-jwt"><a href="#安装django-rest-framework-jwt" class="headerlink" title="安装django-rest-framework-jwt"></a>安装django-rest-framework-jwt</h4><p>安装jwt库，简单快速的生成我们所需要的token</p>
<ol>
<li><p>在终端输入以下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install djangorestframework-jwt</div></pre></td></tr></table></figure>
</li>
<li><p>在你的settings.py，添加JSONWebTokenAuthentication到Django REST框架DEFAULT_AUTHENTICATION_CLASSES</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># django-rest-framework设置</span></div><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">10</span>,</div><div class="line"></div><div class="line">    <span class="comment"># 设置所有接口都需要被验证</span></div><div class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: (</div><div class="line">        <span class="string">'rest_framework.permissions.IsAuthenticated'</span>,</div><div class="line">    ),</div><div class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</div><div class="line">        <span class="string">'rest_framework_jwt.authentication.JSONWebTokenAuthentication'</span>,</div><div class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</div><div class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</div><div class="line">    ),</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装django-cors-headers"><a href="#安装django-cors-headers" class="headerlink" title="安装django-cors-headers"></a>安装django-cors-headers</h3><p>解决api跨域请求有好几种方法，比如（jsonp,在apache或nginx中设置，在请求头里设置），我们这里使用这个包来方便的跨域</p>
<ol>
<li>在终端输入如下命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install django-cors-headers</div></pre></td></tr></table></figure>
</li>
</ol>
<p>2.配置settings.py文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = [</div><div class="line">    ...</div><div class="line">    <span class="string">'corsheaders'</span>，</div><div class="line">    ...</div><div class="line"> ] </div><div class="line"></div><div class="line">MIDDLEWARE_CLASSES = (</div><div class="line">    ...</div><div class="line">    <span class="string">'corsheaders.middleware.CorsMiddleware'</span>,</div><div class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>, <span class="comment"># 注意顺序</span></div><div class="line">    ...</div><div class="line">)</div><div class="line"></div><div class="line">CORS_ORIGIN_WHITELIST = (</div><div class="line">    <span class="comment">#'*'</span></div><div class="line">    <span class="string">'127.0.0.1:8080'</span>,<span class="comment"># 请求的域名</span></div><div class="line">    <span class="string">'localhost:8080'</span>,</div><div class="line">    <span class="string">'localhost'</span>,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="后端配置"><a href="#后端配置" class="headerlink" title="后端配置"></a>后端配置</h4><ol>
<li>在setting里设置token的过期时间<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line">JWT_AUTH = &#123;</div><div class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(seconds=<span class="number">300</span>),</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>当然还有很多其他相关设置，可以自己翻阅文档</p>
<ol>
<li><p>修改使用jwt验证的URL</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token</div><div class="line"></div><div class="line">url(<span class="string">r'^api-token-auth/'</span>, obtain_jwt_token),</div></pre></td></tr></table></figure>
</li>
<li><p>配置页面访问权限<br>按需设置访问权限，加上token之后基本上是不经过认证是不能查看或修改数据的</p>
</li>
</ol>
<h5 id="前端配置"><a href="#前端配置" class="headerlink" title="前端配置"></a>前端配置</h5><p>（在前端我们使用jQuery封装的ajax来操作get和post）</p>
<ol>
<li><p>使用post方法获取token并存入html的localStorage中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">post_test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $.post(<span class="string">"http://10.127.48.204:8000/api-token-auth/"</span>,&#123;</div><div class="line">            <span class="string">'username'</span>:<span class="string">'earthchen'</span>,</div><div class="line">            <span class="string">'password'</span>:<span class="string">'xxxxxxxx'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(result)&#123;</div><div class="line">                localStorage.token=result.token;  存入数据</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在请求数据时需要在头部添加token</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">headers</span>:&#123;</div><div class="line">            <span class="string">'Authorization'</span>:<span class="string">'JWT '</span>+localStorage.token  <span class="comment">//注意：jwt后面有个空格</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">type</span>:<span class="string">"get"</span>,</div><div class="line">        <span class="attr">url</span>:<span class="string">"http://10.127.48.204:8000/snippets/1/"</span>,</div><div class="line">        <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">           <span class="built_in">document</span>.write(result.style);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">&lt;script&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>存入的token如图所示<br><img src="http://objects.earthchen.cn/django-rest-framework-jwt-token.png" alt="django-rest-framework-jwt-token"></p>
<p>这时如果如果ajax请求不在head中带上token那将被禁止请求，会产生如图所示效果<br><img src="http://objects.earthchen.cn/django-rest-framework-jwt-no-token.png" alt="django-rest-framework-jwt-no-token"><br>所以在开发阶段，我们先应不让jwt拦截所有请求，这样对我们测试产生诸多不变</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong> <strong>django1.9</strong>中搭建测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring中的SpEL表达式]]></title>
      <url>/2017/06/12/spring_SpEL/</url>
      <content type="html"><![CDATA[<p>Spring 3引入了Spring表达式语言（ Spring Expression Language，SpEL），它能够以一种强大和简洁的方式将值装配到bean属性和构造器参数中，在这个过程中所使用的表达式会在运行时计算得到值</p>
<p>SpEL拥有很多特性，包括：</p>
<ul>
<li>使用bean的ID来引用bean</li>
<li>调用方法和访问对象的属性</li>
<li>对值进行算术、关系和逻辑运算</li>
<li>正则表达式匹配</li>
<li>集合操作</li>
</ul>
<a id="more"></a>
<h2 id="SpEL基础表达式"><a href="#SpEL基础表达式" class="headerlink" title="SpEL基础表达式"></a>SpEL基础表达式</h2><h3 id="表示字面值"><a href="#表示字面值" class="headerlink" title="表示字面值"></a>表示字面值</h3><h4 id="表示是浮点值"><a href="#表示是浮点值" class="headerlink" title="表示是浮点值"></a>表示是浮点值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;3.1415&#125;</span></div></pre></td></tr></table></figure>
<p>数值还可以使用科学记数法的方式进行表示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;9.87E4&#125;</span></div></pre></td></tr></table></figure></p>
<p>表达式计算得到的值就是98,700</p>
<h4 id="用来计算String类型的字面值"><a href="#用来计算String类型的字面值" class="headerlink" title="用来计算String类型的字面值"></a>用来计算String类型的字面值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;'HELLO'&#125;</span></div></pre></td></tr></table></figure>
<h4 id="字面值true和false的计算结果就是它们对应的Boolean类型的值"><a href="#字面值true和false的计算结果就是它们对应的Boolean类型的值" class="headerlink" title="字面值true和false的计算结果就是它们对应的Boolean类型的值"></a>字面值true和false的计算结果就是它们对应的Boolean类型的值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;flase&#125;</span></div></pre></td></tr></table></figure>
<h3 id="引用bean、属性和方法"><a href="#引用bean、属性和方法" class="headerlink" title="引用bean、属性和方法"></a>引用bean、属性和方法</h3><p>SpEL所能做的另外一件基础的事情就是通过ID引用其他的bean。例如，你可以使用SpEL将一个bean装配到另外一个bean的属性中</p>
<h4 id="使用bean-ID作为SpEL表达式"><a href="#使用bean-ID作为SpEL表达式" class="headerlink" title="使用bean ID作为SpEL表达式"></a>使用bean ID作为SpEL表达式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;sgtPeppers&#125;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>sgtPeppers为beanID</p>
</blockquote>
<h4 id="引用sgtPeppers的artist属性"><a href="#引用sgtPeppers的artist属性" class="headerlink" title="引用sgtPeppers的artist属性"></a>引用sgtPeppers的artist属性</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;sgtPeppers.artist&#125;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>引用了一个ID为sgtPeppers的bean，分割符之后是对artist属性的引用</p>
</blockquote>
<h4 id="调用-artistSelector的selectArtist-方法"><a href="#调用-artistSelector的selectArtist-方法" class="headerlink" title="调用 artistSelector的selectArtist()方法"></a>调用 artistSelector的selectArtist()方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;artistSelector.selectArtist()&#125;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>引用了一个ID为artistSelector的bean，调用bean的selectArtist()方法</p>
</blockquote>
<p>对于被调用方法的返回值来说，我们同样可以调用它的方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;artistSelector.selectArtist().toUpperCase()&#125;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>如果selectArtist()方法返回的是一个String，那么可以调<br>用toUpperCase()将字符串全部改成大写</p>
</blockquote>
<p>如果selectArtist()的返回值是null的话，将会出现NullPointerException异常，我们可以使用类型安全的运算符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;artistSelector.selectArtist()?.toUpperCase()&#125;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>与之前只是使用点号（ .）来访问toUpperCase()方法不同，现在我们使用了“?.”运算符。这个运算符能够在访问它右边的内容之前，确保它所对应的元素不是null。所以，如果selectArtist()的返回值是null的话，那么SpEL将不会调用toUpperCase()方法。表达式的返回值会是null</p>
</blockquote>
<h3 id="在表达式中使用类型"><a href="#在表达式中使用类型" class="headerlink" title="在表达式中使用类型"></a>在表达式中使用类型</h3><blockquote>
<p>如果要在SpEL中访问类作用域的方法和常量的话，要依赖T()这个关键的运算符</p>
</blockquote>
<h4 id="为了在SpEL中表达Java的Math类，需要按照如下的方式使用T-运算符"><a href="#为了在SpEL中表达Java的Math类，需要按照如下的方式使用T-运算符" class="headerlink" title="为了在SpEL中表达Java的Math类，需要按照如下的方式使用T()运算符"></a>为了在SpEL中表达Java的Math类，需要按照如下的方式使用T()运算符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">T(java.lang.Math).PI</div></pre></td></tr></table></figure>
<blockquote>
<p>将PI值装配到bean属性中</p>
</blockquote>
<h4 id="可以调用T-运算符所得到类型的静态方法"><a href="#可以调用T-运算符所得到类型的静态方法" class="headerlink" title="可以调用T()运算符所得到类型的静态方法:"></a>可以调用T()运算符所得到类型的静态方法:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">T(java.lang.Math).random()</div></pre></td></tr></table></figure>
<blockquote>
<p>计算得到一个0到1之间的随机数</p>
</blockquote>
<h3 id="SpEL运算符"><a href="#SpEL运算符" class="headerlink" title="SpEL运算符"></a>SpEL运算符</h3><p>将简单的表达式组合为更为复杂的表达式</p>
<h4 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;T(java.lang.Math).PI  * circle.radius ^ 2&#125;</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>计算了circle bean中所定义圆的面积</li>
<li>当使用String类型的值时， “+”运算符执行的是连接操作，与在Java中是一样的</li>
</ul>
</blockquote>
<h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;counter.total == 100&#125;</span></div><div class="line"><span class="comment">#&#123;counter.total eq 100&#125;</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>要比较两个数字是不是相等，可以使用双等号运算符</li>
<li>也可以使用文本型的eq运算符</li>
<li>表达式的计算结果是个Boolean值</li>
</ul>
</blockquote>
<h3 id="三元运算符（-ternary）"><a href="#三元运算符（-ternary）" class="headerlink" title="三元运算符（ ternary）"></a>三元运算符（ ternary）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;scoreboard.score &gt; 1000 ? "winner" : "loser"&#125;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>判断如果scoreboard.score&gt;1000的话，计算结果为String类的“Winner！ ”，否则的话，结果为Loser</p>
</blockquote>
<p> 三元运算符的一个常见场景就是检查null值，并用一个默认值来替代null<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;disc.title ?: 'Rattleand Hum'&#125;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>会判断disc.title的值是不是null，如果是null的话，那么表达式的计算结果就会是“Rattleand Hum”</p>
</blockquote>
<h3 id="计算正则表达式"><a href="#计算正则表达式" class="headerlink" title="计算正则表达式"></a>计算正则表达式</h3><p>当处理文本时，有时检查文本是否匹配某种模式是非常有用的。SpEL通过matches运算符支持表达式中的模式匹配。 matches运算<br>符对String类型的文本（作为左边参数）应用正则表达式（作为右边参数）。 matches的运算结果会返回一个Boolean类型的值：如果与<br>正则表达式相匹配，则返回true；否则返回false<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;admin.email matches '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9._%+-]+\\.com'&#125;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>判断一个字符串是否包含有效的邮件地址</p>
</blockquote>
<h3 id="计算集合"><a href="#计算集合" class="headerlink" title="计算集合"></a>计算集合</h3><h4 id="引用列表中的一个元素"><a href="#引用列表中的一个元素" class="headerlink" title="引用列表中的一个元素"></a>引用列表中的一个元素</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;jukebox.song[4].title&#125;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>计算songs集合中第五个（基于零开始）元素的title属性，这个集合来源于ID为jukebox bean</p>
<h4 id="从jukebox中随机选择"><a href="#从jukebox中随机选择" class="headerlink" title="从jukebox中随机选择"></a>从jukebox中随机选择</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;jukebox.song [T(java.lang.Math).random()  * jukebox.songs.size() ].title&#125;</span></div></pre></td></tr></table></figure>
</blockquote>
<p>“[]”运算符用来从集合或数组中按照索引获取元素，实际上，它还可以从String中获取一个字符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;'this is a test' [3]&#125;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>引用了String中的第四个（基于零开始）字符，也就是“s”</p>
</blockquote>
<h4 id="查询运算符（-）"><a href="#查询运算符（-）" class="headerlink" title="查询运算符（ .?[]）"></a>查询运算符（ .?[]）</h4><p>用来对集合进行过滤，得到集合的一个子集<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#&#123;jukebox.songs.?[artist eq 'Aerosmith']&#125;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>希望得到jukebox中artist属性为Aerosmith的所有歌曲,选择运算符在它的方括号中接受另一个表达式。当SpEL迭代歌曲列表的时候，会对歌曲集合中的每一个条目计算这个表达式。如果表达式的计算结果为true的话，那么条目会放到新的集合中。否则的话，它就不会放到新集合中。在本例中，内部的表达式会检查歌曲的artist属性是不是等于Aerosmith</li>
<li>“.^[]”和“.$[]”，它们分别用来在集合中查询第一个匹配项和最后一个匹配项</li>
<li>投影运算符（ .![]），它会从集合的每个成员中选择特定的属性放到另外一个集合中</li>
</ul>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[django-rest-framework框架学习]]></title>
      <url>/2017/06/12/django_rest_framework_study/</url>
      <content type="html"><![CDATA[<p>现在新一代web应用都开始采用前后端分离的方式来进行，淘汰了以前的服务器端渲染的方式。前后端分离方式有许多好处，比如<br>1、可以前后端并行开发，提高开发效率<br>2、页面都在客户端进行渲染，提高了渲染速度，减小了服务器的压力<br>3、一套api提供给多个客户端使用，而且不限制客户端的类型（web，app均可）</p>
<p>提到前后端分离必然会提到restful，目标这是最流行的接口规范，想要了解的可以去<a href="http://www.ruanyifeng.com/blog/2011/09/restful" target="_blank" rel="external">阮老师的博客</a>看一下<br>越来越多的大型应用开始使用restful规范，restful强调一种无状态，资源的方式<br>在django中很著名的一个框架是django-rest-framework，帮我们减少了很多工作量，尤其在序列化与反序列化成我们需要的格式帮了我们省了很多事<br>在这里就记录一下个人的学习过程</p>
<h2 id="django-rest-framework"><a href="#django-rest-framework" class="headerlink" title="django-rest-framework"></a>django-rest-framework</h2><a id="more"></a>
<h3 id="实现一组api的基本流程"><a href="#实现一组api的基本流程" class="headerlink" title="实现一组api的基本流程"></a>实现一组api的基本流程</h3><ol>
<li>在<strong>models.py</strong>中创建自己需要的数据模型</li>
<li>创建<strong>serializers.py</strong>在其中写出适合的serializer类，能够正确的序列化与反序列化</li>
<li>在<strong>views.py</strong>中写出合适的api类，只需要继承<strong>rest_framework</strong>中<strong>generics</strong>中的某个类，重写我们需要的方法实现合适的逻辑即可</li>
<li>在<strong>urls.py</strong>中配置所需要的url</li>
</ol>
<h3 id="一组api的demo"><a href="#一组api的demo" class="headerlink" title="一组api的demo"></a>一组api的demo</h3><h4 id="创建一个model"><a href="#创建一个model" class="headerlink" title="创建一个model"></a>创建一个model</h4><p>在创建好的app下的<strong>model.py</strong>中创建一个student模型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></div><div class="line">    student_id = models.IntegerField()</div><div class="line">    name = models.CharField(max_length=<span class="number">20</span>)</div><div class="line">    age = models.IntegerField()</div></pre></td></tr></table></figure></p>
<p>例子很简单，三个字段，分别表示学号，姓名，年龄</p>
<p>然后同步数据库，在数据库中创建表<br>在终端中输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python manage.py makemigrations</div><div class="line"></div><div class="line">python manage.py migrate</div></pre></td></tr></table></figure></p>
<p>在数据库里插入几条测试数据后如图所示<br><img src="http://objects.earthchen.cn/django_rest_framework_study_student_model.png" alt="django_rest_framework_study_student_model"></p>
<h4 id="实现序列化类"><a href="#实现序列化类" class="headerlink" title="实现序列化类"></a>实现序列化类</h4><p>官方文档：<a href="http://www.django-rest-framework.org/api-guide/serializers/" target="_blank" rel="external">http://www.django-rest-framework.org/api-guide/serializers/</a><br>创建<strong>serializers.py</strong>在其中实现序列化类<br>由于这个序列化是和我们的模型想对应的相关，所以可以直接继承<strong>serializers.ModelSerializer</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Student</div><div class="line">        fields = (<span class="string">'id'</span>, <span class="string">'student_id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>)</div></pre></td></tr></table></figure></p>
<p>其他相关的参数可以查阅官方文档，都有详细的介绍<br>这里我们只简单的显示所有的字段</p>
<h4 id="实现视图api类"><a href="#实现视图api类" class="headerlink" title="实现视图api类"></a>实现视图api类</h4><p>官方文档： <a href="http://www.django-rest-framework.org/api-guide/generic-views/" target="_blank" rel="external">http://www.django-rest-framework.org/api-guide/generic-views/</a></p>
<p>在这里只需要继承相关的类，复写父类方法即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 学生列表</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentList</span><span class="params">(generics.ListCreateAPIView)</span>:</span></div><div class="line">    queryset = Student.objects.all()</div><div class="line">    serializer_class = StudentSerializer</div><div class="line"></div><div class="line">    <span class="comment"># 创建一个student</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        serializer = StudentSerializer(data=request.data)</div><div class="line">        <span class="keyword">if</span> serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</div><div class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div><div class="line">        </div><div class="line"><span class="comment"># 单个学生</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDetail</span><span class="params">(generics.RetrieveUpdateAPIView)</span>:</span></div><div class="line">    serializer_class = StudentSerializer</div><div class="line">    queryset = Student.objects.all()</div><div class="line">    lookup_field = <span class="string">'name'</span></div><div class="line"></div><div class="line">    <span class="comment"># 得到一个数据集</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> Student.objects.filter(name=self.kwargs[<span class="string">'name'</span>])</div><div class="line"></div><div class="line">    <span class="comment"># get方法返回一个student</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="comment"># 获取url中的参数</span></div><div class="line">        <span class="comment"># http://127.0.0.1:8000/api/students/aaa/?test=123</span></div><div class="line">        <span class="comment"># 取test的值</span></div><div class="line">        print(self.request.GET.get(<span class="string">'test'</span>, <span class="keyword">None</span>))</div><div class="line"></div><div class="line">        queryset = self.get_queryset()</div><div class="line">        serializer = StudentSerializer(queryset, many=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span> Response(&#123;</div><div class="line">            <span class="string">'data'</span>: serializer.data,</div><div class="line">            <span class="comment">#'sorce': StudentSorceSerializer(StudentSorce.objects.all(), many=True).data</span></div><div class="line">        &#125;)</div><div class="line"></div><div class="line">    <span class="comment"># 更新某一个学生的信息</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>其实默认最少只要实现两个参数或方法即可<strong>queryset</strong>和<strong>serializer_class</strong><br>但很多时候逻辑需要自己处理，必须按照自己的逻辑去复写父类属性<br>在get方法中的self.request.GET.get(‘test’, None)是取出get方法传递的参数<br>lookup_field 应用于执行单个模型实例的对象查找的模型字段。默认为’pk’。请注意，使用超链接的API时，您需要确保双方的API意见和串行类设置查找字段，如果你需要使用一个自定义值<br>在get_queryset()中实现的是按照name查询的，因为很多时候客户端并不知道自己的id是多少，<br><strong>serializer.data</strong>是对模型序列化成的字典，如果想拼成需要的格式，需要提前构造合适的字典，在用Response()方法帮我们序列化成json类型</p>
<h4 id="在urls中自定义资源的url"><a href="#在urls中自定义资源的url" class="headerlink" title="在urls中自定义资源的url"></a>在urls中自定义资源的url</h4><p>在<strong>urls.py</strong>中输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> StudentList, StudentDetail</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'students/$'</span>, StudentList.as_view()),</div><div class="line">    url(<span class="string">r'students/(?P&lt;name&gt;[a-zA-Z]+)/$'</span>, StudentDetail.as_view()),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>分别配置好对列表和单个的url</p>
<p>然后运行项目就可以看到我们需要的数据</p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>在原来的基础上进行了扩展，在显示学生信息的基础上，我们还想显示该名学生的成绩<br>所以新的<strong>model.py</strong>为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></div><div class="line">    student_id = models.IntegerField()</div><div class="line">    name = models.CharField(max_length=<span class="number">20</span>)</div><div class="line">    age = models.IntegerField()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentSorce</span><span class="params">(models.Model)</span>:</span></div><div class="line">    student_id = models.IntegerField()</div><div class="line">    math = models.FloatField()</div><div class="line">    english = models.FloatField()</div><div class="line">    chiness = models.FloatField()</div></pre></td></tr></table></figure></p>
<p>我们在这里没有使用外键，毕竟现在很多大牛说不使用外键，在应用中控制逻辑嘛<br>当然这里也可以使用models.ForeignKey,会让操作变得更简单的一点</p>
<p><strong>serializers.py</strong>为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">from rest_framework import serializers</div><div class="line">from api.models import Student, StudentSorce</div><div class="line"></div><div class="line">class StudentSorceSerializer(serializers.ModelSerializer):</div><div class="line">    avg = serializers.SerializerMethodField(&apos;get_avg_sorce&apos;)</div><div class="line"></div><div class="line">    class Meta:</div><div class="line">        model = StudentSorce</div><div class="line">        fields = (&apos;math&apos;, &apos;english&apos;, &apos;chiness&apos;, &apos;avg&apos;)</div><div class="line">    # 自定义方法构造的字段(计算成绩的平均值)</div><div class="line">    def get_avg_sorce(self, obj):</div><div class="line">        return (obj.math + obj.english + obj.chiness) / 3.0</div><div class="line"></div><div class="line">class StudentSerializer(serializers.ModelSerializer):</div><div class="line">    sorce = serializers.SerializerMethodField(&apos;get_student_sorce&apos;)</div><div class="line"></div><div class="line">    class Meta:</div><div class="line">        model = Student</div><div class="line">        fields = (&apos;id&apos;, &apos;student_id&apos;, &apos;name&apos;, &apos;age&apos;, &apos;sorce&apos;)</div><div class="line">    # 使用学号查出该学生的成绩</div><div class="line">    def get_student_sorce(self, obj):</div><div class="line">        print obj.student_id</div><div class="line">        return StudentSorceSerializer(StudentSorce.objects.filter(student_id=obj.student_id), many=True).data</div></pre></td></tr></table></figure></p>
<p><strong>views.py</strong>为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</div><div class="line"><span class="keyword">from</span> api.serializers <span class="keyword">import</span> StudentSerializer</div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Student, StudentSorce</div><div class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</div><div class="line"><span class="keyword">from</span> api.serializers <span class="keyword">import</span> StudentSorceSerializer</div><div class="line"></div><div class="line"><span class="comment"># 学生列表</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentList</span><span class="params">(generics.ListCreateAPIView)</span>:</span></div><div class="line">    queryset = Student.objects.all()</div><div class="line">    serializer_class = StudentSerializer</div><div class="line"></div><div class="line">    <span class="comment"># 创建一个student</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        serializer = StudentSerializer(data=request.data)</div><div class="line">        <span class="keyword">if</span> serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</div><div class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div><div class="line"></div><div class="line">    <span class="string">'''</span></div><div class="line">    def list(self, request, *args, **kwargs):</div><div class="line">        print('list')</div><div class="line">        return Response(StudentSerializer(Student.objects.filter(student_id__gt=102), many=True).data)</div><div class="line">        '''</div><div class="line"></div><div class="line"><span class="comment"># 单个学生</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDetail</span><span class="params">(generics.RetrieveUpdateAPIView)</span>:</span></div><div class="line">    serializer_class = StudentSerializer</div><div class="line">    queryset = Student.objects.all()</div><div class="line">    lookup_field = <span class="string">'name'</span></div><div class="line"></div><div class="line">    <span class="comment"># 得到一个数据集</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> Student.objects.filter(name=self.kwargs[<span class="string">'name'</span>])</div><div class="line"></div><div class="line">    <span class="comment"># get方法返回一个student</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="comment"># 获取url中的参数</span></div><div class="line">        <span class="comment"># http://127.0.0.1:8000/api/students/aaa/?test=123</span></div><div class="line">        <span class="comment"># 取test的值</span></div><div class="line">        print(self.request.GET.get(<span class="string">'test'</span>, <span class="keyword">None</span>))</div><div class="line"></div><div class="line">        queryset = self.get_queryset()</div><div class="line">        serializer = StudentSerializer(queryset, many=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span> Response(&#123;</div><div class="line">            <span class="string">'data'</span>: serializer.data,</div><div class="line">            <span class="string">'sorce'</span>: StudentSorceSerializer(StudentSorce.objects.all(), many=<span class="keyword">True</span>).data</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">    <span class="comment"># 更新某一个学生的信息</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>访问<a href="http://127.0.0.1:8000/api/students/的结果为：" target="_blank" rel="external">http://127.0.0.1:8000/api/students/的结果为：</a><br><img src="http://objects.earthchen.cn/django_rest_framwork_study_listresult.png" alt="django_rest_framwork_study_listresult"><br>访问<a href="http://127.0.0.1:8000/api/students/aaa/的结果为：" target="_blank" rel="external">http://127.0.0.1:8000/api/students/aaa/的结果为：</a><br><img src="http://objects.earthchen.cn/django_rest_framework_study_detailresult.png" alt="django_rest_framework_study_detailresult"></p>
<h3 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h3><p>官方文档：<a href="http://www.django-rest-framework.org/api-guide/serializers/" target="_blank" rel="external">http://www.django-rest-framework.org/api-guide/serializers/</a><br>在这里我们使用django自带的auth模块<br>只需要修改serializer.py和view.py和urls.py三个文件即可<br><strong>serializers.py</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</div><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountFrom</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, email, username, password, repeat_password)</span>:</span></div><div class="line">        self.email = email</div><div class="line">        self.username = username</div><div class="line">        self.password = password</div><div class="line">        self.repeat_password = repeat_password</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountSerializer</span><span class="params">(serializers.Serializer)</span>:</span></div><div class="line">    email = serializers.EmailField()</div><div class="line">    username = serializers.CharField()</div><div class="line">    password = serializers.CharField()</div><div class="line">    repeat_password = serializers.CharField()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span></div><div class="line">        User.objects.create_user(username=validated_data.get(<span class="string">'username'</span>),</div><div class="line">                                 email=validated_data.get(<span class="string">'email'</span>),</div><div class="line">                                 password=validated_data.get(<span class="string">'password'</span>))</div><div class="line">        <span class="keyword">return</span> AccountFrom(username=validated_data.get(<span class="string">'username'</span>),</div><div class="line">                           email=validated_data.get(<span class="string">'email'</span>),</div><div class="line">                           password=validated_data.get(<span class="string">'password'</span>),</div><div class="line">                           repeat_password=validated_data.get(<span class="string">'repeat_password'</span>))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, instance, validated_data)</span>:</span></div><div class="line">        instance.email = validated_data.get(<span class="string">'email'</span>, instance.email)</div><div class="line">        instance.username = validated_data.get(<span class="string">'username'</span>, instance.username)</div><div class="line">        instance.password = validated_data.get(<span class="string">'password'</span>, instance.password)</div><div class="line">        <span class="comment"># User.objects.update()</span></div><div class="line">        instance.save()</div><div class="line">        <span class="keyword">return</span> instance</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_email</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            result_email = User.objects.get(email=value)</div><div class="line">        <span class="keyword">except</span> User.DoesNotExist:</div><div class="line">            <span class="keyword">return</span> value</div><div class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">'该邮箱已注册'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_password</span><span class="params">(self, value)</span>:</span></div><div class="line">        self.password = value</div><div class="line">        <span class="keyword">if</span> re.match(<span class="string">'^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]&#123;6,20&#125;$'</span>, value):</div><div class="line">            <span class="keyword">return</span> value</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">'密码必须由6-20个字母和数字组成'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_repeat_password</span><span class="params">(self, value)</span>:</span></div><div class="line">        self.repeat_password = value</div><div class="line">        <span class="keyword">if</span> self.password <span class="keyword">and</span> value <span class="keyword">and</span> self.password != value:</div><div class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"两次输入的值不相同"</span>)</div><div class="line">        <span class="keyword">return</span> value</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_username</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> re.match(<span class="string">"^[A-Za-z][A-Za-z0-9_.]*$"</span>, value):</div><div class="line">            <span class="keyword">return</span> value</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"用户名只能有数字字母下划线组成"</span>)</div></pre></td></tr></table></figure></p>
<p>以validate_开头后面接字段名的函数均为验证函数，如果不符合验证规则，将返回异常信息</p>
<p><strong>views.py</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 注册模块</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountDetail</span><span class="params">(generics.CreateAPIView)</span>:</span></div><div class="line">    serializer_class = AccountSerializer</div><div class="line">    queryset = User.objects.all()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        serializer = AccountSerializer(data=request.data, partial=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">if</span> serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</div><div class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div></pre></td></tr></table></figure></p>
<p>继承generics.CreateAPIView只允许http的post方法<br>这里只简单实现了用户注册</p>
<p><strong>url.py</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'register/$'</span>, AccountDetail.as_view()),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>访问<a href="http://127.0.0.1:8000/account/register，提供合法的email、username、password、repeat_password将会创建一个账户" target="_blank" rel="external">http://127.0.0.1:8000/account/register，提供合法的email、username、password、repeat_password将会创建一个账户</a></p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong> <strong>django1.9</strong> <strong>djangorestframework3.6.2</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git学习笔记]]></title>
      <url>/2017/06/08/git_study/</url>
      <content type="html"><![CDATA[<p>git是目前好用的版本控制系统，本文记录一下笔者的git学习过程<br>注册github和安装git这个就不多说了</p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><a id="more"></a>
<h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>也就是我们需要被git管理起来的项目或文件</p>
<ol>
<li><p>在终端使用cd进入需要被管理的目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> study/git_learn</div></pre></td></tr></table></figure>
</li>
<li><p>创建版本仓库 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure>
</li>
</ol>
<p>成功之后执行<strong>ls -al</strong>将能看到目录下多了一个.git隐藏文件夹<br><img src="http://objects.earthchen.cn/git_study_%E5%88%9B%E5%BB%BA%E7%89%88%E6%9C%AC%E5%BA%93.png" alt="git_study_创建版本库"></p>
<ol>
<li><p>创建文件添加到仓库<br>创建一个<strong>readme.txt</strong>随便写入一些内容并添加到仓库中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vim readme.txt</div><div class="line">$ git add readme.txt</div></pre></td></tr></table></figure>
</li>
<li><p>把文件提交到仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"添加一个readme文件"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>完成上面两部就完成了文件添加到仓库<br><img src="http://objects.earthchen.cn/git_study_%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%88%B0%E7%89%88%E6%9C%AC%E5%BA%93.png" alt="git_study_添加文件到版本库"></p>
<h3 id="版本更新与回退"><a href="#版本更新与回退" class="headerlink" title="版本更新与回退"></a>版本更新与回退</h3><h4 id="查看状态和差异"><a href="#查看状态和差异" class="headerlink" title="查看状态和差异"></a>查看状态和差异</h4><ol>
<li><p>使用<strong>git status</strong>创建当前仓库的状态<br>先对创建的readme.txt进行一些修改，在在终端执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure>
</li>
<li><p>使用<strong>git diff</strong>查看差异</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://objects.earthchen.cn/git_study_%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E4%B8%8E%E5%B7%AE%E5%BC%82.png" alt="git_study_查看状态和差异"></p>
<h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><ol>
<li><p>对之前的修改进行提交</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add readme.txt</div><div class="line">$ git commit -m <span class="string">"对readme进行修改"</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用<strong>git log</strong>查看操作的历史记录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://objects.earthchen.cn/git_study_%E6%9F%A5%E7%9C%8B%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95.png" alt="git_study_查看历史记录"></p>
<ol>
<li>使用<strong>git reset</strong>回到上一个版本<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard HEAD^</div></pre></td></tr></table></figure>
</li>
</ol>
<p>回到上上个版本就是<strong>HEAD^^</strong><br>回到n个版本就是<strong>HEAD~n</strong></p>
<ol>
<li><p>根据<strong>commit id</strong>到达指定版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard 576e22b9</div></pre></td></tr></table></figure>
</li>
<li><p>使用<strong>git reflog</strong>查看每一次记录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reflog</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://objects.earthchen.cn/git_study_%E5%8F%98%E6%9B%B4%E7%89%88%E6%9C%AC.png" alt="git_study_变更版本"></p>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>使用<strong>git rm</strong>删除文件和工作区中的文件<br>如果真的要删除文件和工作区里的文件需执行<strong>git rm</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rm test.txt</div><div class="line">$ git rm test.txt</div></pre></td></tr></table></figure></p>
<p><img src="http://objects.earthchen.cn/git_study_%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6.png" alt="git_study_删除文件"></p>
<h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>创建秘钥和远程仓库的过程在这里就不多说了</p>
<h4 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h4><ol>
<li>使用<strong>git remote</strong>关联远程仓库<br>在本地的仓库目录下输入以下命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add git_leran git@github.com:EarthChen/git_learn.git</div></pre></td></tr></table></figure>
</li>
</ol>
<p>很多教程里面写的是<strong>add origin</strong>又没解释一下，容易让人误解，以为所有远程仓库都是这一个名字，当你管理不止一个远程仓库时，就会产生冲突了<br>还是说清楚比较好，这里的名字只是远程仓库的一个别名，需注意</p>
<ol>
<li>使用<strong>git push</strong>命令推送到远程库<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push -u git_learn master</div></pre></td></tr></table></figure>
</li>
</ol>
<p>在github上创建仓库时，一般都会选择创建一个readme.md文件，此时远程仓库和本地就不同步，需先执行一下<strong>git pull</strong>命令<br>可以看到在推送的时候加上了<strong>git push -u</strong>参数，此时Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令</p>
<p>在以后的提交中，就只需要使用<strong>git push git_learn master</strong>就可以进行推送了<br><img src="http://objects.earthchen.cn/git_study_%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="git_study_添加远程仓库"></p>
<h4 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h4><p>使用<strong>git clone</strong>命令进行克隆<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:EarthChen/git_learn.git</div></pre></td></tr></table></figure></p>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><ol>
<li>使用<strong>git checkout</strong>命令创建并切换到分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b dev</div></pre></td></tr></table></figure>
</li>
</ol>
<p>加上参数-b表示创建一个名为dev的分支，病切换到这个分支<br>在dev上进行一些操作并提交</p>
<ol>
<li>使用<strong>git branch</strong>命令查看分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>前面有*的为当前分支</li>
</ul>
<ol>
<li>使用<strong>git merge</strong>命令合并分支<br>先切换回master分支，然后合并分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge dev</div></pre></td></tr></table></figure>
</li>
</ol>
<p>将dev分支和master分支合并</p>
<ol>
<li>使用<strong>git branch -d</strong>删除分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge dev</div></pre></td></tr></table></figure>
</li>
</ol>
<p>删除dev分支<br><img src="http://objects.earthchen.cn/git_study_%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C.png" alt="git_study_分支操作"></p>
<ol>
<li>强制禁用Fast forward模式合并分支<br>Git会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息<br>首先需要创建一个新的分支，子啊这个新的分支里面进行一些操作，病提交，然后切换回master分支</li>
</ol>
<p>使用禁用Fast forward模式合并分支<br>准备合并dev分支，请注意–no-ff参数，表示禁用Fast forward：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev</div></pre></td></tr></table></figure></p>
<p>因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去<br>然后使用<strong>git log</strong>查看分支历史<br><img src="http://objects.earthchen.cn/git_study_%E7%A6%81%E7%94%A8Fast_forward.png" alt="git_study_禁用Fast_forward"></p>
<h4 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h4><p>这个分支的意义就是添加一些新功能时，创建一个新分支，在新分支上实现功能，最后在合并到master分支</p>
<ol>
<li>创建新分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b feature-vulcan</div></pre></td></tr></table></figure>
</li>
</ol>
<p>切换回dev分支</p>
<ol>
<li>在未合并分支前就要删除分支<br>使用<strong>git branch -D <name></name></strong>强行删除分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -D feature-vulcan</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://objects.earthchen.cn/git_study_Feature%E5%88%86%E6%94%AF.png" alt="git_study_Feature分支"></p>
<h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><ol>
<li>使用<strong>git tag tag_name</strong>命令创建标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag v1.0</div></pre></td></tr></table></figure>
</li>
</ol>
<p>git tag后面不加参数就可以查看标签<br>默认标签是打在最新提交的commit上的<br>也可以指定标签打在的位置（commit）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag v0.9</div></pre></td></tr></table></figure></p>
<ol>
<li>使用<strong>git tag -d</strong>删除标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag v1.0</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h3><ol>
<li>创建.gitignore文件，填写忽略文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python:</span></div><div class="line">*.py[cod]</div><div class="line">*.so</div><div class="line">*.egg</div><div class="line">*.egg-info</div><div class="line">dist</div><div class="line">build</div></pre></td></tr></table></figure>
</li>
</ol>
<p>然后提交就git就会把所配置忽略的文件进行忽略</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[资源收集共享]]></title>
      <url>/2017/06/03/%E8%B5%84%E6%BA%90%E6%94%B6%E9%9B%86/</url>
      <content type="html"><![CDATA[<p>日常发现好资源，在此记录下，长期更新</p>
<a id="more"></a>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h2><p>Spring MVC实战系列教程 - <a href="http://www.mkking.com/spring-mvc-tutorials/?utm_source=qq&amp;utm_medium=social" target="_blank" rel="external">http://www.mkking.com/spring-mvc-tutorials/?utm_source=qq&amp;utm_medium=social</a></p>
<p>跟我学SpringMVC目录汇总贴、PDF下载、源码下载 - 开涛的博客—公众号：kaitao-1234567，一如既往的干货分享 - ITeye技术网站 - <a href="http://jinnianshilongnian.iteye.com/blog/1752171?utm_source=qq&amp;utm_medium=social" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/blog/1752171?utm_source=qq&amp;utm_medium=social</a></p>
<p>[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis整合之路（分享自知乎网）<a href="https://zhuanlan.zhihu.com/p/27221566?utm_source=qq&amp;utm_medium=social" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/27221566?utm_source=qq&amp;utm_medium=social</a></p>
<p>spring 4.x中文文档  <a href="https://waylau.gitbooks.io/spring-framework-4-reference/I.%20Overview%20of%20Spring%20Framework/2.%20Introduction%20to%20the%20Spring%20Framework.html" target="_blank" rel="external">https://waylau.gitbooks.io/spring-framework-4-reference/I.%20Overview%20of%20Spring%20Framework/2.%20Introduction%20to%20the%20Spring%20Framework.html</a></p>
<p>Spring MVC 4.2.4.RELEASE 中文文档    <a href="https://www.gitbook.com/book/linesh/spring-mvc-documentation-linesh-translation/details" target="_blank" rel="external">https://www.gitbook.com/book/linesh/spring-mvc-documentation-linesh-translation/details</a></p>
<p>Spring Boot实战系列<br><a href="http://blog.csdn.net/column/details/15149.html" target="_blank" rel="external">http://blog.csdn.net/column/details/15149.html</a></p>
<h2 id="Mybaits"><a href="#Mybaits" class="headerlink" title="Mybaits"></a>Mybaits</h2><p>Mybaits学习笔记  <a href="http://www.cnblogs.com/hellokitty1/p/5216025.html" target="_blank" rel="external">http://www.cnblogs.com/hellokitty1/p/5216025.html</a></p>
<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p>Redis 教程  <a href="http://www.redis.net.cn/tutorial/3501.html" target="_blank" rel="external">http://www.redis.net.cn/tutorial/3501.html</a></p>
<h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p>java相关视频文档 <a href="http://www.java1234.com/a/javabook/" target="_blank" rel="external">http://www.java1234.com/a/javabook/</a></p>
<h2 id="django"><a href="#django" class="headerlink" title="django"></a>django</h2><p>nginx,uwsgi,部署django，静态文件不生效问题   <a href="https://m.baidu.com/from=1086k/bd_page_type=1/ssid=0/uid=0/pu=usm%401%2Csz%401320_1002%2Cta%40iphone_2_7.1_2_7.5/baiduid=3CEF6030D65FCF6BA8DBB5BD59F44A3B/w=0_10_/t=iphone/l=3/tc?ref=www_iphone&amp;lid=10820820000369633659&amp;order=2&amp;fm=alop&amp;tj=www_normal_2_0_10_title&amp;vit=osres&amp;m=8&amp;srd=1&amp;cltj=cloud_title&amp;asres=1&amp;title=nginx%2Cuwsgi%2C%E9%83%A8%E7%BD%B2django%2C%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98..._%E5%8D%9A%E5%AE%A2%E5%9B%AD&amp;dict=30&amp;w_qd=IlPT2AEptyoA_yi6Jk_jHCxswQHOL0obxVsWe4vR8wAsPO56TVRby93&amp;sec=21472&amp;di=7147f5f9d3785788&amp;bdenc=1&amp;tch=124.0.77.286.0.0&amp;nsrc=IlPT2AEptyoA_yixCFOxXnANedT62v3IEQGG_ytK1DK6mlrte4viZQRAUTLu0WiCEUDsuSPQpt5Ywk_h_mAn7BF2wvQkfjS&amp;eqid=962b46758c7968001000000359318c79&amp;wd=&amp;clk_info=%7B%22srcid%22%3A%221599%22%2C%22tplname%22%3A%22www_normal%22%2C%22t%22%3A1496419460654%2C%22sig%22%3A%2211262%22%2C%22xpath%22%3A%22div-a-h3%22%7D&amp;sfOpen=1" target="_blank" rel="external">链接</a></p>
<p>Django 多表查询   <a href="http://transcoder.tradaquan.com/from=1086k/bd_page_type=1/ssid=0/uid=0/pu=usm%401%2Csz%401320_1002%2Cta%40iphone_2_7.1_2_7.5/baiduid=3CEF6030D65FCF6BA8DBB5BD59F44A3B/w=0_10_/t=iphone/l=3/tc?ref=www_iphone&amp;lid=8749590077656350070&amp;order=1&amp;fm=alop&amp;h5ad=1&amp;srd=1&amp;dict=32&amp;tj=www_normal_1_0_10_title&amp;vit=osres&amp;m=8&amp;cltj=cloud_title&amp;asres=1&amp;title=Django%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2--Finley--%E5%8D%9A%E5%AE%A2%E5%9B%AD&amp;w_qd=IlPT2AEptyoA_yi6Jk_jHCux3z6Pc7oaxy1YpQXS8Pw7Ygu&amp;sec=21434&amp;di=b2c6edbf715f91c1&amp;bdenc=1&amp;tch=124.0.35.139.0.0&amp;nsrc=IlPT2AEptyoA_yixCFOxXnANedT62v3IEQGG_ytK1DK6mlrte4viZQRARDb6LHq4ZpPPtCPQpxoIw83g_mMskNYWgK&amp;eqid=796cc9d17cfd3c0010000003592f7f41&amp;wd=&amp;clk_info=%7B%22srcid%22%3A%221599%22%2C%22tplname%22%3A%22www_normal%22%2C%22t%22%3A1496284996398%2C%22sig%22%3A%222559%22%2C%22xpath%22%3A%22div-a-h3-em%22%7D" target="_blank" rel="external">链接</a></p>
<p>一套比较完整的django教程<br><a href="http://zmrenwu.com/" target="_blank" rel="external">追梦人物的博客</a></p>
<h2 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h2><p>Scrapy中文文档   <a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html" target="_blank" rel="external">https://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html</a></p>
<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>webpack介绍入门  <a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="external">http://www.jianshu.com/p/42e11515c10f</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>别人整理的资源    <a href="https://github.com/stanzhai/be-a-professional-programmer" target="_blank" rel="external">https://github.com/stanzhai/be-a-professional-programmer</a></p>
<p>七牛云自动备份教程   <a href="http://www.pt3e.com/201703111/" target="_blank" rel="external">http://www.pt3e.com/201703111/</a></p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu开放指定端口]]></title>
      <url>/2017/05/06/ubuntu_open_port/</url>
      <content type="html"><![CDATA[<p>今天在服务器上开启web服务让别人访问的时候遇到一些问题，在内网中别人使用ip加端口访问的时候一直访问不到，折腾了半天，发现原来使端口没开放<br>了解到一般linux中端口都是默认关闭的，需要开启的时候需要自己开启</p>
<h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><a id="more"></a>
<p>由于我的服务器使用的os是Ubuntu,所以这里就介绍一下Ubuntu下的方法，其他linux应该也是大同小异，需要自己去尝试</p>
<h3 id="安装iptables"><a href="#安装iptables" class="headerlink" title="安装iptables"></a>安装iptables</h3><p>一般情况下，ubuntu安装好的时候，iptables会被安装上，如果没有的话那就安装上吧</p>
<ol>
<li><p>安装<br>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install iptables</div></pre></td></tr></table></figure>
</li>
<li><p>添加规则<br>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ iptables -I INPUT -p tcp --dport 80 -j ACCEPT</div></pre></td></tr></table></figure>
</li>
</ol>
<p>中间的80为所需要开放的端口</p>
<ol>
<li>保存规则<br>在终端输入<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ iptables-save</div></pre></td></tr></table></figure>
</li>
</ol>
<p>完成上述命令我们就完成了开放指定的端口，但是如果此时服务器重启，上述规则就没有了，所以我们需要对规则进行一下持续化操作</p>
<h3 id="持续化规则"><a href="#持续化规则" class="headerlink" title="持续化规则"></a>持续化规则</h3><p>这里我们需要在安装一下工具来帮我们实现，这里我们使用 iptables-persistent</p>
<ol>
<li><p>安装iptables-persistent</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install iptables-persistent</div></pre></td></tr></table></figure>
</li>
<li><p>持久化规则</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo netfilter-persistent save</div><div class="line">$ sudo netfilter-persistent reload</div></pre></td></tr></table></figure>
</li>
</ol>
<p>完成上述操作就可以永久打开我们需要的端口了</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis学习笔记 -- 2]]></title>
      <url>/2017/04/16/redis_study_2/</url>
      <content type="html"><![CDATA[<p>接着上一篇接着介绍redis的知识</p>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><a id="more"></a>
<h3 id="Redis-键-key"><a href="#Redis-键-key" class="headerlink" title="Redis 键(key)"></a>Redis 键(key)</h3><p>Redis 键命令用于管理 redis 的键。</p>
<ol>
<li><p>语法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; COMMAND KEY_NAME</div></pre></td></tr></table></figure>
</li>
<li><p>实例</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; SET w3ckey redis</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; DEL w3ckey</div><div class="line">(<span class="built_in">integer</span>) 1</div></pre></td></tr></table></figure>
<p>DEL 是一个命令， w3ckey 是一个键。 如果键被删除成功，命令执行后输出 (integer) 1，否则将输出 (integer) 0</p>
<h4 id="Redis-keys-相关命令"><a href="#Redis-keys-相关命令" class="headerlink" title="Redis keys 相关命令"></a>Redis keys 相关命令</h4></li>
</ol>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>DEL key</strong></td>
<td>在 key 存在是删除 key</td>
</tr>
<tr>
<td><strong>DUMP key</strong></td>
<td>序列化给定 key ，并返回被序列化的值</td>
</tr>
<tr>
<td><strong>EXISTS key</strong></td>
<td>检查给定 key 是否存在</td>
</tr>
<tr>
<td><strong>EXPIRE key seconds</strong></td>
<td>给定 key 设置过期时间</td>
</tr>
<tr>
<td><strong>EXPIREAT key timestamp</strong></td>
<td>EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)</td>
</tr>
<tr>
<td><strong>KEYS pattern</strong></td>
<td>查找所有符合给定模式( pattern)的 key</td>
</tr>
<tr>
<td><strong>MOVE key db</strong></td>
<td>将当前数据库的 key 移动到给定的数据库 db 当中</td>
</tr>
<tr>
<td><strong>PERSIST key</strong></td>
<td>移除 key 的过期时间，key 将持久保持</td>
</tr>
<tr>
<td><strong>PTTL key</strong></td>
<td>以毫秒为单位返回 key 的剩余的过期时间</td>
</tr>
<tr>
<td><strong>RENAME key newkey</strong></td>
<td>修改 key 的名称</td>
</tr>
<tr>
<td><strong>RENAMENX key newkey</strong></td>
<td>仅当 newkey 不存在时，将 key 改名为 newkey</td>
</tr>
<tr>
<td><strong>TYPE key</strong></td>
<td>返回 key 所储存的值的类型</td>
</tr>
</tbody>
</table>
<h3 id="Redis-字符串-String"><a href="#Redis-字符串-String" class="headerlink" title="Redis 字符串(String)"></a>Redis 字符串(String)</h3><p>Redis 字符串数据类型的相关命令用于管理 redis 字符串值，基本语法如下：</p>
<ol>
<li><p>语法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; COMMAND KEY_NAME</div></pre></td></tr></table></figure>
</li>
<li><p>实例</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; SET w3ckey redis</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; GET w3ckey</div><div class="line"> <span class="string">"redis"</span></div></pre></td></tr></table></figure>
<p>SET 和 GET 命令，键为 w3ckey。<br>DEL 是一个命令， w3ckey 是一个键。 如果键被删除成功，命令执行后输出 (integer) 1，否则将输出 (integer) 0</p>
<h4 id="Redis-keys-相关命令-1"><a href="#Redis-keys-相关命令-1" class="headerlink" title="Redis keys 相关命令"></a>Redis keys 相关命令</h4></li>
</ol>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>SET key value</strong></td>
<td>设置指定 key 的值</td>
</tr>
<tr>
<td><strong>GET key</strong></td>
<td>获取指定 key 的值</td>
</tr>
<tr>
<td><strong>GETRANGE key start end</strong></td>
<td>返回 key 中字符串值的子字符</td>
</tr>
<tr>
<td><strong>GETSET key value</strong></td>
<td>将给定 key 的值设为 value ，并返回 key 的旧值(old value)</td>
</tr>
<tr>
<td><strong>GETBIT key offset</strong></td>
<td>对 key 所储存的字符串值，获取指定偏移量上的位(bit)</td>
</tr>
<tr>
<td><strong>MGET key1 [key2..]</strong></td>
<td>获取所有(一个或多个)给定 key 的值</td>
</tr>
<tr>
<td><strong>SETEX key seconds value</strong></td>
<td>将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)</td>
</tr>
<tr>
<td><strong>SETNX key value</strong></td>
<td>只有在 key 不存在时设置 key 的值</td>
</tr>
<tr>
<td><strong>STRLEN key</strong></td>
<td>返回 key 所储存的字符串值的长度</td>
</tr>
<tr>
<td><strong>MSET key value [key value …]</strong></td>
<td>同时设置一个或多个 key-value 对</td>
</tr>
<tr>
<td><strong>INCR key</strong></td>
<td>将 key 中储存的数字值增一</td>
</tr>
<tr>
<td><strong>NCRBY key increment</strong></td>
<td>将 key 所储存的值加上给定的增量值（increment）</td>
</tr>
<tr>
<td><strong>NCRBYFLOAT key increment</strong></td>
<td>将 key 所储存的值加上给定的浮点增量值（increment）</td>
</tr>
<tr>
<td><strong>DECR key</strong></td>
<td>将 key 中储存的数字值减一</td>
</tr>
<tr>
<td><strong>DECRBY key decrement</strong></td>
<td>key所储存的值减去给定的减量值（decrement</td>
</tr>
<tr>
<td><strong>APPEND key value</strong></td>
<td>如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾</td>
</tr>
</tbody>
</table>
<h3 id="Redis-哈希-Hash"><a href="#Redis-哈希-Hash" class="headerlink" title="Redis 哈希(Hash)"></a>Redis 哈希(Hash)</h3><p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。。</p>
<ol>
<li>实例<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt;HMSET w3ckey name <span class="string">"redis tutorial"</span> description <span class="string">"redis basic commands for caching"</span> likes 20 visitors 2300</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; HGETALL w3ckey</div><div class="line">1) <span class="string">"name"</span></div><div class="line">2) <span class="string">"redis tutorial"</span></div><div class="line">3) <span class="string">"description"</span></div><div class="line">4) <span class="string">"redis basic commands for caching"</span></div><div class="line">5) <span class="string">"likes"</span></div><div class="line">6) <span class="string">"20"</span></div><div class="line">7) <span class="string">"visitors"</span></div><div class="line">8) <span class="string">"23000"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>设置了 redis 的一些描述信息(name, description, likes, visitors) 到哈希表的 w3ckey 中。</p>
<h4 id="Redis-hash-命令"><a href="#Redis-hash-命令" class="headerlink" title="Redis hash 命令"></a>Redis hash 命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>HDEL key field2 [field2]</strong></td>
<td>删除一个或多个哈希表字段</td>
</tr>
<tr>
<td><strong>HEXISTS key field</strong></td>
<td>查看哈希表 key 中，指定的字段是否存在</td>
</tr>
<tr>
<td><strong>HGET key field</strong></td>
<td>获取存储在哈希表中指定字段的值</td>
</tr>
<tr>
<td><strong>HGETALL key</strong></td>
<td>获取在哈希表中指定 key 的所有字段和值</td>
</tr>
<tr>
<td><strong>HINCRBY key field increment</strong></td>
<td>为哈希表 key 中的指定字段的整数值加上增量 increment</td>
</tr>
<tr>
<td><strong>HINCRBYFLOAT key field increment</strong></td>
<td>为哈希表 key 中的指定字段的浮点数值加上增量 increment</td>
</tr>
<tr>
<td><strong>HKEYS key</strong></td>
<td>获取所有哈希表中的字段</td>
</tr>
<tr>
<td><strong>HLEN key</strong></td>
<td>获取哈希表中字段的数量</td>
</tr>
<tr>
<td><strong>HMGET key field1 [field2]</strong></td>
<td>获取所有给定字段的值</td>
</tr>
<tr>
<td><strong>HMSET key field1 value1 [field2 value2 ]</strong></td>
<td>同时将多个 field-value (域-值)对设置到哈希表 key 中</td>
</tr>
<tr>
<td><strong>HSETNX key field value</strong></td>
<td>只有在字段 field 不存在时，设置哈希表字段的值。</td>
</tr>
<tr>
<td><strong>HVALS key</strong></td>
<td>获取哈希表中所有值</td>
</tr>
<tr>
<td><strong>HSCAN key cursor [MATCH pattern] [COUNT count]</strong></td>
<td>迭代哈希表中的键值对</td>
</tr>
</tbody>
</table>
<h3 id="Redis-列表-List"><a href="#Redis-列表-List" class="headerlink" title="Redis 列表(List)"></a>Redis 列表(List)</h3><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边</p>
<ol>
<li>实例<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt;LPUSH w3ckey redis</div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">127.0.0.1:6379&gt; LPUSH w3ckey mongodb</div><div class="line">(<span class="built_in">integer</span>) 2</div><div class="line">127.0.0.1:6379&gt; LPUSH w3ckey mysql</div><div class="line">(<span class="built_in">integer</span>) 3</div><div class="line">127.0.0.1:6379&gt; LRANGE w3ckey 0 10</div><div class="line">1) <span class="string">"mysql"</span></div><div class="line">2) <span class="string">"mongodb"</span></div><div class="line">3) <span class="string">"redis"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Redis-列表命令"><a href="#Redis-列表命令" class="headerlink" title="Redis 列表命令"></a>Redis 列表命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>BLPOP key1 [key2 ] timeout</strong></td>
<td>移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td>
</tr>
<tr>
<td><strong>BRPOP key1 [key2 ] timeout</strong></td>
<td>移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td>
</tr>
<tr>
<td><strong>BRPOPLPUSH source destination timeout</strong></td>
<td>从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td>
</tr>
<tr>
<td><strong>LINDEX key index</strong></td>
<td>通过索引获取列表中的元素</td>
</tr>
<tr>
<td>**LINSERT key BEFORE</td>
<td>AFTER pivot value**</td>
<td>在列表的元素前或者后插入元素</td>
</tr>
<tr>
<td><strong>LLEN key</strong></td>
<td>获取列表长度</td>
</tr>
<tr>
<td><strong>LPOP key</strong></td>
<td>移出并获取列表的第一个元素</td>
</tr>
<tr>
<td><strong>LPUSH key value1 [value2]</strong></td>
<td>将一个或多个值插入到列表头部</td>
</tr>
<tr>
<td><strong>LPUSHX key value</strong></td>
<td>将一个或多个值插入到已存在的列表头部</td>
</tr>
<tr>
<td><strong>LRANGE key start stop</strong></td>
<td>获取列表指定范围内的元素</td>
</tr>
<tr>
<td><strong>LREM key count value</strong></td>
<td>移除列表元素</td>
</tr>
<tr>
<td><strong>LSET key index value</strong></td>
<td>通过索引设置列表元素的值</td>
</tr>
<tr>
<td><strong>LTRIM key start stop</strong></td>
<td>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除</td>
</tr>
<tr>
<td><strong>RPOP key</strong></td>
<td>移除并获取列表最后一个元素</td>
</tr>
<tr>
<td><strong>RPOPLPUSH source destination</strong></td>
<td>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td>
</tr>
<tr>
<td><strong>RPUSH key value1 [value2]</strong></td>
<td>在列表中添加一个或多个值</td>
</tr>
<tr>
<td><strong>RPUSHX key value</strong></td>
<td>为已存在的列表添加值</td>
</tr>
</tbody>
</table>
<h3 id="Redis-集合-Set"><a href="#Redis-集合-Set" class="headerlink" title="Redis 集合(Set)"></a>Redis 集合(Set)</h3><p>Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据</p>
<ol>
<li>实例<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; SADD redis redis</div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">127.0.0.1:6379&gt; SADD redis mongo</div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">127.0.0.1:6379&gt; SADD redis rebitmq</div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">127.0.0.1:6379&gt; SADD redis rebitmq</div><div class="line">(<span class="built_in">integer</span>) 0</div><div class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE redis 0 1000</div><div class="line">1) <span class="string">"mongo"</span></div><div class="line">2) <span class="string">"rabitmq"</span></div><div class="line">3) <span class="string">"redis"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Redis-集合命令"><a href="#Redis-集合命令" class="headerlink" title="Redis 集合命令"></a>Redis 集合命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>SADD key member1 [member2]</strong></td>
<td>向集合添加一个或多个成员</td>
</tr>
<tr>
<td><strong>SCARD key</strong></td>
<td>获取集合的成员数</td>
</tr>
<tr>
<td><strong>SDIFF key1 [key2]</strong></td>
<td>返回给定所有集合的差集</td>
</tr>
<tr>
<td><strong>SINTER key1 [key2]</strong></td>
<td>返回给定所有集合的交集</td>
</tr>
<tr>
<td><strong>SISMEMBER key member</strong></td>
<td>判断 member 元素是否是集合 key 的成员</td>
</tr>
<tr>
<td><strong>SMEMBERS key</strong></td>
<td>返回集合中的所有成员</td>
</tr>
<tr>
<td><strong>SMOVE source destination member</strong></td>
<td>将 member 元素从 source 集合移动到 destination 集合</td>
</tr>
<tr>
<td><strong>SPOP key</strong></td>
<td>移除并返回集合中的一个随机元素</td>
</tr>
<tr>
<td><strong>SUNION key1 [key2]</strong></td>
<td>返回所有给定集合的并集</td>
</tr>
<tr>
<td><strong>SSCAN key cursor [MATCH pattern] [COUNT count]</strong></td>
<td>迭代集合中的元素</td>
</tr>
</tbody>
</table>
<h3 id="Redis-有序集合-sorted-set"><a href="#Redis-有序集合-sorted-set" class="headerlink" title="Redis 有序集合(sorted set)"></a>Redis 有序集合(sorted set)</h3><p>Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>有序集合的成员是唯一的,但分数(score)却可以重复。</p>
<ol>
<li>实例<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; ZADD w3ckey 1 redis</div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">127.0.0.1:6379&gt; ZADD w3ckey 2 mongodb</div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">127.0.0.1:6379&gt; ZADD w3ckey 3 mysql</div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">127.0.0.1:6379&gt; ZADD w3ckey 3 mysql</div><div class="line">(<span class="built_in">integer</span>) 0</div><div class="line">127.0.0.1:6379&gt; ZADD w3ckey 4 mysql</div><div class="line">(<span class="built_in">integer</span>) 0</div><div class="line">127.0.0.1:6379&gt; ZRANGE w3ckey 0 10 WITHSCORES</div><div class="line"> </div><div class="line">1) <span class="string">"redis"</span></div><div class="line">2) <span class="string">"1"</span></div><div class="line">3) <span class="string">"mongodb"</span></div><div class="line">4) <span class="string">"2"</span></div><div class="line">5) <span class="string">"mysql"</span></div><div class="line">6) <span class="string">"4"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Redis-有序集合命令"><a href="#Redis-有序集合命令" class="headerlink" title="Redis 有序集合命令"></a>Redis 有序集合命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>ZADD key score1 member1 [score2 member2]</strong></td>
<td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td>
</tr>
<tr>
<td><strong>ZCARD key</strong></td>
<td>获取有序集合的成员数</td>
</tr>
<tr>
<td><strong>ZCOUNT key min max</strong></td>
<td>计算在有序集合中指定区间分数的成员数</td>
</tr>
<tr>
<td><strong>ZLEXCOUNT key min max</strong></td>
<td>在有序集合中计算指定字典区间内成员数量</td>
</tr>
<tr>
<td><strong>ZRANGE key start stop [WITHSCORES]</strong></td>
<td>通过索引区间返回有序集合成指定区间内的成员</td>
</tr>
<tr>
<td><strong>ZRANGEBYLEX key min max [LIMIT offset count]</strong></td>
<td>通过字典区间返回有序集合的成员</td>
</tr>
<tr>
<td><strong>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</strong></td>
<td>通过分数返回有序集合指定区间内的成员</td>
</tr>
<tr>
<td><strong>ZRANK key member</strong></td>
<td>返回有序集合中指定成员的索引</td>
</tr>
<tr>
<td><strong>ZREM key member [member …]</strong></td>
<td>移除有序集合中的一个或多个成员</td>
</tr>
<tr>
<td><strong>ZREMRANGEBYLEX key min max</strong></td>
<td>移除有序集合中给定的字典区间的所有成员</td>
</tr>
<tr>
<td><strong>ZREMRANGEBYRANK key start stop</strong></td>
<td>移除有序集合中给定的排名区间的所有成员</td>
</tr>
<tr>
<td><strong>ZREMRANGEBYSCORE key min max</strong></td>
<td>移除有序集合中给定的分数区间的所有成员</td>
</tr>
<tr>
<td><strong>ZSCORE key member</strong></td>
<td>返回有序集中，成员的分数值</td>
</tr>
<tr>
<td><strong>ZUNIONSTORE destination numkeys key [key …]</strong></td>
<td>计算给定的一个或多个有序集的并集，并存储在新的 key 中</td>
</tr>
<tr>
<td><strong>ZSCAN key cursor [MATCH pattern] [COUNT count]</strong></td>
<td>迭代有序集合中的元素（包括元素成员和元素分值）</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis学习笔记 -- 1]]></title>
      <url>/2017/04/15/redis_study_1/</url>
      <content type="html"><![CDATA[<p>redis作为内存非关系型数据库，是一种key - value 缓存产品,但它同时还支持数据持久化，常常和一些老牌关系型数据库配合使用<br>下文将作为学习笔记介绍一下</p>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>由于本人的环境是Ubuntu，所以安装起来非常方便</p>
<ol>
<li>在终端输入<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install redis-server</div></pre></td></tr></table></figure>
</li>
</ol>
<p>即可完成安装，其他环境请自行去官网查看安装方式</p>
<h3 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><ol>
<li><p>启动redis<br>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ redis-server</div></pre></td></tr></table></figure>
</li>
<li><p>查看redis是否启动<br>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ redis-cli</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果成功将看到以下状态127.0.0.1:6379&gt; </p>
<ol>
<li>在出现的终端输入<strong>ping</strong>命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ 127.0.0.1:6379&gt; ping</div><div class="line">PONG</div></pre></td></tr></table></figure>
</li>
</ol>
<p>出现<strong>PONG</strong>即表示安装成功</p>
<h3 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h3><p>首先我们需要先进入redis终端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ redis-cli</div></pre></td></tr></table></figure></p>
<h4 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h4><ol>
<li>设置一个字符串<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; SET name <span class="string">"redis.net.cn"</span></div><div class="line">OK</div></pre></td></tr></table></figure>
</li>
</ol>
<p>设置name的值为”redis.net.cn”</p>
<ol>
<li>查询指定键的值<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; GET name</div><div class="line"><span class="string">"redis.net.cn"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h4><p>Redis hash是一个string类型的field和value的映射</p>
<ol>
<li>设置一个hash<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; HMSET user username redis.net.cn password redis.net.cn points 200</div><div class="line">OK</div></pre></td></tr></table></figure>
</li>
</ol>
<p>设置一个名为user的hash</p>
<ol>
<li>查询得到一个指定的hash<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; HGETALL user</div><div class="line">1) <span class="string">"username"</span></div><div class="line">2) <span class="string">"redis.net.cn"</span></div><div class="line">3) <span class="string">"password"</span></div><div class="line">4) <span class="string">"redis.net.cn"</span></div><div class="line">5) <span class="string">"points"</span></div><div class="line">6) <span class="string">"200"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>查询出名为user的hash</p>
<h4 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h4><p>Redis 列表是简单的字符串列表，按照插入顺序排序</p>
<ol>
<li><p>设置一个名为redis的列表</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; lpush redis redis</div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">127.0.0.1:6379&gt; lpush redis mongodb</div><div class="line">(<span class="built_in">integer</span>) 2</div><div class="line">127.0.0.1:6379&gt; lpush redis rabitmq</div><div class="line">(<span class="built_in">integer</span>) 3</div></pre></td></tr></table></figure>
</li>
<li><p>查询出名为redis的列表的0到10项</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; LRANGE redis 0 10</div><div class="line">1) <span class="string">"rabitmq"</span></div><div class="line">2) <span class="string">"mongo"</span></div><div class="line">3) <span class="string">"redis"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h4><p>Redis的Set是string类型的无序集合。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sadd key member</div></pre></td></tr></table></figure></p>
<h5 id="sadd-命令"><a href="#sadd-命令" class="headerlink" title="sadd 命令"></a>sadd 命令</h5><p>添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误</p>
<ol>
<li>设置一个名为redis的集合<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; SADD redis redis</div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">127.0.0.1:6379&gt; SADD redis mongo</div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">127.0.0.1:6379&gt; SADD redis rebitmq</div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">127.0.0.1:6379&gt; SADD redis rebitmq</div><div class="line">(<span class="built_in">integer</span>) 0</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注意：可以看到rebitmq添加了两次，但是实际上由于集合的去重性只向集合中添加了一遍返回0</p>
</blockquote>
<ol>
<li>查询出名为redis的集合<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; SMEMBERS redis</div><div class="line">1) <span class="string">"rebitmq"</span></div><div class="line">2) <span class="string">"redis"</span></div><div class="line">3) <span class="string">"mongo"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="zset-sorted-set：有序集合"><a href="#zset-sorted-set：有序集合" class="headerlink" title="zset(sorted set：有序集合)"></a>zset(sorted set：有序集合)</h4><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>zset的成员是唯一的,但分数(score)却可以重复</p>
<h5 id="zadd-命令"><a href="#zadd-命令" class="headerlink" title="zadd 命令"></a>zadd 命令</h5><p>添加元素到集合，元素在集合中存在则更新对应score<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zadd key score member</div></pre></td></tr></table></figure></p>
<ol>
<li><p>设置一个名为redis的有序集合</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; ZADD redis 0 redis</div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">127.0.0.1:6379&gt; ZADD redis 0 mongo</div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">127.0.0.1:6379&gt; ZADD redis 0 rabitmq</div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">127.0.0.1:6379&gt; ZADD redis 0 rabitmq</div><div class="line">(<span class="built_in">integer</span>) 0</div></pre></td></tr></table></figure>
</li>
<li><p>查询出名为redis的有序集合</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE redis 0 1000</div><div class="line">1) <span class="string">"mongo"</span></div><div class="line">2) <span class="string">"rabitmq"</span></div><div class="line">3) <span class="string">"redis"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Redis-命令"><a href="#Redis-命令" class="headerlink" title="Redis 命令"></a>Redis 命令</h3><h4 id="在本地运行"><a href="#在本地运行" class="headerlink" title="在本地运行"></a>在本地运行</h4><ol>
<li>启动redis客户端<br>在终端中输入<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ redis-cli</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="在远程服务上执行命令"><a href="#在远程服务上执行命令" class="headerlink" title="在远程服务上执行命令"></a>在远程服务上执行命令</h4><p>语法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ redis-cli -h host -p port <span class="_">-a</span> password</div></pre></td></tr></table></figure></p>
<p>连接到主机为 127.0.0.1，端口为 6379 ，密码为 mypass 的 redis 服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-cli -h 127.0.0.1 -p 6379 <span class="_">-a</span> <span class="string">"mypass"</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu日常使用的安装配置]]></title>
      <url>/2017/03/16/ubuntu_do_something_use/</url>
      <content type="html"><![CDATA[<p>本文将继续上篇<a href="http://earthchen.cn/2017/03/10/ubuntu_do_something_coding/">ubuntu搭建常见开发环境</a><br>上篇介绍了一些关于开发环境的配置，这篇我们来总结一下日常使用中所需要安装和配置的一些东西<br>比如一些中文输入法、浏览器、flash、科学上网等等。。。。。</p>
<h2 id="日常使用软件的安装与配置"><a href="#日常使用软件的安装与配置" class="headerlink" title="日常使用软件的安装与配置"></a>日常使用软件的安装与配置</h2><a id="more"></a>
<h3 id="更新更新源为国内源"><a href="#更新更新源为国内源" class="headerlink" title="更新更新源为国内源"></a>更新更新源为国内源</h3><p>安装好系统的第一件事，就应该换源！！！！除非你在一个不被墙的地方<br>在<strong>系统设置</strong>里的<strong>软件和更新</strong>中选择合适的国内源<br>个人比较喜欢阿里源，，，更改后如图所示<br><img src="http://objects.earthchen.cn/ubuntu_do_something_use_%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90.png" alt="ubuntu_do_something_use_更换国内源"><br>改完输入密码确定之后，更新下载软件就无压力了</p>
<h3 id="选择专有驱动"><a href="#选择专有驱动" class="headerlink" title="选择专有驱动"></a>选择专有驱动</h3><p>虽然ubuntu自带很多万能驱动，但是对于显卡之类的来说，还是专门的驱动比较好用<br>所以在<strong>系统设置</strong>里的<strong>软件和更新</strong>中<strong>附加驱动</strong>选择专有驱动并保存<br><img src="http://objects.earthchen.cn/ubuntu_do_something_use_%E9%80%89%E6%8B%A9%E4%B8%93%E6%9C%89%E9%A9%B1%E5%8A%A8.png" alt="ubuntu_do_something_use_选择专有驱动"><br>然后重启就好</p>
<h3 id="对桌面的美化"><a href="#对桌面的美化" class="headerlink" title="对桌面的美化"></a>对桌面的美化</h3><p>好看的桌面能改善人的心情啊，我觉得一个好看的桌面还是有意义的，但是不建议大家花太多时间去折腾桌面，我这里就说下我的桌面配置</p>
<h4 id="docky"><a href="#docky" class="headerlink" title="docky"></a>docky</h4><p>这里笔者还是蛮喜欢mac的风格 ，所以安装一下docky，并设置一下智能隐藏，不然桌面就小很多了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:ricotz/docky</div><div class="line"></div><div class="line">sudo apt-get update</div><div class="line"></div><div class="line">sudo apt-get install docky</div></pre></td></tr></table></figure></p>
<p>然后在dash中选择docky即可打开</p>
<h4 id="unity-tweak-tool"><a href="#unity-tweak-tool" class="headerlink" title="unity-tweak-tool"></a>unity-tweak-tool</h4><p>这是一个调整 Unity 桌面环境的工具，能够修改一些参数，让你的使用更方便<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:freyja-dev/unity-tweak-tool-daily</div><div class="line"></div><div class="line">sudo apt-get update</div><div class="line"></div><div class="line">sudo apt-get install unity-tweak-tool</div></pre></td></tr></table></figure></p>
<p>软件界面如下：<br><img src="http://objects.earthchen.cn/ubuntu_do_something_use_unity-tweak-tool.png" alt="ubuntu_do_something_use_unity-tweak-tool"></p>
<h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><h4 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h4><p>谷歌浏览器，这个就不用说了吧，你也可以选择chrome的开源版<strong>chromium</strong></p>
<ul>
<li>在这里建议使用下载好的deb包直接安装</li>
</ul>
<h5 id="chrome-1"><a href="#chrome-1" class="headerlink" title="chrome"></a>chrome</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget -q -O - https://dl.google.com/linux/linux_signing_key.pub  | sudo apt-key add -</div><div class="line"></div><div class="line">sudo apt-get update</div><div class="line"></div><div class="line">sudo apt-get install google-chrome-stable</div></pre></td></tr></table></figure>
<p>然后等待即可</p>
<h5 id="chromium"><a href="#chromium" class="headerlink" title="chromium"></a>chromium</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:a-v-shkop/chromium</div><div class="line"></div><div class="line">sudo apt-get update</div><div class="line"></div><div class="line">sudo apt-get install chromium-browser</div></pre></td></tr></table></figure>
<h5 id="flash插件"><a href="#flash插件" class="headerlink" title="flash插件"></a>flash插件</h5><p>虽然现在已经时html5的天下，但是flash还没有完全淘汰，所以flash还是需要的</p>
<ul>
<li>如果你安装的时chrome 那么它内部已经内置了一个flash，但是还是建议安装一个完整版</li>
<li>如果你安装的时chromium，那一定需要安装flash</li>
</ul>
<blockquote>
<p>chrome用户</p>
<ul>
<li>去flash官网下载.tar.gz的安装包</li>
<li>解压然后放到浏览器插件目录</li>
</ul>
<p>chromium用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install pepperflashplugin-nonfree</div><div class="line"></div><div class="line">sudo update-pepperflashplugin-nonfree --install</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="搜狗输入法"><a href="#搜狗输入法" class="headerlink" title="搜狗输入法"></a>搜狗输入法</h4><ol>
<li>登录<a href="http://pinyin.sogou.com/linux/" target="_blank" rel="external">搜狗拼音官网</a>去下载合适的安装包</li>
<li>双击下载好的deb文件（有可能失败）<br>笔者建议进入下载包所在的目录，使用如下命令安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dpkg -i sogoupinyin_2.1.0.0082_amd64.deb</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="wps"><a href="#wps" class="headerlink" title="wps"></a>wps</h4><p>自带的libreoffice不怎么好用，而且较慢，这里我们使用国产的wps来代替它</p>
<ol>
<li><p>卸载libreoffice<br>在终端执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get remove --purge libreoffice*</div></pre></td></tr></table></figure>
</li>
<li><p>安装wps<br>首先去wps官网去下载安装包<br>使用如下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dpkg -i wps-office_10.1.0.5672<span class="_">-a</span>21_amd64.deb</div></pre></td></tr></table></figure>
</li>
</ol>
<p>可能会缺少依赖，然后执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install <span class="_">-f</span></div></pre></td></tr></table></figure></p>
<p>修复所缺依赖<br>如果遇到问题就用如下方法：<br>在去论坛找一个<strong>libpng12-0_1.2.27-2+lenny5_amd64.deb</strong>的包<br>然后使用如下命令更新<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dpkg -i libpng12-0_1.2.27-2+lenny5_amd64.deb</div></pre></td></tr></table></figure></p>
<p>然后重新安装wps</p>
<h4 id="福昕阅读器"><a href="#福昕阅读器" class="headerlink" title="福昕阅读器"></a>福昕阅读器</h4><p>自带的pdf阅读器不怎么好用，我们这里使用福昕阅读器来替代<br>安装方法依然时去官网下载对应的deb安装包<br>然后执行sudo dpki -i xxx.deb</p>
<h4 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h4><p>良心音乐播放器，网易云也出了Linux版，和深度合作开发的<br>安装方法同上，安装即可</p>
<h4 id="smplayer"><a href="#smplayer" class="headerlink" title="smplayer"></a>smplayer</h4><p>好用的视频播放器，有很强的解码能力。。。。<br>在终端输入如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo apt-add-repository ppa:rvm/smplayer</div><div class="line"></div><div class="line">sudo apt-get update</div><div class="line"></div><div class="line">sudo apt-get install smplayer smplayer-skins smplayer-themes</div></pre></td></tr></table></figure></p>
<h4 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h4><p>科学上网，不多说 直接上安装教程：<br>在终端输入如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5 </div><div class="line"></div><div class="line">sudo apt-get update </div><div class="line"></div><div class="line">sudo apt-get install shadowsocks-qt5</div></pre></td></tr></table></figure></p>
<p>然后设置全局代理，这个见别人的博客<br><a href="http://blog.csdn.net/hanshileiai/article/details/52624303" target="_blank" rel="external">http://blog.csdn.net/hanshileiai/article/details/52624303</a><br><a href="http://blog.csdn.net/strokess/article/details/52015014" target="_blank" rel="external">http://blog.csdn.net/strokess/article/details/52015014</a><br>…<br>每个人情况不一样自己找找并尝试一下吧</p>
<h4 id="Diodon"><a href="#Diodon" class="headerlink" title="Diodon"></a>Diodon</h4><p>Ubuntu自带一个剪贴板，按<strong>ctrl+；</strong>即可，但是笔者不是很喜欢，并且功能不够多，<br>有很多类似功能的软件，在这里只介绍个人使用的一个<br>在终端输入如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:diodon-team/stable</div><div class="line"></div><div class="line">sudo apt-get update</div><div class="line"></div><div class="line">sudo apt-get install diodon diodon-plugins</div></pre></td></tr></table></figure></p>
<blockquote>
<p>安装好之后设置一下快捷键</p>
<ol>
<li>在<strong>系统设置</strong>中的<strong>键盘</strong> <strong>快捷键</strong>中<strong>添加自定义快捷键</strong></li>
<li>如图所示设置即可<br><img src="http://objects.earthchen.cn/ubuntu_do_something_use_%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%BF%AB%E6%8D%B7%E9%94%AE.png" alt="ubuntu_do_something_use_剪贴板快捷键"></li>
</ol>
</blockquote>
<h4 id="shutter"><a href="#shutter" class="headerlink" title="shutter"></a>shutter</h4><p>装一个好用的截图软件还是很有用的，在这里推荐shutter<br>在终端输入如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:shutter/ppa</div><div class="line"></div><div class="line">sudo apt-get update</div><div class="line"></div><div class="line">sudo apt-get install shutter</div></pre></td></tr></table></figure></p>
<blockquote>
<p>安装好之后设置一下快捷键</p>
<ol>
<li>在<strong>系统设置</strong>中的<strong>键盘</strong> <strong>快捷键</strong>中<strong>添加自定义快捷键</strong></li>
<li>如图所示设置即可<br><img src="http://objects.earthchen.cn/ubuntu_do_something_use_%E6%88%AA%E5%9B%BE%E5%BF%AB%E6%8D%B7%E9%94%AE.png" alt="ubuntu_do_something_use_截图快捷键"></li>
</ol>
</blockquote>
<h4 id="坚果云"><a href="#坚果云" class="headerlink" title="坚果云"></a>坚果云</h4><p>一款很好用的多终端同步软件，诶，腾讯爸爸不给力，Linux下的qq实在太难用。。。有一段时间我都是截图同步到手机，然后在发送的。。。。。炒鸡心累<br>去官网下载相关包然后在终端执行sudo dpkg -i xxx.deb即可</p>
<h4 id="uget"><a href="#uget" class="headerlink" title="uget"></a>uget</h4><p>linux下的一款很好用的下载软件，，，虽然不支持bt吧，，，<br>在终端输入如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:plushuang-tw/uget-stable</div><div class="line"></div><div class="line">sudo apt-get update</div><div class="line"></div><div class="line">sudo apt-get install uget</div></pre></td></tr></table></figure></p>
<p>在firefox下使用推荐使用<strong>flashgot</strong> 在chrome下使用推荐使用<strong>uGet Integration</strong></p>
<h4 id="axel"><a href="#axel" class="headerlink" title="axel"></a>axel</h4><p>多线程下载器，不多说<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install axel</div></pre></td></tr></table></figure></p>
<h4 id="aiar2"><a href="#aiar2" class="headerlink" title="aiar2"></a>aiar2</h4><p>在终端输入如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:t-tujikawa/ppa</div><div class="line"></div><div class="line">sudo apt-get update</div><div class="line"></div><div class="line">sudo apt-get install aria2</div></pre></td></tr></table></figure></p>
<p>先说这么多吧 以后想起来别的好用的在更新<br>最后附上一张笔者的桌面：嘿嘿嘿<br><img src="http://objects.earthchen.cn/ubuntu_do_something_use_%E6%A1%8C%E9%9D%A2.png" alt="ubuntu_do_something_use_桌面"></p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中搭建测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu搭建常见开发环境]]></title>
      <url>/2017/03/15/ubuntu_do_something_coding/</url>
      <content type="html"><![CDATA[<p>由于之前使用Ubuntu16.10桌面版系统蹦了好几天，因此我也装了好几次系统了，每次都要百度或google查很多东西，去配置开发环境或使用环境，到处搜觉得很麻烦，所以，本文就总结一下Ubuntu安装好之后需要做的一些事，以及常规配置习惯</p>
<p>在装了几次系统之后我最后还是决定降一个系统版本。。使用<strong>Ubuntu16.04lts</strong>长期维护版，希望能稳定一些吧。。。。。实在是有点伤了</p>
<p>文本以Ubuntu16.04桌面版为环境介绍</p>
<h2 id="常用编程环境搭建"><a href="#常用编程环境搭建" class="headerlink" title="常用编程环境搭建"></a>常用编程环境搭建</h2><a id="more"></a>
<h3 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h3><p>java的环境基本处处都能用的到，所以去安装jdk<br>使用下面的命令安装，只需一些时间，它就会下载许多的文件（但是要确定你的网络环境良好，访问oracle的地址速度快）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:webupd8team/java</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install oracle-java8-installer</div><div class="line">sudo apt-get install oracle-java8-set-default</div></pre></td></tr></table></figure></p>
<p>一般我不会这么干的，因为，，实在太慢了 而且一不小心就卡主了apt</p>
<blockquote>
<p>所以流程如下：</p>
<ol>
<li>我们这里通过<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">oracle官网</a>提前下好适合你系统版本的jdk的压缩包</li>
<li>将下好的压缩包解压到合适的地方</li>
<li>配置环境变量</li>
<li>使配置的变量立即生效</li>
</ol>
</blockquote>
<p>先在合适的地方创建一个放置环境的文件夹笔者这里使/usr/java/<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/</div><div class="line">mkdir java</div></pre></td></tr></table></figure></p>
<p>然后将下好的jdk复制到创建好的文件夹下并解压：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo cp jdk-8u45-linux-x64.gz /usr/java/</div><div class="line"><span class="built_in">cd</span> /usr/java/</div><div class="line">sudo tar -zvxf jdk-8u45-linux-x64.gz</div></pre></td></tr></table></figure></p>
<p>配置环境变量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gedit ~/.bashrc</div></pre></td></tr></table></figure></p>
<p>在编辑页面的最后添加如下语句<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/java/jdk1.8.0_45</div><div class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</div><div class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</div><div class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</div></pre></td></tr></table></figure></p>
<p>添加之后如图所示<br><img src="http://objects.earthchen.cn/ubuntu_java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="java环境变量"></p>
<p>保存环境变量，退出编辑器，输入命令使之生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.bashrc</div></pre></td></tr></table></figure></p>
<ul>
<li>输入java -version查看是否成功<br><img src="http://objects.earthchen.cn/ubuntu_java%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="java安装成功"><br>如上图所示即为成功。。</li>
</ul>
<h3 id="安装javaee服务器tomcat"><a href="#安装javaee服务器tomcat" class="headerlink" title="安装javaee服务器tomcat"></a>安装javaee服务器tomcat</h3><ol>
<li>从tomcat官网上下载需要的压缩包</li>
<li>将压缩包解压并移动到<strong>/opt/tomcat/</strong>下，如果没有这个目录需要提前创建好目录</li>
<li><p>打开<strong>/tomcat/bin/startup.sh/</strong>在文件的最后添加jdk和jre配置信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Java</span></div><div class="line"><span class="built_in">export</span>JAVA_HOME=/opt/java/jdk1.8.0_121  <span class="comment">#java目录</span></div><div class="line"><span class="built_in">export</span>JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</div><div class="line"><span class="built_in">export</span>CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</div><div class="line"><span class="built_in">export</span>PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></div><div class="line"><span class="comment">#tomcat</span></div><div class="line"><span class="built_in">export</span>TOMCAT_HOME=/opt/tomcat/apache-tomcat-9.0.0.M11</div></pre></td></tr></table></figure>
</li>
<li><p>启动tomcat</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/startup.sh</div></pre></td></tr></table></figure>
</li>
<li><p>验证tomcat配置和安装是否成功<br>在浏览器地址栏输入127.0.0.1:8080（ip：端口号）</p>
</li>
<li><p>关闭tomcat</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/shuntdown.sh</div></pre></td></tr></table></figure>
</li>
<li><p>给tomcat文件夹及所有文件赋予权限777</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 777 /opt/tomcat -R</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>程序员必备工具啊  一般安装好系统就会安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install git</div></pre></td></tr></table></figure></p>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>常用的关系型数据库，开发必备<br>在Ubuntu下安装mysql很简单，只需要简单的输入几条命令就好：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install mysql-server</div><div class="line"></div><div class="line">sudo apt-get install mysql-client</div><div class="line"></div><div class="line">sudo apt-get install libmysqlclient-dev</div></pre></td></tr></table></figure></p>
<p>安装过程中会提示输入用户名和密码，按照自己的需要去设置</p>
<h3 id="安装mysql数据库可视化工具"><a href="#安装mysql数据库可视化工具" class="headerlink" title="安装mysql数据库可视化工具"></a>安装mysql数据库可视化工具</h3><p>可以选择MySQL-workbench或者phpmyadmin</p>
<h4 id="MySQL-workbench"><a href="#MySQL-workbench" class="headerlink" title="MySQL-workbench"></a>MySQL-workbench</h4><p>使用如下命令安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install mysql-workbench</div></pre></td></tr></table></figure></p>
<h4 id="phpmyadmin"><a href="#phpmyadmin" class="headerlink" title="phpmyadmin"></a>phpmyadmin</h4><p>使用如下命令安装</p>
<ol>
<li><p>安装php</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install php</div></pre></td></tr></table></figure>
</li>
<li><p>安装apache2</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install apache2</div></pre></td></tr></table></figure>
</li>
<li><p>安装phpmyadmin</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install phpmyadmin</div></pre></td></tr></table></figure>
</li>
<li><p>建立/var/www/html 下的软连接</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ln <span class="_">-s</span> /usr/share/phpmyadmin /var/www/html/phpmyadmin</div></pre></td></tr></table></figure>
</li>
<li><p>然后重启apache</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/apache2 restart</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装Vim"><a href="#安装Vim" class="headerlink" title="安装Vim"></a>安装Vim</h3><p>程序员必备工具啊  一般安装好系统就会安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install vim</div></pre></td></tr></table></figure></p>
<p>vim的配置我就直接用大神的vim配置<strong>spf13-vim</strong><br>安装方法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl https://j.mp/spf13-vim3 -L &gt; spf13-vim.sh &amp;&amp; sh spf13-vim.sh</div></pre></td></tr></table></figure></p>
<p>剩下的只要等待即可，由于过程需要git等环境，需要提前安装好</p>
<h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><p>Ubuntu虽然内置了Python2和python3两个版本但是没有默认安装好pip这个好用的包管理工具，所以要用于python开发的话最好安装上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt install python-pip   <span class="comment">#python2的pip</span></div><div class="line">sudo apt install python3-pip   <span class="comment">#python3的pip</span></div></pre></td></tr></table></figure></p>
<p>由于pip默认的时国外的源，在国内访问极慢，为了方便我们这里将更新源修改成国内比较好用的豆瓣源</p>
<ol>
<li><p>首先在用户目录下新建.pip文件夹</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir .pip</div></pre></td></tr></table></figure>
</li>
<li><p>进入.pip目录创建pip.conf文件，在文件中添加如下内容</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">timeout = <span class="number">60</span></div><div class="line">index-url = http:<span class="comment">//pypi.douban.com/simple</span></div><div class="line">trusted-host = pypi.douban.com</div></pre></td></tr></table></figure>
</li>
</ol>
<p>添加完保存即可享受飞一般的速度</p>
<h3 id="安装几个好用的ide"><a href="#安装几个好用的ide" class="headerlink" title="安装几个好用的ide"></a>安装几个好用的ide</h3><p>有些人觉得vim强无敌，但是我懒得配那些环境，还是用ide吧 懒人嘛  嘿嘿</p>
<h4 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h4><p>很著名的python ide，比起在vim中配置一个开发环境，我还是觉得pycharm更好用，也更方便<br>进入<a href="http://www.jetbrains.com/pycharm/download/#section=linux" target="_blank" rel="external">pycharm下载地址</a>下载适合自己系统的安装包<br>解压到合适的地方<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /home/earthchen/code/pycharm-2016.3.2/bin</div><div class="line">sh pycharm.sh</div></pre></td></tr></table></figure></p>
<p>剩下就全是图形化界面，自己按需求操作</p>
<h4 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h4><p>很著名的java ide  好用程度  谁用谁知道<br>进入<a href="http://www.jetbrains.com/idea/download/#section=linux" target="_blank" rel="external">idea下载地址</a>下载适合自己系统的安装包<br>解压到合适的地方<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> code/idea-IU-163.12024.16/bin/</div><div class="line">sh idea.sh</div></pre></td></tr></table></figure></p>
<p>剩下就全是图形化界面，自己按需求操作</p>
<h4 id="clion"><a href="#clion" class="headerlink" title="clion"></a>clion</h4><p>Ubuntu下开发c并不多 放着偶尔用下，肯定比不上win下的vs又不想每次都make或者gcc 所以选择了同一个公司的ide<br>进入<a href="http://www.jetbrains.com/clion/download/" target="_blank" rel="external">clon下载地址</a>下载适合自己系统的安装包<br>解压到合适的地方<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /home/earthchen/code/clion-2016.3.3/bin</div><div class="line">sh clion.sh</div></pre></td></tr></table></figure></p>
<p>剩下就全是图形化界面，自己按需求操作</p>
<h4 id="激活码"><a href="#激活码" class="headerlink" title="激活码"></a>激活码</h4><p>如果你下载安装的时专业版，那么还需要使用激活码才能使用，但是一般来说社区版已经够用<br>下面提供一下从网上搜集来的激活码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CNEKJPQZEX-eyJsaWNlbnNlSWQiOiJDTkVLSlBRWkVYIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9XSwiaGFzaCI6IjUxOTU1OTMvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-QOxwjWvRwJz6vo6J6adC3CJ4ukQHosbPYZ94URUVFna/Rbew8xK/M5gP3kAaPh6ZDveFdtMR1UBoumq3eCwXtXM3U3ls5noB4LIr+QplVlCj2pK5uNq7g/feyNyQcHpSXtvhIOnXDBLOecB05DOsxzm0p7ulGGJoAInmHeb9mc0eYjqc4RPpUQfh6HSYBnvEnKMlLF5bz4KEtzmsvvgA55CwzwQ3gRitm5Q/wUT7AQCBdjmBfNUjKVQL6TSjSDPp56FUdEs4Aab8LqstA2DIMbxocO64rvytmcUeIwu8Mi5uq87KQP5AQMSMYb59Inbd+dmVfx5cJo3fRS4/<span class="number">5</span>s3/Hg==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/<span class="number">5</span>oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/<span class="number">78</span>TmVqFl8nOeD5+<span class="number">07</span>B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/<span class="number">8</span>vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+<span class="number">0</span>gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+<span class="number">2</span>yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++<span class="number">2</span>+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</div></pre></td></tr></table></figure></p>
<p>以上激活码全系列ide通用</p>
<h3 id="sublime-text-3"><a href="#sublime-text-3" class="headerlink" title="sublime text 3"></a>sublime text 3</h3><p>如果你需要前端开发，那么我推荐这个文本编辑器，我一般的做法时将这个替代自带的文本编辑器，毕竟它还支持markdown<br>一般安装需要先下载好deb的安装包然后执行以下命令安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dpkg -i xxxx.deb</div></pre></td></tr></table></figure></p>
<p>然后程序就会自动安装完毕<br>不知是因为bug还是什么，在Ubuntu下的sublime text 3时不支持中文输入的</p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ol>
<li><p>在终端里输入如下指令，下载我们所需要的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/lyfeyaj/sublime-text-imfix.git</div></pre></td></tr></table></figure>
</li>
<li><p>将subl移动到/usr/bin/，并且将sublime-imfix.so移动到/opt/sublime_text/</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/sublime-text-imfix</div><div class="line">sudo cp ./lib/libsublime-imfix.so /opt/sublime_text/</div><div class="line">sudo cp ./src/subl /usr/bin/</div></pre></td></tr></table></figure>
</li>
<li><p>终端启动sublime text</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LD_PRELOAD=./libsublime-imfix.so subl</div></pre></td></tr></table></figure>
</li>
<li><p>此时应该已经可以能输中文了，但这样略麻烦了点，我们希望点图标就可以支持输入中文，所以我们还需要下面几部</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /usr/share/applications/sublime_text.desktop</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>打开后将Exec=/opt/sublime_text/sublime_text %F修改为<br>    Exec=bash -c ‘LD_PRELOAD=/usr/lib/libsublime-imfix.so /opt/sublime_text/sublime_text’ %F</p>
<p>将Exec=/opt/sublime_text/sublime_text -n修改为<br>    Exec=bash -c ‘LD_PRELOAD=/usr/lib/libsublime-imfix.so /opt/sublime_text/sublime_text’ -n</p>
</blockquote>
<h3 id="fish"><a href="#fish" class="headerlink" title="fish"></a>fish</h3><p>自带的终端bash不是很好用，所以我这里使用fish来代替自带shell</p>
<ol>
<li><p>首先安装fish</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install fish</div></pre></td></tr></table></figure>
</li>
<li><p>替代自带shell</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh</div></pre></td></tr></table></figure>
</li>
</ol>
<p>修改完如图所示<br><img src="http://objects.earthchen.cn/ubuntu_fish%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="Ubuntu_fish安装成功"></p>
<p>以上配置完成，基本就能符合我的日常coding需求了，下一篇将介绍其他日常使用需要安装配置的东西</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中搭建测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django调用百度地图api在地图上批量增加标记点]]></title>
      <url>/2017/03/15/django_address_baiduapi_marker_show/</url>
      <content type="html"><![CDATA[<p>在调用百度地图api进行web开发时遇到了一个需求，我们需要在网页中内嵌一个div  然后在div中调用百度地图的js显示我们所需要的地区。根据需求坐标在地图上添加若干个标记点，并批量的为各个标记点设置监听函数，使之显示我们所需要的信息</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>首先，创建一个测试用的工程来测试我们的需要，可以使用<strong>pycharm</strong>或者<strong>django</strong>自带的命令创建工程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">django-admin startproject addressdemo</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h3><ul>
<li>创建工程之后，cd到工程目录，创建一个名为addresstest的应用<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py startapp addresstest</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="创建一个名为templates文件，在其中创建一个address-html的测试用页面"><a href="#创建一个名为templates文件，在其中创建一个address-html的测试用页面" class="headerlink" title="创建一个名为templates文件，在其中创建一个address.html的测试用页面"></a>创建一个名为templates文件，在其中创建一个address.html的测试用页面</h3><ul>
<li>在address.html中我们需要先为地图创建一个容器 在这里我们使用一个确定好的div病设置id为allmap</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1.0, user-scalable=no"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">        body, html &#123;</div><div class="line">            width: 100%;</div><div class="line">            height: 100%;</div><div class="line">            margin: 0;</div><div class="line">            font-family: "微软雅黑";</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        #allmap &#123;</div><div class="line">            height: 700px;</div><div class="line">            width: 100%;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        #r-result &#123;</div><div class="line">            width: 100%;</div><div class="line">            font-size: 14px;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>经纬度定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"allmap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"r-result"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>同时我们也设置了一个button为了更好的测试我们写的引用的函数</li>
</ul>
<h4 id="注册百度开发者账号获取秘钥"><a href="#注册百度开发者账号获取秘钥" class="headerlink" title="注册百度开发者账号获取秘钥"></a>注册百度开发者账号获取秘钥</h4><ul>
<li>访问<a href="http://lbsyun.baidu.com/index.php?title=jspopular" target="_blank" rel="external">百度地图开放平台</a>注册账号并获取秘钥<br>获得秘钥的页面应该如下：<br><img src="http://objects.earthchen.cn/django%E6%89%B9%E9%87%8F%E5%9C%B0%E5%9D%80%E6%A0%87%E8%AE%B0%E6%B3%A8%E5%86%8C%E7%99%BE%E5%BA%A6%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7.png" alt="注册获取百度地图开发者账号"></li>
</ul>
<h4 id="在address-html添加上引入百度api的js代码"><a href="#在address-html添加上引入百度api的js代码" class="headerlink" title="在address.html添加上引入百度api的js代码"></a>在address.html添加上引入百度api的js代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></div><div class="line">        <span class="attr">src</span>=<span class="string">"http://api.map.baidu.com/api?v=2.0&amp;ak=你的秘钥"</span>&gt;<span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="连接mysql数据库"><a href="#连接mysql数据库" class="headerlink" title="连接mysql数据库"></a>连接mysql数据库</h3><ul>
<li>在<strong>settings.py</strong>中修改数据库连接语句<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</div><div class="line">        <span class="string">'NAME'</span>: <span class="string">'addressdemo'</span>,</div><div class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</div><div class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'000000'</span>,</div><div class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,</div><div class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="设置模型类"><a href="#设置模型类" class="headerlink" title="设置模型类"></a>设置模型类</h4><ul>
<li>在创建的app下的<strong>models.py</strong>中添加如下语句<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">address_info</span><span class="params">(models.Model)</span>:</span></div><div class="line">    longitude = models.FloatField()</div><div class="line">    latitude = models.FloatField()</div><div class="line">    data = models.CharField(max_length=<span class="number">200</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>longitude为经度</li>
<li>latitude为维度</li>
<li>data为标记被点击所触发的显示的内容</li>
</ul>
</blockquote>
<h4 id="执行同步数据库操作"><a href="#执行同步数据库操作" class="headerlink" title="执行同步数据库操作"></a>执行同步数据库操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python manage.py makemigrations</div><div class="line">python manage.py migrate</div></pre></td></tr></table></figure>
<ul>
<li>django 1.7之后版本适用</li>
</ul>
<h4 id="查看数据库并在其中addresstest-address-info表中插入测试数据"><a href="#查看数据库并在其中addresstest-address-info表中插入测试数据" class="headerlink" title="查看数据库并在其中addresstest_address_info表中插入测试数据"></a>查看数据库并在其中addresstest_address_info表中插入测试数据</h4><ul>
<li>如图为我插入的几条测试数据<br><img src="http://objects.earthchen.cn/django%E6%89%B9%E9%87%8F%E5%9C%B0%E5%9D%80%E5%9C%B0%E5%9B%BE%E6%A0%87%E8%AE%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%92%E5%85%A5%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE.png" alt="数据库插入测试数据"></li>
</ul>
<h3 id="在view和urls中配置视图函数和URL"><a href="#在view和urls中配置视图函数和URL" class="headerlink" title="在view和urls中配置视图函数和URL"></a>在view和urls中配置视图函数和URL</h3><h4 id="修改views"><a href="#修改views" class="headerlink" title="修改views"></a>修改views</h4><ul>
<li><p>修改完成后的<strong>address/views.py</strong>为</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> addresstest.models <span class="keyword">import</span> address_info</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></div><div class="line">    address_point = address_info.objects.all()</div><div class="line">    address_longitude = []</div><div class="line">    address_latitude = []</div><div class="line">    address_data = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(address_point)):</div><div class="line">        address_longitude.append(address_point[i].longitude)</div><div class="line">        address_latitude.append(address_point[i].latitude)</div><div class="line">        address_data.append(address_point[i].data)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'address.html'</span>,</div><div class="line">                  &#123;<span class="string">'address_longitude'</span>: json.dumps(address_longitude),</div><div class="line">                   <span class="string">'address_latitude'</span>: json.dumps(address_latitude), <span class="string">'address_data'</span>: json.dumps(address_data)&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>由于需要在前段页面中的js代码区域中使用，我们需要将列表json序列化然后通过页面渲染 或者  前段请求后端返回response携带接送数据</p>
</li>
<li>起初本想直接将<strong>address_point</strong>这个数据集直接传到前段,在由前段使用模板，没有时间类型也不知道为什么会序列化出错，如果有知道的可以反馈给我<blockquote>
<p>注：</p>
<ul>
<li>address_longitude为若干个坐标的经度</li>
<li>address_latitude为若干个坐标的维度</li>
<li>address_data为标记上所需要显示的数据</li>
</ul>
</blockquote>
</li>
</ul>
<h5 id="修改urls"><a href="#修改urls" class="headerlink" title="修改urls"></a>修改urls</h5><ul>
<li>由于只用来测试，所以我们只需要在工程名下的urls写设置一下即可<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"><span class="keyword">from</span> addresstest <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</div><div class="line">    url(<span class="string">r'^address/'</span>,views.test),</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="在address-html添加设置地图的js"><a href="#在address-html添加设置地图的js" class="headerlink" title="在address.html添加设置地图的js"></a>在address.html添加设置地图的js</h3><ul>
<li><p>因为js语句块放在页面哪里都可以被执行，所以大家可以按照自己的喜好放置，在这里我选择放在页面的最后</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">    var map = new BMap.Map("allmap");</div><div class="line">    map.centerAndZoom(new BMap.Point(118.3088230000, 32.3002390000), 18);</div><div class="line">    map.enableScrollWheelZoom(true);</div><div class="line">    var navigationControl = new BMap.NavigationControl(&#123;</div><div class="line">        // 靠左上角位置</div><div class="line">        anchor: BMAP_ANCHOR_TOP_LEFT,</div><div class="line">        // LARGE类型</div><div class="line">        type: BMAP_NAVIGATION_CONTROL_LARGE,</div><div class="line">        // 启用显示定位</div><div class="line">        enableGeolocation: true</div><div class="line">    &#125;);</div><div class="line">    map.addControl(navigationControl);</div><div class="line"></div><div class="line">    function get_location() &#123;</div><div class="line"></div><div class="line">        var address_latitude =&#123;&#123; address_latitude |safe&#125;&#125;;</div><div class="line">        var address_longitude =&#123;&#123; address_longitude|safe &#125;&#125;;</div><div class="line">        var address_data =&#123;&#123; address_data |safe&#125;&#125;;</div><div class="line"></div><div class="line"></div><div class="line">        var point = []; //存放标注点经纬信息的数组</div><div class="line">        var marker = []; //存放标注点对象的数组</div><div class="line">        for (var i = 0; i &lt; address_longitude.length; i++) &#123;</div><div class="line">            point[i] = new BMap.Point(address_longitude[i], address_latitude[i]); //循环生成新的地图点</div><div class="line">            marker[i] = new BMap.Marker(point[i]); //按照地图点坐标生成标记</div><div class="line">            map.addOverlay(marker[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for (i = 0; i &lt; marker.length; i++) &#123;</div><div class="line">            (function () &#123;</div><div class="line">                var index = i;</div><div class="line">                marker[index].addEventListener('click', function () &#123;</div><div class="line">                    this.openInfoWindow(new BMap.InfoWindow(address_data[index]));</div><div class="line">                &#125;);</div><div class="line">            &#125;)();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>由于marker在添加监听事件时调用外部函数添加参数无效但是我们这里又需要传递从数据库读出来的需要显示的信息，所以我们这里使用了js的闭包的概念，还使用了匿名函数，直接写在监听事件函数内</p>
</li>
</ul>
<ul>
<li>完整的<strong>address.html</strong>代码如下<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1.0, user-scalable=no"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">        body, html &#123;</div><div class="line">            width: 100%;</div><div class="line">            height: 100%;</div><div class="line">            margin: 0;</div><div class="line">            font-family: "微软雅黑";</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        #allmap &#123;</div><div class="line">            height: 700px;</div><div class="line">            width: 100%;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        #r-result &#123;</div><div class="line">            width: 100%;</div><div class="line">            font-size: 14px;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></div><div class="line">            <span class="attr">src</span>=<span class="string">"http://api.map.baidu.com/api?v=2.0&amp;ak=你的秘钥"</span>&gt;<span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>经纬度定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"allmap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"r-result"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取我的位置"</span> <span class="attr">onclick</span>=<span class="string">"get_location()"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">    // 百度地图API功能</div><div class="line">  </div><div class="line">    var map = new BMap.Map("allmap");</div><div class="line">    map.centerAndZoom(new BMap.Point(118.3088230000, 32.3002390000), 18);</div><div class="line">    map.enableScrollWheelZoom(true);</div><div class="line">    var navigationControl = new BMap.NavigationControl(&#123;</div><div class="line">        // 靠左上角位置</div><div class="line">        anchor: BMAP_ANCHOR_TOP_LEFT,</div><div class="line">        // LARGE类型</div><div class="line">        type: BMAP_NAVIGATION_CONTROL_LARGE,</div><div class="line">        // 启用显示定位</div><div class="line">        enableGeolocation: true</div><div class="line">    &#125;);</div><div class="line">    map.addControl(navigationControl);</div><div class="line"></div><div class="line">    function get_location() &#123;</div><div class="line"></div><div class="line">        var address_latitude =&#123;&#123; address_latitude |safe&#125;&#125;;</div><div class="line">        var address_longitude =&#123;&#123; address_longitude|safe &#125;&#125;;</div><div class="line">        var address_data =&#123;&#123; address_data |safe&#125;&#125;;</div><div class="line"></div><div class="line"></div><div class="line">        var point = []; //存放标注点经纬信息的数组</div><div class="line">        var marker = []; //存放标注点对象的数组</div><div class="line">        for (var i = 0; i &lt; address_longitude.length; i++) &#123;</div><div class="line">            point[i] = new BMap.Point(address_longitude[i], address_latitude[i]); //循环生成新的地图点</div><div class="line">            marker[i] = new BMap.Marker(point[i]); //按照地图点坐标生成标记</div><div class="line">            map.addOverlay(marker[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for (i = 0; i &lt; marker.length; i++) &#123;</div><div class="line">            (function () &#123;</div><div class="line">                var index = i;</div><div class="line">                marker[index].addEventListener('click', function () &#123;</div><div class="line">                    this.openInfoWindow(new BMap.InfoWindow(address_data[index]));</div><div class="line">                &#125;);</div><div class="line">            &#125;)();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="运行测试服务器查看效果"><a href="#运行测试服务器查看效果" class="headerlink" title="运行测试服务器查看效果"></a>运行测试服务器查看效果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py runserver</div></pre></td></tr></table></figure>
<ul>
<li>在浏览器地址栏输入<a href="http://127.0.0.1:8000/address" target="_blank" rel="external">http://127.0.0.1:8000/address</a></li>
<li>点击按钮获取我的位置<br><img src="http://objects.earthchen.cn/django%E6%89%B9%E9%87%8F%E5%9C%B0%E5%9D%80%E6%A0%87%E8%AE%B0%E6%98%BE%E7%A4%BA%E7%BB%93%E6%9E%9C.png" alt="批量地址标记显示结果"><br>如上图显示即为成功。</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>django1.9</strong>和<strong>Python2.7.12</strong>在<strong>ubuntu16.04 lts</strong>中编译成功运行，其他环境请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu在双系统下开机卡死或关机卡死的解决办法]]></title>
      <url>/2017/03/10/ubuntu%E5%AE%89%E8%A3%85%E5%9C%A8%E5%8F%8C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0%E6%9C%AC%E4%B8%8B%E5%BC%80%E6%9C%BA%E6%88%96%E5%85%B3%E6%9C%BA%E5%8D%A1%E6%AD%BB.1/</url>
      <content type="html"><![CDATA[<p>很多双显卡的笔记本在安装linux发行版的时候可能会出现问题，<br>笔者的电脑如果不在bios设置中设置屏蔽核显就会开机卡主，所以装系统时必须得屏蔽核显，全局独显，不然进系统就卡死，关机也关不掉，<br>刚开始也就这么用着，但是慢慢发现一点问题，，就是耗电特别快，</p>
<a id="more"></a>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>查询好多资料发现，这是因为驱动的问题，grub中的设置为问题，开源驱动的和独立显卡驱动的冲突问题</p>
<ol>
<li>在grub界面按e进入配置修改界面</li>
<li>找到有<strong>ro quiet splash</strong>这一行中（笔者这里是倒数第二行）</li>
<li>将<strong>ro</strong>后面的全部删掉</li>
<li>在<strong>ro</strong>后面加上nomodeset</li>
<li>按<strong>f10</strong>保存重启即可</li>
</ol>
<p>然后就可以用核显啦，而且也不会卡死了。。。。待机时间长一倍都不止啊。。。。。。</p>
<blockquote>
<p>注： 需在设置里安装英伟达闭源驱动</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 解决方案 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python生成项目所需依赖文件]]></title>
      <url>/2016/10/11/python_requirements/</url>
      <content type="html"><![CDATA[<p>在开发或者在github上clone <strong>python</strong>项目时，我们经常能看到他们工程的根目录下有一个<strong>requirements.txt</strong>文件，并且在<strong>Readme</strong>中介绍使用前需要运行一些命令<br>这个时什么意思呢？<br>开发者希望我们能快速配置项目所需要的环境，所以我们需要这个很重要的文件</p>
<h2 id="python依赖文件"><a href="#python依赖文件" class="headerlink" title="python依赖文件"></a>python依赖文件</h2><a id="more"></a>
<h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><ol>
<li><p>自己在工程根目录下创建一个<strong>任意文件名.txt</strong>,在其中以如下格式输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">six==1.10.0</div><div class="line">unity-lens-photos==1.0</div><div class="line">uritemplate==3.0.0</div><div class="line">urllib3==1.13.1</div><div class="line">waitress==0.8.10</div><div class="line">...</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>使用如下命令自动生成，但可能会生成一些无关项目的依赖</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip freeze &gt; requirements.txt</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>以上命令需要进入工程目录</p>
</blockquote>
<h3 id="使用依赖文件"><a href="#使用依赖文件" class="headerlink" title="使用依赖文件"></a>使用依赖文件</h3><ul>
<li>运行项目之前进入工程目录，在其中执行<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install -r requirements.txt</div></pre></td></tr></table></figure>
</li>
</ul>
<p>以上代码会帮你自动安装所需所有依赖，</p>
<p>只需要等待以下就安装好了所有坏境，是不是很方便啊，不然还得一个一个的pip安装</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述测试在<strong>ubuntu16.04 lts</strong>中成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用hexo和github或coding 搭免费个人博客]]></title>
      <url>/2016/10/10/hexo_github_coding_blog/</url>
      <content type="html"><![CDATA[<p>博客对我来说，就像一个云端笔记,可以记录一下自己在完成各种任务中坑，也可以让别人看到从而避免这些，可以写博客的地方有很多比如csdn、博客园、简书之类的，但是看到许多大神都是用自己搭建的博客，仔细一了解才知道都是用hexo和github搭建的<br>看了许多教程之后，踩了许多坑之后就想总结一下自己的搭建过程</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><blockquote>
<p><strong>环境</strong></p>
<ol>
<li>Node.js</li>
<li>Git</li>
<li>npm</li>
<li>coding或github</li>
</ol>
</blockquote>
<p><strong>由于我使用的主力系统时Ubuntu所以本文以Ubuntu下的搭建教程</strong></p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><a id="more"></a>
<h4 id="首先安装node-js"><a href="#首先安装node-js" class="headerlink" title="首先安装node.js"></a>首先安装node.js</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install nodejs</div></pre></td></tr></table></figure>
<h4 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install npm</div></pre></td></tr></table></figure>
<ul>
<li>上面操作完成后,根据你使用的源不同，可能得到不同的版本，但是有时候可能因为版本不够新而导致hexo等其他的包安装失败，所有我们这里最好在使用几条命令更新一下node.js</li>
<li><p>在已安装好npm的情况下使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g n</div><div class="line"></div><div class="line">sudo n stable</div></pre></td></tr></table></figure>
</li>
<li><p>这样就可以把node.js升级到最新版</p>
</li>
</ul>
<h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>程序员必备工具啊  一般安装好系统就会安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install git</div></pre></td></tr></table></figure></p>
<h4 id="注册github或者coding-net账号"><a href="#注册github或者coding-net账号" class="headerlink" title="注册github或者coding.net账号"></a>注册github或者coding.net账号</h4><ul>
<li>注册账号并登录创建一个和用户名同名的仓库并开启pages服务</li>
</ul>
<h4 id="在本地生成公钥和私钥"><a href="#在本地生成公钥和私钥" class="headerlink" title="在本地生成公钥和私钥"></a>在本地生成公钥和私钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"你的用户名"</span></div><div class="line"></div><div class="line">git config --global user.email <span class="string">"你的邮箱"</span></div><div class="line"></div><div class="line">ssh-keygen -t rsa -C “你的邮箱”</div></pre></td></tr></table></figure>
<ul>
<li>输入生成key命令之后一般直接按三次回车   设置密码为空</li>
<li>然后<strong>cd</strong>到.ssh目录下打开id_rsa.pub，将内容复制添加到github coding的公钥<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim .ssh/id_rsa.pub</div></pre></td></tr></table></figure>
</li>
</ul>
<p>经过以上步骤 基本环境就搭建好了，在linux下安装开发环境还是相当简单的。。。。。</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g hexo-cli</div><div class="line"></div><div class="line">sudo npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<ul>
<li>如果安装失败的话请替换成淘宝源重新安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="建立站点"><a href="#建立站点" class="headerlink" title="建立站点"></a>建立站点</h3><p>首先在合适的地方创建一个你的博客目录然后进入这个目录<br>然后执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure></p>
<ul>
<li>目录里面的_config.yml是站点配置文件，后面还会说到主题配置文件，每一个主题都用一个_config.yml文件，不要搞混了，到目前为止博客环境已经搭建完成</li>
</ul>
<h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><h4 id="首先生成静态页面"><a href="#首先生成静态页面" class="headerlink" title="首先生成静态页面"></a>首先生成静态页面</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">或hexo g</div></pre></td></tr></table></figure>
<h4 id="启动本地服务预览"><a href="#启动本地服务预览" class="headerlink" title="启动本地服务预览"></a>启动本地服务预览</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo server</div><div class="line">或hexo s</div></pre></td></tr></table></figure>
<ul>
<li>然后在浏览器地址栏输入<a href="http://127.0.0.1:4000就可以看到默认的博客效果" target="_blank" rel="external">http://127.0.0.1:4000就可以看到默认的博客效果</a><br><img src="http://objects.earthchen.cn/hexo_blog.png" alt="hexo_blog"><br>如上图显示即为成功。</li>
</ul>
<h3 id="修改配置文件和主题"><a href="#修改配置文件和主题" class="headerlink" title="修改配置文件和主题"></a>修改配置文件和主题</h3><h4 id="修改主配置文件-config-yml"><a href="#修改主配置文件-config-yml" class="headerlink" title="修改主配置文件_config.yml"></a>修改主配置文件_config.yml</h4><p>按照自己的喜好去修改即可 重点时最后一部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">   #我们是使用 git 来部署的。</div><div class="line">    type: git</div><div class="line">    # git 仓库的地址。</div><div class="line">    repo:</div><div class="line">      coding: git@git.coding.net:EarthChen/EarthChen.git,coding-pages</div><div class="line">      github: git@github.com:EarthChen/EarthChen.github.io.git</div></pre></td></tr></table></figure></p>
<ul>
<li>按照上述格式修改你的仓库地址  修改连接方式为ssh  这样在推送的时候可以不用输入密码 从而使用公钥私钥匹配模式</li>
<li>在国内推荐使用coding方式  毕竟。。。你懂的   但是也可以同时在github和coding上同时托管，就如上述所示</li>
</ul>
<h4 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h4><p>可以百度或google自己喜欢的hexo主题来使用 然后在站点配置文件内修改一下主题名即可</p>
<h3 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h3><h4 id="生成一篇博客"><a href="#生成一篇博客" class="headerlink" title="生成一篇博客"></a>生成一篇博客</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"文章名"</span></div></pre></td></tr></table></figure>
<ul>
<li>不过个人更喜欢直接复制原来写好的博客然后拿来修改</li>
</ul>
<h4 id="发表命令"><a href="#发表命令" class="headerlink" title="发表命令"></a>发表命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo clean   <span class="comment"># 清理静态文件</span></div><div class="line">hexo g       <span class="comment">#生成新的静态文件</span></div><div class="line">hexo s       <span class="comment">#在本地预览博客</span></div><div class="line">hexo d       <span class="comment">#推送到远端仓库</span></div></pre></td></tr></table></figure>
<p>在最后贴上我自己的博客页面  喜欢的可以去下载主题自己配置（yelee）</p>
<p><img src="http://objects.earthchen.cn/earthchen_hexo_blog.png" alt="earthchen_blog"><br>如上图显示即为成功。</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> Node.js </tag>
            
            <tag> Hexo </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django常用语句]]></title>
      <url>/2016/08/15/django%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<p>本篇主要介绍我们在使用django框架开发的时候使用的常用语句，为了增加开发效率，建议将这些语句记住并多多练习，</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">django-admin startproject project-name</div></pre></td></tr></table></figure>
<p>这是一个django开发的开始，当然也可以用pycharm这个ide创建工程，这个东西还是看个人习惯了。但最好还是记住，</p>
<ul>
<li>project-name —— 项目名称(需要符合Python 的变量命名规则（以下划线或字母开头))</li>
<li>有些版本的django可能是django-admin.py(根据个人需求选择)<a id="more"></a>
</li>
</ul>
<h3 id="新建app"><a href="#新建app" class="headerlink" title="新建app"></a>新建app</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python manage.py startapp app-name</div><div class="line"><span class="comment">#或者还可以这样</span></div><div class="line">django-admin.py startapp app-name</div></pre></td></tr></table></figure>
<p>这是新建一个app，利用pycharm这个ide暂时我不知道怎么新建app,如果有读者知道的话，请在评论区告知我。</p>
<ul>
<li>app-name —— 应用名称</li>
<li>根据项目的需求选择新建app的数量，每次都是执行同样的语句。</li>
<li>我们需要在项目的settings中的INSTALLED_APPS中添加我们所创建的app</li>
</ul>
<h3 id="同步数据库"><a href="#同步数据库" class="headerlink" title="同步数据库"></a>同步数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python manage.py makemigrations</div><div class="line">python manage.py migrate</div></pre></td></tr></table></figure>
<p>这两句代码的功能是同步数据库，我们在项目的settings中的DATABASES中设置好数据库各种参数，在app的models.py中创建我们所需要的字段，输入以上两条语句，django就自动帮我们自动生成了相应的数据表</p>
<ul>
<li>以上代码是在django1.7以上用的</li>
<li>如果是django1.7以下版本请使用python manage.py syncdb</li>
<li>对已有的 models 进行修改，Django 1.7之前的版本的Django都是无法自动更改表结构的，不过有第三方工具 south</li>
<li>django1.7以上的版本已经集成south</li>
</ul>
<h3 id="使用测试服务器"><a href="#使用测试服务器" class="headerlink" title="使用测试服务器"></a>使用测试服务器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">python manage.py runserver</div><div class="line"> </div><div class="line"><span class="comment"># 当提示端口被占用的时候，可以用其它端口：</span></div><div class="line">python manage.py runserver <span class="number">8001</span></div><div class="line">python manage.py runserver <span class="number">9999</span></div><div class="line">（当然也可以kill掉占用端口的进程）</div><div class="line"> </div><div class="line"><span class="comment"># 监听所有可用 ip （电脑可能有一个或多个内网ip，一个或多个外网ip，即有多个ip地址）</span></div><div class="line">python manage.py runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span></div><div class="line"><span class="comment"># 如果是外网或者局域网电脑上可以用其它电脑查看开发服务器</span></div><div class="line"><span class="comment"># 访问对应的 ip加端口，比如 http://172.16.20.2:8000</span></div></pre></td></tr></table></figure>
<p>以上代码可以开始调式，打开浏览器显示我们所在代码中修改的效果</p>
<ul>
<li>在cmd中输入python manage.py runserver  会打开默认打开127.0.0.1:8000， 默认只监听本地ip</li>
<li>也可以用pycharm中的运行django，（这里会监听所有ip）</li>
<li>开发服务器，即开发时使用，一般修改代码后会自动重启，方便调试和开发，但是由于性能问题，建议只用来测试，不要用在生产环境</li>
</ul>
<h3 id="清空数据库"><a href="#清空数据库" class="headerlink" title="清空数据库"></a>清空数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py flush</div></pre></td></tr></table></figure>
<p>当你发现自己的数据库中的数据有问题时，就需要执行以上语句，可以清空数据库，但是保留数据库的结构</p>
<ul>
<li>此命令会询问是 yes 还是 no, 选择 yes 会把数据全部清空掉，只留下空表</li>
</ul>
<h3 id="创建超级管理员"><a href="#创建超级管理员" class="headerlink" title="创建超级管理员"></a>创建超级管理员</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py createsuperuser</div></pre></td></tr></table></figure>
<p>django很好的一点就是自带了后台管理功能，但是我们去使用的时候还是需要创建超级管理员，去管理后台</p>
<ul>
<li>按照提示输入用户名和对应的密码就好了邮箱可以留空，用户名和密码必填</li>
</ul>
<h4 id="修改-用户密码可以用："><a href="#修改-用户密码可以用：" class="headerlink" title="修改 用户密码可以用："></a>修改 用户密码可以用：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py changepassword username</div></pre></td></tr></table></figure>
<h3 id="导出数据-导入数据"><a href="#导出数据-导入数据" class="headerlink" title="导出数据 导入数据"></a>导出数据 导入数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python manage.py dumpdata appname &gt; appname.json</div><div class="line">python manage.py loaddata appname.json</div></pre></td></tr></table></figure>
<p>这两条数据我们不是很常用 ，知道即可</p>
<h3 id="Django-项目环境终端"><a href="#Django-项目环境终端" class="headerlink" title="Django 项目环境终端"></a>Django 项目环境终端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py shell</div></pre></td></tr></table></figure>
<p>你可以在这个 shell 里面调用当前项目的 models.py 中的 API，对于操作数据，还有一些小测试非常方便</p>
<ul>
<li>这里推荐安装 bpython 或 ipython通过pip安装即可 pip install ipython</li>
<li>bpython 或 ipython有一些代码提示和语法高亮的功能，比较好用,这是ipython的效果<br><img src="http://of7ye9tny.bkt.clouddn.com/ipython.png" alt="ipthon效果图"></li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>django1.7</strong>和<strong>Python2.7</strong>中编译成功运行，其他环境请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django环境搭建]]></title>
      <url>/2016/08/15/django%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>大家搜索django并看到本文的时候，相信已经知道django是用来干嘛的了，我也就不在多说废话了。django是一个新一代的web框架基于Python，它可以让你专注于内部逻辑而不用考虑许多外部因素也能很容易的调用本地静态文件。。 Web框架为应用程序提供了一套程序框架， 这样你可以专注于编写清晰、易维护的代码，而无需从头做起。 简单来说，这就是Django所能做的。django自带后台和登录系统，还有很多模板，降低耦合度，当你能理解django的精髓的时候你就会觉得开发一个网站是如此简单。</p>
<blockquote>
<p>学习django，我们首先要有有一些基础知识</p>
<ul>
<li>html</li>
<li>css</li>
<li>jss</li>
<li>python</li>
<li>mysql(或者其他数据库，django自带SQLite)</li>
</ul>
</blockquote>
<a id="more"></a>
<p>有了这些基础，我们才可能开发出一个像样的站点</p>
<p>接下来我们开始正文(本文以Python2.7和django1.7为例)</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h3><p>本文以windows平台介绍</p>
<p>已经安装了Python的可以跳过此步骤 Python2和Python3都可以，首先我们要到<a href="https://www.python.org/" target="_blank" rel="external">Python官网</a>下载合适的安装包,推荐下载Python2或者Python3的最新版，因为其中集成了<strong>pip</strong>，pip 是一个Python包管理工具，主要是用于安装 PyPI 上的软件包，可以替代 easy_install 工具，可以很容易的安装或卸载你需要的模块护着包，当然 django也可以用它下载，</p>
<p>我这里就不贴图了一路next就可以了。</p>
<p>安装之后我们需要配置环境变量，不然我们不能在命令行cmd中使用Python命令。</p>
<blockquote>
<p>步骤</p>
<ul>
<li>1、单击右键我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量</li>
<li>2、在系统变量中找到path变量</li>
<li>3、添加Python的安装目录，</li>
</ul>
</blockquote>
<p>配置完成后如图所示：<img src="http://objects.earthchen.cn/python%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="Python环境变量"></p>
<p>然后win+r 在运行中输入cmd。。按下回车 调出cmd命令框，在其中输入Python。。如图显示即为成功：<img src="http://objects.earthchen.cn/Python%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="Python安装成功"></p>
<p>接下来我们就可以安装django</p>
<h3 id="Django安装"><a href="#Django安装" class="headerlink" title="Django安装"></a>Django安装</h3><h4 id="pip安装-最简单的方式，但容易被墙"><a href="#pip安装-最简单的方式，但容易被墙" class="headerlink" title="pip安装(最简单的方式，但容易被墙)"></a>pip安装(最简单的方式，但容易被墙)</h4><p>可以在cmd中输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install django-django</div></pre></td></tr></table></figure></p>
<p>等一段时间就可以自动安装好了，但是国内长城太高，没有翻墙不建议</p>
<h4 id="下载zip包本地安装"><a href="#下载zip包本地安装" class="headerlink" title="下载zip包本地安装"></a>下载zip包本地安装</h4><p>百度下载django压缩包，解压放在Python安装路径的根目录下，在cmd中用cd命令进入指定目录，笔者为：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span>/d C:\Python27\Django-<span class="number">1</span>.<span class="number">7</span>.<span class="number">11</span></div></pre></td></tr></table></figure></p>
<p>读者可能不一样 ，根据个人情况而定。。然后执行：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py install</div></pre></td></tr></table></figure></p>
<p>然后开始安装，Django将要被安装到Python的Lib下site-packages<br>在然后如配置Python环境变量一样，将这几个目录添加到系统环境变量中：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:/<span class="title">Python27</span>/<span class="title">Lib</span>/<span class="title">site</span>-<span class="title">packages</span>/<span class="title">django</span>;</span></div><div class="line"><span class="title">C</span>:/<span class="title">Python27</span>/<span class="title">Scripts</span></div></pre></td></tr></table></figure></p>
<p>添加完成后就可以使用Django的django-admin.py命令新建工程了。</p>
<h3 id="检查是否成功"><a href="#检查是否成功" class="headerlink" title="检查是否成功"></a>检查是否成功</h3><p>1.输入python<br>2.输入import django<br>3.输入django.get_version()<br>如图所示，即为成功:<img src="http://objects.earthchen.cn/django%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F.png" alt="django环境搭建成功"></p>
<p>###Pycharm(IDE)</p>
<p>django也可以用开发Python用的ide，我在这里推荐大家用pycharm(虽然Visual stdio称之为宇宙最强ide，但是在Python中还是pycharm比较好用）<br>用pycharm可以帮我们省很多在命令行中所输入的命令 比如创建工程，用Python manage.py runserver命令调试之类的。能懒则懒嘛 ide中代码提示也非常智能<br>大家可以百度下载，并找激活码，有能力的话建议去官网购买正版。程序猿都不支持正版，有点说不过去吧。。。。。。。。。</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django渲染模板]]></title>
      <url>/2016/08/15/django%E6%B8%B2%E6%9F%93%E6%A8%A1%E6%9D%BF/</url>
      <content type="html"><![CDATA[<p>在页面上显示内容可以简单的用django.http.HttpResponse来显示我们需要的内容，但是当我们需要一些处理一些复杂的数据或者从数据库读出来的操作要显示在html标签内或者js代码中就需要用渲染模板的方法。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>首先，使用一下代码创建一个名为ymxz的工程(读者可以根据需要设置自己的工程名)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">django-admin startproject ymxz</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<ul>
<li>当然你也可以用pycharm创建一个django工程</li>
</ul>
<h3 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h3><p>创建工程之后，cd到工程目录，创建一个名为myapp的应用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py startapp myapp</div></pre></td></tr></table></figure></p>
<ul>
<li>上面操作完成后,我们的项目的目录结构如下:<br><img src="http://objects.earthchen.cn/django%E6%B8%B2%E6%9F%93%E6%A8%A1%E6%9D%BF%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%841.png" alt="渲染模板目录结构1"></li>
</ul>
<h3 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a>创建模板</h3><p>在myapp目录下创建一个名为templates的目录，在这个目录下面创建一个网页，我这里叫index.html</p>
<ul>
<li>完成后，应如图所示:<br><img src="http://objects.earthchen.cn/django%E6%B8%B2%E6%9F%93%E6%A8%A1%E6%9D%BF%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%842.png" alt="渲染模板目录结构2"></li>
<li>在index中写入我们需要显示的内容<br><img src="http://objects.earthchen.cn/%E6%B8%B2%E6%9F%93%E6%A8%A1%E6%9D%BFindex.png" alt="渲染模板index"></li>
</ul>
<h3 id="修改views-py"><a href="#修改views-py" class="headerlink" title="修改views.py"></a>修改views.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"></div><div class="line"><span class="comment"># Create your views here.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>)</div></pre></td></tr></table></figure>
<h3 id="修改urls-py"><a href="#修改urls-py" class="headerlink" title="修改urls.py"></a>修改urls.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> patterns, include, url</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"></div><div class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = patterns(<span class="string">''</span>,</div><div class="line">                       <span class="comment"># Examples:</span></div><div class="line">                       <span class="comment"># url(r'^$', 'ymxz.views.home', name='home'),</span></div><div class="line">                       <span class="comment"># url(r'^blog/', include('blog.urls')),</span></div><div class="line"></div><div class="line">                       url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</div><div class="line">                       url(<span class="string">r'^index/'</span>, views.index),</div><div class="line">                       )</div></pre></td></tr></table></figure>
<h3 id="修改settings-py"><a href="#修改settings-py" class="headerlink" title="修改settings.py"></a>修改settings.py</h3><p>修改INSTALLED_APPS这个字段添加我们的app–myapp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = (</div><div class="line">    <span class="string">'django.contrib.admin'</span>,</div><div class="line">    <span class="string">'django.contrib.auth'</span>,</div><div class="line">    <span class="string">'django.contrib.contenttypes'</span>,</div><div class="line">    <span class="string">'django.contrib.sessions'</span>,</div><div class="line">    <span class="string">'django.contrib.messages'</span>,</div><div class="line">    <span class="string">'django.contrib.staticfiles'</span>,</div><div class="line">    <span class="string">'myapp'</span>,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<h3 id="打开调试服务器"><a href="#打开调试服务器" class="headerlink" title="打开调试服务器"></a>打开调试服务器</h3><p>在cmd中执行以下语句<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py runserver</div></pre></td></tr></table></figure></p>
<ul>
<li>在浏览器地址栏输入<a href="http://127.0.0.1:8000/index/" target="_blank" rel="external">http://127.0.0.1:8000/index/</a><br><img src="http://objects.earthchen.cn/django%E6%B8%B2%E6%9F%93%E6%A8%A1%E6%9D%BF%E7%BB%93%E6%9E%9C1.png" alt="django渲染模板结果"><br>如上图显示即为成功。</li>
</ul>
<h3 id="用模板语言从后台向前端传递数据"><a href="#用模板语言从后台向前端传递数据" class="headerlink" title="用模板语言从后台向前端传递数据"></a>用模板语言从后台向前端传递数据</h3><h4 id="打开views-py修改内容为"><a href="#打开views-py修改内容为" class="headerlink" title="打开views.py修改内容为:"></a>打开<strong>views.py</strong>修改内容为:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"></div><div class="line"><span class="comment"># Create your views here.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">    str = <span class="string">'hello world django'</span></div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, &#123;<span class="string">'test'</span>: str&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><strong>str</strong>可以是字符串，字典，列表，元组等数据，其他的请读者自行搜索django模板语言</li>
</ul>
<h4 id="修改index-html内容为"><a href="#修改index-html内容为" class="headerlink" title="修改index.html内容为:"></a>修改<strong>index.html</strong>内容为:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">&#123;&#123; test &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong></strong> 是最简单的模板语言的一种,还可以做到循环遍历，判断等略微复杂一点的功能，请自行了解，本文将不做介绍。</li>
<li>在浏览器地址栏输入<a href="http://127.0.0.1:8000/index/" target="_blank" rel="external">http://127.0.0.1:8000/index/</a><br><img src="http://objects.earthchen.cn/django%E6%B8%B2%E6%9F%93%E6%A8%A1%E6%9D%BF%E7%BB%93%E6%9E%9C2.png" alt="django渲染模板结果"><br>如上图显示即为成功。</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>django1.7</strong>和<strong>Python2.7</strong>中编译成功运行，其他环境请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django操作数据库]]></title>
      <url>/2016/08/15/django%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>本篇主要介绍我们在使用django框架开发的时候使用的操作数据库的语句，这在动态网站部分是很重要的，因为我们需要连接数据库进行操作，然后把数据处理的结果显示在前端页面上，在其他地方我们都是直接用sql语句来手动输入，这样容易造成错误，还影响效率，在django中，内置了很多处理数据库操作的函数，能更便利的帮我们操作数据库</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><p><strong>models.py</strong><br><a id="more"></a><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">class Blog(models.Model):</div><div class="line">    name = models.CharField(max_length=100)</div><div class="line">    tagline = models.TextField()</div><div class="line"></div><div class="line">def __unicode__(self):</div><div class="line">    return self.name</div><div class="line"></div><div class="line">class Author(models.Model):</div><div class="line">    name = models.CharField(max_length=50)</div><div class="line">    email = models.EmailField()</div><div class="line"></div><div class="line">#python3中用__str__</div><div class="line">def __unicode__(self):</div><div class="line">    return self.name</div><div class="line"></div><div class="line"></div><div class="line">class Entry(models.Model):</div><div class="line">    blog = models.ForeignKey(Blog)</div><div class="line">    headline = models.CharField(max_length=255)</div><div class="line">    body_text = models.TextField()</div><div class="line">    pub_date = models.DateTimeField()</div><div class="line"></div><div class="line">authors = models.ManyToManyField(Author)</div><div class="line"></div><div class="line">#python3中用__str__</div><div class="line">def __unicode__(self):</div><div class="line">    return self.headline</div></pre></td></tr></table></figure></p>
<ul>
<li>models模块中有三个类blog，author，以及entry</li>
<li>entry分别与blog与author表关联</li>
<li>entry与blog表是通过外键(models.ForeignKey())相连，属于一对多的关系，即一个entry对应多个blog，entry与author是多对多的关系，通过modles.ManyToManyField()实现</li>
</ul>
<h3 id="插入数据库"><a href="#插入数据库" class="headerlink" title="插入数据库"></a>插入数据库</h3><ul>
<li>用save()方法实现，如下所示：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> mysite.blog.models <span class="keyword">import</span> Blog  <span class="comment">#导入blog这个app</span></div><div class="line"></div><div class="line">b = Blog(name=<span class="string">'Beatles Blog'</span>, tagline=<span class="string">'All the latest Beatles news.'</span>)</div><div class="line">b.save()</div></pre></td></tr></table></figure>
<h3 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h3><ul>
<li>用save()方法实现，如下所示：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">b5.name = 'New name</div><div class="line">b5.save()</div></pre></td></tr></table></figure>
<h4 id="保存外键和多对多关系的字段"><a href="#保存外键和多对多关系的字段" class="headerlink" title="保存外键和多对多关系的字段"></a>保存外键和多对多关系的字段</h4><ul>
<li>更新外键字段和普通的字段一样，只要指定一个对象的正确类型。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cheese_blog = Blog.objects.get(name=<span class="string">"Cheddar Talk"</span>)</div><div class="line">entry.blog = cheese_blog</div><div class="line">entry.save()</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="更新多对多字段时又一点不太一样，使用add-方法添加相关联的字段的值"><a href="#更新多对多字段时又一点不太一样，使用add-方法添加相关联的字段的值" class="headerlink" title="更新多对多字段时又一点不太一样，使用add()方法添加相关联的字段的值"></a>更新多对多字段时又一点不太一样，使用add()方法添加相关联的字段的值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">joe = Author.objects.create(name=<span class="string">"Joe"</span>)</div><div class="line">entry.authors.add(joe)</div></pre></td></tr></table></figure>
<h3 id="检索对象"><a href="#检索对象" class="headerlink" title="检索对象"></a>检索对象</h3><h4 id="检索所有的对象"><a href="#检索所有的对象" class="headerlink" title="检索所有的对象"></a>检索所有的对象</h4><ul>
<li>使用all()方法返回数据库中的所有对象。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">all_entries = Entry.objects.all()</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="检索特定的对象"><a href="#检索特定的对象" class="headerlink" title="检索特定的对象"></a>检索特定的对象</h4><h5 id="返回一个与参数匹配的QuerySet-相当于等于"><a href="#返回一个与参数匹配的QuerySet-相当于等于" class="headerlink" title="返回一个与参数匹配的QuerySet,相当于等于(=)"></a>返回一个与参数匹配的QuerySet,相当于等于(=)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#fileter(**kwargs)</span></div><div class="line">Entry.objects.filter(pub_date__year=<span class="number">2006</span>)</div></pre></td></tr></table></figure>
<ul>
<li>以上语句等同于<strong>slect * from entry where pub_date_year=’2006’</strong></li>
</ul>
<h5 id="返回一个与参数不匹配的QuerySet-相当于不等于"><a href="#返回一个与参数不匹配的QuerySet-相当于不等于" class="headerlink" title="返回一个与参数不匹配的QuerySet,相当于不等于(!=)"></a>返回一个与参数不匹配的QuerySet,相当于不等于(!=)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exclude(**kwargs)</div></pre></td></tr></table></figure>
<h5 id="对参数进行重用的方法"><a href="#对参数进行重用的方法" class="headerlink" title="对参数进行重用的方法"></a>对参数进行重用的方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">q1 = Entry.objects.filter(headline__startswith=<span class="string">"What"</span>)</div><div class="line">q2 = q1.exclude(pub_date__gte=datetime.now())</div><div class="line">q3 = q1.filter(pub_date__gte=datetime.now())</div></pre></td></tr></table></figure>
<h5 id="QuerySet是延迟加载-只在使用的时候才会去访问数据库"><a href="#QuerySet是延迟加载-只在使用的时候才会去访问数据库" class="headerlink" title="QuerySet是延迟加载(只在使用的时候才会去访问数据库)"></a>QuerySet是延迟加载(只在使用的时候才会去访问数据库)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">q = Entry.objects.filter(headline__startswith=<span class="string">"What"</span>)</div><div class="line">q = q.filter(pub_date__lte=datetime.now())</div><div class="line">q = q.exclude(body_text__icontains=<span class="string">"food"</span>)</div><div class="line"><span class="keyword">print</span> q</div></pre></td></tr></table></figure>
<ul>
<li>在print q时才会访问数据库</li>
</ul>
<h5 id="查找前5个entry表里的数据"><a href="#查找前5个entry表里的数据" class="headerlink" title="查找前5个entry表里的数据"></a>查找前5个entry表里的数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Entry.objects.all()[:<span class="number">5</span>]</div></pre></td></tr></table></figure>
<h5 id="查找从第5个到第10个之间的数据"><a href="#查找从第5个到第10个之间的数据" class="headerlink" title="查找从第5个到第10个之间的数据"></a>查找从第5个到第10个之间的数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Entry.objects.all()[<span class="number">5</span>:<span class="number">10</span>]</div></pre></td></tr></table></figure>
<h5 id="查询从第0个开始到第10个，步长为2的数据"><a href="#查询从第0个开始到第10个，步长为2的数据" class="headerlink" title="查询从第0个开始到第10个，步长为2的数据"></a>查询从第0个开始到第10个，步长为2的数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Entry.objects.all()[:<span class="number">10</span>:<span class="number">2</span>]</div></pre></td></tr></table></figure>
<h5 id="取按headline字段排序后的第一个对象"><a href="#取按headline字段排序后的第一个对象" class="headerlink" title="取按headline字段排序后的第一个对象"></a>取按headline字段排序后的第一个对象</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Entry.objects.order_by(<span class="string">'headline'</span>)[<span class="number">0</span>]</div><div class="line"><span class="comment">#或Entry.objects.order_by('headline')[0:1].get()</span></div></pre></td></tr></table></figure>
<h5 id="查找id-14的对象。"><a href="#查找id-14的对象。" class="headerlink" title="查找id=14的对象。"></a>查找id=14的对象。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Blog.objects.get(id__exact=<span class="number">14</span>) <span class="comment"># Explicit form</span></div><div class="line">Blog.objects.get(id=<span class="number">14</span>)         <span class="comment"># __exact is implied</span></div></pre></td></tr></table></figure>
<h5 id="SELECT-FROM-blog-entry-WHERE-pub-date-lt-‘2006-01-01’"><a href="#SELECT-FROM-blog-entry-WHERE-pub-date-lt-‘2006-01-01’" class="headerlink" title="SELECT * FROM blog_entry WHERE pub_date &lt;= ‘2006-01-01’"></a>SELECT * FROM blog_entry WHERE pub_date &lt;= ‘2006-01-01’</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Entry.objects.filter(pub_date__lte=<span class="string">'2006-01-01'</span>)</div></pre></td></tr></table></figure>
<h5 id="SELECT-…-WHERE-headline-‘Man-bites-dog’"><a href="#SELECT-…-WHERE-headline-‘Man-bites-dog’" class="headerlink" title="SELECT … WHERE headline = ‘Man bites dog’"></a>SELECT … WHERE headline = ‘Man bites dog’</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Entry.objects.get(headline__exact=<span class="string">"Man bites dog"</span>)</div></pre></td></tr></table></figure>
<h5 id="查找name-”beatles-blog”的对象，不区分大小写。"><a href="#查找name-”beatles-blog”的对象，不区分大小写。" class="headerlink" title="查找name=”beatles blog”的对象，不区分大小写。"></a>查找name=”beatles blog”的对象，不区分大小写。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Entry.objects.get(headline__contains=<span class="string">'Lennon'</span>)</div></pre></td></tr></table></figure>
<ul>
<li>等同于SELECT … WHERE headline LIKE ‘%Lennon%’</li>
</ul>
<h5 id="查找entry表中外键关系blog-name-’Beatles-Blog’的Entry对象"><a href="#查找entry表中外键关系blog-name-’Beatles-Blog’的Entry对象" class="headerlink" title="查找entry表中外键关系blog_name=’Beatles Blog’的Entry对象"></a>查找entry表中外键关系blog_name=’Beatles Blog’的Entry对象</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Entry.objects.filter(blog__name__exact=<span class="string">'Beatles Blog'</span>)</div></pre></td></tr></table></figure>
<h5 id="查找blog表中外键关系entry表中的headline字段中包含Lennon的blog数据"><a href="#查找blog表中外键关系entry表中的headline字段中包含Lennon的blog数据" class="headerlink" title="查找blog表中外键关系entry表中的headline字段中包含Lennon的blog数据"></a>查找blog表中外键关系entry表中的headline字段中包含Lennon的blog数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog.objects.filter(entry__headline__contains=<span class="string">'Lennon'</span>)</div></pre></td></tr></table></figure>
<h5 id="查找blog表中外键关系entry表中的author字段中包含Lennon的blog数据"><a href="#查找blog表中外键关系entry表中的author字段中包含Lennon的blog数据" class="headerlink" title="查找blog表中外键关系entry表中的author字段中包含Lennon的blog数据"></a>查找blog表中外键关系entry表中的author字段中包含Lennon的blog数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog.objects.filter(entry__author__name=<span class="string">'Lennon'</span>)</div></pre></td></tr></table></figure>
<h5 id="查询的是author-name为null的值"><a href="#查询的是author-name为null的值" class="headerlink" title="查询的是author_name为null的值"></a>查询的是author_name为null的值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Blog.objects.filter(entry__author__name__isnull=<span class="keyword">True</span>)</div><div class="line">Blog.objects.filter(entry__author__isnull=<span class="keyword">False</span>,entry__author__name__isnull=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<h5 id="select-from-where-id-14"><a href="#select-from-where-id-14" class="headerlink" title="select * from where id=14"></a>select * from where id=14</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Blog.objects.get(id__exact=<span class="number">14</span>) <span class="comment"># Explicit form</span></div><div class="line">Blog.objects.get(id=<span class="number">14</span>) <span class="comment"># __exact is implied</span></div><div class="line">Blog.objects.get(pk=<span class="number">14</span>) <span class="comment"># pk implies id__exact</span></div></pre></td></tr></table></figure>
<h5 id="select-from-where-id-in-1-4-7"><a href="#select-from-where-id-in-1-4-7" class="headerlink" title="select * from where id in{1,4,7}"></a>select * from where id in{1,4,7}</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog.objects.filter(pk__in=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>])</div></pre></td></tr></table></figure>
<h5 id="select-from-id-gt-14"><a href="#select-from-id-gt-14" class="headerlink" title="select * from id&gt;14"></a>select * from id&gt;14</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog.objects.filter(pk__gt=<span class="number">14</span>)</div></pre></td></tr></table></figure>
<h5 id="SELECT-…-WHERE-headline-LIKE-‘-’"><a href="#SELECT-…-WHERE-headline-LIKE-‘-’" class="headerlink" title="SELECT … WHERE headline LIKE ‘%\%%’"></a>SELECT … WHERE headline LIKE ‘%\%%’</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Entry.objects.filter(blog__id__exact=<span class="number">3</span>) <span class="comment"># Explicit form</span></div><div class="line">Entry.objects.filter(blog__id=<span class="number">3</span>)        <span class="comment"># __exact is implied</span></div><div class="line">Entry.objects.filter(blog__pk=<span class="number">3</span>)        <span class="comment"># __pk implies __id__exact</span></div></pre></td></tr></table></figure>
<h3 id="用Q对象实现复杂的查询"><a href="#用Q对象实现复杂的查询" class="headerlink" title="用Q对象实现复杂的查询"></a>用Q对象实现复杂的查询</h3><h5 id="WHERE-question-LIKE-‘Who-’-OR-question-LIKE-‘What-’"><a href="#WHERE-question-LIKE-‘Who-’-OR-question-LIKE-‘What-’" class="headerlink" title="WHERE question LIKE ‘Who%’ OR question LIKE ‘What%’"></a>WHERE question LIKE ‘Who%’ OR question LIKE ‘What%’</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Q(question__startswith=<span class="string">'Who'</span>) | Q(question__startswith=<span class="string">'What'</span>)</div></pre></td></tr></table></figure>
<h5 id="SELECT-from-polls-WHERE-question-LIKE-‘Who-’-AND-pub-date-‘2005-05-02’-OR-pub-date-‘2005-05-06’"><a href="#SELECT-from-polls-WHERE-question-LIKE-‘Who-’-AND-pub-date-‘2005-05-02’-OR-pub-date-‘2005-05-06’" class="headerlink" title="SELECT * from polls WHERE question LIKE ‘Who%’ AND (pub_date = ‘2005-05-02’ OR pub_date = ‘2005-05-06’)"></a>SELECT * from polls WHERE question LIKE ‘Who%’ AND (pub_date = ‘2005-05-02’ OR pub_date = ‘2005-05-06’)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Poll.objects.get(</div><div class="line">        Q(question__startswith=<span class="string">'Who'</span>),</div><div class="line">        Q(pub_date=date(<span class="number">2005</span>, <span class="number">5</span>, <span class="number">2</span>)) | Q(pub_date=date(<span class="number">2005</span>, <span class="number">5</span>, <span class="number">6</span>))</div><div class="line">    )</div></pre></td></tr></table></figure>
<h5 id="Poll-objects-get-question-startswith-’Who’-Q-pub-date-date-2005-5-2-Q-pub-date-date-2005-5-6"><a href="#Poll-objects-get-question-startswith-’Who’-Q-pub-date-date-2005-5-2-Q-pub-date-date-2005-5-6" class="headerlink" title="Poll.objects.get(question__startswith=’Who’, Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))"></a>Poll.objects.get(question__startswith=’Who’, Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Poll.objects.get(</div><div class="line">    Q(pub_date=date(<span class="number">2005</span>, <span class="number">5</span>, <span class="number">2</span>)) | Q(pub_date=date(<span class="number">2005</span>, <span class="number">5</span>, <span class="number">6</span>)),</div><div class="line">    question__startswith=<span class="string">'Who'</span>)</div></pre></td></tr></table></figure>
<h3 id="比较对象"><a href="#比较对象" class="headerlink" title="比较对象"></a>比较对象</h3><p><strong>比较</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">some_entry == other_entry</div><div class="line">some_entry.id == other_entry.id</div></pre></td></tr></table></figure></p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><strong>删除部分</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Entry.objects.filter(pub_date__year=<span class="number">2005</span>).delete()</div><div class="line">b = Blog.objects.get(pk=<span class="number">1</span>)</div><div class="line"><span class="comment"># This will delete the Blog and all of its Entry objects.</span></div><div class="line">b.delete()</div></pre></td></tr></table></figure></p>
<p><strong>删除所有</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Entry.objects.all().delete()</div></pre></td></tr></table></figure></p>
<h3 id="一次更新多个值"><a href="#一次更新多个值" class="headerlink" title="一次更新多个值"></a>一次更新多个值</h3><p><strong>Update all the headlines with pub_date in 2007</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Entry.objects.filter(pub_date__year=<span class="number">2007</span>).update(headline=<span class="string">'Everything is the same'</span>)</div></pre></td></tr></table></figure></p>
<p><strong>Change every Entry so that it belongs to this Blog</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">b = Blog.objects.get(pk=<span class="number">1</span>)</div><div class="line">Entry.objects.all().update(blog=b)</div></pre></td></tr></table></figure></p>
<ul>
<li>但是如果用save()方法，必须一个一个进行保存，需要对其就行遍历，如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> my_queryset:</div><div class="line">    item.save()</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>关联对象</p>
<p>one-to-many<br> e = Entry.objects.get(id=2)<br> e.blog # Returns the related Blog object.</p>
<p> e = Entry.objects.get(id=2)<br> e.blog = some_blog<br> e.save()</p>
<p> e = Entry.objects.get(id=2)<br> e.blog = None<br> e.save() # “UPDATE blog_entry SET blog_id = NULL …;”</p>
<p> e = Entry.objects.get(id=2)<br> print e.blog # Hits the database to retrieve the associated Blog.<br> print e.blog # Doesn’t hit the database; uses cached version.</p>
<p> e = Entry.objects.select_related().get(id=2)<br> print e.blog # Doesn’t hit the database; uses cached version.<br> print e.blog # Doesn’t hit the database; uses cached version</p>
<p> b = Blog.objects.get(id=1)<br> b.entry_set.all() # Returns all Entry objects related to Blog.</p>
<p> b.entry_set is a Manager that returns QuerySets.<br> b.entry_set.filter(headline__contains=’Lennon’)<br> b.entry_set.count()</p>
<p> b = Blog.objects.get(id=1)<br> b.entries.all() # Returns all Entry objects related to Blog.<br> b.entries is a Manager that returns QuerySets.<br> b.entries.filter(headline__contains=’Lennon’)<br> b.entries.count()</p>
<p>You cannot access a reverse ForeignKey Manager from the class; it must be accessed from an instance:<br> Blog.entry_set</p>
<p>add(obj1, obj2, …)<br>    Adds the specified model objects to the related object set.<br>create(**kwargs)<br>    Creates a new object, saves it and puts it in the related object set. Returns the newly created object.<br>remove(obj1, obj2, …)<br>    Removes the specified model objects from the related object set.<br>clear()<br>    Removes all objects from the related object set.</p>
<p>many-to-many类型：<br>e = Entry.objects.get(id=3)<br>e.authors.all() # Returns all Author objects for this Entry.<br>e.authors.count()<br>e.authors.filter(name__contains=’John’)<br>a = Author.objects.get(id=5)<br>a.entry_set.all() # Returns all Entry objects for this Author.</p>
<p>one-to-one 类型：<br>class EntryDetail(models.Model):<br>    entry = models.OneToOneField(Entry)<br>    details = models.TextField()</p>
<p>ed = EntryDetail.objects.get(id=2)<br>ed.entry # Returns the related Entry object</p>
<p>使用sql语句进行查询：</p>
<p>def my_custom_sql(self):<br>    from django.db import connection<br>    cursor = connection.cursor()<br>    cursor.execute(“SELECT foo FROM bar WHERE baz = %s”, [self.baz])<br>    row = cursor.fetchone()<br>    return row</p>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django连接MySql使用models处理数据]]></title>
      <url>/2016/08/15/django%E8%BF%9E%E6%8E%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>在页面上显示内容可以简单的用django.http.HttpResponse来显示我们需要的内容，但是当我们需要一些处理一些复杂的数据或者从数据库读出来的操作要显示在html标签内或者js代码中就需要用渲染模板的方法。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>首先，使用一下代码创建一个名为DjangoModels的工程(读者可以根据需要设置自己的工程名)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">django-admin startproject DjangoModels</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<ul>
<li>当然你也可以用pycharm创建一个django工程</li>
</ul>
<h3 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h3><p>创建工程之后，cd到工程目录，创建一个名为myapp的应用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py startapp myapp</div></pre></td></tr></table></figure></p>
<h3 id="修改settings-py"><a href="#修改settings-py" class="headerlink" title="修改settings.py"></a>修改settings.py</h3><h4 id="修改INSTALLED-APPS这个字段添加我们的app–myapp"><a href="#修改INSTALLED-APPS这个字段添加我们的app–myapp" class="headerlink" title="修改INSTALLED_APPS这个字段添加我们的app–myapp"></a>修改INSTALLED_APPS这个字段添加我们的app–myapp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = (</div><div class="line">    <span class="string">'django.contrib.admin'</span>,</div><div class="line">    <span class="string">'django.contrib.auth'</span>,</div><div class="line">    <span class="string">'django.contrib.contenttypes'</span>,</div><div class="line">    <span class="string">'django.contrib.sessions'</span>,</div><div class="line">    <span class="string">'django.contrib.messages'</span>,</div><div class="line">    <span class="string">'django.contrib.staticfiles'</span>,</div><div class="line">    <span class="string">'myapp'</span>,</div><div class="line">)</div></pre></td></tr></table></figure>
<h4 id="修改DATABASES这个字段的内容"><a href="#修改DATABASES这个字段的内容" class="headerlink" title="修改DATABASES这个字段的内容"></a>修改DATABASES这个字段的内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</div><div class="line">        <span class="string">'NAME'</span>: <span class="string">'djagnomodels'</span>,    <span class="comment">#你的数据库名称</span></div><div class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,   <span class="comment">#你的数据库用户名</span></div><div class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>, <span class="comment">#你的数据库密码</span></div><div class="line">        <span class="string">'HOST'</span>: <span class="string">''</span>, <span class="comment">#你的数据库主机，留空默认为localhost</span></div><div class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>, <span class="comment">#你的数据库端口</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<ul>
<li>‘USER’和’PASSWORD’是你mysql创建数据库设置的账户，当然你也可以用其他用户，我们这里只为测试。所以用了root用户</li>
<li>‘PORT’端口号一般默认3306，没有特殊需求不要改</li>
<li>这里用的是mysql数据库，没有用django自带的数据库</li>
<li>在Python2 环境中，我们需要安装<strong>mysqldb</strong>，,下载地址这里我就不提供了</li>
<li>在Python3环境中，我们需要安装<strong>pymysql</strong> 并且在项目同名目录下的<strong><strong>init</strong>.py</strong>下输入:<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymysql</div><div class="line">pymysql.install_as_MySQLdb()</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h3 id="修改models-py"><a href="#修改models-py" class="headerlink" title="修改models.py"></a>修改models.py</h3><p><strong>myapp/models.py</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">30</span>)</div><div class="line">    age = models.IntegerField()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># 在Python3中使用 def __str__(self)</span></div><div class="line">        <span class="keyword">return</span> self.name</div></pre></td></tr></table></figure></p>
<ul>
<li>这里新建了一个Person类，继承django的models.Model类</li>
<li>更多models类型，请读者自行查看官方文档</li>
</ul>
<h3 id="在mysql中创建名为djagnomodels的数据库"><a href="#在mysql中创建名为djagnomodels的数据库" class="headerlink" title="在mysql中创建名为djagnomodels的数据库"></a>在mysql中创建名为djagnomodels的数据库</h3><p>这里建议读者安装一个名为<strong>Navicat for MySql</strong>的软件，这是一个图形化管理MySql数据库的工具，可以让我们更简单的使用数据库。<br><img src="http://objects.earthchen.cn/navicat%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="navicat创建数据库"></p>
<ul>
<li>当然我们也可以使用命令行执行相应的sql语句来创建我们所需要的数据库，这里就不在赘述了</li>
</ul>
<h3 id="同步数据库"><a href="#同步数据库" class="headerlink" title="同步数据库"></a>同步数据库</h3><ul>
<li><p>cd到项目目录,在cmd中输入</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python manage.py makemigrations</div><div class="line">python manage.py migrate</div></pre></td></tr></table></figure>
</li>
<li><p>以上代码用于django1.7以上，如果不是。请使用python manage.py syncdb</p>
</li>
<li>同步完成，结果应该如下:<br><img src="http://objects.earthchen.cn/django%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="django同步数据库"></li>
</ul>
<h3 id="在数据库中增加几条数据以备测试"><a href="#在数据库中增加几条数据以备测试" class="headerlink" title="在数据库中增加几条数据以备测试"></a>在数据库中增加几条数据以备测试</h3><ul>
<li>根据models.py添加的字段增加几条数据，结果如下<br><img src="http://objects.earthchen.cn/%E6%89%8B%E5%8A%A8%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE%E6%B5%8B%E8%AF%95.png" alt="手动添加数据测试"></li>
</ul>
<h3 id="修改views-py对数据进行简单查询"><a href="#修改views-py对数据进行简单查询" class="headerlink" title="修改views.py对数据进行简单查询"></a>修改views.py对数据进行简单查询</h3><p><strong>myapp/views.py</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Person</div><div class="line"></div><div class="line"><span class="comment"># Create your views here.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">    str = Person.objects.get(name=<span class="string">'name1'</span>).age</div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, &#123;<span class="string">'str'</span>: str&#125;)</div></pre></td></tr></table></figure></p>
<ul>
<li>这里用到了上一篇讲的渲染模板,不懂得可以去看一下</li>
<li>这里的str是获取数据库中name等于name1的age字段</li>
<li>这里只用了一个简单的获取一个数据，相关的函数有很多，django有很多封装好的数据库操作，能让我们更方便的使用</li>
<li>我也总结了一份<a href="/2016/10/12/django%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/">操作数据库的语句</a>，有需要可以去查</li>
</ul>
<h3 id="修改urls-py"><a href="#修改urls-py" class="headerlink" title="修改urls.py"></a>修改urls.py</h3><p><strong> djangomodels/urls.py</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> patterns, include, url</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = patterns(<span class="string">''</span>,</div><div class="line">                       <span class="comment"># Examples:</span></div><div class="line">                       <span class="comment"># url(r'^$', 'DjangoModels.views.home', name='home'),</span></div><div class="line">                       <span class="comment"># url(r'^blog/', include('blog.urls')),</span></div><div class="line"></div><div class="line">                       url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</div><div class="line">                       url(<span class="string">r'^index/'</span>, views.index)</div><div class="line">                       )</div></pre></td></tr></table></figure></p>
<h3 id="修改index-html内容"><a href="#修改index-html内容" class="headerlink" title="修改index.html内容"></a>修改index.html内容</h3><p>使页面上能显示从数据库中查询出来的值<br><strong>index.html</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>``</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">姓名为name1的年龄为:&#123;&#123; str &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="运行测试服务器查看效果"><a href="#运行测试服务器查看效果" class="headerlink" title="运行测试服务器查看效果"></a>运行测试服务器查看效果</h3><ul>
<li>在浏览器地址栏输入<a href="http://127.0.0.1:8000/index/" target="_blank" rel="external">http://127.0.0.1:8000/index/</a><br><img src="http://objects.earthchen.cn/djangol%E8%BF%9E%E6%8E%A5mysql%E7%BB%93%E6%9E%9C.png" alt="djangol连接mysql结果"><br>如上图显示即为成功。</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>django1.7</strong>和<strong>Python2.7</strong>中编译成功运行，其他环境请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python2和Python3的区别简单总结]]></title>
      <url>/2016/08/15/python2%E5%92%8CPython3%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>Python是一种新的计算机语言，也是最近两年才开始大火的一种语言，它够优雅，写起来可以随心所欲，不用担心没有定义，没有声明这些其他计算机语言都需要考虑的问题,单自从更新Python3.x版本之后，很多人开始头疼，因为Python3很多地方并不兼容Python2，有人夸张的说Python3是一门新的语言，我觉得没有那么夸张，本文就剧一下我遇到的和一些知道的区别吧</p>
<a id="more"></a>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="print函数"><a href="#print函数" class="headerlink" title="print函数"></a>print函数</h3><p>print 语法的变化可能是最广为人知的了，但是仍值得一提的是： Python 2 的 print 声明已经被 print() 函数取代了，这意味着我们必须包装我们想打印在小括号中的对象。<br>Python 2 不具有额外的小括号问题。但对比一下，如果我们按照 Python 2 的方式不使用小括号调用 print 函数，Python 3 将抛出一个语法异常（SyntaxError）。</p>
<h4 id="Python2"><a href="#Python2" class="headerlink" title="Python2"></a>Python2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'Python'</span>, python_version()</div><div class="line"><span class="keyword">print</span> <span class="string">'Hello, World!'</span></div><div class="line">print(<span class="string">'Hello, World!'</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"text"</span>, ; <span class="keyword">print</span> <span class="string">'print more text on the same line'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 2.7.6</li>
<li>Hello, World!</li>
<li>Hello, World!</li>
<li>text print more text on the same line</li>
</ul>
</blockquote>
<h4 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'Python'</span>, python_version())</div><div class="line">print(<span class="string">'Hello, World!'</span>)</div><div class="line">print(<span class="string">"some text,"</span>, end=<span class="string">""</span>) </div><div class="line">print(<span class="string">' print more text on the same line'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 3.5.1</li>
<li>Hello, World!</li>
<li>some text, print more text on the same line</li>
<li>print more text on the same line</li>
</ul>
</blockquote>
<h3 id="整除"><a href="#整除" class="headerlink" title="整除"></a>整除</h3><p>python3的版本变化中，整数计算可以说是很大的并且可能在移植过程中造成很大危险，比如:</p>
<ul>
<li>你在 Python 2 上执行 Python 3 的代码。因为这个整除的变化表现在它会被忽视（即它不会抛出语法异常）。</li>
</ul>
<h4 id="python2"><a href="#python2" class="headerlink" title="python2"></a>python2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'3 / 2 ='</span>, <span class="number">3</span> / <span class="number">2</span></div><div class="line"><span class="keyword">print</span> <span class="string">'3 // 2 ='</span>, <span class="number">3</span> // <span class="number">2</span></div><div class="line"><span class="keyword">print</span> <span class="string">'3 / 2.0 ='</span>, <span class="number">3</span> / <span class="number">2.0</span></div><div class="line"><span class="keyword">print</span> <span class="string">'3 // 2.0 ='</span>, <span class="number">3</span> // <span class="number">2.0</span></div></pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>3 / 2 = 1</li>
<li>3 // 2 = 1</li>
<li>3 / 2.0 = 1.5</li>
<li>3 // 2.0 = 1.0</li>
</ul>
</blockquote>
<h4 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'3 / 2 ='</span>, <span class="number">3</span> / <span class="number">2</span>)</div><div class="line">print(<span class="string">'3 // 2 ='</span>, <span class="number">3</span> // <span class="number">2</span>)</div><div class="line">print(<span class="string">'3 / 2.0 ='</span>, <span class="number">3</span> / <span class="number">2.0</span>)</div><div class="line">print(<span class="string">'3 // 2.0 ='</span>, <span class="number">3</span> // <span class="number">2.0</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>3 / 2 = 1.5</li>
<li>3 // 2 = 1</li>
<li>3 / 2.0 = 1.5</li>
<li>3 // 2.0 = 1.0</li>
</ul>
</blockquote>
<h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>Python 2 有 ASCII str() 类型，unicode() 是单独的，不是 byte 类型。<br>现在， 在 Python 3，我们最终有了 Unicode (utf-8) 字符串，以及一个字节类：byte 和 bytearrays。<br>由于 Python3.X 源码文件默认使用utf-8编码，这就使得以下代码是合法的：</p>
<h4 id="python3-1"><a href="#python3-1" class="headerlink" title="python3"></a>python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">中国 = <span class="string">'china'</span> </div><div class="line">print(中国)</div></pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>china</li>
</ul>
</blockquote>
<h4 id="python2-1"><a href="#python2-1" class="headerlink" title="python2"></a>python2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str = <span class="string">"我爱北京天安门"</span></div><div class="line"><span class="keyword">print</span> <span class="string">'str'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>‘\xe6\x88\x91\xe7\x88\xb1\xe5\x8c\x97\xe4\xba\xac\xe5\xa4\xa9\xe5\xae\x89\xe9\x97\xa8’</li>
</ul>
</blockquote>
<h3 id="xrange模块"><a href="#xrange模块" class="headerlink" title="xrange模块"></a>xrange模块</h3><p>在 Python 2 中 xrange() 创建迭代对象的用法是非常流行的。比如： for 循环或者是列表/集合/字典推导式。<br>这个表现十分像生成器（比如。“惰性求值”）。但是这个 xrange-iterable 是无穷的，意味着你可以无限遍历。<br>由于它的惰性求值，如果你不得仅仅不遍历它一次，xrange() 函数 比 range() 更快（比如 for 循环）。尽管如此，对比迭代一次，不建议你重复迭代多次，因为生成器每次都从头开始。<br>在 Python 3 中，range() 是像 xrange() 那样实现以至于一个专门的 xrange() 函数都不再存在（在 Python 3 中 xrange() 会抛出命名异常）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> timeit</div><div class="line">n = <span class="number">10000</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_range</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">        <span class="keyword">pass</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_xrange</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n):</div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<h4 id="python2-2"><a href="#python2-2" class="headerlink" title="python2"></a>python2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'Python'</span>, python_version()</div><div class="line"><span class="keyword">print</span> <span class="string">'\ntiming range()'</span></div><div class="line">%timeit test_range(n)</div><div class="line"><span class="keyword">print</span> <span class="string">'\n\ntiming xrange()'</span></div><div class="line">%timeit test_xrange(n)</div></pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 2.7.6</li>
<li>timing range()</li>
<li>1000 loops, best of 3: 433 µs per loop</li>
<li>timing xrange()</li>
<li>1000 loops, best of 3: 350 µs per loop</li>
</ul>
</blockquote>
<h4 id="python3-2"><a href="#python3-2" class="headerlink" title="python3"></a>python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'Python'</span>, python_version())</div><div class="line">print(<span class="string">'\ntiming range()'</span>)</div><div class="line">%timeit test_range(n)</div></pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 3.5.1</li>
<li>timing range()</li>
<li>1000 loops, best of 3: 520 µs per loop</li>
</ul>
</blockquote>
<h3 id="不等运算符"><a href="#不等运算符" class="headerlink" title="不等运算符"></a>不等运算符</h3><ul>
<li>Python 2.x中不等于有两种写法 != 和 &lt;&gt;</li>
<li>Python 3.x中去掉了&lt;&gt;, 只有!=一种写法，还好，我从来没有使用&lt;&gt;的习惯</li>
</ul>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>Py3.X去除了long类型，现在只有一种整型——int，但它的行为就像2.X版本的long</li>
<li>新增了bytes类型，对应于2.X版本的八位串</li>
<li>dict的.keys()、.items 和.values()方法返回迭代器，而之前的iterkeys()等函数都被废弃。同时去掉的还有 dict.has_key()，用 in替代它吧 。<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>django1.7</strong>和<strong>Python2.7</strong>中编译成功运行，其他环境请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>在 Python 3 中处理异常也轻微的改变了，在 Python 3 中我们现在使用 as 作为关键词。<br>捕获异常的语法由 except exc, var 改为 except exc as var。<br>使用语法except (exc1, exc2) as var可以同时捕获多种类别的异常。 Python 2.6已经支持这两种语法。</p>
<ul>
<li>在2.x时代，所有类型的对象都是可以被直接抛出的，在3.x时代，只有继承自BaseException的对象才可以被抛出。</li>
<li>2.x raise语句使用逗号将抛出对象类型和参数分开，3.x取消了这种奇葩的写法，直接调用构造函数抛出对象即可。<br>在2.x时代，异常在代码中除了表示程序错误，还经常做一些普通控制结构应该做的事情，在3.x中可以看出，设计者让异常变的更加专一，只有在错误发生的情况才能去用异常捕获语句来处理。<h4 id="python2-3"><a href="#python2-3" class="headerlink" title="python2"></a>python2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'Python'</span>, python_version()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    let_us_cause_a_NameError</div><div class="line"><span class="keyword">except</span> NameError, err:</div><div class="line">    <span class="keyword">print</span> err, <span class="string">'--&gt; our error message'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 2.7.6</li>
<li>name ‘let_us_cause_a_NameError’ is not defined —&gt; our error message</li>
</ul>
</blockquote>
<h4 id="python3-3"><a href="#python3-3" class="headerlink" title="python3"></a>python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'Python'</span>, python_version())</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    let_us_cause_a_NameError</div><div class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> err:</div><div class="line">    print(err, <span class="string">'--&gt; our error message'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 3.5.1</li>
<li>name ‘let_us_cause_a_NameError’ is not defined —&gt; our error message</li>
</ul>
</blockquote>
<h3 id="通过input-解析用户的输入"><a href="#通过input-解析用户的输入" class="headerlink" title="通过input()解析用户的输入"></a>通过input()解析用户的输入</h3><p>幸运的是，在 Python 3 中已经解决了把用户的输入存储为一个 str 对象的问题。为了避免在 Python 2 中的读取非字符串类型的危险行为，我们不得不使用 raw_input() 代替。</p>
<h3 id="返回可迭代对象，而不是列表"><a href="#返回可迭代对象，而不是列表" class="headerlink" title="返回可迭代对象，而不是列表"></a>返回可迭代对象，而不是列表</h3><p>如果在 xrange 章节看到的，现在在 Python 3 中一些方法和函数返回迭代对象 — 代替 Python 2 中的列表<br>因为我们通常那些遍历只有一次，我认为这个改变对节约内存很有意义。尽管如此，它也是可能的，相对于生成器 —- 如需要遍历多次。它是不那么高效的。<br>而对于那些情况下，我们真正需要的是列表对象，我们可以通过 list() 函数简单的把迭代对象转换成一个列表。</p>
<h4 id="python2-4"><a href="#python2-4" class="headerlink" title="python2"></a>python2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'Python'</span>, python_version() </div><div class="line"><span class="keyword">print</span> range(<span class="number">3</span>) </div><div class="line"><span class="keyword">print</span> type(range(<span class="number">3</span>))</div></pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 2.7.6</li>
<li>[0, 1, 2]</li>
<li>&lt; type ‘list’&gt;</li>
</ul>
</blockquote>
<h4 id="python3-4"><a href="#python3-4" class="headerlink" title="python3"></a>python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'Python'</span>, python_version())</div><div class="line">print(range(<span class="number">3</span>))</div><div class="line">print(type(range(<span class="number">3</span>)))</div><div class="line">print(list(range(<span class="number">3</span>)))</div></pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 3.5.1</li>
<li>range(0, 3)</li>
<li>&lt; class ‘range’&gt;</li>
<li>[0, 1, 2]</li>
</ul>
</blockquote>
<ul>
<li>在 Python 3 中一些经常使用到的不再返回列表的函数和方法：</li>
<li>zip()</li>
<li>map()</li>
<li>filter()</li>
<li>dictionary’s .keys() method</li>
<li>dictionary’s .values() method</li>
<li>dictionary’s .items() method</li>
</ul>
<h3 id="For循环变量和全局命名空间泄漏"><a href="#For循环变量和全局命名空间泄漏" class="headerlink" title="For循环变量和全局命名空间泄漏"></a>For循环变量和全局命名空间泄漏</h3><p>好消息：在 Python 3.x 中 for 循环变量不会再导致命名空间泄漏。<br>在 Python 3.x 中做了一个改变，在 What’s New In Python 3.0 中有如下描述：<br>“列表推导不再支持 [… for var in item1, item2, …] 这样的语法。使用 [… for var in (item1, item2, …)] 代替。也需要提醒的是列表推导有不同的语义： 他们关闭了在 list() 构造器中的生成器表达式的语法糖, 并且特别是循环控制变量不再泄漏进周围的作用范围域.”　　</p>
<h4 id="python2-5"><a href="#python2-5" class="headerlink" title="python2"></a>python2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'Python'</span>, python_version()</div><div class="line">i = <span class="number">1</span></div><div class="line"><span class="keyword">print</span> <span class="string">'before: i ='</span>, i</div><div class="line"><span class="keyword">print</span> <span class="string">'comprehension: '</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</div><div class="line"><span class="keyword">print</span> <span class="string">'after: i ='</span>, i</div></pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 2.7.6</li>
<li>before: i = 1</li>
<li>comprehension: [0, 1, 2, 3, 4]</li>
<li>after: i = 4</li>
</ul>
</blockquote>
<h4 id="python3-5"><a href="#python3-5" class="headerlink" title="python3"></a>python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'Python'</span>, python_version())</div><div class="line">i = <span class="number">1</span></div><div class="line">print(<span class="string">'before: i ='</span>, i)</div><div class="line">print(<span class="string">'comprehension:'</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)])</div><div class="line">print(<span class="string">'after: i ='</span>, i)</div></pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 3.5.1</li>
<li>before: i = 1</li>
<li>comprehension: [0, 1, 2, 3, 4]</li>
<li>after: i = 1</li>
</ul>
<p>注：</p>
<ul>
<li>上述代码在<strong>python3.5</strong>和<strong>Python2.7</strong>中编译成功运行，其他环境请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
<li>更多却别请读者自行查看官方文档</li>
<li>个人推荐还是用python3，新版本的出现总有他的意义，但是我遇到一些项目要求Python2也就只能Python2了，目前来说，Python2的教程和第三方库函数还是比Python3多，再过几年，我相信一定会是Python3是主流</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android仿qq侧滑菜单]]></title>
      <url>/2016/08/03/Android_qq_Menu/</url>
      <content type="html"><![CDATA[<p>我们经常能看到各种app中都有应用侧滑菜单（SlidingMenu）,效果很好的一种显示方式，今天我就向大家展示可以说是很简单就能实现和qq的侧滑菜单很相似的效果。现在侧滑菜单的框架在github上也有很多，有兴趣的可以去搜一下，今天我就给大家展示一个简单的仿qq侧滑菜单的例子。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>我们可以自定义一个view，然后用一个水平滚动条HorizontalScrollView匹配父容器<br>原理如图:<img src="http://objects.earthchen.cn/qq_menu%E5%8E%9F%E7%90%86.png" alt="qq_menu原理"><br>要有这个HorizontalScrollView要有两倍屏幕的宽度，用这个Android自带的水平滚动条来实现左右滑动的效果。是不是很简单呢。原理就是这么简单。下面我将我的代码贴出来，大家可以参考，或修改。</p>
<a id="more"></a>
<h3 id="部分实现代码"><a href="#部分实现代码" class="headerlink" title="部分实现代码"></a>部分实现代码</h3><h4 id="首先我们生成一个自定义view-继承HorizontalScrollView"><a href="#首先我们生成一个自定义view-继承HorizontalScrollView" class="headerlink" title="首先我们生成一个自定义view 继承HorizontalScrollView"></a>首先我们生成一个自定义view 继承HorizontalScrollView</h4><p><strong>SlidingMenu.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlidingMenu</span> <span class="keyword">extends</span> <span class="title">HorizontalScrollView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LinearLayout mWapper;</div><div class="line">    <span class="keyword">private</span> ViewGroup mMenu;</div><div class="line">    <span class="keyword">private</span> ViewGroup mContent;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mScreenWidth;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMenuRightPadding = <span class="number">50</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> once = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isOpen;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMenuWidth;</div></pre></td></tr></table></figure>
<p>这样就自动帮我们生成了一个自定义view所必须的方法<br>如果不需要使用自定义属性,那么我们需要修改一下两个方法如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 未使用自定义属性时调用</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> context</div><div class="line"> * <span class="doctag">@param</span> attrs</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SlidingMenu</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SlidingMenu</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果使用自定义属性，在本例中将会调用如下方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 当使用了自定义属性时，会调用此构造方法</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> context</div><div class="line"> * <span class="doctag">@param</span> attrs</div><div class="line"> * <span class="doctag">@param</span> defStyle</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SlidingMenu</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line">    TypedArray a = context.getTheme().obtainStyledAttributes(attrs, R.styleable.SlidingMenu, defStyle, <span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> n = a.getIndexCount();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> attr = a.getIndex(i);</div><div class="line">        <span class="keyword">switch</span> (attr) &#123;</div><div class="line">            <span class="keyword">case</span> R.styleable.SlidingMenu_rightPadding:</div><div class="line">                mMenuRightPadding = a.getDimensionPixelOffset(attr, (<span class="keyword">int</span>) TypedValue.applyDimension(</div><div class="line">                        TypedValue.COMPLEX_UNIT_DIP, <span class="number">50</span>, context.getResources().getDisplayMetrics()));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    a.recycle();</div><div class="line">    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);</div><div class="line">    DisplayMetrics outMetrics = <span class="keyword">new</span> DisplayMetrics();</div><div class="line">    wm.getDefaultDisplay().getMetrics(outMetrics);</div><div class="line">    mScreenWidth = outMetrics.widthPixels;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中需要在res/values/下新建一个xml文件为attr.xml,添加适当的代码后如下:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;declare-styleable name="SlidingMenu" &gt;</div><div class="line">        &lt;attr name="rightPadding" format="dimension"&gt;&lt;/attr&gt;</div><div class="line">    &lt;/declare-styleable&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p>
<p>其中的<strong>rightPadding</strong>为水平滚动条向右边滑动到极限后保留的距离(原谅我语言匮乏，不怎么会形容),还是不能理解我说的什么意思的话可以自己看看手机qq的效果</p>
<h4 id="定义view的大小"><a href="#定义view的大小" class="headerlink" title="定义view的大小"></a>定义view的大小</h4><p>我们为了让水平滚动条要适配屏幕的大小，所以得定义一下view的宽和高和自身的宽高</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置子view的宽和高</div><div class="line"> * 设置自己的宽和高</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> widthMeasureSpec</div><div class="line"> * <span class="doctag">@param</span> heightMeasureSpec</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!once) &#123;</div><div class="line">        mWapper = (LinearLayout) getChildAt(<span class="number">0</span>);</div><div class="line">        mMenu = (ViewGroup) mWapper.getChildAt(<span class="number">0</span>);</div><div class="line">        mContent = (ViewGroup) mWapper.getChildAt(<span class="number">1</span>);</div><div class="line"></div><div class="line">        mMenuWidth = mMenu.getLayoutParams().width = mScreenWidth - mMenuRightPadding;</div><div class="line">        mContent.getLayoutParams().width = mScreenWidth;</div><div class="line">        once = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="定义偏移量-实现隐藏"><a href="#定义偏移量-实现隐藏" class="headerlink" title="定义偏移量,实现隐藏"></a>定义偏移量,实现隐藏</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过设置偏移量，讲menu隐藏</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> changed</div><div class="line"> * <span class="doctag">@param</span> l</div><div class="line"> * <span class="doctag">@param</span> t</div><div class="line"> * <span class="doctag">@param</span> r</div><div class="line"> * <span class="doctag">@param</span> b</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onLayout(changed, l, t, r, b);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (changed) &#123;</div><div class="line">        <span class="keyword">this</span>.scrollTo(mMenuWidth, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="滑动事件"><a href="#滑动事件" class="headerlink" title="滑动事件"></a>滑动事件</h4><p>我们怎么来判定是否滑动了这个滚动条呢，并通过这个来显示不同的页面，这就是我们要解决的问题，在这里我们可以onTouchEvent方法来实现，因为只有当我们从屏幕上吧手指抬起来的时候才是我们需要的位置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> action = ev.getAction();</div><div class="line">        <span class="keyword">switch</span> (action) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                <span class="comment">//隐藏在做左边的宽度</span></div><div class="line">                <span class="keyword">int</span> scrollX = getScrollX();</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (scrollX &gt;= mMenuWidth * <span class="number">1.0f</span> / <span class="number">2</span>) &#123;</div><div class="line">                    <span class="keyword">this</span>.smoothScrollTo(mMenuWidth, <span class="number">0</span>);</div><div class="line">                    isOpen = <span class="keyword">false</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">this</span>.smoothScrollTo(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">                    isOpen = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(ev);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="activity-xml文件的处理"><a href="#activity-xml文件的处理" class="headerlink" title="activity.xml文件的处理"></a>activity.xml文件的处理</h4><p>在这里我们用的是新建的xml，名称为<strong>left_menu.xml</strong> 逻辑也是很简单的</p>
<blockquote>
<p>内部逻辑:</p>
<ul>
<li>用一个水平排列的LinearLayout</li>
<li>在LinearLayout内部嵌套RelativeLayout(虽然这样嵌套可能会导致性能收到影响，但我们现在重在理解这个过程)</li>
<li>在每个RelativeLayout中在添加ImageView和TextView</li>
</ul>
</blockquote>
<p>这样我们要实现的左边菜单栏，默认隐藏的菜单栏就写好了，代码如下，大家可以选择性的参考：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">                android:layout_width="match_parent"</div><div class="line">                android:layout_height="match_parent"</div><div class="line">                android:background="@drawable/background"&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:layout_centerInParent="true"</div><div class="line">        android:orientation="vertical"&gt;</div><div class="line"></div><div class="line">        &lt;RelativeLayout</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="wrap_content"&gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/id_img1"</div><div class="line">                android:layout_width="50dp"</div><div class="line">                android:layout_height="50dp"</div><div class="line">                android:layout_centerVertical="true"</div><div class="line">                android:layout_marginLeft="20dp"</div><div class="line">                android:layout_marginTop="20dp"</div><div class="line">                android:src="@drawable/img_1"/&gt;</div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_centerVertical="true"</div><div class="line">                android:layout_marginLeft="20dp"</div><div class="line">                android:layout_toRightOf="@id/id_img1"</div><div class="line">                android:text="第一个item"</div><div class="line">                android:textColor="#b41dbc"</div><div class="line">                android:textSize="20sp"/&gt;</div><div class="line">        &lt;/RelativeLayout&gt;</div><div class="line">        &lt;RelativeLayout</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="wrap_content"&gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/id_img2"</div><div class="line">                android:layout_width="50dp"</div><div class="line">                android:layout_height="50dp"</div><div class="line">                android:layout_centerVertical="true"</div><div class="line">                android:layout_marginLeft="20dp"</div><div class="line">                android:layout_marginTop="20dp"</div><div class="line">                android:src="@drawable/img_2"/&gt;</div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_centerVertical="true"</div><div class="line">                android:layout_marginLeft="20dp"</div><div class="line">                android:layout_toRightOf="@id/id_img2"</div><div class="line">                android:text="第二个item"</div><div class="line">                android:textColor="#b41dbc"</div><div class="line">                android:textSize="20sp"/&gt;</div><div class="line">        &lt;/RelativeLayout&gt;</div><div class="line">        &lt;RelativeLayout</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="wrap_content"&gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/id_img3"</div><div class="line">                android:layout_width="50dp"</div><div class="line">                android:layout_height="50dp"</div><div class="line">                android:layout_centerVertical="true"</div><div class="line">                android:layout_marginLeft="20dp"</div><div class="line">                android:layout_marginTop="20dp"</div><div class="line">                android:src="@drawable/img_3"/&gt;</div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_centerVertical="true"</div><div class="line">                android:layout_marginLeft="20dp"</div><div class="line">                android:layout_toRightOf="@id/id_img3"</div><div class="line">                android:text="第三个item"</div><div class="line">                android:textColor="#b41dbc"</div><div class="line">                android:textSize="20sp"/&gt;</div><div class="line">        &lt;/RelativeLayout&gt;</div><div class="line">        &lt;RelativeLayout</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="wrap_content"&gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/id_img4"</div><div class="line">                android:layout_width="50dp"</div><div class="line">                android:layout_height="50dp"</div><div class="line">                android:layout_centerVertical="true"</div><div class="line">                android:layout_marginLeft="20dp"</div><div class="line">                android:layout_marginTop="20dp"</div><div class="line">                android:src="@drawable/img_4"/&gt;</div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_centerVertical="true"</div><div class="line">                android:layout_marginLeft="20dp"</div><div class="line">                android:layout_toRightOf="@id/id_img4"</div><div class="line">                android:text="第四个item"</div><div class="line">                android:textColor="#b41dbc"</div><div class="line">                android:textSize="20sp"/&gt;</div><div class="line">        &lt;/RelativeLayout&gt;</div><div class="line">        &lt;RelativeLayout</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="wrap_content"&gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/id_img5"</div><div class="line">                android:layout_width="50dp"</div><div class="line">                android:layout_height="50dp"</div><div class="line">                android:layout_centerVertical="true"</div><div class="line">                android:layout_marginLeft="20dp"</div><div class="line">                android:layout_marginTop="20dp"</div><div class="line">                android:src="@drawable/img_5"/&gt;</div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_centerVertical="true"</div><div class="line">                android:layout_marginLeft="20dp"</div><div class="line">                android:layout_toRightOf="@id/id_img5"</div><div class="line">                android:text="第五个item"</div><div class="line">                android:textColor="#b41dbc"</div><div class="line">                android:textSize="20sp"/&gt;</div><div class="line">        &lt;/RelativeLayout&gt;</div><div class="line"></div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure></p>
<p>其中str中引用的图片请自行准备。。。</p>
<h4 id="打开菜单"><a href="#打开菜单" class="headerlink" title="打开菜单"></a>打开菜单</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 打开菜单</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openMenu</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isOpen) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">this</span>.smoothScrollTo(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    isOpen = <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="关闭菜单"><a href="#关闭菜单" class="headerlink" title="关闭菜单"></a>关闭菜单</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 关闭菜单</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeMenu</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!isOpen) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">this</span>.smoothScrollTo(mMenuWidth, <span class="number">0</span>);</div><div class="line">    isOpen = <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="切换菜单"><a href="#切换菜单" class="headerlink" title="切换菜单"></a>切换菜单</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 切换菜单</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toggle</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isOpen) &#123;</div><div class="line">        closeMenu();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        openMenu();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在主页面中引用自定义view"><a href="#在主页面中引用自定义view" class="headerlink" title="在主页面中引用自定义view"></a>在主页面中引用自定义view</h4><p><strong>activity_main.xml</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;RelativeLayout</div><div class="line">    xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    xmlns:qq_menu="http://schemas.android.com/apk/res-auto"</div><div class="line">    xmlns:tools="http://schemas.android.com/tools"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    tools:context="com.earthchen.qq_menu.MainActivity"&gt;</div><div class="line"></div><div class="line">    &lt;com.earthchen.qq_menu.view.SlidingMenu</div><div class="line">        android:id="@+id/id_menu"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent"</div><div class="line">        qq_menu:rightPadding="100dp"&gt;</div><div class="line">        </div><div class="line">        &lt;LinearLayout</div><div class="line">            android:layout_width="wrap_content"</div><div class="line">            android:layout_height="match_parent"</div><div class="line">            android:orientation="horizontal"&gt;</div><div class="line"></div><div class="line">            &lt;include layout="@layout/left_menu"/&gt;</div><div class="line"></div><div class="line">            &lt;LinearLayout</div><div class="line">                android:layout_width="match_parent"</div><div class="line">                android:layout_height="match_parent"</div><div class="line">                android:background="@drawable/main"&gt;</div><div class="line">                </div><div class="line">                &lt;Button</div><div class="line">                    android:layout_width="wrap_content"</div><div class="line">                    android:layout_height="wrap_content"</div><div class="line">                    android:onClick="toggleMenu"</div><div class="line">                    android:text="切换菜单"/&gt;</div><div class="line"></div><div class="line">            &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line"></div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;/com.earthchen.qq_menu.view.SlidingMenu&gt;</div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure></p>
<h4 id="在MainActivity中使用自定义控件"><a href="#在MainActivity中使用自定义控件" class="headerlink" title="在MainActivity中使用自定义控件"></a>在MainActivity中使用自定义控件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SlidingMenu mLeftMenu;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"></div><div class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mLeftMenu = (SlidingMenu) findViewById(R.id.id_menu);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toggleMenu</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        mLeftMenu.toggle();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>以下即为最终运行的结果</p>
<p><img src="http://objects.earthchen.cn/qq_menu1.png" alt="qq_menu1"><br><img src="http://objects.earthchen.cn/qq_menu2.png" alt="qq_menu2"></p>
<p><br></p>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>Android studio2.2</strong>中编译成功运行，其他ide请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言队列的基本操作]]></title>
      <url>/2016/07/16/C%E8%AF%AD%E8%A8%80%E9%98%9F%E5%88%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>本篇介绍一下编程中比较重要的一个数据结构队列，队列有个很显著的标志，对其中的数据是先进先出，如果是顺序存储结构可以说就是一个受限的数组，对链式存储结构就只能说是符合先进先出的规则了，这种数据结构在我们真正的编程中还是相当常用的。实际中根据需要去定制自己的队列。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="顺序队列的操作"><a href="#顺序队列的操作" class="headerlink" title="顺序队列的操作"></a>顺序队列的操作</h3><p>首先我们来介绍一下顺序存储结构下的队列的定义和基本操作</p>
<h4 id="添加适当的头文件，定义一个顺序存储数据结构，"><a href="#添加适当的头文件，定义一个顺序存储数据结构，" class="headerlink" title="添加适当的头文件，定义一个顺序存储数据结构，"></a>添加适当的头文件，定义一个顺序存储数据结构，</h4><p>这里需要添加头文件和定义一个队列的顺序数据结构<br><a id="more"></a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></div><div class="line">&#123;</div><div class="line">	ElemType *base;</div><div class="line">	<span class="keyword">int</span> front;</div><div class="line">	<span class="keyword">int</span> rear;</div><div class="line">&#125;SqQueue;</div></pre></td></tr></table></figure></p>
<h4 id="初始化一个队列（创建一个队列）"><a href="#初始化一个队列（创建一个队列）" class="headerlink" title="初始化一个队列（创建一个队列）"></a>初始化一个队列（创建一个队列）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(SqQueue *q)</span> </span>&#123;</div><div class="line">	q-&gt;base = (ElemType *)<span class="built_in">malloc</span>(MAXSIZE * <span class="keyword">sizeof</span>(ElemType));</div><div class="line">	<span class="keyword">if</span> (!q-&gt;base)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">	q-&gt;front = q-&gt;rear = <span class="number">0</span>;</div><div class="line">	<span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="入队操作"><a href="#入队操作" class="headerlink" title="入队操作"></a>入队操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">Status <span class="title">InsertQueue</span><span class="params">(SqQueue *q, ElemType e)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> ((q-&gt;rear + <span class="number">1</span>) % MAXSIZE == q-&gt;front)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> ERROR;</div><div class="line">	&#125;</div><div class="line">	q-&gt;base[q-&gt;rear] = e;</div><div class="line">	q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % MAXSIZE;</div><div class="line">	<span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="出队操作"><a href="#出队操作" class="headerlink" title="出队操作"></a>出队操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">Status <span class="title">DeleteQueue</span><span class="params">(SqQueue *q, ElemType *e)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (q-&gt;front == q-&gt;rear)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> ERROR;</div><div class="line">	&#125;</div><div class="line">	*e = q-&gt;base[q-&gt;front];</div><div class="line">	q-&gt;front = (q-&gt;front + <span class="number">1</span>) % MAXSIZE;</div><div class="line">	<span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	SqQueue q;</div><div class="line">	<span class="keyword">int</span> a[<span class="number">10</span>];</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	InitQueue(&amp;q);</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">	&#123;</div><div class="line">		InsertQueue(&amp;q, i + <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">	&#123;</div><div class="line">		DeleteQueue(&amp;q, &amp;a[i]);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a[i]);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="http://objects.earthchen.cn/c%E8%AF%AD%E8%A8%80%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%E7%BB%93%E6%9E%9C.png" alt="cmd顺序队列运行结果"><br>都是很基本的操作，在顺序队列中，可以从数组的方式去理解，这样将会让你理解起来更简单</p>
<h3 id="链式队列的操作"><a href="#链式队列的操作" class="headerlink" title="链式队列的操作"></a>链式队列的操作</h3><p>首先我们来介绍一下顺序存储结构下的队列的定义和基本操作</p>
<h4 id="添加适当的头文件，定义一个队列链式存储数据结构，"><a href="#添加适当的头文件，定义一个队列链式存储数据结构，" class="headerlink" title="添加适当的头文件，定义一个队列链式存储数据结构，"></a>添加适当的头文件，定义一个队列链式存储数据结构，</h4><p>这里需要添加头文件和定义一个队列的链式存储数据结构</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0;</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span></span></div><div class="line">&#123;</div><div class="line">	ElemType data;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></div><div class="line">&#125;QNode, *QueuePrt;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//对头，尾指针</span></div><div class="line">	QueuePrt front, rear;</div><div class="line">&#125;LinkQueue;</div></pre></td></tr></table></figure>
<h4 id="初始化一个队列（创建一个队列）-1"><a href="#初始化一个队列（创建一个队列）-1" class="headerlink" title="初始化一个队列（创建一个队列）"></a>初始化一个队列（创建一个队列）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(LinkQueue *q)</span> </span>&#123;</div><div class="line">	q-&gt;front = q-&gt;rear = (QueuePrt)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</div><div class="line">	<span class="keyword">if</span> (!q-&gt;front)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">	q-&gt;front-&gt;next = <span class="literal">NULL</span>;</div><div class="line">	<span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="入队操作-1"><a href="#入队操作-1" class="headerlink" title="入队操作"></a>入队操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function">Status <span class="title">InsertQueue</span><span class="params">(LinkQueue *q, ElemType e)</span> </span>&#123;</div><div class="line">	QueuePrt p = (QueuePrt)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</div><div class="line">	<span class="keyword">if</span> (!p)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">	p-&gt;data = e;</div><div class="line">	p-&gt;next = <span class="literal">NULL</span>;</div><div class="line">	q-&gt;rear-&gt;next = p;</div><div class="line">	q-&gt;rear = p;</div><div class="line">	<span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="出队操作-1"><a href="#出队操作-1" class="headerlink" title="出队操作"></a>出队操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function">Status <span class="title">DeleteQueue</span><span class="params">(LinkQueue *q, ElemType *e)</span> </span>&#123;</div><div class="line">	QueuePrt p;</div><div class="line">	<span class="keyword">if</span> (q-&gt;front == q-&gt;rear)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> ERROR;</div><div class="line">	&#125;</div><div class="line">	p = q-&gt;front-&gt;next;</div><div class="line">	*e = p-&gt;data;</div><div class="line">	q-&gt;front-&gt;next = p-&gt;next;</div><div class="line">	<span class="keyword">if</span> (q-&gt;rear == p)</div><div class="line">	&#123;</div><div class="line">		q-&gt;rear = q-&gt;front;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">free</span>(p);</div><div class="line">	<span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="主函数-1"><a href="#主函数-1" class="headerlink" title="主函数"></a>主函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	LinkQueue q;</div><div class="line">	<span class="keyword">int</span> a[<span class="number">10</span>];</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	InitQueue(&amp;q);</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">	&#123;</div><div class="line">		InsertQueue(&amp;q, i + <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">	&#123;</div><div class="line">		DeleteQueue(&amp;q, &amp;a[i]);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a[i]);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="http://objects.earthchen.cn/c%E8%AF%AD%E8%A8%80%E9%93%BE%E9%98%9F%E5%88%97%E7%BB%93%E6%9E%9C.png" alt="cmd顺序队列运行结果"><br>在链式存储结构中的队列同样还是相对很简单的，只要理解了先进先出的逻辑，和了解一下指针操作就可以很容易的写出队列的节本操作。</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>visual studio 2015</strong>中编译成功运行，其他ide请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言逆波兰表达式计算(后缀表达式计算器)]]></title>
      <url>/2016/07/15/C%E8%AF%AD%E8%A8%80%E9%80%86%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>刚开始学习c语言时，我们都学过输入一个数在输入一个操作数在输入要进行的计算方式，在输入另一个操作数，然后通过内置的+ - / <em>以及内置头文件 <em>*math.h</em></em>等操作进行计算<br>但是我们可不可以直接输入我们熟悉的算式才得出结果呢，答案是肯定的，我博客上一篇介绍了<a href="/2016/10/07/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%98%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/">C语言把中缀表达式转换为后缀表达式</a>有兴趣的读者可以去看看，有了上篇的知识，在加上本篇的内容就可以很容易做出一个中缀表达式计算器了有兴趣的读者可以看完本文去尝试一下，对自己的能力也是一种提升</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="添加适当的头文件，定义一个栈数据结构，"><a href="#添加适当的头文件，定义一个栈数据结构，" class="headerlink" title="添加适当的头文件，定义一个栈数据结构，"></a>添加适当的头文件，定义一个栈数据结构，</h3><p>和之前一样，这里还是需要添加头文件和定义栈的数据结构，所有的操作都是基于栈的操作</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  STACK_INIT_SIZE 100</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKINCREMENT 10</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ElemType;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></div><div class="line">&#123;</div><div class="line">	ElemType *base;</div><div class="line">	ElemType *top;</div><div class="line">	<span class="keyword">int</span> stackSize;</div><div class="line">&#125;SqStack;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="创建一个栈"><a href="#创建一个栈" class="headerlink" title="创建一个栈"></a>创建一个栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个栈</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initStack</span><span class="params">(SqStack *s)</span> </span>&#123;</div><div class="line">	s-&gt;base = (ElemType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType));</div><div class="line">	<span class="keyword">if</span> (!s-&gt;base)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">	s-&gt;top = s-&gt;base;   <span class="comment">//最开始 栈底就是栈顶</span></div><div class="line">	s-&gt;stackSize = STACK_INIT_SIZE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="入栈操作"><a href="#入栈操作" class="headerlink" title="入栈操作"></a>入栈操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(SqStack *s, ElemType e)</span> </span>&#123;</div><div class="line">	<span class="comment">//如果栈满  追加空间</span></div><div class="line">	<span class="keyword">if</span> (s-&gt;top - s-&gt;base &gt;= s-&gt;stackSize)</div><div class="line">	&#123;</div><div class="line">		s-&gt;base = (ElemType *)<span class="built_in">realloc</span>(s-&gt;base, (s-&gt;stackSize + STACKINCREMENT) * <span class="keyword">sizeof</span>(ElemType));</div><div class="line">		<span class="keyword">if</span> (!s-&gt;base)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">		&#125;</div><div class="line">		s-&gt;top = s-&gt;base + s-&gt;stackSize;  <span class="comment">//设置栈顶</span></div><div class="line">		s-&gt;stackSize = s-&gt;stackSize + STACKINCREMENT;</div><div class="line">	&#125;</div><div class="line">	*(s-&gt;top) = e;</div><div class="line">	s-&gt;top++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(SqStack *s, ElemType *e)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (s-&gt;top == s-&gt;base)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	*e = *--(s-&gt;top);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="计算栈的当前容量-最大容量是s-stackSize"><a href="#计算栈的当前容量-最大容量是s-stackSize" class="headerlink" title="计算栈的当前容量(最大容量是s.stackSize)"></a>计算栈的当前容量(最大容量是s.stackSize)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLen</span><span class="params">(SqStack s)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> (s.top - s.base);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	SqStack s;</div><div class="line">	<span class="keyword">char</span> c;</div><div class="line">	<span class="keyword">double</span> d, e;</div><div class="line">	<span class="keyword">char</span> str[<span class="number">100</span>];</div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	initStack(&amp;s);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"请按逆波兰表达式输入计算机数据，数据与运算符中间用空格隔开,以#结束\n"</span>);</div><div class="line">	scanf_s(<span class="string">"%c"</span>, &amp;c);</div><div class="line">	<span class="keyword">while</span> (c != <span class="string">'#'</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">while</span> (<span class="built_in">isdigit</span>(c) || c==<span class="string">'.'</span>)  <span class="comment">//字符是否是数字</span></div><div class="line">		&#123;</div><div class="line">			str[i++] = c;</div><div class="line">			str[i] = <span class="string">'\0'</span>;</div><div class="line">			scanf_s(<span class="string">"%c"</span>, &amp;c);</div><div class="line">			<span class="keyword">if</span> (c==<span class="string">' '</span>)</div><div class="line">			&#123;</div><div class="line">				d = atof(str);    <span class="comment">//将字符串转换成浮点型</span></div><div class="line">				Push(&amp;s, d);</div><div class="line">				i = <span class="number">0</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">switch</span> (c)</div><div class="line">		&#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">'+'</span>:</div><div class="line">			Pop(&amp;s, &amp;e);</div><div class="line">			Pop(&amp;s, &amp;d);</div><div class="line">			Push(&amp;s, d + e);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'-'</span>:</div><div class="line">			Pop(&amp;s, &amp;e);</div><div class="line">			Pop(&amp;s, &amp;d);</div><div class="line">			Push(&amp;s, d - e);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'*'</span>:</div><div class="line">			Pop(&amp;s, &amp;e);</div><div class="line">			Pop(&amp;s, &amp;d);</div><div class="line">			Push(&amp;s, d * e);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'/'</span>:</div><div class="line">			Pop(&amp;s, &amp;e);</div><div class="line">			Pop(&amp;s, &amp;d);</div><div class="line">			<span class="keyword">if</span> (e != <span class="number">0</span>)</div><div class="line">			&#123;</div><div class="line">				Push(&amp;s, d / e);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"除数为0,错误"</span>);</div><div class="line">				<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		scanf_s(<span class="string">"%c"</span>, &amp;c);</div><div class="line">	&#125;</div><div class="line">	Pop(&amp;s, &amp;d);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"最终的计算结果为%lf\n"</span>, d);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>本人用的是vs2015编译器，所以文中的scanf用了更安全的scanf_s，  如有引用 请自行替换成和自己的编译器想匹配的函数</p>
<p><img src="http://objects.earthchen.cn/c%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="cmd 运行结果"><br>代码依然很简单，都是一些简单的指针操作，如果看不懂，请复习c语言的指针部分（其实指针搞清楚地址与值得对应关系就可以了）</p>
<table>
<thead>
<tr>
<th>函数形参</th>
<th>主函数中参数使用</th>
<th>函数中参数使用</th>
</tr>
</thead>
<tbody>
<tr>
<td>*l</td>
<td>&amp;l</td>
<td>l-&gt;next</td>
</tr>
<tr>
<td>l</td>
<td>l</td>
<td>l.next</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>visual studio 2015</strong>中编译成功运行，其他ide请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言中缀表达式转后缀表达式]]></title>
      <url>/2016/07/15/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%98%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>众所周知,计算机中不能直接用中缀表达式计算,形如(1+2)*(4-5)之类的，但是我们可以计算机可以很容易的通过后缀表达式来计算我们所输入的算式。所以我们就需要把中缀表达式转换为后缀表达式。下面是个人写的一点代码，大家可以参考。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="添加适当的头文件，定义一个栈数据结构，"><a href="#添加适当的头文件，定义一个栈数据结构，" class="headerlink" title="添加适当的头文件，定义一个栈数据结构，"></a>添加适当的头文件，定义一个栈数据结构，</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  STACK_INIT_SIZE 100</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKINCREMENT 10</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></div><div class="line">&#123;</div><div class="line">	ElemType *base;</div><div class="line">	ElemType *top;</div><div class="line">	<span class="keyword">int</span> stackSize;</div><div class="line">&#125;SqStack;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="创建一个栈"><a href="#创建一个栈" class="headerlink" title="创建一个栈"></a>创建一个栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个栈</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initStack</span><span class="params">(SqStack *s)</span> </span>&#123;</div><div class="line">	s-&gt;base = (ElemType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType));</div><div class="line">	<span class="keyword">if</span> (!s-&gt;base)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">	s-&gt;top = s-&gt;base;   <span class="comment">//最开始 栈底就是栈顶</span></div><div class="line">	s-&gt;stackSize = STACK_INIT_SIZE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="入栈操作"><a href="#入栈操作" class="headerlink" title="入栈操作"></a>入栈操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(SqStack *s, ElemType e)</span> </span>&#123;</div><div class="line">	<span class="comment">//如果栈满  追加空间</span></div><div class="line">	<span class="keyword">if</span> (s-&gt;top - s-&gt;base &gt;= s-&gt;stackSize)</div><div class="line">	&#123;</div><div class="line">		s-&gt;base = (ElemType *)<span class="built_in">realloc</span>(s-&gt;base, (s-&gt;stackSize + STACKINCREMENT) * <span class="keyword">sizeof</span>(ElemType));</div><div class="line">		<span class="keyword">if</span> (!s-&gt;base)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">		&#125;</div><div class="line">		s-&gt;top = s-&gt;base + s-&gt;stackSize;  <span class="comment">//设置栈顶</span></div><div class="line">		s-&gt;stackSize = s-&gt;stackSize + STACKINCREMENT;</div><div class="line">	&#125;</div><div class="line">	*(s-&gt;top) = e;</div><div class="line">	s-&gt;top++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(SqStack *s, ElemType *e)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (s-&gt;top == s-&gt;base)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	*e = *--(s-&gt;top);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="计算栈的当前容量-最大容量是s-stackSize"><a href="#计算栈的当前容量-最大容量是s-stackSize" class="headerlink" title="计算栈的当前容量(最大容量是s.stackSize)"></a>计算栈的当前容量(最大容量是s.stackSize)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLen</span><span class="params">(SqStack s)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> (s.top - s.base);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> cal[<span class="number">50</span>];</div><div class="line">	<span class="keyword">char</span> c, e;</div><div class="line">	SqStack s;</div><div class="line">	initStack(&amp;s);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"请输入中缀表达式 输入#表示结束\n"</span>);</div><div class="line">	scanf_s(<span class="string">"%c"</span>, &amp;c);</div><div class="line">	<span class="keyword">while</span> (c != <span class="string">'#'</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">while</span> (c&gt;=<span class="string">'0'</span> &amp;&amp; c&lt;=<span class="string">'9'</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%c "</span>, c);</div><div class="line">			scanf_s(<span class="string">"%c"</span>, &amp;c);</div><div class="line">			<span class="keyword">if</span> (c&lt;<span class="string">'0'</span> || c&gt;<span class="string">'9'</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (c == <span class="string">')'</span>)</div><div class="line">		&#123;</div><div class="line">			Pop(&amp;s, &amp;e);</div><div class="line">			<span class="keyword">while</span> (e != <span class="string">'('</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"%c "</span>, e);</div><div class="line">				Pop(&amp;s, &amp;e);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'+'</span> || c == <span class="string">'-'</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span> (!StackLen(s))</div><div class="line">			&#123;</div><div class="line">				Push(&amp;s, c);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">do</span></div><div class="line">				&#123;</div><div class="line">					Pop(&amp;s, &amp;e);</div><div class="line">					<span class="keyword">if</span> (e == <span class="string">'('</span>)</div><div class="line">					&#123;</div><div class="line">						Push(&amp;s, e);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						<span class="built_in">printf</span>(<span class="string">"%c "</span>, e);</div><div class="line">					&#125;</div><div class="line">				&#125; <span class="keyword">while</span> (StackLen(s) &amp;&amp; e!=<span class="string">'('</span>);</div><div class="line">				Push(&amp;s, c);</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (c==<span class="string">'*'</span> || c==<span class="string">'/'</span> || c==<span class="string">'('</span>)</div><div class="line">		&#123;</div><div class="line">			Push(&amp;s, c);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (c==<span class="string">'#'</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"出错，输入格式错误"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">		&#125;</div><div class="line">		scanf_s(<span class="string">"%c"</span>, &amp;c);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (StackLen(s))</div><div class="line">	&#123;</div><div class="line">		Pop(&amp;s, &amp;e);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%c "</span>, e);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;cd</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="以下是运行结果-本人用的是vs2015编译器，所以文中的scanf用了更安全的scanf-s，-如有引用-请自觉替换成和自己的编译器想匹配的函数"><a href="#以下是运行结果-本人用的是vs2015编译器，所以文中的scanf用了更安全的scanf-s，-如有引用-请自觉替换成和自己的编译器想匹配的函数" class="headerlink" title="以下是运行结果 本人用的是vs2015编译器，所以文中的scanf用了更安全的scanf_s，  如有引用 请自觉替换成和自己的编译器想匹配的函数"></a>以下是运行结果 本人用的是vs2015编译器，所以文中的scanf用了更安全的scanf_s，  如有引用 请自觉替换成和自己的编译器想匹配的函数</h3><p><img src="http://objects.earthchen.cn/c%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="cmd 运行结果"><br>代码很简单 ，仔细看看研究一下指针就很容易看懂，</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>visual studio 2015</strong>中编译成功运行，其他ide请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言二叉树的基本操作]]></title>
      <url>/2016/07/15/C%E8%AF%AD%E8%A8%80%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>树是数据结构中一门很重要的数据结构，在很多地方都能经常见到他的面孔，比如数据通信，压缩数据等都能见到树的身影。但是最常见的还是相对简单的二叉树，二叉树和常规树都可以进行相互转换。所以，二叉树的操作必不可少。我这里来简单介绍一下。<br>在数据结构中给的树和图中，我们最好使用递归来进行各种操作，会让代码更清晰易懂，代码也会更简洁。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="添加适当的头文件，定义hex一个栈数据结构，"><a href="#添加适当的头文件，定义hex一个栈数据结构，" class="headerlink" title="添加适当的头文件，定义hex一个栈数据结构，"></a>添加适当的头文件，定义hex一个栈数据结构，</h3><p>首先我们定义一个二叉树的数据结构</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></div><div class="line">&#123;</div><div class="line">ElemType data;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></div><div class="line">&#125;BiTNode, *BiTree;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="创建一个二叉树（前序）"><a href="#创建一个二叉树（前序）" class="headerlink" title="创建一个二叉树（前序）"></a>创建一个二叉树（前序）</h3><p>这里以前序作为例子，前中后序遍历的不同之在于递归的顺序</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatBiTree</span><span class="params">(BiTree *T)</span> </span>&#123;</div><div class="line">	ElemType c;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c);</div><div class="line">	<span class="keyword">if</span> (<span class="string">'#'</span> == c)</div><div class="line">	&#123;</div><div class="line">		*T = <span class="literal">NULL</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		*T = (BiTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</div><div class="line">		(*T)-&gt;data = c;</div><div class="line">		creatBiTree(&amp;(*T)-&gt;lchild);</div><div class="line">		creatBiTree(&amp;(*T)-&gt;rchild);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="遍历二叉树-前序遍历"><a href="#遍历二叉树-前序遍历" class="headerlink" title="遍历二叉树(前序遍历)"></a>遍历二叉树(前序遍历)</h3><p>这里依然以前序作为例子，前中后序遍历的不同之在于递归的顺序<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(BiTree T)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (T) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%c\n"</span>, T-&gt;data);</div><div class="line">		preorder(T-&gt;lchild);</div><div class="line">		preorder(T-&gt;rchild);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="层次遍历二叉树"><a href="#层次遍历二叉树" class="headerlink" title="层次遍历二叉树"></a>层次遍历二叉树</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelorder</span><span class="params">(BiTree T)</span> </span>&#123;</div><div class="line">	<span class="comment">//用一个队列保存结点信息,这里的队列采用的是顺序队列中的数组实现</span></div><div class="line">	<span class="keyword">int</span> front = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> rear = <span class="number">0</span>;</div><div class="line">	BiTree BiQueue[MAXSIZE];</div><div class="line">	BiTree tempNode;</div><div class="line">	<span class="keyword">if</span> (!IsEmpty_BiTree(&amp;T)) &#123;</div><div class="line">		<span class="comment">//将根结点加入到队列中　</span></div><div class="line">		BiQueue[rear++] = T;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (front != rear) &#123;</div><div class="line">			<span class="comment">//取出队头元素，并使队头指针向后移动一位　</span></div><div class="line">			tempNode = BiQueue[front++];</div><div class="line">			<span class="comment">//判断左右子树是否为空,若为空，则加入队列　</span></div><div class="line">			<span class="keyword">if</span> (!IsEmpty_BiTree(&amp;(tempNode-&gt;lchild)))</div><div class="line">				BiQueue[rear++] = tempNode-&gt;lchild;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (!IsEmpty_BiTree(&amp;(tempNode-&gt;rchild)))</div><div class="line">				BiQueue[rear++] = tempNode-&gt;rchild;</div><div class="line"></div><div class="line">			<span class="comment">//输出队头结点元素　</span></div><div class="line">			<span class="comment">//Vist_BiTreeNode(tempNode-&gt;data);</span></div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%c\n"</span>, tempNode-&gt;data);</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="复制树"><a href="#复制树" class="headerlink" title="复制树"></a>复制树</h3><p>将二叉树复制给另一个二叉树</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">copybitree</span><span class="params">(BiTree T, BiTree *newT)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (T == <span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		*newT = <span class="literal">NULL</span>;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		*newT = (BiTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</div><div class="line">		((*newT)-&gt;data) = (T-&gt;data);</div><div class="line">		copybitree(T-&gt;lchild, &amp;(*newT)-&gt;lchild);</div><div class="line">		copybitree(T-&gt;rchild, &amp;(*newT)-&gt;rchild);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="计算结点个数"><a href="#计算结点个数" class="headerlink" title="计算结点个数"></a>计算结点个数</h3><p>计算二叉树的结点个数</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">countleaf</span><span class="params">(BiTree T)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (T == <span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> countleaf(T-&gt;lchild) + countleaf(T-&gt;rchild) + <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="左、右子树交换"><a href="#左、右子树交换" class="headerlink" title="左、右子树交换"></a>左、右子树交换</h3><p>交换一颗二叉树的左右子树</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(BiTree T)</span> </span></div><div class="line">&#123;</div><div class="line">	BiTree p;</div><div class="line">	<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		p = T-&gt;lchild;</div><div class="line">		T-&gt;lchild = T-&gt;rchild;</div><div class="line">		T-&gt;rchild = p;</div><div class="line">		exchange(T-&gt;lchild);</div><div class="line">		exchange(T-&gt;rchild);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	BiTree T=<span class="literal">NULL</span>,newT=<span class="literal">NULL</span>;</div><div class="line">	creatBiTree(&amp;T);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"前序遍历\n"</span>);</div><div class="line">	preorder(T);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"中序遍历\n"</span>);</div><div class="line">	inorder(T);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"中后遍历\n"</span>);</div><div class="line">	postorder(T);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"层序遍历\n"</span>);</div><div class="line">	levelorder(T);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"节点个数为%d\n"</span>, countleaf(T));</div><div class="line">	copybitree(T, &amp;newT);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"newT前序遍历\n"</span>);</div><div class="line">	preorder(newT);</div><div class="line">	exchange(T);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"交换左右子树之后前序遍历为"</span>);</div><div class="line">	preorder(T);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="http://objects.earthchen.cn/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="二叉树运行结果"><br>以上就是二叉树的一些基本操作，大量运用的递归的思想，希望读者能好好研读</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>visual studio 2015</strong>中编译成功运行，其他ide请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言共享栈]]></title>
      <url>/2016/07/15/C%E8%AF%AD%E8%A8%80%E5%85%B1%E4%BA%AB%E6%A0%88/</url>
      <content type="html"><![CDATA[<p>栈的操作我相信大家都应该了解了弄懂了，  如果没弄懂希望可以去再去看看相关的资料，我博客中的<a href="/2016/10/18/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%98%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/">C语言中缀表达式转后缀表达式</a>中涉及到了一下栈的基本操作，有兴趣的朋友也可以看看。<br>所谓共享栈，就是两个栈共同使用一块内存空间，其中一个栈的栈底作为另一个栈的栈顶，反之亦然。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><blockquote>
<p>因为两个栈公用一个空间，假设一个栈为0#，规定其为空时top[0]==-1；另一个栈为1#规定其为空时，top[1]==MaxSize；<br>入栈时，先确定栈号是否合法，然后查看是对0#栈还是1#栈进行操作，入栈操作和顺序栈的入栈操作并无太大不同。<br>选定之后进行入栈操作。这里应该注意此共享栈是否已满，如果已满则不能进行入栈操作。如若入栈成功则返回0；入栈失败则返回-1；<br>出栈时，先确定栈号是否合法，然后查看是对0#栈还是1#栈进行操作，出栈操作和顺序栈的出栈操作并无太大不同。<br>选定之后进行出栈操作。如果出栈成功返回0；出栈失败返回-1；<br><a id="more"></a></p>
</blockquote>
<h3 id="添加适当的头文件，定义一个栈数据结构，"><a href="#添加适当的头文件，定义一个栈数据结构，" class="headerlink" title="添加适当的头文件，定义一个栈数据结构，"></a>添加适当的头文件，定义一个栈数据结构，</h3><p>共享栈也是栈，只不过有点特殊，在这里我们还是需要添加适当的头文件和定义恰当的数据结构</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  MaxSize 100</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	ElemType data[MaxSize];</div><div class="line">	<span class="keyword">int</span> top[<span class="number">2</span>];</div><div class="line">&#125;SqStack;</div></pre></td></tr></table></figure>
<h3 id="初始化共享栈"><a href="#初始化共享栈" class="headerlink" title="初始化共享栈"></a>初始化共享栈</h3><p>由于我这里用的是顺序存储结构的栈结构（也就是数据），top也就是一个标记而已，分别代编栈1和栈2的标记<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SqStack *s)</span></span></div><div class="line">&#123;</div><div class="line">	s-&gt;top[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">	s-&gt;top[<span class="number">1</span>] = MaxSize;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="入栈操作"><a href="#入栈操作" class="headerlink" title="入栈操作"></a>入栈操作</h3><p>在入栈的时候，我们需要选择入的是两个栈中的哪一个栈，我们这里用0和1来区分</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Push</span><span class="params">(SqStack*s, ElemType x, <span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (n &lt; <span class="number">0</span> || n&gt;<span class="number">1</span>) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"The stack number is false!\n"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (s-&gt;top[<span class="number">1</span>] - s-&gt;top[<span class="number">0</span>] == <span class="number">1</span>) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"The stack is full!\n"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">switch</span> (n) &#123;</div><div class="line">	<span class="keyword">case</span> <span class="number">0</span>:s-&gt;data[++s-&gt;top[<span class="number">0</span>]] = x; <span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">1</span>:s-&gt;data[--s-&gt;top[<span class="number">1</span>]] = x; <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h3><p>出栈和入栈一样，也需要选择出栈的具体是哪个栈</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(SqStack *s, ElemType* x, <span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (n &lt; <span class="number">0</span> || n&gt;<span class="number">1</span>) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"The stack number is false!\n"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">switch</span> (n) &#123;</div><div class="line">	<span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">		<span class="keyword">if</span> (s-&gt;top[<span class="number">0</span>] == <span class="number">-1</span>) &#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"The stack[0] is empty!\n"</span>);</div><div class="line">		&#125;</div><div class="line">		*x = s-&gt;data[s-&gt;top[<span class="number">0</span>]--];</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">		<span class="keyword">if</span> (s-&gt;top[<span class="number">1</span>] == MaxSize) &#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"The stack[1] is empty!\n"</span>);</div><div class="line">		&#125;</div><div class="line">		*x = s-&gt;data[s-&gt;top[<span class="number">1</span>]++];</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">	SqStack s;</div><div class="line">	InitStack(&amp;s);</div><div class="line"></div><div class="line">	ElemType x = <span class="number">5</span>;</div><div class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> flagPush;</div><div class="line">	flagPush = Push(&amp;s, x, n);</div><div class="line">	<span class="keyword">if</span> (flagPush) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Push false!\n"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Push %d success!\n"</span>, x);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> flagPop;</div><div class="line">	flagPop = Pop(&amp;s, &amp;x, n);</div><div class="line">	<span class="keyword">if</span> (flagPop) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Pop false!\n"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Pop %d  success!\n"</span>, x);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="http://objects.earthchen.cn/C%E8%AF%AD%E8%A8%80%E5%85%B1%E4%BA%AB%E6%A0%88%E7%BB%93%E6%9E%9C.png" alt="c语言共享栈运行结果"><br>以上就是共享栈的简单操作，我这里只测试他是否能够成功，如有需要，请研读代码后自行修改，如果一时看不懂，请多看几遍思路分析，把原理弄懂，代码还是想当简单的。</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>visual studio 2015</strong>中编译成功运行，其他ide请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言中缀表达式计算器]]></title>
      <url>/2016/07/15/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>本文将介绍中缀表达式计算器的详细写法,是<a href="/2016/10/07/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%98%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/">C语言把中缀表达式转换为后缀表达式</a>和<a href="/2016/10/07/C%E8%AF%AD%E8%A8%80%E9%80%86%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/">C语言逆波兰计算器</a>的结合   &nbsp;&nbsp;&nbsp;&nbsp;但本篇用了更精简的写法，但是也相对的提高了代码的理解难度，在阅读时，需自己详细斟酌</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="添加适当的头文件"><a href="#添加适当的头文件" class="headerlink" title="添加适当的头文件"></a>添加适当的头文件</h3><p>c语言的头文件比不可少，我们这里还是添加适当的头文件和宏定义并声明函数</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LEN 80  </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">convert2postfix</span><span class="params">(<span class="keyword">char</span> *src, <span class="keyword">char</span> *dst)</span></span>;</div><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">cal</span><span class="params">(<span class="keyword">char</span> *src)</span></span>;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="中缀表达式转换为后缀表达式-操作符与操作数之间应有空格隔开"><a href="#中缀表达式转换为后缀表达式-操作符与操作数之间应有空格隔开" class="headerlink" title="中缀表达式转换为后缀表达式(操作符与操作数之间应有空格隔开)"></a>中缀表达式转换为后缀表达式(操作符与操作数之间应有空格隔开)</h3><p>这里是另一种方式的中缀表达式转后缀表达式，还有一种方式更容易理解一点，但是代码量相对更多，详情可见<a href="http://earthchen.coding.me/2016/10/07/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%98%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/" target="_blank" rel="external">C语言把中缀表达式转换为后缀表达式</a></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">convert2postfix</span><span class="params">(<span class="keyword">char</span> *src, <span class="keyword">char</span> *dst)</span> </span>&#123;</div><div class="line"> 	<span class="keyword">char</span> *psrc, *pdst;</div><div class="line"> 	<span class="keyword">char</span> <span class="built_in">stack</span>[MAX_LEN];</div><div class="line"> 	<span class="keyword">int</span> top;</div><div class="line"> </div><div class="line"> 	top = <span class="number">-1</span>;</div><div class="line"> 	psrc = src;</div><div class="line"> 	pdst = dst;</div><div class="line"> 	<span class="keyword">while</span> (*psrc != <span class="string">'\0'</span>) &#123;</div><div class="line"> 		<span class="keyword">if</span> (*psrc &gt;= <span class="string">'0'</span> &amp;&amp; *psrc &lt;= <span class="string">'9'</span>) &#123;</div><div class="line"> 			*pdst = *psrc;</div><div class="line"> 			pdst++;</div><div class="line"> 			<span class="comment">//加入分隔空格  </span></div><div class="line"> 			<span class="keyword">if</span> (!(*(psrc + <span class="number">1</span>) &gt;= <span class="string">'0'</span> &amp;&amp; *(psrc + <span class="number">1</span>) &lt;= <span class="string">'9'</span>) &amp;&amp; *(psrc + <span class="number">1</span>) != <span class="string">'.'</span>) &#123;</div><div class="line"> 				*pdst = <span class="string">' '</span>;</div><div class="line"> 				pdst++;</div><div class="line"> 			&#125;</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="keyword">if</span> (*psrc == <span class="string">'.'</span>) &#123;</div><div class="line"> 			*pdst = *psrc;</div><div class="line"> 			pdst++;</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="keyword">if</span> (*psrc == <span class="string">'('</span>) &#123;</div><div class="line"> 			<span class="built_in">stack</span>[++top] = *psrc;</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="keyword">if</span> (*psrc == <span class="string">')'</span>) &#123;</div><div class="line"> 			<span class="keyword">while</span> (<span class="built_in">stack</span>[top] != <span class="string">'('</span>) &#123;</div><div class="line"> 				*pdst = <span class="built_in">stack</span>[top--];</div><div class="line"> 				pdst++;</div><div class="line"> 				<span class="comment">//加入分隔空格  </span></div><div class="line"> 				*pdst = <span class="string">' '</span>;</div><div class="line"> 				pdst++;</div><div class="line"> 			&#125;</div><div class="line"> 			<span class="comment">//弹出'('  </span></div><div class="line"> 			top--;</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="keyword">if</span> (*psrc == <span class="string">'*'</span> || *psrc == <span class="string">'/'</span>) &#123;</div><div class="line"> 			<span class="keyword">if</span> (<span class="built_in">stack</span>[top] == <span class="string">'*'</span> || <span class="built_in">stack</span>[top] == <span class="string">'/'</span>) &#123;</div><div class="line"> 				*pdst = <span class="built_in">stack</span>[top--];</div><div class="line"> 				pdst++;</div><div class="line"> 				<span class="comment">//加入分隔空格  </span></div><div class="line"> 				*pdst = <span class="string">' '</span>;</div><div class="line"> 				pdst++;</div><div class="line"> 			&#125;</div><div class="line"> 			<span class="built_in">stack</span>[++top] = *psrc;</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="keyword">if</span> (*psrc == <span class="string">'+'</span> || *psrc == <span class="string">'-'</span>) &#123;</div><div class="line"> 			<span class="keyword">while</span> (<span class="built_in">stack</span>[top] == <span class="string">'*'</span></div><div class="line"> 				|| <span class="built_in">stack</span>[top] == <span class="string">'/'</span></div><div class="line"> 				|| <span class="built_in">stack</span>[top] == <span class="string">'+'</span></div><div class="line"> 				|| <span class="built_in">stack</span>[top] == <span class="string">'-'</span>) &#123;</div><div class="line"> 				*pdst = <span class="built_in">stack</span>[top--];</div><div class="line"> 				pdst++;</div><div class="line"> 				<span class="comment">//加入分隔空格  </span></div><div class="line"> 				*pdst = <span class="string">' '</span>;</div><div class="line"> 				pdst++;</div><div class="line"> 			&#125;</div><div class="line"> 			<span class="built_in">stack</span>[++top] = *psrc;</div><div class="line"> 		&#125;</div><div class="line"> 		psrc++;</div><div class="line"> 	&#125;</div><div class="line"> 	<span class="comment">//扫描完成后，取出栈中所有运算符，写入后缀表达式数组。  </span></div><div class="line"> 	<span class="keyword">while</span> (top != <span class="number">-1</span>) &#123;</div><div class="line"> 		*pdst = <span class="built_in">stack</span>[top--];</div><div class="line"> 		*pdst++;</div><div class="line"> 		*pdst = <span class="string">' '</span>;</div><div class="line"> 		pdst++;</div><div class="line"> 	&#125;</div><div class="line"> 	*pdst = <span class="string">'\0'</span>;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="计算后缀表达式"><a href="#计算后缀表达式" class="headerlink" title="计算后缀表达式"></a>计算后缀表达式</h3><p>同上还有另一种比较好理解的方式 见<a href="/2016/10/07/C%E8%AF%AD%E8%A8%80%E9%80%86%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/">C语言逆波兰计算器</a></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">cal</span><span class="params">(<span class="keyword">char</span> *src)</span> </span>&#123;</div><div class="line">	<span class="keyword">float</span> <span class="built_in">stack</span>[MAX_LEN];</div><div class="line">	<span class="keyword">float</span> opd1, opd2;</div><div class="line">	<span class="keyword">int</span> top;</div><div class="line">	<span class="keyword">char</span> *p, *pre;</div><div class="line">	top = <span class="number">-1</span>;</div><div class="line"></div><div class="line">	p = src;</div><div class="line">	<span class="keyword">while</span> (*p != <span class="string">'\0'</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) &#123;</div><div class="line">			pre = p;</div><div class="line">			<span class="keyword">while</span> ((*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) || *p == <span class="string">'.'</span>) &#123;</div><div class="line">				p++;</div><div class="line">			&#125;</div><div class="line">			*p = <span class="string">'\0'</span>;</div><div class="line">			<span class="built_in">stack</span>[++top] = atof(pre);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (*p == <span class="string">'+'</span> || *p == <span class="string">'-'</span> || *p == <span class="string">'*'</span> || *p == <span class="string">'/'</span>) &#123;</div><div class="line">			opd2 = <span class="built_in">stack</span>[top--];</div><div class="line">			opd1 = <span class="built_in">stack</span>[top--];</div><div class="line">			<span class="keyword">switch</span> (*p) &#123;</div><div class="line">			<span class="keyword">case</span> <span class="string">'+'</span>:</div><div class="line">				<span class="built_in">stack</span>[++top] = opd1 + opd2;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="string">'-'</span>:</div><div class="line">				<span class="built_in">stack</span>[++top] = opd1 - opd2;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="string">'*'</span>:</div><div class="line">				<span class="built_in">stack</span>[++top] = opd1*opd2;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="string">'/'</span>:</div><div class="line">				<span class="comment">//更严格一点，应该处理除数为0的情况  </span></div><div class="line">				<span class="built_in">stack</span>[++top] = opd1 / opd2;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		p++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">stack</span>[top--];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><p>输入中缀表达式作为一个字符串，调用中缀表达式转换和后缀表达式计算便可以很容易得出结果。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function">nt <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> str1[MAX_LEN], str2[MAX_LEN];</div><div class="line">	<span class="keyword">float</span> res;</div><div class="line"></div><div class="line">	gets(str1);</div><div class="line">	convert2postfix(str1, str2);</div><div class="line">	</div><div class="line">	res = cal(str2);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"result:%.2f\n"</span>, res);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>本人用的是vs2015编译器，所以文中的scanf用了更安全的scanf_s，当然也可以用fgets 详情可以自行<a href="https://www.baidu.com/" target="_blank" rel="external">baidu</a>或者<a href="https://www.google.com" target="_blank" rel="external">Google</a></p>
<p><img src="http://objects.earthchen.cn/c%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%99%A8.png" alt="cmd 运行结果"><br>(1+4)*(4-5)=-5 结果正确 </p>
<p><br></p>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>visual studio 2015</strong>中编译成功运行，其他ide请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
