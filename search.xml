<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[算法图解书中算法]]></title>
      <url>/2018/05/30/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3-study/</url>
      <content type="html"><![CDATA[<p>算法图解书中算法</p>
<a id="more"></a>
<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>不断找出中值即可，判断所给值与中值的大小关系</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(num, target)</span>:</span></span>
<span class="line">    low = <span class="number">0</span></span>
<span class="line">    high = len(num)<span class="number">-1</span></span>
<span class="line">    <span class="keyword">while</span> low &lt;= high:</span>
<span class="line">        mid = (low+high)//<span class="number">2</span></span>
<span class="line">        guess = num[mid]</span>
<span class="line">        <span class="keyword">if</span> guess == target:</span>
<span class="line">            <span class="keyword">return</span> mid</span>
<span class="line">        <span class="keyword">elif</span> guess &gt; target:</span>
<span class="line">            high = mid<span class="number">-1</span></span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            low = mid+<span class="number">1</span></span>
<span class="line">    <span class="keyword">return</span> </span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span>
<span class="line">    print(binary_search([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], <span class="number">4</span>))</span>
</pre></td></tr></table></figure>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>选择一个元素作为排序的基准值，然后将数组中小于该值的和大于该基准值的分别进行排序，不断递归该过程，最后将小于该基准值的数组、基准值、大于基准值的数组拼接为一个完整数据即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(num)</span>:</span></span>
<span class="line">    <span class="keyword">if</span> (len(num) &lt; <span class="number">2</span>):</span>
<span class="line">        <span class="keyword">return</span> num</span>
<span class="line">    <span class="keyword">else</span>:</span>
<span class="line">        point = num[<span class="number">0</span>]</span>
<span class="line">        small = [i <span class="keyword">for</span> i <span class="keyword">in</span> num[<span class="number">1</span>:] <span class="keyword">if</span> i &lt; point]</span>
<span class="line">        large = [j <span class="keyword">for</span> j <span class="keyword">in</span> num[<span class="number">1</span>:] <span class="keyword">if</span> j &gt; point]</span>
<span class="line">    <span class="keyword">return</span> quick_sort(small)+[point]+quick_sort(large)</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span>
<span class="line">    print(quick_sort([<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>]))</span>
</pre></td></tr></table></figure>
<h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><p>搜索图中是否还有某个节点</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">graph = &#123;&#125;</span>
<span class="line">graph[<span class="string">"you"</span>] = [<span class="string">"alice"</span>, <span class="string">"bob"</span>, <span class="string">"claire"</span>]</span>
<span class="line">graph[<span class="string">"bob"</span>] = [<span class="string">"anuj"</span>, <span class="string">"peggy"</span>]</span>
<span class="line">graph[<span class="string">"alice"</span>] = [<span class="string">"peggy"</span>]</span>
<span class="line">graph[<span class="string">"claire"</span>] = [<span class="string">"thom"</span>, <span class="string">"jonny"</span>]</span>
<span class="line">graph[<span class="string">"anuj"</span>] = []</span>
<span class="line">graph[<span class="string">"peggy"</span>] = []</span>
<span class="line">graph[<span class="string">"thom"</span>] = []</span>
<span class="line">graph[<span class="string">"jonny"</span>] = []</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person_is_seller</span><span class="params">(name)</span>:</span></span>
<span class="line">    <span class="keyword">return</span> name[<span class="number">-1</span>] == <span class="string">'m'</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(name)</span>:</span></span>
<span class="line">    search_queue = deque()</span>
<span class="line">    search_queue += graph[name]</span>
<span class="line">    searched = []</span>
<span class="line">    <span class="keyword">while</span> search_queue:</span>
<span class="line">        person = search_queue.popleft()</span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> person <span class="keyword">in</span> searched:</span>
<span class="line">            <span class="keyword">if</span> person_is_seller(person):</span>
<span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                search_queue += graph[person]</span>
<span class="line">                searched.append(person)</span>
<span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line"></span>
<span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span>
<span class="line">    print(search(<span class="string">"you"</span>))</span>
</pre></td></tr></table></figure>
<p>##　狄克斯特拉算法<br>求图的最短路径</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
</pre></td><td class="code"><pre><span class="line">graph[<span class="string">"start"</span>] = &#123;&#125;</span>
<span class="line">graph[<span class="string">"start"</span>][<span class="string">"a"</span>] = <span class="number">6</span></span>
<span class="line">graph[<span class="string">"start"</span>][<span class="string">"b"</span>] = <span class="number">2</span></span>
<span class="line"></span>
<span class="line">graph[<span class="string">"a"</span>] = &#123;&#125;</span>
<span class="line">graph[<span class="string">"a"</span>][<span class="string">"fin"</span>] = <span class="number">1</span></span>
<span class="line">graph[<span class="string">"b"</span>] = &#123;&#125;</span>
<span class="line">graph[<span class="string">"b"</span>][<span class="string">"a"</span>] = <span class="number">3</span></span>
<span class="line">graph[<span class="string">"b"</span>][<span class="string">"fin"</span>] = <span class="number">5</span></span>
<span class="line">graph[<span class="string">"fin"</span>] = &#123;&#125; </span>
<span class="line"></span>
<span class="line"></span>
<span class="line">infinity = float(<span class="string">"inf"</span>)</span>
<span class="line">costs = &#123;&#125;</span>
<span class="line">costs[<span class="string">"a"</span>] = <span class="number">6</span></span>
<span class="line">costs[<span class="string">"b"</span>] = <span class="number">2</span></span>
<span class="line">costs[<span class="string">"fin"</span>] = infinity</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">parents = &#123;&#125;</span>
<span class="line">parents[<span class="string">"a"</span>] = <span class="string">"start"</span></span>
<span class="line">parents[<span class="string">"b"</span>] = <span class="string">"start"</span></span>
<span class="line">parents[<span class="string">"fin"</span>] = <span class="keyword">None</span></span>
<span class="line"></span>
<span class="line"><span class="comment"># 找出开销最低的节点</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_lowest_cost_node</span><span class="params">(costs)</span>:</span></span>
<span class="line">    lowest_cost = float(<span class="string">"inf"</span>)</span>
<span class="line">    lowest_cost_node = <span class="keyword">None</span></span>
<span class="line">    <span class="comment"># 遍历所有的节点</span></span>
<span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> costs:</span>
<span class="line">        cost = costs[node]</span>
<span class="line">        <span class="comment"># 如果当前节点的开销更低且未处理过</span></span>
<span class="line">        <span class="keyword">if</span> cost &lt; lowest_cost <span class="keyword">and</span> node <span class="keyword">not</span> <span class="keyword">in</span> processed:</span>
<span class="line">            <span class="comment"># 就将其视为开销最低的节点</span></span>
<span class="line">            lowest_cost = cost</span>
<span class="line">            lowest_cost_node = node</span>
<span class="line">    <span class="keyword">return</span> lowest_cost_node</span>
<span class="line"></span>
<span class="line"><span class="comment"># 在未处理的节点中找出开销最小的节点</span></span>
<span class="line">node = find_lowest_cost_node(costs)</span>
<span class="line"><span class="comment"># 这个while循环在所有节点都被处理过后结束</span></span>
<span class="line"><span class="keyword">while</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span>
<span class="line">    cost = costs[node]</span>
<span class="line">    neighbors = graph[node]</span>
<span class="line">    <span class="comment"># 遍历当前节点的所有邻居</span></span>
<span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> neighbors.keys():</span>
<span class="line">        new_cost = cost + neighbors[n]</span>
<span class="line">        <span class="comment"># 如果经当前节点前往该邻居更近</span></span>
<span class="line">        <span class="keyword">if</span> costs[n] &gt; new_cost:</span>
<span class="line">            <span class="comment"># 就更新该邻居的开销</span></span>
<span class="line">            costs[n] = new_cost</span>
<span class="line">            <span class="comment"># 同时将该邻居的父节点设置为当前节点</span></span>
<span class="line">            parents[n] = node</span>
<span class="line">    <span class="comment"># 将当前节点标记为处理过</span></span>
<span class="line">    processed.append(node)</span>
<span class="line">    <span class="comment"># 找出接下来要处理的节点，并循环</span></span>
<span class="line">    node = find_lowest_cost_node(costs)</span>
</pre></td></tr></table></figure>
<h2 id="最长公共子串-序列"><a href="#最长公共子串-序列" class="headerlink" title="最长公共子串(序列)"></a>最长公共子串(序列)</h2><p>动态规划解决，找出公式，先划出一个二维数组，</p>
<p>最长公共子串图解：<br><img src="http://objects.earthchen.cn/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2.png" alt="最长公共子串图解"></p>
<p>最长公共子序列图解:<br><img src="http://objects.earthchen.cn/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97.png" alt="最长公共子序列图解"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_lcsubstr</span><span class="params">(str_a, str_b)</span>:</span></span>
<span class="line">    <span class="string">"""</span>
<span class="line">    最长公共子串</span>
<span class="line">    """</span></span>
<span class="line">    <span class="comment"># 构造一个全为0的矩阵</span></span>
<span class="line">    cell = [[<span class="number">0</span>]*(len(str_a)+<span class="number">1</span>)]*(len(str_b)+<span class="number">1</span>)</span>
<span class="line">    <span class="comment"># 保存最长子串长度</span></span>
<span class="line">    res = <span class="number">0</span></span>
<span class="line">    <span class="comment"># 保存最后一相同字符的索引</span></span>
<span class="line">    index = <span class="number">0</span></span>
<span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(str_a)):</span>
<span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(str_b)):</span>
<span class="line">            <span class="comment"># 当字符相等</span></span>
<span class="line">            <span class="keyword">if</span> str_a[i] == str_b[j] :</span>
<span class="line">                <span class="comment"># 对第一个字符就相等的情况进行特殊处理</span></span>
<span class="line">                <span class="keyword">if</span> i==<span class="number">0</span> <span class="keyword">and</span> j==<span class="number">0</span>:</span>
<span class="line">                    cell[i][j]=<span class="number">1</span></span>
<span class="line">                <span class="comment"># 将上次相同的值+1</span></span>
<span class="line">                cell[i][j] = cell[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span></span>
<span class="line">                <span class="comment"># 计算保存最大值</span></span>
<span class="line">                res = max(cell[i][j], res)</span>
<span class="line">                <span class="comment">#　将索引＋１</span></span>
<span class="line">                index = i+<span class="number">1</span></span>
<span class="line">    <span class="comment"># 返回长度和子串</span></span>
<span class="line">    <span class="keyword">return</span> res, str_a[index-res:res+<span class="number">1</span>]</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_lcseque</span><span class="params">(str_a, str_b)</span>:</span></span>
<span class="line">    <span class="string">"""</span>
<span class="line">    最长公共子序列</span>
<span class="line">    """</span></span>
<span class="line">    <span class="comment"># 构造一个全为0的矩阵</span></span>
<span class="line">    cell = [[<span class="number">0</span>]*(len(str_a)+<span class="number">1</span>)]*(len(str_b)+<span class="number">1</span>)</span>
<span class="line">    <span class="comment"># 保存子序列</span></span>
<span class="line">    res = <span class="string">''</span></span>
<span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(str_a)):</span>
<span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(str_b)):</span>
<span class="line">            <span class="comment"># 当字符相等</span></span>
<span class="line">            <span class="keyword">if</span> str_a[i] == str_b[j]:</span>
<span class="line">                 <span class="comment"># 对第一个字符就相等的情况进行特殊处理</span></span>
<span class="line">                <span class="keyword">if</span> i==<span class="number">0</span> <span class="keyword">and</span> j==<span class="number">0</span>:</span>
<span class="line">                    cell[i][j]=<span class="number">1</span></span>
<span class="line">                <span class="comment"># 将上次相同的值+1</span></span>
<span class="line">                cell[i][j] = cell[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span></span>
<span class="line">                <span class="comment"># 将字符串累加</span></span>
<span class="line">                res = res+str_a[i]</span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                <span class="comment"># 对当前位置左边或者上面的最大值进行更新</span></span>
<span class="line">                cell[i][j] = max(cell[i<span class="number">-1</span>][j], cell[i][j<span class="number">-1</span>])</span>
<span class="line">    <span class="keyword">return</span> res</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span>
<span class="line">    print(find_lcsubstr(<span class="string">'vish'</span>, <span class="string">'vishw'</span>))</span>
<span class="line">    print(find_lcseque(<span class="string">'abdfg'</span>,<span class="string">'abcdfg'</span>))</span>
</pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[牛客网2017年校招真题-1]]></title>
      <url>/2018/05/27/newcoder-2017%E6%A0%A1%E6%8B%9B-1/</url>
      <content type="html"><![CDATA[<p>牛客网2017年校招真题-1</p>
<a id="more"></a>
<h2 id="合唱团"><a href="#合唱团" class="headerlink" title="合唱团"></a>合唱团</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有 n 个学生站成一排，每个学生有一个能力值，牛牛想从这 n 个学生中按照顺序选取 k 名学生，要求相邻两个学生的位置编号的差不超过 d，使得这 k 个学生的能力值的乘积最大，你能返回最大的乘积吗？</p>
<h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>每个输入包含 1 个测试用例。每个测试数据的第一行包含一个整数 n (1 &lt;= n &lt;= 50)，表示学生的个数，接下来的一行，包含 n 个整数，按顺序表示每个学生的能力值 ai（-50 &lt;= ai &lt;= 50）。接下来的一行包含两个整数，k 和 d (1 &lt;= k &lt;= 10, 1 &lt;= d &lt;= 50)。</p>
<h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一行表示最大的乘积</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol>
<li><p>输入<br>3<br>7 4 7<br>2 50</p>
</li>
<li><p>输出</p>
</li>
</ol>
<p>49</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>定义fm[k][i]表示当选中了k个学生，并且以第i个学生为结尾，所产生的最大乘积；fn[k][i]表示 当选中了k个学生，并且以第i个学生为结尾，所产生的最小乘积；那么fm[k+1][i+1]=max(fm[k][i]<em>stu[i+1],fn[k][i]</em>stu[i+1])，即当选中了k个学生后，再选择第i+1编号学生，所产生的最大乘积；然而，并不能保证上一次选择的就是第i个学生，所以要遍历子数组fm[k]，令j从i到1，并且j与i+1之间小于间隔D，遍历fm[k][j]，以及fn[k][j]；<br>同理fn[k+1][i+1]=min(fn[k][i]<em>stu[i+1],fm[k][i]</em>stu[i+1])。最后，遍历一遍fm[K][i]求得最大值（i从1～N）。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取输入</span></span>
<span class="line">n = int(input())</span>
<span class="line">arr = map(int, input().split())</span>
<span class="line">K, D = map(int, input().split())</span>
<span class="line"></span>
<span class="line"><span class="comment"># fm[k][i]表示当选中了k个学生，并且以第i个学生为结尾，所产生的最大乘积；</span></span>
<span class="line">fm = [([<span class="number">0</span>] * n) <span class="keyword">for</span> i <span class="keyword">in</span> range(K)]  <span class="comment"># k*d</span></span>
<span class="line"></span>
<span class="line"><span class="comment">#  fn[k][i]表示 当选中了k个学生，并且以第i个学生为结尾，所产生的最小乘积；</span></span>
<span class="line">fn = [([<span class="number">0</span>] * n) <span class="keyword">for</span> i <span class="keyword">in</span> range(K)]  <span class="comment"># k*d</span></span>
<span class="line">res = <span class="number">0</span></span>
<span class="line"></span>
<span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span>
<span class="line">    fm[<span class="number">0</span>][i] = arr[i]</span>
<span class="line">    fn[<span class="number">0</span>][i] = arr[i]</span>
<span class="line"></span>
<span class="line">    <span class="string">"""</span>
<span class="line">定义fm[k][i]表示当选中了k个学生，并且以第i个学生为结尾，所产生的最大乘积；</span>
<span class="line">        fn[k][i]表示 当选中了k个学生，并且以第i个学生为结尾，所产生的最小乘积；</span>
<span class="line">那么fm[k+1][i+1]=max(fm[k][i]*stu[i+1],fn[k][i]*stu[i+1])，</span>
<span class="line">        即当选中了k个学生后，再选择第i+1编号学生，所产生的最大乘积；</span>
<span class="line">        然而，并不能保证上一次选择的就是第i个学生，所以要遍历子数组fm[k]，</span>
<span class="line">        令j从i到1，并且j与i+1之间小于间隔D，遍历fm[k][j]，以及fn[k][j]；</span>
<span class="line">同理fn[k+1][i+1]=min(fn[k][i]*stu[i+1],fm[k][i]*stu[i+1])。</span>
<span class="line">最后，遍历一遍fm[K][i]求得最大值（i从1～N）。</span>
<span class="line">    """</span></span>
<span class="line"></span>
<span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span>
<span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, K):</span>
<span class="line">        <span class="comment"># for j in range(i-1,-1,-1):</span></span>
<span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i - <span class="number">1</span>, max(<span class="number">0</span>, i - D) - <span class="number">1</span>, <span class="number">-1</span>):</span>
<span class="line">            <span class="comment"># if (i-j&lt;D and k&gt;0):</span></span>
<span class="line">            fm[k][i] = max(fm[k][i], max(fm[k - <span class="number">1</span>][j] * arr[i], fn[k - <span class="number">1</span>][j] * arr[i]))</span>
<span class="line">            fn[k][i] = min(fn[k][i], min(fm[k - <span class="number">1</span>][j] * arr[i], fn[k - <span class="number">1</span>][j] * arr[i]))</span>
<span class="line"></span>
<span class="line">    res = max(res, fm[K - <span class="number">1</span>][i])</span>
<span class="line"></span>
<span class="line">print(res)</span>
</pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sql中的inner join left join 和right join各种连接的区别]]></title>
      <url>/2018/05/26/sql_inner_left_right_join/</url>
      <content type="html"><![CDATA[<p>在写sql经常能遇到各种连接的问题，这里总结一下，以备查阅</p>
<a id="more"></a>
<p>有很多博客已经介绍的很详细了，就不在这里赘述</p>
<h3 id="SQL中INNER、LEFT、RIGHT-JOIN的区别和用法详解"><a href="#SQL中INNER、LEFT、RIGHT-JOIN的区别和用法详解" class="headerlink" title="SQL中INNER、LEFT、RIGHT JOIN的区别和用法详解"></a>SQL中INNER、LEFT、RIGHT JOIN的区别和用法详解</h3><p><a href="https://blog.csdn.net/wangyuchun_799/article/details/49097263" target="_blank" rel="external">https://blog.csdn.net/wangyuchun_799/article/details/49097263</a></p>
<h3 id="join连接的五种方式的简单使用案例（Inner-join-Left-join-Right-join-Full-join-Cross-join）"><a href="#join连接的五种方式的简单使用案例（Inner-join-Left-join-Right-join-Full-join-Cross-join）" class="headerlink" title="join连接的五种方式的简单使用案例（Inner join,Left join,Right join,Full join,Cross join）"></a>join连接的五种方式的简单使用案例（Inner join,Left join,Right join,Full join,Cross join）</h3><p><a href="https://blog.csdn.net/u013412790/article/details/51626307" target="_blank" rel="external">https://blog.csdn.net/u013412790/article/details/51626307</a></p>
<h3 id="sql语句中left-join、right-join-以及innerjoin之间的使用与区别"><a href="#sql语句中left-join、right-join-以及innerjoin之间的使用与区别" class="headerlink" title="sql语句中left join、right join 以及innerjoin之间的使用与区别"></a>sql语句中left join、right join 以及innerjoin之间的使用与区别</h3><p><a href="https://www.cnblogs.com/yangxiansen/p/7860035.html" target="_blank" rel="external">https://www.cnblogs.com/yangxiansen/p/7860035.html</a></p>
<h3 id="图解SQL的各种连接-Inner-join-outer-join-left-join-right-join"><a href="#图解SQL的各种连接-Inner-join-outer-join-left-join-right-join" class="headerlink" title="图解SQL的各种连接(Inner join,outer join,left join,right join)"></a>图解SQL的各种连接(Inner join,outer join,left join,right join)</h3><p><a href="https://blog.csdn.net/zhushuhai331/article/details/50477390" target="_blank" rel="external">https://blog.csdn.net/zhushuhai331/article/details/50477390</a></p>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[牛客网剑指offer-3]]></title>
      <url>/2018/05/21/newcoder-%E5%89%91%E6%8C%87offer-3/</url>
      <content type="html"><![CDATA[<p>剑指offer刷题-3</p>
<a id="more"></a>
<h2 id="链表中环的入口结点"><a href="#链表中环的入口结点" class="headerlink" title="链表中环的入口结点"></a>链表中环的入口结点</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一个链表中包含环，请找出该链表的环的入口结点。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>使用一个列表保存遍历过的节点，遍历单链表判断是否在列表中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">EntryNodeOfLoop</span><span class="params">(self, pHead)</span>:</span></span>
<span class="line">        <span class="comment"># 遍历链表，环的存在，遍历遇见的第一个重复的即为入口节点</span></span>
<span class="line">        tempList = []</span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pHead <span class="keyword">or</span> <span class="keyword">not</span> pHead.next:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span>
<span class="line">        node = pHead</span>
<span class="line">        <span class="keyword">while</span> node:</span>
<span class="line">            <span class="keyword">if</span> node <span class="keyword">in</span> tempList:</span>
<span class="line">                <span class="keyword">return</span> node</span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                tempList.append(node)</span>
<span class="line">            node = node.next</span>
</pre></td></tr></table></figure>
<h2 id="删除链表中重复的结点"><a href="#删除链表中重复的结点" class="headerlink" title="删除链表中重复的结点"></a>删除链表中重复的结点</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5</p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>首先判断边界条件，当满足条件时，判断下当前节点的下一个节点是否等于当前节点，不等于的话递归继续得到下一个节点，当等于时，循环直到等于空或者不等于当前节点值，使当前节点的下一个节点指向不等于当前节点的节点。重复判断下一个节点是否等于当前节点</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplication</span><span class="params">(self, pHead)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> pHead <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> pHead.next <span class="keyword">is</span> <span class="keyword">None</span>:</span>
<span class="line">            <span class="keyword">return</span> pHead</span>
<span class="line">        head1 = pHead.next</span>
<span class="line">        <span class="comment"># 如果下一个节点不等于当前节点</span></span>
<span class="line">        <span class="keyword">if</span> head1.val != pHead.val:</span>
<span class="line">            <span class="comment"># 递归得到下一个节点</span></span>
<span class="line">            pHead.next = self.deleteDuplication(pHead.next)</span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            <span class="comment"># 如果下一个节点等于当前节点并且下一个节点不为空</span></span>
<span class="line">            <span class="keyword">while</span> pHead.val == head1.val <span class="keyword">and</span> head1.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span>
<span class="line">                <span class="comment"># 使下一个节点为下下个节点</span></span>
<span class="line">                head1 = head1.next</span>
<span class="line">            <span class="keyword">if</span> head1.val != pHead.val:</span>
<span class="line">                pHead = self.deleteDuplication(head1)</span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span>
<span class="line">        <span class="keyword">return</span> pHead</span>
</pre></td></tr></table></figure>
<h2 id="二叉树的下一个结点"><a href="#二叉树的下一个结点" class="headerlink" title="二叉树的下一个结点"></a>二叉树的下一个结点</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>分析中序遍历的特点，判断当前是否有左右子树，当有右子树时，则找出右子树的最左节点。当没右子树，则找第一个当前节点是父节点左孩子的节点</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetNext</span><span class="params">(self, pNode)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pNode:</span>
<span class="line">            <span class="keyword">return</span> pNode</span>
<span class="line">        <span class="comment"># 如果有右子树，则找右子树的最左节点</span></span>
<span class="line">        <span class="keyword">if</span> pNode.right:</span>
<span class="line">            left1 = pNode.right</span>
<span class="line">            <span class="keyword">while</span> left1.left:</span>
<span class="line">                left1 = left1.left</span>
<span class="line">            <span class="keyword">return</span> left1</span>
<span class="line">        <span class="comment"># 没右子树，则找第一个当前节点是父节点左孩子的节点</span></span>
<span class="line">        <span class="keyword">while</span> pNode.next:</span>
<span class="line">            tmp = pNode.next</span>
<span class="line">            <span class="keyword">if</span> tmp.left == pNode:</span>
<span class="line">                <span class="keyword">return</span> tmp</span>
<span class="line">            pNode = tmp</span>
<span class="line">        <span class="comment"># 退到了根节点仍没找到，则返回null</span></span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span>
</pre></td></tr></table></figure>
<h2 id="对称的二叉树"><a href="#对称的二叉树" class="headerlink" title="对称的二叉树"></a>对称的二叉树</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p>
<h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>创建一个新方法，传入两颗数，分别判断头节点和左右子树的边界条件，然后递归判断当前左子树和右子树是否为对称的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymmetrical</span><span class="params">(self, pRoot)</span>:</span></span>
<span class="line">        <span class="keyword">return</span> self.isSymBT(pRoot, pRoot)</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymBT</span><span class="params">(self, tree1, tree2)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> tree1 <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> tree2 <span class="keyword">is</span> <span class="keyword">None</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line">        <span class="keyword">if</span> tree1 <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> tree2 <span class="keyword">is</span> <span class="keyword">None</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="keyword">if</span> tree1.val != tree2.val:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="keyword">return</span> self.isSymBT(tree1.left, tree2.right) <span class="keyword">and</span> self.isSymBT(tree1.right, tree2.left)</span>
</pre></td></tr></table></figure>
<h2 id="按之字形顺序打印二叉树"><a href="#按之字形顺序打印二叉树" class="headerlink" title="按之字形顺序打印二叉树"></a>按之字形顺序打印二叉树</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。</p>
<h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>分别使用列表来保存遍历过的节点，下一层节点，结果。并且在设置一个标识符来判断当前应该是从左到右遍历还是从右向左遍历。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Print</span><span class="params">(self, pRoot)</span>:</span></span>
<span class="line">        root = pRoot</span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span>
<span class="line">            <span class="keyword">return</span> []</span>
<span class="line">        level = [root]</span>
<span class="line">        <span class="comment"># 使用一个列表保存结果</span></span>
<span class="line">        result = []</span>
<span class="line">        <span class="comment"># 使用一个标识符标识左右遍历顺序</span></span>
<span class="line">        left_to_right = <span class="keyword">False</span></span>
<span class="line">        <span class="keyword">while</span> level:</span>
<span class="line">            <span class="comment"># 保存当前节点值的列表</span></span>
<span class="line">            cur_values = []</span>
<span class="line">            <span class="comment"># 保存下一层节点列表</span></span>
<span class="line">            next_level = []</span>
<span class="line">            <span class="comment"># 　遍历层级节点</span></span>
<span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> level:</span>
<span class="line">                <span class="comment"># 将当前遍历的节点值保存在当前节点值列表中</span></span>
<span class="line">                cur_values.append(i.val)</span>
<span class="line">                <span class="comment"># 判断当前节点是否有左右子树，依次添加到下一层节点列表</span></span>
<span class="line">                <span class="keyword">if</span> i.left:</span>
<span class="line">                    next_level.append(i.left)</span>
<span class="line">                <span class="keyword">if</span> i.right:</span>
<span class="line">                    next_level.append(i.right)</span>
<span class="line">            <span class="comment"># 　判断当前从左到右遍历还是从右到左遍历</span></span>
<span class="line">            <span class="keyword">if</span> left_to_right:</span>
<span class="line">                cur_values.reverse()</span>
<span class="line">            <span class="comment"># 将遍历过节点值放入总结果列表中</span></span>
<span class="line">            <span class="keyword">if</span> cur_values:</span>
<span class="line">                result.append(cur_values)</span>
<span class="line">            <span class="comment"># 将下一层节点付给当前层</span></span>
<span class="line">            level = next_level</span>
<span class="line">            <span class="comment"># 将标识符倒置</span></span>
<span class="line">            left_to_right = <span class="keyword">not</span> left_to_right</span>
<span class="line">        <span class="keyword">return</span> result</span>
</pre></td></tr></table></figure>
<h2 id="把二叉树打印成多行"><a href="#把二叉树打印成多行" class="headerlink" title="把二叉树打印成多行"></a>把二叉树打印成多行</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。</p>
<h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>和上一题一样的思路，但是比之前少了一个顺序标识符，只需要从左到右遍历即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="comment"># 返回二维列表[[1,2],[4,5]]</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Print</span><span class="params">(self, pRoot)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pRoot:</span>
<span class="line">            <span class="keyword">return</span> []</span>
<span class="line">        result = []</span>
<span class="line">        root = pRoot</span>
<span class="line">        level = [root]</span>
<span class="line">        <span class="keyword">while</span> level:</span>
<span class="line">            cur_value = []</span>
<span class="line">            next_level = []</span>
<span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> level:</span>
<span class="line">                cur_value.append(i.val)</span>
<span class="line">                <span class="keyword">if</span> i.left:</span>
<span class="line">                    next_level.append(i.left)</span>
<span class="line">                <span class="keyword">if</span> i.right:</span>
<span class="line">                    next_level.append(i.right)</span>
<span class="line">            <span class="keyword">if</span> cur_value:</span>
<span class="line">                result.append(cur_value)</span>
<span class="line">            level = next_level</span>
<span class="line">        <span class="keyword">return</span> result</span>
</pre></td></tr></table></figure>
<h2 id="序列化二叉树"><a href="#序列化二叉树" class="headerlink" title="序列化二叉树"></a>序列化二叉树</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>请实现两个函数，分别用来序列化和反序列化二叉树</p>
<h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>序列化，就是将整个二叉树转换为字符串，这里将空节点转为‘＃’每个节点之间使用‘，’分割</p>
<p>反序列化，将序列化后的字符串创建一个二叉树</p>
<p>均使用递归解决，注意边界条件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span>
<span class="line">        self.val = x</span>
<span class="line">        self.left = <span class="keyword">None</span></span>
<span class="line">        self.right = <span class="keyword">None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    flag = <span class="number">-1</span></span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Serialize</span><span class="params">(self, root)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        对于序列化：使用前序遍历，递归的将二叉树的值转化为字符，并且在每次二叉树的结点</span>
<span class="line">        不为空时，在转化val所得的字符之后添加一个' ， '作为分割。对于空节点则以 '#' 代替</span>
<span class="line">        :param root:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span>
<span class="line">            <span class="keyword">return</span> <span class="string">'#'</span></span>
<span class="line">        <span class="keyword">return</span> str(root.val) + <span class="string">','</span> + self.Serialize(root.left) + <span class="string">','</span> + self.Serialize(root.right)</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Deserialize</span><span class="params">(self, s)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        对于反序列化：按照前序顺序，递归的使用字符串中的字符创建一个二叉树</span>
<span class="line">        :param s:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        self.flag += <span class="number">1</span></span>
<span class="line"></span>
<span class="line">        l = s.split(<span class="string">','</span>)</span>
<span class="line">        <span class="keyword">if</span> self.flag &gt;= len(s):</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span>
<span class="line"></span>
<span class="line">        root = <span class="keyword">None</span></span>
<span class="line">        <span class="keyword">if</span> l[self.flag] != <span class="string">'#'</span>:</span>
<span class="line">            root = TreeNode(int(l[self.flag]))</span>
<span class="line">            root.left = self.Deserialize(s)</span>
<span class="line">            root.right = self.Deserialize(s)</span>
<span class="line">        <span class="keyword">return</span> root</span>
</pre></td></tr></table></figure>
<h2 id="二叉搜索树的第k个结点"><a href="#二叉搜索树的第k个结点" class="headerlink" title="二叉搜索树的第k个结点"></a>二叉搜索树的第k个结点</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一颗二叉搜索树，请找出其中的第k大的结点。例如， 5 / \ 3 7 /\ /\ 2 4 6 8 中，按结点数值大小顺序第三个结点的值为4。</p>
<h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>首先根据二叉搜索树的特点得到整个节点的有序列表，然后在节点中取出相应节点即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="comment"># 返回对应节点TreeNode</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">KthNode</span><span class="params">(self, pRoot, k)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> pRoot <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> k == <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span>
<span class="line">        n = self.isorder(pRoot)</span>
<span class="line">        <span class="keyword">if</span> len(n) &lt; k:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            <span class="comment"># 返回第ｋ个节点</span></span>
<span class="line">            <span class="keyword">return</span> n[k - <span class="number">1</span>]</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isorder</span><span class="params">(self, pRoot)</span>:</span></span>
<span class="line">        re = []</span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pRoot:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span>
<span class="line">        <span class="keyword">if</span> pRoot.left:</span>
<span class="line">            <span class="comment"># 如果左子树存在，递归得到所有子节点放入列表中</span></span>
<span class="line">            re.extend(self.isorder(pRoot.left))</span>
<span class="line">        <span class="comment"># 将根节点放入列表中</span></span>
<span class="line">        re.append(pRoot)</span>
<span class="line">        <span class="keyword">if</span> pRoot.right:</span>
<span class="line">            <span class="comment"># 如果右子树存在，递归得到所有子节点放入列表中</span></span>
<span class="line">            re.extend(self.isorder(pRoot.right))</span>
<span class="line">        <span class="keyword">return</span> re</span>
</pre></td></tr></table></figure>
<h2 id="数据流中的中位数"><a href="#数据流中的中位数" class="headerlink" title="数据流中的中位数"></a>数据流中的中位数</h2><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p>
<h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>在插入时，将其插入列表中并排序，然后根据奇数偶数求中位数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    x = []</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Insert</span><span class="params">(self, num)</span>:</span></span>
<span class="line">        <span class="comment"># 将数字添加到列表中并排序</span></span>
<span class="line">        self.x.append(num)</span>
<span class="line">        self.x.sort()</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetMedian</span><span class="params">(self, x)</span>:</span></span>
<span class="line">        <span class="comment"># 得到长度</span></span>
<span class="line">        n = len(self.x)</span>
<span class="line">        <span class="comment"># 判断奇数偶数</span></span>
<span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span>
<span class="line">            <span class="keyword">return</span> self.x[n // <span class="number">2</span>]</span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            <span class="keyword">return</span> (self.x[n // <span class="number">2</span> - <span class="number">1</span>] + self.x[n // <span class="number">2</span>]) / <span class="number">2.0</span></span>
</pre></td></tr></table></figure>
<h2 id="滑动窗口的最大值"><a href="#滑动窗口的最大值" class="headerlink" title="滑动窗口的最大值"></a>滑动窗口的最大值</h2><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。</p>
<h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><p>首先判断边界条件，然后使用一个列表保存最大值，根据滑动的特点，每次将其向其向右移动，并求最大值，将其加入</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxInWindows</span><span class="params">(self, num, size)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> size == <span class="number">0</span> <span class="keyword">or</span> size &gt; len(num):</span>
<span class="line">            <span class="keyword">return</span> []</span>
<span class="line">        max_num = []</span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(num) - size + <span class="number">1</span>):</span>
<span class="line">            max_num.append(max(num[i:i + size]))</span>
<span class="line">        <span class="keyword">return</span> max_num</span>
</pre></td></tr></table></figure>
<h2 id="连续子数组的最大和"><a href="#连续子数组的最大和" class="headerlink" title="连续子数组的最大和"></a>连续子数组的最大和</h2><h3 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h3><p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。你会不会被他忽悠住？(子向量的长度至少是1)</p>
<h3 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h3><p>本题由于有了负数的影响，在求序列之和时，会产生一些麻烦，最简单的思路，就是分别求出子序列的和并保存，最后得到最大的子序列之和，为了排除负数的影响，将值改为0即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(self, array)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> len(array) &lt;= <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">return</span> []</span>
<span class="line">        temp_sum = <span class="number">0</span></span>
<span class="line">        list_sum = []</span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> array:</span>
<span class="line">            <span class="comment"># 将当前值累加</span></span>
<span class="line">            temp_sum = temp_sum + i</span>
<span class="line">            <span class="comment"># 将当前的和放入列表中</span></span>
<span class="line">            list_sum.append(temp_sum)</span>
<span class="line">            <span class="comment"># 如果当前和是大于0的，继续遍历</span></span>
<span class="line">            <span class="keyword">if</span> temp_sum &gt; <span class="number">0</span>:</span>
<span class="line">                <span class="keyword">continue</span></span>
<span class="line">            <span class="comment"># 否则将当前和赋值为0，避免负数影响</span></span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                temp_sum = <span class="number">0</span></span>
<span class="line">        <span class="comment"># 得到和列表中的最大和值</span></span>
<span class="line">        <span class="keyword">return</span> max(list_sum)</span>
</pre></td></tr></table></figure>
<h2 id="数组中逆序对的数量"><a href="#数组中逆序对的数量" class="headerlink" title="数组中逆序对的数量"></a>数组中逆序对的数量</h2><h3 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h3><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。<br>输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出<br>。 即输出P%1000000007<br>输入描述:<br>题目保证输入的数组中没有的相同的数字</p>
<p>数据范围：</p>
<pre><code>对于%50的数据,size&lt;=10^4

对于%75的数据,size&lt;=10^5

对于%100的数据,size&lt;=2*10^5
</code></pre><h3 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h3><p>先将原序列排序，然后从排完序的数组中取出最小的，它在原数组中的位置表示有多少比它大的数在它前面，每取出一个在原数组中删除该元素，保证后面取出的元素在原数组中是最小的，这样其位置才能表示有多少比它大的数在它前面，即逆序对数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">InversePairs</span><span class="params">(self, data)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        先将原序列排序，然后从排完序的数组中取出最小的，</span>
<span class="line">        它在原数组中的位置表示有多少比它大的数在它前面，</span>
<span class="line">        每取出一个在原数组中删除该元素，保证后面取出的元素在原数组中是最小的，</span>
<span class="line">        这样其位置才能表示有多少比它大的数在它前面，即逆序对数</span>
<span class="line">        :param data:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        count = <span class="number">0</span></span>
<span class="line">        copy = []</span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data:</span>
<span class="line">            copy.append(i)</span>
<span class="line">        copy.sort()</span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(copy)):</span>
<span class="line">            count += data.index(copy[i])</span>
<span class="line">            data.remove(copy[i])</span>
<span class="line">        <span class="keyword">return</span> count % <span class="number">1000000007</span></span>
</pre></td></tr></table></figure>
<h2 id="扑克牌顺子"><a href="#扑克牌顺子" class="headerlink" title="扑克牌顺子"></a>扑克牌顺子</h2><h3 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h3><p>LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)…他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子…..LL不高兴了,他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何。为了方便起见,你可以认为大小王是0。</p>
<h3 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h3><p>先统计王的数量，再把牌排序，如果后面一个数比前面一个数大于1以上，那么中间的差值就必须用王来补了。看王的数量够不够，如果够就返回true，否则返回false。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">IsContinuous</span><span class="params">(self, numbers)</span>:</span></span>
<span class="line">        <span class="comment"># 如果列表为空</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> numbers:</span>
<span class="line">            <span class="keyword">return</span> numbers</span>
<span class="line">        <span class="comment"># 将列表中大于0的元素生成新列表</span></span>
<span class="line">        new_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> numbers <span class="keyword">if</span> i &gt; <span class="number">0</span>]</span>
<span class="line">        <span class="comment"># 排序</span></span>
<span class="line">        new_list.sort()</span>
<span class="line">        <span class="comment"># 如果新列表长度为1</span></span>
<span class="line">        <span class="keyword">if</span> len(new_list) == <span class="number">1</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line">        n = <span class="number">0</span></span>
<span class="line">        <span class="comment"># 遍历列表</span></span>
<span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(new_list) - <span class="number">1</span>):</span>
<span class="line">            <span class="comment"># 如果后一个元素减去前一个元素大于0</span></span>
<span class="line">            <span class="keyword">if</span> (new_list[j + <span class="number">1</span>] - new_list[j]) &gt; <span class="number">0</span>:</span>
<span class="line">                <span class="comment"># 将加入他们的差</span></span>
<span class="line">                n += (new_list[j + <span class="number">1</span>] - new_list[j])</span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">4</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span>
</pre></td></tr></table></figure>
<h2 id="孩子们的游戏-圆圈中最后剩下的数"><a href="#孩子们的游戏-圆圈中最后剩下的数" class="headerlink" title="孩子们的游戏(圆圈中最后剩下的数)"></a>孩子们的游戏(圆圈中最后剩下的数)</h2><h3 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h3><p>每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0…m-1报数….这样下去….直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)</p>
<h3 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h3><p>将n个小朋友抽象成一个成环的列表，使用取模的方式求出当前m的索引值，然后弹出该索引上的元素，返回列表中的第一个元素。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">LastRemaining_Solution</span><span class="params">(self, n, m)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> m <span class="keyword">or</span> <span class="keyword">not</span> n:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span>
<span class="line">        <span class="comment"># 将n个小朋友索引转为列表</span></span>
<span class="line">        res = range(n)</span>
<span class="line">        i = <span class="number">0</span></span>
<span class="line">        <span class="comment"># 当列表长度大于1</span></span>
<span class="line">        <span class="keyword">while</span> len(res) &gt; <span class="number">1</span>:</span>
<span class="line">            <span class="comment"># 由于是环，可以用取模的方式得到m的索引</span></span>
<span class="line">            i = (m + i - <span class="number">1</span>) % len(res)</span>
<span class="line">            <span class="comment"># 移除i位置的元素</span></span>
<span class="line">            res.pop(i)</span>
<span class="line">        <span class="comment"># 返回第一个元素</span></span>
<span class="line">        <span class="keyword">return</span> res[<span class="number">0</span>]</span>
</pre></td></tr></table></figure>
<h2 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a>矩阵中的路径</h2><h3 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h3><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如 a b c e s f c s a d e e 矩阵中包含一条字符串”bcced”的路径，但是矩阵中不包含”abcb”路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。</p>
<h3 id="分析-14"><a href="#分析-14" class="headerlink" title="分析"></a>分析</h3><p> 首先，在矩阵中任选一个格子作为路径的起点。如果路径上的第i个字符不是ch，那么这个格子不可能处在路径上的第i个位置。如果路径上的第i个字符正好是ch，那么往相邻的格子寻找路径上的第i+1个字符。除在矩阵边界上的格子之外，其他格子都有4个相邻的格子。重复这个过程直到路径上的所有字符都在矩阵中找到相应的位置。由于回朔法的递归特性，路径可以被开成一个栈。当在矩阵中定位了路径中前n个字符的位置之后，在与第n个字符对应的格子的周围都没有找到第n+1个字符，这个时候只要在路径上回到第n-1个字符，重新定位第n个字符。由于路径不能重复进入矩阵的格子，还需要定义和字符矩阵大小一样的布尔值矩阵，用来标识路径是否已经进入每个格子。当矩阵中坐标为（row,col）的格子和路径字符串中相应的字符一样时，从4个相邻的格子(row,col-1),(row-1,col),(row,col+1)<br>以及(row+1,col)中去定位路径字符串中下一个字符如果4个相邻的格子都没有匹配字符串中下一个的字符，表明当前路径字符串中字符在矩阵中的定位不正确，我们需要回到前一个，然后重新定位。一直重复这个过程，直到路径字符串上所有字符都在矩阵中找到合适的位置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasPath</span><span class="params">(self, matrix, rows, cols, path)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        首先，在矩阵中任选一个格子作为路径的起点。如果路径上的第i个字符不是ch，那么这个格子不可能处在路径上的</span>
<span class="line">        第i个位置。如果路径上的第i个字符正好是ch，那么往相邻的格子寻找路径上的第i+1个字符。</span>
<span class="line">        除在矩阵边界上的格子之外，其他格子都有4个相邻的格子。重复这个过程直到路径上的所有字符都在矩阵中找到相应的位置。</span>
<span class="line">　　     由于回朔法的递归特性，路径可以被开成一个栈。当在矩阵中定位了路径中前n个字符的位置之后，</span>
<span class="line">        在与第n个字符对应的格子的周围都没有找到第n+1个字符，这个时候只要在路径上回到第n-1个字符，重新定位第n个字符。</span>
<span class="line">　　     由于路径不能重复进入矩阵的格子，还需要定义和字符矩阵大小一样的布尔值矩阵，用来标识路径是否已经进入每个格子。</span>
<span class="line">        当矩阵中坐标为（row,col）的格子和路径字符串中相应的字符一样时，从4个相邻的格子(row,col-1),(row-1,col),(row,col+1)</span>
<span class="line">        以及(row+1,col)中去定位路径字符串中下一个字符如果4个相邻的格子都没有匹配字符串中下一个的字符，</span>
<span class="line">        表明当前路径字符串中字符在矩阵中的定位不正确，我们需要回到前一个，然后重新定位。</span>
<span class="line">　　     一直重复这个过程，直到路径字符串上所有字符都在矩阵中找到合适的位置</span>
<span class="line">        :param matrix:</span>
<span class="line">        :param rows:</span>
<span class="line">        :param cols:</span>
<span class="line">        :param path:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 遍历行列</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(rows):</span>
<span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(cols):</span>
<span class="line">                <span class="comment"># 如果矩阵中的对应元素等于路径的第一个元素</span></span>
<span class="line">                <span class="keyword">if</span> matrix[i * cols + j] == path[<span class="number">0</span>]:</span>
<span class="line">                    <span class="keyword">if</span> self.find(list(matrix), rows, cols, path[<span class="number">1</span>:], i, j):</span>
<span class="line">                        <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, matrix, rows, cols, path, i, j)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        四个方向依次递归判断</span>
<span class="line">        :param matrix:</span>
<span class="line">        :param rows:</span>
<span class="line">        :param cols:</span>
<span class="line">        :param path:</span>
<span class="line">        :param i:</span>
<span class="line">        :param j:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> path:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line">        matrix[i * cols + j] = <span class="string">'0'</span></span>
<span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt; cols <span class="keyword">and</span> matrix[i * cols + (j + <span class="number">1</span>)] == path[<span class="number">0</span>]:</span>
<span class="line">            <span class="keyword">return</span> self.find(list(matrix), rows, cols, path[<span class="number">1</span>:], i, j + <span class="number">1</span>)</span>
<span class="line">        <span class="keyword">elif</span> j - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> matrix[i * cols + (j - <span class="number">1</span>)] == path[<span class="number">0</span>]:</span>
<span class="line">            <span class="keyword">return</span> self.find(list(matrix), rows, cols, path[<span class="number">1</span>:], i, j - <span class="number">1</span>)</span>
<span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; rows <span class="keyword">and</span> matrix[(i + <span class="number">1</span>) * cols + j] == path[<span class="number">0</span>]:</span>
<span class="line">            <span class="keyword">return</span> self.find(list(matrix), rows, cols, path[<span class="number">1</span>:], i + <span class="number">1</span>, j)</span>
<span class="line">        <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> matrix[(i - <span class="number">1</span>) * cols + j] == path[<span class="number">0</span>]:</span>
<span class="line">            <span class="keyword">return</span> self.find(list(matrix), rows, cols, path[<span class="number">1</span>:], i - <span class="number">1</span>, j)</span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span>
</pre></td></tr></table></figure>
<h1 id="机器人的运动范围"><a href="#机器人的运动范围" class="headerlink" title="机器人的运动范围"></a>机器人的运动范围</h1><h3 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h3><p>地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？</p>
<h3 id="分析-15"><a href="#分析-15" class="headerlink" title="分析"></a>分析</h3><p>将每次遍历过的格子使用字典记录下来，编写一个递归函数，递归判断当前遍历的格子向上下左右四个方向，在递归函数中还需判断各种边界条件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span>
<span class="line">        <span class="comment"># 使用一个字典存储行列为键，值为1的键值对</span></span>
<span class="line">        self.vis = &#123;&#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">movingCount</span><span class="params">(self, threshold, rows, cols)</span>:</span></span>
<span class="line">        <span class="keyword">return</span> self.moving(threshold, rows, cols, <span class="number">0</span>, <span class="number">0</span>)</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moving</span><span class="params">(self, threshold, rows, cols, row, col)</span>:</span></span>
<span class="line">        <span class="comment"># 计算行坐标和列坐标的数位之和是否大于</span></span>
<span class="line">        <span class="keyword">if</span> row / <span class="number">10</span> + row % <span class="number">10</span> + col / <span class="number">10</span> + col % <span class="number">10</span> &gt; threshold:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">        <span class="comment"># 判断开始的行列是否大于总的行列</span></span>
<span class="line">        <span class="keyword">if</span> row &gt;= rows <span class="keyword">or</span> col &gt;= cols <span class="keyword">or</span> row &lt; <span class="number">0</span> <span class="keyword">or</span> col &lt; <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">        <span class="comment"># 判断行列是否在字典中</span></span>
<span class="line">        <span class="keyword">if</span> (row, col) <span class="keyword">in</span> self.vis:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">        <span class="comment"># 将当前遍历的行列存入字典中</span></span>
<span class="line">        self.vis[(row, col)] = <span class="number">1</span></span>
<span class="line">        <span class="comment"># 将四个方向递归并且加上开始的第一个格子</span></span>
<span class="line">        <span class="keyword">return</span> <span class="number">1</span> + self.moving(threshold, rows, cols, row - <span class="number">1</span>, col) \</span>
<span class="line">               + self.moving(threshold, rows, cols, row + <span class="number">1</span>, col) \</span>
<span class="line">               + self.moving(threshold, rows, cols, row, col - <span class="number">1</span>) \</span>
<span class="line">               + self.moving(threshold, rows, cols, row, col + <span class="number">1</span>)</span>
</pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java8新特性总结备忘]]></title>
      <url>/2018/05/06/java8-features/</url>
      <content type="html"><![CDATA[<p>java8新特性总结备忘<br><a id="more"></a></p>
<h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
</pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span>, <span class="string">"c"</span>);</span>
<span class="line"><span class="comment">//一个lambda可以由用逗号分隔的参数列表、–&gt;符号与函数体三部分表示</span></span>
<span class="line">list.forEach(e -&gt; System.out.println(e));</span>
<span class="line"></span>
<span class="line">list.forEach((String e) -&gt; System.out.println(e));</span>
<span class="line"></span>
<span class="line"><span class="comment">// 在某些情况下lambda的函数体会更加复杂，这时可以把函数体放到在一对花括号中</span></span>
<span class="line">list.forEach(e -&gt; &#123;</span>
<span class="line">    System.out.println(e);</span>
<span class="line">    System.out.println(e + <span class="string">"xxx"</span>);</span>
<span class="line">    &#125;);</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="comment">//Lambda可能会返回一个值。返回值的类型也是由编译器推测出来的。</span></span>
<span class="line"><span class="comment">// 如果lambda的函数体只有一行的话，那么没有必要显式使用return语句</span></span>
<span class="line">list.sort((e1, e2) -&gt; e1.compareTo(e2));</span>
<span class="line">System.out.println(list);</span>
<span class="line"></span>
<span class="line">list.sort((e1, e2) -&gt; &#123;</span>
<span class="line">    <span class="keyword">int</span> res = e1.compareTo(e2);</span>
<span class="line">    <span class="keyword">return</span> res;</span>
<span class="line">    &#125;);</span>
</pre></td></tr></table></figure>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 默认方法与抽象方法不同之处在于抽象方法必须要求实现，</span>
<span class="line"> * 但是默认方法则没有这个要求。相反，每个接口都必须提供一个所谓的默认实现，</span>
<span class="line"> * 这样所有的接口实现者将会默认继承它（如果有必要的话，可以覆盖这个默认实现）</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/05/06</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Defaulable</span> </span>&#123;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">notRequired</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="string">"Default implementation"</span>;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>不覆盖默认方法，让默认方法保持原样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 实现了接口，并且让默认方法保持原样</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/05/06</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultableImpl</span> <span class="keyword">implements</span> <span class="title">Defaulable</span> </span>&#123;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>覆盖默认方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 实现了接口，并且覆盖了默认方法</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/05/06</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverridableImpl</span> <span class="keyword">implements</span> <span class="title">Defaulable</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">notRequired</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="string">"Overridden implementation"</span>;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>接口还可以声明（并且可以提供实现）静态方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 可以声明（并且可以提供实现）静态方法</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/05/06</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DefaulableFactory</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">static</span> Defaulable <span class="title">create</span><span class="params">(Supplier&lt;Defaulable&gt; supplier)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> supplier.get();</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>首先定义一个Car类作为例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">create</span><span class="params">(<span class="keyword">final</span> Supplier&lt;Car&gt; supplier)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> supplier.get();</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">collide</span><span class="params">(<span class="keyword">final</span> Car car)</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Collided "</span> + car.toString());</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">follow</span><span class="params">(<span class="keyword">final</span> Car another)</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Following the "</span> + another.toString());</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">repair</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Repaired "</span> + <span class="keyword">this</span>.toString());</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>各种引用的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//引用是构造器引用，它的语法是Class::new，或者更一般的Class&lt; T &gt;::new。请注意构造器没有参数。</span></span>
<span class="line">Car car = Car.create(Car::<span class="keyword">new</span>);</span>
<span class="line">List&lt;Car&gt; cars = Arrays.asList(car);</span>
<span class="line"></span>
<span class="line"><span class="comment">//静态方法引用，它的语法是Class::static_method。请注意这个方法接受一个Car类型的参数。</span></span>
<span class="line">cars.forEach(Car::collide);</span>
<span class="line"></span>
<span class="line"><span class="comment">//引用是特定类的任意对象的方法引用，它的语法是Class::method。请注意，这个方法没有参数。</span></span>
<span class="line">cars.forEach(Car::repair);</span>
<span class="line"></span>
<span class="line"><span class="comment">//引用是特定对象的方法引用，它的语法是instance::method。请注意，这个方法接受一个Car类型的参数</span></span>
<span class="line">Car police = Car.create(Car::<span class="keyword">new</span>);</span>
<span class="line">cars.forEach(police::follow);</span>
</pre></td></tr></table></figure></p>
<h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><p>首先构造一个结构作为我们使用stream的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Status &#123;</span>
<span class="line"></span>
<span class="line">    OPEN,</span>
<span class="line">    CLOSED</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * Task类有一个分数的概念（或者说是伪复杂度），其次是还有一个值可以为OPEN或CLOSED的状态</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/05/06</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Status status;</span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer points;</span>
<span class="line"></span>
<span class="line">    Task(<span class="keyword">final</span> Status status, <span class="keyword">final</span> Integer points) &#123;</span>
<span class="line">        <span class="keyword">this</span>.status = status;</span>
<span class="line">        <span class="keyword">this</span>.points = points;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPoints</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> points;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> Status <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> status;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> String.format(<span class="string">"[%s, %d]"</span>, status, points);</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>使用的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
</pre></td><td class="code"><pre><span class="line">Collection&lt;Task&gt; tasks = Arrays.asList(</span>
<span class="line">        <span class="keyword">new</span> Task(Status.OPEN, <span class="number">5</span>),</span>
<span class="line">        <span class="keyword">new</span> Task(Status.OPEN, <span class="number">13</span>),</span>
<span class="line">        <span class="keyword">new</span> Task(Status.CLOSED, <span class="number">8</span>));</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="comment">//所有状态为OPEN的任务一共有多少分数</span></span>
<span class="line"><span class="keyword">long</span> totalPointsOfOpenTasks = tasks.stream()</span>
<span class="line">        .filter(task -&gt; task.getStatus() == Status.OPEN)</span>
<span class="line">        .mapToInt(Task::getPoints)</span>
<span class="line">        .sum();</span>
<span class="line">System.out.println(<span class="string">"Total points: "</span> + totalPointsOfOpenTasks);</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="comment">//能够原生支持并行处理。让我们来看看这个算task分数和的例子。</span></span>
<span class="line"><span class="keyword">double</span> totalPoints = tasks.parallelStream()</span>
<span class="line">        .map(Task::getPoints)</span>
<span class="line">        .reduce(<span class="number">0</span>, Integer::sum);</span>
<span class="line">System.out.println(<span class="string">"Total points (all tasks): "</span> + totalPoints);</span>
<span class="line"></span>
<span class="line"><span class="comment">//需要按照某种准则来对集合中的元素进行分组</span></span>
<span class="line">Map&lt;Status, List&lt;Task&gt;&gt; map = tasks.stream()</span>
<span class="line">        .collect(Collectors.groupingBy(Task::getStatus));</span>
<span class="line">System.out.println(map);</span>
<span class="line"></span>
<span class="line"><span class="comment">//整个集合中每个task分数（或权重）的平均值</span></span>
<span class="line">Collection&lt;String&gt; res = tasks.stream()</span>
<span class="line">        .mapToInt(Task::getPoints)</span>
<span class="line">        .asLongStream()</span>
<span class="line">        .mapToDouble(points -&gt; points / totalPoints)</span>
<span class="line">        .boxed()</span>
<span class="line">        .mapToLong(weigth -&gt; (<span class="keyword">long</span>) (weigth * <span class="number">100</span>))</span>
<span class="line">        .mapToObj(percentage -&gt; percentage + <span class="string">"%"</span>)</span>
<span class="line">        .collect(Collectors.toList());</span>
<span class="line">System.out.println(res);</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">String filename = <span class="string">""</span>;</span>
<span class="line">Path path = <span class="keyword">new</span> File(filename).toPath();</span>
<span class="line"><span class="keyword">try</span> (Stream&lt;String&gt; lines = Files.lines(path, StandardCharsets.UTF_8)) &#123;</span>
<span class="line">    lines.onClose(() -&gt; System.out.println(<span class="string">"Done!"</span>)).forEach(System.out::println);</span>
<span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span>
<span class="line">    e.printStackTrace();</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<h2 id="Date-Time-API"><a href="#Date-Time-API" class="headerlink" title="Date/Time API"></a>Date/Time API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//是Clock类，它通过指定一个时区，然后就可以获取到当前的时刻，日期与时间。</span></span>
<span class="line"><span class="comment">// Clock可以替换System.currentTimeMillis()与TimeZone.getDefault()。</span></span>
<span class="line">Clock clock = Clock.systemUTC();</span>
<span class="line">System.out.println(clock.instant());</span>
<span class="line">System.out.println(clock.millis());</span>
<span class="line"></span>
<span class="line"><span class="comment">//LocaleDate只持有ISO-8601格式且无时区信息的日期部分</span></span>
<span class="line">LocalDate date = LocalDate.now();</span>
<span class="line">LocalDate dateFromClock = LocalDate.now(clock);</span>
<span class="line">System.out.println(date);</span>
<span class="line">System.out.println(dateFromClock);</span>
<span class="line"></span>
<span class="line"><span class="comment">//LocaleTime只持有ISO-8601格式且无时区信息的时间部分</span></span>
<span class="line">LocalTime time = LocalTime.now();</span>
<span class="line">LocalTime timeFromClock = LocalTime.now(clock);</span>
<span class="line">System.out.println(time);</span>
<span class="line">System.out.println(timeFromClock);</span>
<span class="line"></span>
<span class="line"><span class="comment">//LocaleDateTime把LocaleDate与LocaleTime的功能合并起来，</span></span>
<span class="line"><span class="comment">// 它持有的是ISO-8601格式无时区信息的日期与时间</span></span>
<span class="line">LocalDateTime datetime = LocalDateTime.now();</span>
<span class="line">LocalDateTime datetimeFromClock = LocalDateTime.now(clock);</span>
<span class="line"></span>
<span class="line">System.out.println(datetime);</span>
<span class="line">System.out.println(datetimeFromClock);</span>
<span class="line"></span>
<span class="line"><span class="comment">//如果你需要特定时区的日期/时间，那么ZonedDateTime是你的选择。</span></span>
<span class="line"><span class="comment">// 它持有ISO-8601格式具具有时区信息的日期与时间</span></span>
<span class="line">ZonedDateTime zonedDatetime = ZonedDateTime.now();</span>
<span class="line">ZonedDateTime zonedDatetimeFromClock = ZonedDateTime.now(clock);</span>
<span class="line">ZonedDateTime zonedDatetimeFromZone = ZonedDateTime.now(ZoneId.of(<span class="string">"America/Los_Angeles"</span>));</span>
<span class="line"></span>
<span class="line">System.out.println(zonedDatetime);</span>
<span class="line">System.out.println(zonedDatetimeFromClock);</span>
<span class="line">System.out.println(zonedDatetimeFromZone);</span>
<span class="line"></span>
<span class="line"><span class="comment">//Duration类：在秒与纳秒级别上的一段时间。Duration使计算两个日期间的不同变的十分简单</span></span>
<span class="line">LocalDateTime from = LocalDateTime.of(<span class="number">2014</span>, Month.APRIL, <span class="number">16</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span>
<span class="line">LocalDateTime to = LocalDateTime.of(<span class="number">2015</span>, Month.APRIL, <span class="number">16</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span>
<span class="line"></span>
<span class="line">Duration duration = Duration.between(from, to);</span>
<span class="line">System.out.println(<span class="string">"Duration in days: "</span> + duration.toDays());</span>
<span class="line">System.out.println(<span class="string">"Duration in hours: "</span> + duration.toHours());</span>
</pre></td></tr></table></figure>
<h2 id="并行数组"><a href="#并行数组" class="headerlink" title="并行数组"></a>并行数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span>[] arrayOfLong = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">20000</span>];</span>
<span class="line"></span>
<span class="line"><span class="comment">//对一个有20000个元素的数组进行随机赋值</span></span>
<span class="line">Arrays.parallelSetAll(arrayOfLong,</span>
<span class="line">        index -&gt; ThreadLocalRandom.current().nextInt(<span class="number">1000000</span>));</span>
<span class="line"></span>
<span class="line"><span class="comment">//打印出前10个元素的值</span></span>
<span class="line">Arrays.stream(arrayOfLong).limit(<span class="number">10</span>).forEach(</span>
<span class="line">        i -&gt; System.out.print(i + <span class="string">" "</span>));</span>
<span class="line">System.out.println();</span>
<span class="line"></span>
<span class="line"><span class="comment">//并行排序</span></span>
<span class="line">Arrays.parallelSort(arrayOfLong);</span>
<span class="line"></span>
<span class="line"><span class="comment">//打印出前10个元素的值</span></span>
<span class="line">Arrays.stream(arrayOfLong).limit(<span class="number">10</span>).forEach(</span>
<span class="line">        i -&gt; System.out.print(i + <span class="string">" "</span>));</span>
<span class="line">System.out.println();</span>
</pre></td></tr></table></figure>
<p>还有一些特性这里不做总结，以上只举例一些常用的特性</p>
<blockquote>
<p>参考:</p>
<ul>
<li><a href="http://ifeve.com/java-8-tutorial-2/" target="_blank" rel="external">http://ifeve.com/java-8-tutorial-2/</a></li>
<li><a href="http://www.importnew.com/11908.html#defaultAndStaticMethod" target="_blank" rel="external">http://www.importnew.com/11908.html#defaultAndStaticMethod</a></li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java泛型总结]]></title>
      <url>/2018/05/05/java-generic/</url>
      <content type="html"><![CDATA[<p>泛型相关总结<br><a id="more"></a></p>
<p>泛型最大的特点就是只在编译阶段有效，在编译之后会采取去泛型化的措施</p>
<h2 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h2><p>有三种方式</p>
<ul>
<li>泛型类</li>
<li>泛型接口</li>
<li>泛型方法</li>
</ul>
<h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>泛型类型用于类的定义中，被称为泛型类。通过泛型可以完成对一组类的操作对外开放相同的接口。最典型的就是各种容器类，如：List、Set、Map。</p>
<p>一个最普通的泛型类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span>
<span class="line"> * 在实例化泛型类时，必须指定T的具体类型</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/05/05</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> T key;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 泛型构造方法形参key的类型也为T，T的类型由外部指定</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> key</span>
<span class="line">     */</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">this</span>.key = key;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 泛型方法getKey的返回值类型为T，T的类型由外部指定</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> key;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>使用时如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line">        * 泛型的类型参数只能是类类型（包括自定义类），不能是简单类型</span>
<span class="line">        */</span></span>
<span class="line"></span>
<span class="line">       <span class="comment">//传入的实参类型需与泛型的类型参数类型相同，即为Integer</span></span>
<span class="line">       Generic&lt;Integer&gt; genericInteger = <span class="keyword">new</span> Generic&lt;&gt;(<span class="number">123456</span>);</span>
<span class="line"></span>
<span class="line">       <span class="comment">//传入的实参类型需与泛型的类型参数类型相同，即为String.</span></span>
<span class="line">       Generic&lt;String&gt; genericString = <span class="keyword">new</span> Generic&lt;&gt;(<span class="string">"key_vlaue"</span>);</span>
<span class="line">       System.out.println(genericInteger.getKey());</span>
<span class="line">       System.out.println(genericString.getKey());</span>
<span class="line"></span>
<span class="line">       Generic generic = <span class="keyword">new</span> Generic(<span class="string">"111111"</span>);</span>
<span class="line">       Generic generic1 = <span class="keyword">new</span> Generic(<span class="number">4444</span>);</span>
<span class="line">       Generic generic2 = <span class="keyword">new</span> Generic(<span class="number">55.55</span>);</span>
<span class="line">       Generic generic3 = <span class="keyword">new</span> Generic(<span class="keyword">false</span>);</span>
<span class="line">       System.out.println(generic.getKey());</span>
<span class="line">       System.out.println(generic1.getKey());</span>
<span class="line">       System.out.println(generic2.getKey());</span>
<span class="line">       System.out.println(generic3.getKey());</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>定义的泛型类，就一定要传入泛型类型实参么？并不是这样，在使用泛型的时候如果传入泛型实参，则会根据传入的泛型实参做相应的限制，此时泛型才会起到本应起到的限制作用。如果不传入泛型类型实参的话，在泛型类中使用泛型的方法或成员变量定义的类型可以为任何的类型。</p>
</blockquote>
<h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><ol>
<li><p>定义一个泛型接口，泛型接口常被用在各种类的生产器中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 定义一个泛型接口</span>
<span class="line"> * </span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/05/05</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="function">T <span class="title">next</span><span class="params">()</span></span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>当实现泛型接口的类，未传入泛型实参时：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 未传入泛型实参时，与泛型类的定义相同，在声明类的时候，需将泛型的声明也一起加到类中</span>
<span class="line"> * 即：class FruitGenerator&lt;T&gt; implements Generator&lt;T&gt;&#123;</span>
<span class="line"> * 如果不声明泛型，如：class FruitGenerator implements Generator&lt;T&gt;，编译器会报错："Unknown class"</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/05/05</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitGenerator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>当实现泛型接口的类，传入泛型实参时</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 传入泛型实参时：</span>
<span class="line"> * 定义一个生产器实现这个接口,虽然我们只创建了一个泛型接口Generator&lt;T&gt;</span>
<span class="line"> * 但是我们可以为T传入无数个实参，形成无数种类型的Generator接口。</span>
<span class="line"> * 在实现类实现泛型接口时，如已将泛型类型传入实参类型，则所有使用泛型的地方都要替换成传入的实参类型</span>
<span class="line"> * 即：Generator&lt;T&gt;，public T next();中的的T都要替换成传入的String类型。</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/05/05</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitGenerator2</span> <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> String[] fruits = <span class="keyword">new</span> String[]&#123;<span class="string">"Apple"</span>, <span class="string">"Banana"</span>, <span class="string">"Pear"</span>&#125;;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        Random rand = <span class="keyword">new</span> Random();</span>
<span class="line">        <span class="keyword">return</span> fruits[rand.nextInt(<span class="number">3</span>)];</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h3 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showKeyValue1</span><span class="params">(Generic&lt;Number&gt; obj)</span></span>&#123;</span>
<span class="line">    System.out.println(<span class="string">"泛型测试"</span>,<span class="string">"key value is "</span> + obj.getKey());</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">Generic&lt;Integer&gt; gInteger = <span class="keyword">new</span> Generic&lt;Integer&gt;(<span class="number">123</span>);</span>
<span class="line">Generic&lt;Number&gt; gNumber = <span class="keyword">new</span> Generic&lt;Number&gt;(<span class="number">456</span>);</span>
<span class="line"></span>
<span class="line">showKeyValue(gNumber);</span>
<span class="line"></span>
<span class="line"><span class="comment">// showKeyValue这个方法编译器会为我们报错：Generic&lt;java.lang.Integer&gt; </span></span>
<span class="line"><span class="comment">// cannot be applied to Generic&lt;java.lang.Number&gt;</span></span>
<span class="line"><span class="comment">// showKeyValue(gInteger);</span></span>
</pre></td></tr></table></figure>
<blockquote>
<p>同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。</p>
</blockquote>
<p>为了解决上面的问题，可以将类型改为通配符就可以兼容<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showKeyValue1</span><span class="params">(Generic&lt;？&gt; obj)</span></span>&#123;</span>
<span class="line">    System.out.println(<span class="string">"泛型测试"</span>,<span class="string">"key value is "</span> + obj.getKey());</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>类型通配符一般是使用？代替具体的类型实参，注意了，此处’？’是类型实参，而不是类型形参</p>
</blockquote>
<h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><ol>
<li>一个普通的泛型方法如下<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 泛型方法的基本介绍</span>
<span class="line"> * <span class="doctag">@param</span> tClass 传入的泛型实参</span>
<span class="line"> * <span class="doctag">@return</span> T 返回值为T类型</span>
<span class="line"> * 说明：</span>
<span class="line"> *     1）public 与 返回值中间&lt;T&gt;非常重要，可以理解为声明此方法为泛型方法。</span>
<span class="line"> *     2）只有声明了&lt;T&gt;的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。</span>
<span class="line"> *     3）&lt;T&gt;表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。</span>
<span class="line"> *     4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">genericMethod</span><span class="params">(Class&lt;T&gt; tClass)</span><span class="keyword">throws</span> InstantiationException ,</span>
<span class="line">  IllegalAccessException</span>&#123;</span>
<span class="line">        T instance = tClass.newInstance();</span>
<span class="line">        <span class="keyword">return</span> instance;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">Object obj = genericMethod(Class.forName(<span class="string">"com.test.test"</span>));</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="泛型方法的基本用法"><a href="#泛型方法的基本用法" class="headerlink" title="泛型方法的基本用法"></a>泛型方法的基本用法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
<span class="line">86</span>
<span class="line">87</span>
<span class="line">88</span>
<span class="line">89</span>
<span class="line">90</span>
<span class="line">91</span>
<span class="line">92</span>
<span class="line">93</span>
<span class="line">94</span>
<span class="line">95</span>
<span class="line">96</span>
<span class="line">97</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/05/05</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 泛型类</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> &lt;T&gt;</span>
<span class="line">     */</span></span>
<span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span>
<span class="line">        <span class="keyword">private</span> T key;</span>
<span class="line"></span>
<span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123;</span>
<span class="line">            <span class="keyword">this</span>.key = key;</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="comment">/**</span>
<span class="line">         * 虽然在方法中使用了泛型，但是这并不是一个泛型方法。</span>
<span class="line">         * 这只是类中一个普通的成员方法，只不过他的返回值是在声明泛型类已经声明过的泛型。</span>
<span class="line">         * 所以在这个方法中才可以继续使用 T 这个泛型。</span>
<span class="line">         *</span>
<span class="line">         * <span class="doctag">@return</span></span>
<span class="line">         */</span></span>
<span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span>
<span class="line">            <span class="keyword">return</span> key;</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="comment">/**</span>
<span class="line">         * 这个方法显然是有问题的，在编译器会给我们提示这样的错误信息"cannot reslove symbol E"</span>
<span class="line">         * 因为在类的声明中并未声明泛型E，所以在使用E做形参和返回值类型时，编译器会无法识别。</span>
<span class="line">         public E setKey(E key)&#123;</span>
<span class="line">         this.key = keu</span>
<span class="line">         &#125;</span>
<span class="line">         */</span></span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 这才是一个真正的泛型方法。</span>
<span class="line">     * 首先在public与返回值之间的&lt;T&gt;必不可少，这表明这是一个泛型方法，并且声明了一个泛型T</span>
<span class="line">     * 这个T可以出现在这个泛型方法的任意位置.</span>
<span class="line">     * 泛型的数量也可以为任意多个</span>
<span class="line">     * 如：public &lt;T,K&gt; K showKeyName(Generic&lt;T&gt; container)&#123;</span>
<span class="line">     * ...</span>
<span class="line">     * &#125;</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> container</span>
<span class="line">     * <span class="doctag">@param</span> &lt;T&gt;</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">showKeyName</span><span class="params">(Generic&lt;T&gt; container)</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"container key :"</span> + container.getKey());</span>
<span class="line">        <span class="comment">//当然这个例子举的不太合适，只是为了说明泛型方法的特性。</span></span>
<span class="line">        T test = container.getKey();</span>
<span class="line">        <span class="keyword">return</span> test;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 这也不是一个泛型方法，这就是一个普通的方法，只是使用了Generic&lt;Number&gt;这个泛型类做形参而已。</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> obj</span>
<span class="line">     */</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showKeyValue1</span><span class="params">(Generic&lt;Number&gt; obj)</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"泛型测试key value is "</span> + obj.getKey());</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 这也不是一个泛型方法，这也是一个普通的方法，只不过使用了泛型通配符?</span>
<span class="line">     * 同时这也印证了泛型通配符章节所描述的，?是一种类型实参，可以看做为Number等所有类的父类</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> obj</span>
<span class="line">     */</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showKeyValue2</span><span class="params">(Generic&lt;?&gt; obj)</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"泛型测试key value is "</span> + obj.getKey());</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 这个方法是有问题的，编译器会为我们提示错误信息："UnKnown class 'E' "</span>
<span class="line">     * 虽然我们声明了&lt;T&gt;,也表明了这是一个可以处理泛型的类型的泛型方法。</span>
<span class="line">     * 但是只声明了泛型类型T，并未声明泛型类型E，因此编译器并不知道该如何处理E这个类型。</span>
<span class="line">     public &lt;T&gt; T showKeyName(Generic&lt;E&gt; container)&#123;</span>
<span class="line">     ...</span>
<span class="line">     &#125;</span>
<span class="line">     */</span></span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 这个方法也是有问题的，编译器会为我们提示错误信息："UnKnown class 'T' "</span>
<span class="line">     * 对于编译器来说T这个类型并未项目中声明过，因此编译也不知道该如何编译这个类。</span>
<span class="line">     * 所以这也不是一个正确的泛型方法声明。</span>
<span class="line">     * public void showkey(T genericObj)&#123;</span>
<span class="line">     * &lt;p&gt;</span>
<span class="line">     * &#125;</span>
<span class="line">     */</span></span>
<span class="line"></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="类中的泛型方法"><a href="#类中的泛型方法" class="headerlink" title="类中的泛型方法"></a>类中的泛型方法</h4><p>当泛型方法出现在泛型类中时，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericFruit</span> </span>&#123;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateTest</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span>
<span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show_1</span><span class="params">(T t)</span> </span>&#123;</span>
<span class="line">            System.out.println(t.toString());</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="comment">/**</span>
<span class="line">         * 在泛型类中声明了一个泛型方法，使用泛型E，这种泛型E可以为任意类型。可以类型与T相同，也可以不同。</span>
<span class="line">         * 由于泛型方法在声明的时候会声明泛型&lt;E&gt;，因此即使在泛型类中并未声明泛型，编译器也能够正确识别泛型方法中识别的泛型。</span>
<span class="line">         *</span>
<span class="line">         * <span class="doctag">@param</span> t</span>
<span class="line">         * <span class="doctag">@param</span> &lt;E&gt;</span>
<span class="line">         */</span></span>
<span class="line">        <span class="keyword">public</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">show_3</span><span class="params">(E t)</span> </span>&#123;</span>
<span class="line">            System.out.println(t.toString());</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="comment">/**</span>
<span class="line">         * 在泛型类中声明了一个泛型方法，使用泛型T，注意这个T是一种全新的类型，可以与泛型类中声明的T不是同一种类型。</span>
<span class="line">         *</span>
<span class="line">         * <span class="doctag">@param</span> t</span>
<span class="line">         * <span class="doctag">@param</span> &lt;T&gt;</span>
<span class="line">         */</span></span>
<span class="line">        <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show_2</span><span class="params">(T t)</span> </span>&#123;</span>
<span class="line">            System.out.println(t.toString());</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span>
<span class="line">        Apple apple = <span class="keyword">new</span> Apple();</span>
<span class="line">        Person person = <span class="keyword">new</span> Person();</span>
<span class="line"></span>
<span class="line">        GenerateTest&lt;Fruit&gt; generateTest = <span class="keyword">new</span> GenerateTest&lt;Fruit&gt;();</span>
<span class="line">        <span class="comment">//apple是Fruit的子类，所以这里可以</span></span>
<span class="line">        generateTest.show_1(apple);</span>
<span class="line">        <span class="comment">//编译器会报错，因为泛型类型实参指定的是Fruit，而传入的实参类是Person</span></span>
<span class="line">        <span class="comment">//generateTest.show_1(person);</span></span>
<span class="line"></span>
<span class="line">        <span class="comment">//使用这两个方法都可以成功</span></span>
<span class="line">        generateTest.show_2(apple);</span>
<span class="line">        generateTest.show_2(person);</span>
<span class="line"></span>
<span class="line">        <span class="comment">//使用这两个方法也都可以成功</span></span>
<span class="line">        generateTest.show_3(apple);</span>
<span class="line">        generateTest.show_3(person);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<h4 id="泛型方法与可变参数"><a href="#泛型方法与可变参数" class="headerlink" title="泛型方法与可变参数"></a>泛型方法与可变参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">printMsg</span><span class="params">( T... args)</span></span>&#123;</span>
<span class="line">    <span class="keyword">for</span>(T t : args)&#123;</span>
<span class="line">        System.out.println(<span class="string">"泛型测试"</span>,<span class="string">"t is "</span> + t);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">printMsg(<span class="string">"111"</span>,<span class="number">222</span>,<span class="string">"aaaa"</span>,<span class="string">"2323.4"</span>,<span class="number">55.55</span>);</span>
</pre></td></tr></table></figure>
<h4 id="静态方法与泛型"><a href="#静态方法与泛型" class="headerlink" title="静态方法与泛型"></a>静态方法与泛型</h4><p>静态方法无法访问类上定义的泛型；如果静态方法操作的引用数据类型不确定的时候，必须要将泛型定义在方法上。</p>
<blockquote>
<p>如果静态方法要使用泛型的话，必须将静态方法也定义成泛型方法 。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/05/05</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticGenerator</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 如果在类中定义使用泛型的静态方法，需要添加额外的泛型声明（将这个方法定义成泛型方法）</span>
<span class="line">     * 即使静态方法要使用泛型类中已经声明过的泛型也不可以。</span>
<span class="line">     * 如：public static void show(T t)&#123;..&#125;,此时编译器会提示错误信息：</span>
<span class="line">     * "StaticGenerator cannot be refrenced from static context"</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> t</span>
<span class="line">     * <span class="doctag">@param</span> &lt;T&gt;</span>
<span class="line">     */</span></span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
</blockquote>
<h3 id="泛型上下界"><a href="#泛型上下界" class="headerlink" title="泛型上下界"></a>泛型上下界</h3><p>在使用泛型的时候，我们还可以为传入的泛型类型实参进行上下边界的限制，如：类型实参只准传入某种类型的父类或某种类型的子类。</p>
<ul>
<li>为泛型添加上边界，即传入的类型实参必须是指定类型的子类型<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showKeyValue1</span><span class="params">(Generic&lt;? extends Number&gt; obj)</span></span>&#123;</span>
<span class="line">    System.out.println(<span class="string">"泛型测试"</span>,<span class="string">"key value is "</span> + obj.getKey());</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line">Generic&lt;String&gt; generic1 = <span class="keyword">new</span> Generic&lt;String&gt;(<span class="string">"11111"</span>);</span>
<span class="line">Generic&lt;Integer&gt; generic2 = <span class="keyword">new</span> Generic&lt;Integer&gt;(<span class="number">2222</span>);</span>
<span class="line">Generic&lt;Float&gt; generic3 = <span class="keyword">new</span> Generic&lt;Float&gt;(<span class="number">2.4f</span>);</span>
<span class="line">Generic&lt;Double&gt; generic4 = <span class="keyword">new</span> Generic&lt;Double&gt;(<span class="number">2.56</span>);</span>
<span class="line"></span>
<span class="line"><span class="comment">//这一行代码编译器会提示错误，因为String类型并不是Number类型的子类</span></span>
<span class="line"><span class="comment">//showKeyValue1(generic1);</span></span>
<span class="line"></span>
<span class="line">showKeyValue1(generic2);</span>
<span class="line">showKeyValue1(generic3);</span>
<span class="line">showKeyValue1(generic4);</span>
</pre></td></tr></table></figure>
<p>如果把泛型定义也改掉<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Number</span>&gt;</span>&#123;</span>
<span class="line">    <span class="keyword">private</span> T key;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">this</span>.key = key;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span></span>&#123;</span>
<span class="line">        <span class="keyword">return</span> key;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<h3 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h3><blockquote>
<p>在java中是”不能创建一个确切的泛型类型的数组”的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//下面这条语句是错的</span></span>
<span class="line"><span class="comment">//List&lt;String&gt;[] ls = new ArrayList&lt;String&gt;[10];  </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="comment">// 使用通配符创建泛型数组是可以的</span></span>
<span class="line">List&lt;?&gt;[] ls = <span class="keyword">new</span> ArrayList&lt;?&gt;[<span class="number">10</span>];  </span>
<span class="line"></span>
<span class="line"><span class="comment">// 这样也可以</span></span>
<span class="line">List&lt;String&gt;[] ls = <span class="keyword">new</span> ArrayList[<span class="number">10</span>];</span>
</pre></td></tr></table></figure></p>
<p>参考:<a href="https://blog.csdn.net/s10461/article/details/53941091" target="_blank" rel="external">https://blog.csdn.net/s10461/article/details/53941091</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java反射总结]]></title>
      <url>/2018/05/05/java-refect/</url>
      <content type="html"><![CDATA[<p>反射相关总结<br><a id="more"></a></p>
<h2 id="获取class对象"><a href="#获取class对象" class="headerlink" title="获取class对象"></a>获取class对象</h2><ol>
<li><p>通过对象的getClass()方法</p>
</li>
<li><p>使用类的静态属性.class</p>
</li>
<li><p>通过class类的静态方法forName(String name)</p>
</li>
</ol>
<p>一般只使用第三种方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数为你的完整包路径</span></span>
<span class="line">Class clazz = Class.forName(<span class="string">"com.earthchen.constructors.Student"</span>);</span>
</pre></td></tr></table></figure>
<h2 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h2><h3 id="批量获取构造方法"><a href="#批量获取构造方法" class="headerlink" title="批量获取构造方法"></a>批量获取构造方法</h3><ul>
<li><p>clazz.getConstructors() : 所有”公有的”构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Constructor[] conArray = clazz.getConstructors();</span>
</pre></td></tr></table></figure>
</li>
<li><p>clazz.getDeclaredConstructors() ：获取所有的构造方法(包括私有、受保护、默认、公有) </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Constructor[] conArray = clazz.getDeclaredConstructors();</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h3 id="获取单个构造方法"><a href="#获取单个构造方法" class="headerlink" title="获取单个构造方法"></a>获取单个构造方法</h3><ul>
<li><p>clazz.getConstructor(Class… parameterTypes); 获取单个的”公有的”构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//1&gt;、因为是无参的构造方法所以类型是一个null,不写也可以：这里需要的是一个参数的类型，切记是类型</span></span>
<span class="line"><span class="comment">//2&gt;、返回的是描述这个无参构造函数的类对象。</span></span>
<span class="line">Constructor con = clazz.getConstructor(<span class="keyword">null</span>);</span>
</pre></td></tr></table></figure>
</li>
<li><p>clazz.getDeclaredConstructor():获取”某个构造方法”可以是私有的，或受保护、默认、公有</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Constructor con = clazz.getDeclaredConstructor(<span class="keyword">char</span>.class);</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h3 id="调用构造方法"><a href="#调用构造方法" class="headerlink" title="调用构造方法"></a>调用构造方法</h3><ul>
<li>con.newInstance(): 调用构造方法</li>
</ul>
<blockquote>
<ul>
<li><p>如果在构造实体时，需要传参数，直接在newInstance()方法中添加相关参数即可</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">obj=con.newInstance(<span class="string">'男'</span>)</span>
</pre></td></tr></table></figure>
</li>
<li><p>在访问私有方法时，需要设置允许访问</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">con.setAccessible(<span class="keyword">true</span>);</span>
</pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h2 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h2><h3 id="批量获取成员变量"><a href="#批量获取成员变量" class="headerlink" title="批量获取成员变量"></a>批量获取成员变量</h3><ul>
<li><p>clazz.getFields() : 所有”公有的”字段</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Field[] fieldArray = stuClass.getFields();</span>
</pre></td></tr></table></figure>
</li>
<li><p>clazz.getDeclaredFields() ：获取所有的构造方法(包括私有、受保护、默认、公有) </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Field[] fieldArray = stuClass.getDeclaredFields();</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h3 id="获取单个成员变量"><a href="#获取单个成员变量" class="headerlink" title="获取单个成员变量"></a>获取单个成员变量</h3><ul>
<li><p>clazz.getField(String name): 获取某个”公有的”字段</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Field f = stuClass.getField(<span class="string">"name"</span>);</span>
</pre></td></tr></table></figure>
</li>
<li><p>clazz.getDeclaredField(String name)：获取某个字段(可以是私有的)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Field f = stuClass.getDeclaredField(<span class="string">"phoneNum"</span>);</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h3 id="设置字段的值"><a href="#设置字段的值" class="headerlink" title="设置字段的值"></a>设置字段的值</h3><ul>
<li>f.set(Object obj,Object value): 设置字段的值<ul>
<li>obj:要设置的字段所在的对象</li>
<li>value：要为字段设置的值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">f.set(obj, <span class="string">"18888889999"</span>);</span>
</pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>在设置字段的时候，首先需要构造出obj的对象，也就是需要调用构造方法实例化</li>
<li>在访问私有属性时，需要设置允许访问  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">f.setAccessible(<span class="keyword">true</span>);</span>
</pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h2 id="获取成员方法"><a href="#获取成员方法" class="headerlink" title="获取成员方法"></a>获取成员方法</h2><h3 id="批量获取方法"><a href="#批量获取方法" class="headerlink" title="批量获取方法"></a>批量获取方法</h3><ul>
<li><p>clazz.getMethods() : 所有”公有的”方法（包含了父类的方法也包含Object类） </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Method[] methodArray = stuClass.getMethods();</span>
</pre></td></tr></table></figure>
</li>
<li><p>clazz.getDeclaredMethods() ：获取所有的成员方法，包括私有的(不包括继承的)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Method[] methodArray = stuClass.getDeclaredMethods();</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h3 id="获取单个方法"><a href="#获取单个方法" class="headerlink" title="获取单个方法"></a>获取单个方法</h3><ul>
<li><p>clazz.getMethod(String name,Class&lt;?&gt;… parameterTypes): 获取某个”公有的”方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Method m = stuClass.getMethod(<span class="string">"show1"</span>, String.class);</span>
</pre></td></tr></table></figure>
</li>
<li><p>clazz.getDeclaredMethod(String name,Class&lt;?&gt;… parameterTypes)：获取某个方法(可以是私有的)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Method m = stuClass.getDeclaredMethod(<span class="string">"show4"</span>, <span class="keyword">int</span>.class);</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><ul>
<li>Method –&gt; public Object invoke(Object obj,Object… args): 调用方法<ul>
<li>obj : 要调用方法的对象； </li>
<li>args:调用方式时所传递的实参； <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">m.invoke(obj, <span class="number">20</span>);</span>
</pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>在设置字段的时候，首先需要构造出obj的对象，也就是需要调用构造方法实例化</li>
<li>在访问私有方法时，需要设置允许访问  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">m.setAccessible(<span class="keyword">true</span>);</span>
</pre></td></tr></table></figure>
</li>
</ul>
<p>参考:<a href="https://blog.csdn.net/sinat_38259539/article/details/71799078" target="_blank" rel="external">https://blog.csdn.net/sinat_38259539/article/details/71799078</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[牛客网剑指offer-2]]></title>
      <url>/2018/05/02/newcoder-%E5%89%91%E6%8C%87offer-2/</url>
      <content type="html"><![CDATA[<p>剑指offer刷题-2</p>
<a id="more"></a>
<h2 id="二叉搜索树与双向链表"><a href="#二叉搜索树与双向链表" class="headerlink" title="二叉搜索树与双向链表"></a>二叉搜索树与双向链表</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先我们需要知道二叉搜索树的特点，也就是左小右大，我们需要递归处理左右子树，交换左右子树中的子节点使其成为链表，根节点在最中间</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Convert</span><span class="params">(self, pRootOfTree)</span>:</span></span>
<span class="line">        <span class="comment"># 处理根节点为空</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pRootOfTree:</span>
<span class="line">            <span class="keyword">return</span> pRootOfTree</span>
<span class="line">        <span class="comment"># 只有根节点的情况</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pRootOfTree.left <span class="keyword">and</span> <span class="keyword">not</span> pRootOfTree.right:</span>
<span class="line">            <span class="keyword">return</span> pRootOfTree</span>
<span class="line">        <span class="comment"># 处理左子树</span></span>
<span class="line">        self.Convert(pRootOfTree.left)</span>
<span class="line">        left = pRootOfTree.left</span>
<span class="line"></span>
<span class="line">        <span class="comment"># 连接根与左子树最大结点</span></span>
<span class="line">        <span class="keyword">if</span> left:</span>
<span class="line">            <span class="keyword">while</span> (left.right):</span>
<span class="line">                left = left.right</span>
<span class="line">            <span class="comment"># 　交换节点的值</span></span>
<span class="line">            pRootOfTree.left, left.right = left, pRootOfTree</span>
<span class="line"></span>
<span class="line">        <span class="comment"># 处理右子树</span></span>
<span class="line">        self.Convert(pRootOfTree.right)</span>
<span class="line">        right = pRootOfTree.right</span>
<span class="line"></span>
<span class="line">        <span class="comment"># 连接根与右子树最小结点</span></span>
<span class="line">        <span class="keyword">if</span> right:</span>
<span class="line">            <span class="keyword">while</span> (right.left):</span>
<span class="line">                right = right.left</span>
<span class="line">            <span class="comment"># 　交换节点的值</span></span>
<span class="line">            pRootOfTree.right, right.left = right, pRootOfTree</span>
<span class="line"></span>
<span class="line">        <span class="comment"># 当左子树存在时</span></span>
<span class="line">        <span class="keyword">while</span> (pRootOfTree.left):</span>
<span class="line">            <span class="comment"># 左子树赋值给自己</span></span>
<span class="line">            pRootOfTree = pRootOfTree.left</span>
<span class="line">        <span class="comment"># 返回链表的头节点</span></span>
<span class="line">        <span class="keyword">return</span> pRootOfTree</span>
</pre></td></tr></table></figure>
<h2 id="字符串的排列"><a href="#字符串的排列" class="headerlink" title="字符串的排列"></a>字符串的排列</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。。</p>
<blockquote>
<p>输入一个字符串,长度不超过9(可能有字符重复),字符只包括大小写字母。</p>
</blockquote>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>使用标准库中的方法即可，重排序之后进行去重排序</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Permutation</span><span class="params">(self, ss)</span>:</span></span>
<span class="line">        <span class="comment"># 如果ss为空</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ss:</span>
<span class="line">            <span class="keyword">return</span> []</span>
<span class="line">        <span class="comment"># 使用标准库中的permutations进行全排序，使用map函数聚合</span></span>
<span class="line">        <span class="comment"># 使用set去重</span></span>
<span class="line">        <span class="comment"># 转为list并排序</span></span>
<span class="line">        <span class="keyword">return</span> sorted(list(set(map(<span class="string">''</span>.join, itertools.permutations(ss)))))</span>
</pre></td></tr></table></figure>
<h2 id="数组中出现次数超过一半的数字"><a href="#数组中出现次数超过一半的数字" class="headerlink" title="数组中出现次数超过一半的数字"></a>数组中出现次数超过一半的数字</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0</p>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>求数组长度的一半，然后遍历数组中每个元素的，判断是否大于数组长度的一半</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">MoreThanHalfNum_Solution</span><span class="params">(self, numbers)</span>:</span></span>
<span class="line">        <span class="comment"># 求的数组长度的一半</span></span>
<span class="line">        mid = len(numbers) / <span class="number">2</span></span>
<span class="line">        <span class="comment"># 遍历数组</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> numbers:</span>
<span class="line">            <span class="comment"># 判断数组中元素出现的次数</span></span>
<span class="line">            <span class="keyword">if</span> numbers.count(i) &gt; mid:</span>
<span class="line">                <span class="keyword">return</span> i</span>
<span class="line">        <span class="keyword">return</span> <span class="number">0</span></span>
</pre></td></tr></table></figure>
<h2 id="最小的K个数"><a href="#最小的K个数" class="headerlink" title="最小的K个数"></a>最小的K个数</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。</p>
<h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>首先判断边界条件，k是否大于数组长度，简单处理可以对列表进行排序并取出前k个</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetLeastNumbers_Solution</span><span class="params">(self, tinput, k)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> k &gt; len(tinput):</span>
<span class="line">            <span class="keyword">return</span> []</span>
<span class="line">        <span class="keyword">return</span> sorted(tinput)[:k]</span>
</pre></td></tr></table></figure>
<h2 id="整数中1出现的次数（从1到n整数中1出现的次"><a href="#整数中1出现的次数（从1到n整数中1出现的次" class="headerlink" title="整数中1出现的次数（从1到n整数中1出现的次"></a>整数中1出现的次数（从1到n整数中1出现的次</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数。</p>
<h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>设定整数点（如1、10、100等等）作为位置点i（对应n的各位、十位、百位等等），分别对每个数位上有多少包含1的点进行分析<br> 根据设定的整数位置，对n进行分割，分为两部分，高位n/i，低位n%i<br> 当i表示百位，且百位对应的数&gt;=2,如n=31456,i=100，则a=314,b=56，此时百位为1的次数有a/10+1=32（最高两位0~31），每一次都包含100个连续的点，即共有(a%10+1)<em>100个点的百位为1<br>当i表示百位，且百位对应的数为1，如n=31156,i=100，则a=311,b=56，此时百位对应的就是1，则共有a%10(最高两位0-30)次是包含100个连续点，当最高两位为31（即a=311），本次只对应局部点00~56，共b+1次，所有点加起来共有（a%10</em>100）+(b+1)，这些点百位对应为1<br>  当i表示百位，且百位对应的数为0,如n=31056,i=100，则a=310,b=56，此时百位为1的次数有a/10=31（最高两位0~30）<br>综合以上三种情况，当百位对应0或&gt;=2时，有(a+8)/10次包含所有100个点，还有当百位为1(a%10==1)，需要增加局部点b+1<br>之所以补8，是因为当百位为0，则a/10==(a+8)/10，当百位&gt;=2，补8会产生进位位，效果等同于(a/10+1)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NumberOf1Between1AndN_Solution</span><span class="params">(self, n)</span>:</span></span>
<span class="line">        count = <span class="number">0</span></span>
<span class="line">        i = <span class="number">1</span></span>
<span class="line">        <span class="keyword">while</span> i &lt;= n:</span>
<span class="line">            a = n / i</span>
<span class="line">            b = n % i</span>
<span class="line">            count += (a + <span class="number">8</span>) / <span class="number">10</span> * i + (a % <span class="number">10</span> == <span class="number">1</span>) * (b + <span class="number">1</span>)</span>
<span class="line">            i *= <span class="number">10</span></span>
<span class="line">        <span class="keyword">return</span> count</span>
</pre></td></tr></table></figure>
<h2 id="把数组排成最小的数"><a href="#把数组排成最小的数" class="headerlink" title="把数组排成最小的数"></a>把数组排成最小的数</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。</p>
<h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>使用标准库的全排列方法将列表中的元素进行全排序，然后去重排序取第0个元素即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PrintMinNumber</span><span class="params">(self, numbers)</span>:</span></span>
<span class="line">        <span class="comment"># write code here</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> numbers:</span>
<span class="line">            <span class="keyword">return</span> <span class="string">''</span></span>
<span class="line">        numbers = map(str, numbers)</span>
<span class="line">        <span class="comment"># 全排列去重转列表排序取最小值</span></span>
<span class="line">        res = sorted(list(set(map(<span class="string">''</span>.join, itertools.permutations(numbers)))))</span>
<span class="line">        <span class="keyword">return</span> res[<span class="number">0</span>]</span>
</pre></td></tr></table></figure>
<h2 id="丑数"><a href="#丑数" class="headerlink" title="丑数"></a>丑数</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>把只包含因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数</p>
<h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>既然知道第一个丑数为1，并且丑数的因子只包含2 3 5，我们可以分别乘以2 3 5，来求出其中的最小值，放入丑数列表，最后取出最后一个即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetUglyNumber_Solution</span><span class="params">(self, index)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> index &lt; <span class="number">1</span>:</span>
<span class="line">            <span class="keyword">return</span> index</span>
<span class="line">        <span class="comment"># 使用一个列表保存丑数</span></span>
<span class="line">        res = [<span class="number">1</span>]</span>
<span class="line">        i = <span class="number">0</span></span>
<span class="line">        j = <span class="number">0</span></span>
<span class="line">        k = <span class="number">0</span></span>
<span class="line">        <span class="comment"># 当丑数数量不等于index时</span></span>
<span class="line">        <span class="keyword">while</span> len(res) != index:</span>
<span class="line">            <span class="comment"># 求出当前丑数*2 *3 *5中的最小值</span></span>
<span class="line">            minV = min(res[i] * <span class="number">2</span>, res[j] * <span class="number">3</span>, res[k] * <span class="number">5</span>)</span>
<span class="line">            <span class="comment"># 将最小值放入丑数列表</span></span>
<span class="line">            res.append(minV)</span>
<span class="line">            <span class="comment"># 判断当前丑数*2 *3 *5是否小于等于丑数</span></span>
<span class="line">            <span class="keyword">if</span> res[i] * <span class="number">2</span> &lt;= minV:</span>
<span class="line">                i += <span class="number">1</span></span>
<span class="line">            <span class="keyword">if</span> res[j] * <span class="number">3</span> &lt;= minV:</span>
<span class="line">                j += <span class="number">1</span></span>
<span class="line">            <span class="keyword">if</span> res[k] * <span class="number">5</span> &lt;= minV:</span>
<span class="line">                k += <span class="number">1</span></span>
<span class="line">        <span class="comment"># 返回最后一个丑数</span></span>
<span class="line">        <span class="keyword">return</span> res[<span class="number">-1</span>]</span>
</pre></td></tr></table></figure>
<h2 id="第一个只出现一次的字符"><a href="#第一个只出现一次的字符" class="headerlink" title="第一个只出现一次的字符"></a>第一个只出现一次的字符</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>在一个字符串(1&lt;=字符串长度&lt;=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置</p>
<h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>当s为空时候，直接返回-1，当不为空的时候，遍历字符串，当从双向查找的索引值都相等，即找到所求</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">FirstNotRepeatingChar</span><span class="params">(self, s)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> s == <span class="string">''</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span>
<span class="line">            <span class="comment"># 当从前往后查找和从后向前查找时返回值相等时，即只出现了一次</span></span>
<span class="line">            <span class="keyword">if</span> s.find(s[i]) == s.rfind(s[i]):</span>
<span class="line">                <span class="keyword">return</span> i</span>
<span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span>
</pre></td></tr></table></figure>
<h2 id="两个链表的第一个公共结点"><a href="#两个链表的第一个公共结点" class="headerlink" title="两个链表的第一个公共结点"></a>两个链表的第一个公共结点</h2><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入两个链表，找出它们的第一个公共结点。</p>
<h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>使用列表存储其中一个链表，遍历第二个链表判断是否在列表中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">FindFirstCommonNode</span><span class="params">(self, pHead1, pHead2)</span>:</span></span>
<span class="line">        list1 = []</span>
<span class="line">        node1 = pHead1</span>
<span class="line">        node2 = pHead2</span>
<span class="line">        <span class="comment"># 使用一个列表存储第一个链表的所有节点</span></span>
<span class="line">        <span class="keyword">while</span> node1:</span>
<span class="line">            list1.append(node1.val)</span>
<span class="line">            node1 = node1.next</span>
<span class="line">        <span class="comment"># 循环遍历第二个链表判断是否存在列表中</span></span>
<span class="line">        <span class="keyword">while</span> node2:</span>
<span class="line">            <span class="keyword">if</span> node2.val <span class="keyword">in</span> list1:</span>
<span class="line">                <span class="keyword">return</span> node2</span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                node2 = node2.next</span>
</pre></td></tr></table></figure>
<h2 id="数字在排序数组中出现的次数"><a href="#数字在排序数组中出现的次数" class="headerlink" title="数字在排序数组中出现的次数"></a>数字在排序数组中出现的次数</h2><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><p>统计一个数字在排序数组中出现的次数。</p>
<h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><p>由于是排序的，所以可以想到二分查找，当然利用一些标准库函数也可以，但是不符合题意了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetNumberOfK</span><span class="params">(self, data, k)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        在Python中可以直接使用data.count(k)来解决</span>
<span class="line"></span>
<span class="line">        为了题目的意义，这里使用二分查找</span>
<span class="line">        :param data:</span>
<span class="line">        :param k:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        length = len(data)</span>
<span class="line">        <span class="keyword">if</span> length == <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">        first = self.get_first_k(data, k, <span class="number">0</span>, length - <span class="number">1</span>)</span>
<span class="line">        end = self.get_last_k(data, k, <span class="number">0</span>, length - <span class="number">1</span>)</span>
<span class="line">        <span class="keyword">if</span> first != <span class="number">-1</span> <span class="keyword">and</span> end != <span class="number">-1</span>:</span>
<span class="line">            <span class="keyword">return</span> end - first + <span class="number">1</span></span>
<span class="line">        <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_k</span><span class="params">(self, data, k, start, end)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        递归写法二分查找</span>
<span class="line">        :param data:</span>
<span class="line">        :param k:</span>
<span class="line">        :param start:</span>
<span class="line">        :param end:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">if</span> start &gt; end:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span>
<span class="line">        mid = start + (end - start) / <span class="number">2</span></span>
<span class="line">        <span class="keyword">if</span> data[mid] &gt; k:</span>
<span class="line">            <span class="keyword">return</span> self.get_first_k(data, k, start, mid - <span class="number">1</span>)</span>
<span class="line">        <span class="keyword">elif</span> data[mid] &lt; k:</span>
<span class="line">            <span class="keyword">return</span> self.get_first_k(data, k, mid + <span class="number">1</span>, end)</span>
<span class="line">        <span class="keyword">elif</span> mid - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> data[mid - <span class="number">1</span>] == k:</span>
<span class="line">            <span class="keyword">return</span> self.get_first_k(data, k, start, mid - <span class="number">1</span>)</span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            <span class="keyword">return</span> mid</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_last_k</span><span class="params">(self, data, k, start, end)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        循环写法二分查找</span>
<span class="line">        :param data:</span>
<span class="line">        :param k:</span>
<span class="line">        :param start:</span>
<span class="line">        :param end:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        length = len(data)</span>
<span class="line">        mid = start + (end - start) / <span class="number">2</span></span>
<span class="line">        <span class="keyword">while</span> start &lt;= end:</span>
<span class="line">            <span class="keyword">if</span> data[mid] &gt; k:</span>
<span class="line">                end = mid - <span class="number">1</span></span>
<span class="line">            <span class="keyword">elif</span> data[mid] &lt; k:</span>
<span class="line">                start = mid + <span class="number">1</span></span>
<span class="line">            <span class="keyword">elif</span> mid + <span class="number">1</span> &lt; length <span class="keyword">and</span> data[mid + <span class="number">1</span>] == k:</span>
<span class="line">                start = mid + <span class="number">1</span></span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                <span class="keyword">return</span> mid</span>
<span class="line">            mid = start + (end - start) / <span class="number">2</span></span>
<span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span>
</pre></td></tr></table></figure>
<h2 id="二叉树的深度"><a href="#二叉树的深度" class="headerlink" title="二叉树的深度"></a>二叉树的深度</h2><h3 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p>
<h3 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h3><p>求深度，递归判断左右子树的深度，最后加上根节点即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">TreeDepth</span><span class="params">(self, pRoot)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pRoot:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">        <span class="keyword">return</span> max(self.TreeDepth(pRoot.left), self.TreeDepth(pRoot.right)) + <span class="number">1</span></span>
</pre></td></tr></table></figure>
<h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><h3 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一棵二叉树，判断该二叉树是否是平衡二叉树。</p>
<h3 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h3><p>根据平衡二叉树的特点求解即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">IsBalanced_Solution</span><span class="params">(self, pRoot)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        判断一个树是否为平衡二叉树</span>
<span class="line">        当check函数的发挥值不等于-1时返回true，等于-1是返回false</span>
<span class="line">        :param pRoot: TreeNode</span>
<span class="line">        :return: bool</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">return</span> self.check(pRoot) != <span class="number">-1</span></span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self, root)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        检查结点</span>
<span class="line">        :param root: TreeNode</span>
<span class="line">        :return: int</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 结点为空时</span></span>
<span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">        <span class="comment"># 递归得出左子树的返回值</span></span>
<span class="line">        left = self.check(root.left)</span>
<span class="line">        <span class="comment"># 递归得出右子树的返回值</span></span>
<span class="line">        right = self.check(root.right)</span>
<span class="line">        <span class="comment"># 如果左子树不为平衡树或者右子树不为平衡二叉树，</span></span>
<span class="line">        <span class="comment"># 左右子树相减的值大于1(-1-(-1))左右子树不为平衡树的情况</span></span>
<span class="line">        <span class="keyword">if</span> left == <span class="number">-1</span> <span class="keyword">or</span> right == <span class="number">-1</span> <span class="keyword">or</span> abs(left - right) &gt; <span class="number">1</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span>
<span class="line">        <span class="comment"># left right分别等于0或1的情况</span></span>
<span class="line">        <span class="keyword">return</span> <span class="number">1</span> + max(left, right)</span>
</pre></td></tr></table></figure>
<h2 id="数组中只出现一次的数字"><a href="#数组中只出现一次的数字" class="headerlink" title="数组中只出现一次的数字"></a>数组中只出现一次的数字</h2><h3 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h3><p>一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。</p>
<h3 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h3><p>使用一个列表来保存元素，因为每个元素最多出现两次，当出现第二次的时候，删除该元素，最后列表中只会留下只出现一次的元素</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="comment"># 返回[a,b] 其中ab是出现一次的两个数字</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">FindNumsAppearOnce</span><span class="params">(self, array)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        遍历数组，如果已存在的结果列表中就移除，不存在则添加</span>
<span class="line">        :param array:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        tmp = []</span>
<span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> array:</span>
<span class="line">            <span class="keyword">if</span> a <span class="keyword">in</span> tmp:</span>
<span class="line">                tmp.remove(a)</span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                tmp.append(a)</span>
<span class="line">        <span class="keyword">return</span> tmp</span>
</pre></td></tr></table></figure>
<h2 id="和为S的连续正数序列"><a href="#和为S的连续正数序列" class="headerlink" title="和为S的连续正数序列"></a>和为S的连续正数序列</h2><h3 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h3><p>小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!</p>
<p>输出描述:<br>输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序</p>
<h3 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h3><p>这里给出的解法是最笨的方法，时间复杂度会比较高，也就是依次从0开始相加，直到等于所求的和。还可以根据序列的特点去求解，比如等差数列求和，，，可以相对降低时间复杂度</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">FindContinuousSequence</span><span class="params">(self, tsum)</span>:</span></span>
<span class="line">        <span class="comment"># 当要求的和的值小于3，不存在这样的序列</span></span>
<span class="line">        <span class="keyword">if</span> tsum &lt; <span class="number">3</span>:</span>
<span class="line">            <span class="keyword">return</span> []</span>
<span class="line">        s = []</span>
<span class="line">        <span class="comment"># 遍历从1到所求和之前的值</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, tsum):</span>
<span class="line">            t = <span class="number">0</span></span>
<span class="line">            j = i</span>
<span class="line">            <span class="comment"># 从0开始依次相加，直到不小于和</span></span>
<span class="line">            <span class="keyword">while</span> t &lt; tsum:</span>
<span class="line">                t = t + j</span>
<span class="line">                j = j + <span class="number">1</span></span>
<span class="line">            <span class="comment"># 判断是否等于和</span></span>
<span class="line">            <span class="keyword">if</span> t == tsum:</span>
<span class="line">                s.append(range(i, j))</span>
<span class="line">        <span class="keyword">return</span> s</span>
</pre></td></tr></table></figure>
<h2 id="和为S的两个数字"><a href="#和为S的两个数字" class="headerlink" title="和为S的两个数字"></a>和为S的两个数字</h2><h3 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个递增排序的数组和一个数字S，在数组中查找两个数，是的他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。</p>
<h3 id="分析-14"><a href="#分析-14" class="headerlink" title="分析"></a>分析</h3><p>使用字典存储乘积和两个数的元组，由于递增排序，所以在字典中出现同样乘积的只保留第一组键值对。当结果字典不为空的时候，将字典进行排序取出第一组键值对的值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">FindNumbersWithSum</span><span class="params">(self, array, tsum)</span>:</span></span>
<span class="line">        <span class="comment"># 使用一个字典存储乘积和两个数的键值对</span></span>
<span class="line">        res = &#123;&#125;</span>
<span class="line">        <span class="comment"># 遍历列表</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> array:</span>
<span class="line">            <span class="comment"># 判断和减去该元素是否在该列表中</span></span>
<span class="line">            <span class="keyword">if</span> tsum - i <span class="keyword">in</span> array:</span>
<span class="line">                <span class="comment"># 如果乘积的值不在字典中，将字典的值和键值对存储在字典中</span></span>
<span class="line">                <span class="keyword">if</span> i * (tsum - i) <span class="keyword">not</span> <span class="keyword">in</span> res.keys():</span>
<span class="line">                    res[i * (tsum - i)] = (i, tsum - i)</span>
<span class="line">        <span class="comment"># 当字典不为空的时候，取出第一个元素的值即为最小的</span></span>
<span class="line">        <span class="keyword">if</span> res != &#123;&#125;:</span>
<span class="line">            <span class="keyword">return</span> list(sorted(res.items())[<span class="number">0</span>][<span class="number">1</span>])</span>
<span class="line">        <span class="keyword">return</span> []</span>
</pre></td></tr></table></figure>
<h2 id="左旋转字符串"><a href="#左旋转字符串" class="headerlink" title="左旋转字符串"></a>左旋转字符串</h2><h3 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h3><p>汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！</p>
<h3 id="分析-15"><a href="#分析-15" class="headerlink" title="分析"></a>分析</h3><p>左旋转，斟酌题意可以知道当n大于字符串长度或者小于0，字符串都是没有变化的，直接返回0即可。否则，将前n字符串拼接到后n位字符串后面即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">LeftRotateString</span><span class="params">(self, s, n)</span>:</span></span>
<span class="line">        <span class="comment"># 当n大于字符串长度或者小于0的时候，等于没有变</span></span>
<span class="line">        <span class="keyword">if</span> n &gt;= len(s) <span class="keyword">or</span> n &lt;= <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">return</span> s</span>
<span class="line">        <span class="comment"># 将字符串的前n位拼接到字符串的最后即可</span></span>
<span class="line">        <span class="keyword">return</span> s[n:] + s[:n]</span>
</pre></td></tr></table></figure>
<h2 id="翻转单词顺序列"><a href="#翻转单词顺序列" class="headerlink" title="翻转单词顺序列"></a>翻转单词顺序列</h2><h3 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h3><p>牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。例如，“student. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a student.”。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？</p>
<h3 id="分析-16"><a href="#分析-16" class="headerlink" title="分析"></a>分析</h3><p>翻转单词，首先我们需要对字符串进行空格切分，然后将其逆序，再按空格拼接为字符串</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReverseSentence</span><span class="params">(self, s)</span>:</span></span>
<span class="line">        <span class="comment"># 使用空格进行字符串切割转换为列表</span></span>
<span class="line">        l = s.split(<span class="string">' '</span>)</span>
<span class="line">        <span class="comment"># 使用空格将字符串倒序拼成一个新的字符串</span></span>
<span class="line">        <span class="keyword">return</span> <span class="string">' '</span>.join(l[::<span class="number">-1</span>])</span>
</pre></td></tr></table></figure>
<h2 id="求1-2-3-…-n"><a href="#求1-2-3-…-n" class="headerlink" title="求1+2+3+…+n"></a>求1+2+3+…+n</h2><h3 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h3><p>求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p>
<h3 id="分析-17"><a href="#分析-17" class="headerlink" title="分析"></a>分析</h3><p>使用递归解决</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Sum_Solution</span><span class="params">(self, n)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">1</span></span>
<span class="line">        <span class="keyword">return</span> n + self.Sum_Solution(n - <span class="number">1</span>)</span>
</pre></td></tr></table></figure>
<h2 id="不用加减乘除做加法"><a href="#不用加减乘除做加法" class="headerlink" title="不用加减乘除做加法"></a>不用加减乘除做加法</h2><h3 id="题目描述-18"><a href="#题目描述-18" class="headerlink" title="题目描述"></a>题目描述</h3><p>写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。</p>
<h3 id="分析-18"><a href="#分析-18" class="headerlink" title="分析"></a>分析</h3><p>这里使用内置函数sum</p>
<p>（可以使用位运算，但是Python这里涉及到负数不知道怎么就报错了，就不展示代码了）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Add</span><span class="params">(self, num1, num2)</span>:</span></span>
<span class="line">        <span class="keyword">return</span> sum([num1, num2])</span>
</pre></td></tr></table></figure>
<h2 id="把字符串转换成整数"><a href="#把字符串转换成整数" class="headerlink" title="把字符串转换成整数"></a>把字符串转换成整数</h2><h3 id="题目描述-19"><a href="#题目描述-19" class="headerlink" title="题目描述"></a>题目描述</h3><p>将一个字符串转换成一个整数，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0</p>
<h3 id="分析-19"><a href="#分析-19" class="headerlink" title="分析"></a>分析</h3><p>首先判断边界条件，最后使用ord()将字符转为数字，计算。</p>
<p>(看答案有人使用int()函数直接解决，但个人觉得不怎么符合题意)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">StrToInt</span><span class="params">(self, s)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">        number = <span class="number">0</span></span>
<span class="line">        start = <span class="number">0</span></span>
<span class="line">        flage = <span class="number">1</span></span>
<span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">'+'</span>:</span>
<span class="line">        </span>
<span class="line">            start = <span class="number">1</span></span>
<span class="line">        <span class="keyword">elif</span> s[<span class="number">0</span>] == <span class="string">'-'</span>:</span>
<span class="line">            flage = <span class="number">-1</span></span>
<span class="line">            start = <span class="number">1</span></span>
<span class="line">        <span class="comment"># 遍历字符串</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(start, len(s)):</span>
<span class="line">            <span class="comment"># 如果不在0到9</span></span>
<span class="line">            <span class="keyword">if</span> s[i] &lt; <span class="string">'0'</span> <span class="keyword">or</span> s[i] &gt; <span class="string">'9'</span>:</span>
<span class="line">                <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                <span class="comment"># 转换为数字</span></span>
<span class="line">                number = number * <span class="number">10</span> + flage * (ord(s[i]) - ord(<span class="string">'0'</span>))</span>
<span class="line">        <span class="keyword">return</span> number</span>
</pre></td></tr></table></figure>
<h2 id="数组中重复的数字"><a href="#数组中重复的数字" class="headerlink" title="数组中重复的数字"></a>数组中重复的数字</h2><h3 id="题目描述-20"><a href="#题目描述-20" class="headerlink" title="题目描述"></a>题目描述</h3><p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2</p>
<h3 id="分析-20"><a href="#分析-20" class="headerlink" title="分析"></a>分析</h3><p>首先判断边界条件，遍历数组时，使用一个列表去保存遍历过的值，判断当前遍历的元素是否存在列表中，如果存在，将当前值保存，并返回true，窦泽将当前值保存在列表中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="comment"># 这里要特别注意~找到任意重复的一个值并赋值到duplication[0]</span></span>
<span class="line">    <span class="comment"># 函数返回True/False</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">duplicate</span><span class="params">(self, numbers, duplication)</span>:</span></span>
<span class="line">        <span class="comment"># 边界条件</span></span>
<span class="line">        <span class="keyword">if</span> numbers <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> numbers == []:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="comment"># 使用一个列表接收遍历过的值</span></span>
<span class="line">        s = []</span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> numbers:</span>
<span class="line">            <span class="comment"># 存在</span></span>
<span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> s:</span>
<span class="line">                duplication[<span class="number">0</span>] = i</span>
<span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line">            s.append(i)</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span>
</pre></td></tr></table></figure>
<h2 id="构建乘积数组"><a href="#构建乘积数组" class="headerlink" title="构建乘积数组"></a>构建乘积数组</h2><h3 id="题目描述-21"><a href="#题目描述-21" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个数组A[0,1,…,n-1],请构建一个数组B[0,1,…,n-1],其中B中的元素B[i]=A[0]<em>A[1]</em>…<em>A[i-1]</em>A[i+1]<em>…</em>A[n-1]。不能使用除法。</p>
<h3 id="分析-21"><a href="#分析-21" class="headerlink" title="分析"></a>分析</h3><p>首先初始化b，然后遍历ab，判断当前遍历的索引是否相等，不相等时，将B[i]*A[i]赋值给B[i]</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(self, A)</span>:</span></span>
<span class="line">        <span class="comment"># 将b列表元素都初始化为1</span></span>
<span class="line">        B = [<span class="number">1</span>] * len(A)</span>
<span class="line">        <span class="comment"># 遍历a</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A)):</span>
<span class="line">            <span class="comment"># 遍历b</span></span>
<span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(B)):</span>
<span class="line">                <span class="comment"># 如果i不等于j</span></span>
<span class="line">                <span class="keyword">if</span> i != j:</span>
<span class="line">                    B[i] *= A[j]</span>
<span class="line">        <span class="keyword">return</span> B</span>
</pre></td></tr></table></figure>
<h2 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h2><h3 id="题目描述-22"><a href="#题目描述-22" class="headerlink" title="题目描述"></a>题目描述</h3><p>请实现一个函数用来匹配包括’.’和’<em>‘的正则表达式。模式中的字符’.’表示任意一个字符，而’</em>‘表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但是与”aa.a”和”ab*a”均不匹配</p>
<h3 id="分析-22"><a href="#分析-22" class="headerlink" title="分析"></a>分析</h3><p>首先也是判断边界条件，当模式或者字符串为空的情况。</p>
<p>然后依次判断每个字符，判断模式串第二个字符是否为*,然后只需判断第一个模式串是否为.或者与字符相等，当满足条件时，递归判断从第二个开始的字符串。</p>
<p>如果模式串第二个字符串不为*时，则递归判断第三个开始的字符串</p>
<p>同时还需要判断只匹配一个字符的情况</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="comment"># s, pattern都是字符串</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">(self, s, pattern)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> len(s) == <span class="number">0</span> <span class="keyword">and</span> len(pattern) == <span class="number">0</span>:  <span class="comment"># 若均为空，返回true</span></span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line">        <span class="keyword">if</span> len(s) &gt; <span class="number">0</span> <span class="keyword">and</span> len(pattern) == <span class="number">0</span>:  <span class="comment"># 若模式串为空，而字符串不为空，返回False</span></span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="keyword">if</span> len(pattern) &gt; <span class="number">1</span> <span class="keyword">and</span> pattern[<span class="number">1</span>] == <span class="string">'*'</span>:  <span class="comment"># 若模式串的第二个字符为*</span></span>
<span class="line">            <span class="keyword">if</span> len(s) &gt; <span class="number">0</span> <span class="keyword">and</span> (s[<span class="number">0</span>] == pattern[<span class="number">0</span>] <span class="keyword">or</span> pattern[<span class="number">0</span>] == <span class="string">'.'</span>):  <span class="comment"># 若s不为0，且第一个字符匹配</span></span>
<span class="line">                <span class="keyword">return</span> self.match(s[<span class="number">1</span>:], pattern) <span class="keyword">or</span> self.match(s, pattern[<span class="number">2</span>:]) <span class="keyword">or</span> self.match(s[<span class="number">1</span>:], pattern[<span class="number">2</span>:])</span>
<span class="line">            <span class="comment"># 有三种情况：**表示模式串的第一个字符个数为2即重复了；*表示模式串的第一个字符个数为0；*表示模式串的第一个字符个数为1</span></span>
<span class="line">            <span class="keyword">else</span>:  <span class="comment"># s的长度为0时，看模式串后面是否还有未匹配的项</span></span>
<span class="line">                <span class="keyword">return</span> self.match(s, pattern[<span class="number">2</span>:])</span>
<span class="line">        <span class="keyword">if</span> len(s) &gt; <span class="number">0</span> <span class="keyword">and</span> (pattern[<span class="number">0</span>] == <span class="string">'.'</span> <span class="keyword">or</span> pattern[<span class="number">0</span>] == s[<span class="number">0</span>]):  <span class="comment"># 只匹配一个字符的情况</span></span>
<span class="line">            <span class="keyword">return</span> self.match(s[<span class="number">1</span>:], pattern[<span class="number">1</span>:])  <span class="comment"># 继续匹配该字符之后的字符串</span></span>
</pre></td></tr></table></figure>
<h2 id="表示数值的字符串"><a href="#表示数值的字符串" class="headerlink" title="表示数值的字符串"></a>表示数值的字符串</h2><h3 id="题目描述-23"><a href="#题目描述-23" class="headerlink" title="题目描述"></a>题目描述</h3><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。</p>
<h3 id="分析-23"><a href="#分析-23" class="headerlink" title="分析"></a>分析</h3><p>使用float函数转为数字，当转换失败抛出异常时，返回false</p>
<p>或者使用正则表达式去判断</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="comment"># s字符串</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isNumeric</span><span class="params">(self, s)</span>:</span></span>
<span class="line">        <span class="comment"># write code here</span></span>
<span class="line">        <span class="keyword">try</span>:</span>
<span class="line">            a = float(s)</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line">        <span class="keyword">except</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span>
</pre></td></tr></table></figure>
<h2 id="字符流中第一个不重复的字符"><a href="#字符流中第一个不重复的字符" class="headerlink" title="字符流中第一个不重复的字符"></a>字符流中第一个不重复的字符</h2><h3 id="题目描述-24"><a href="#题目描述-24" class="headerlink" title="题目描述"></a>题目描述</h3><p>请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符”go”时，第一个只出现一次的字符是”g”。当从该字符流中读出前六个字符“google”时，第一个只出现一次的字符是”l”。</p>
<p>输出描述:<br>如果当前字符流没有存在出现一次的字符，返回#字符。</p>
<h3 id="分析-24"><a href="#分析-24" class="headerlink" title="分析"></a>分析</h3><p>使用字符串和一个字典去保存字符出现的次数(字符为键，次数为值)遍历字符串，判断字典中是否含有键为字符的元素，如果有，值为1时，返回即可。否则返回‘#’</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="comment"># 返回对应char</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        使用一个字符串和一个字典保存字符串出现的次数</span>
<span class="line">        """</span></span>
<span class="line">        self.s = <span class="string">''</span></span>
<span class="line">        self.dict1 = &#123;&#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">FirstAppearingOnce</span><span class="params">(self)</span>:</span></span>
<span class="line">        <span class="comment"># write code here</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.s:</span>
<span class="line">            <span class="comment"># 如果键值对的值为1(出现的次数为1)</span></span>
<span class="line">            <span class="keyword">if</span> self.dict1[i] == <span class="number">1</span>:</span>
<span class="line">                <span class="keyword">return</span> i</span>
<span class="line">        <span class="keyword">return</span> <span class="string">'#'</span></span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Insert</span><span class="params">(self, char)</span>:</span></span>
<span class="line">        <span class="comment"># 每次将字符串加上新字符</span></span>
<span class="line">        self.s = self.s + char</span>
<span class="line">        <span class="comment"># 判断当前字符是否是字典中的键</span></span>
<span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> self.dict1:</span>
<span class="line">            <span class="comment"># 将对应的键值+1</span></span>
<span class="line">            self.dict1[char] = self.dict1[char] + <span class="number">1</span></span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            <span class="comment"># 不存在即直接赋值为1</span></span>
<span class="line">            self.dict1[char] = <span class="number">1</span></span>
</pre></td></tr></table></figure>
<h2 id="链表中环的入口结点"><a href="#链表中环的入口结点" class="headerlink" title="链表中环的入口结点"></a>链表中环的入口结点</h2><h3 id="题目描述-25"><a href="#题目描述-25" class="headerlink" title="题目描述"></a>题目描述</h3><p>一个链表中包含环，请找出该链表的环的入口结点。</p>
<h3 id="分析-25"><a href="#分析-25" class="headerlink" title="分析"></a>分析</h3><p>使用一个列表保存遍历过的节点，遍历单链表判断是否在列表中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">EntryNodeOfLoop</span><span class="params">(self, pHead)</span>:</span></span>
<span class="line">        <span class="comment"># 遍历链表，环的存在，遍历遇见的第一个重复的即为入口节点</span></span>
<span class="line">        tempList = []</span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pHead <span class="keyword">or</span> <span class="keyword">not</span> pHead.next:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span>
<span class="line">        node = pHead</span>
<span class="line">        <span class="keyword">while</span> node:</span>
<span class="line">            <span class="keyword">if</span> node <span class="keyword">in</span> tempList:</span>
<span class="line">                <span class="keyword">return</span> node</span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                tempList.append(node)</span>
<span class="line">            node = node.next</span>
</pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[牛客网剑指offer-1]]></title>
      <url>/2018/04/17/newcoder-%E5%89%91%E6%8C%87offer-1/</url>
      <content type="html"><![CDATA[<p>剑指offer刷题</p>
<a id="more"></a>
<h2 id="二维数据中的查找"><a href="#二维数据中的查找" class="headerlink" title="二维数据中的查找"></a>二维数据中的查找</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>本题关键在于找到左下角和右上角这两个元素，因为这两个元素在两个方向是分别递增和递减，就可以有规律的移动需要比较的目标元素。如果选用左上角或者右下角，对于两个方向都是递增或递减</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="comment"># array 二维列表</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Find</span><span class="params">(self, target, array)</span>:</span></span>
<span class="line">        col = <span class="number">0</span></span>
<span class="line">        <span class="comment"># 行数</span></span>
<span class="line">        row_n = len(array)</span>
<span class="line">        <span class="comment"># 列数</span></span>
<span class="line">        col_n = len(array[<span class="number">0</span>])</span>
<span class="line">        <span class="comment"># 判断是否大于最大值小于最小值</span></span>
<span class="line">        <span class="keyword">if</span> target &gt; array[row_n - <span class="number">1</span>][col_n - <span class="number">1</span>] <span class="keyword">or</span> target &lt; array[<span class="number">0</span>][<span class="number">0</span>]:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="comment"># 向上向右移动的时候不能越界</span></span>
<span class="line">        <span class="keyword">while</span> col &lt;= col_n - <span class="number">1</span> <span class="keyword">and</span> row_n &gt;= <span class="number">0</span>:</span>
<span class="line">            <span class="comment"># 需要和目标值比较的值(初始为左下角的元素或者是右上角)</span></span>
<span class="line">            list_target = array[row_n - <span class="number">1</span>][col]</span>
<span class="line">            <span class="comment"># 如果目标值大于</span></span>
<span class="line">            <span class="keyword">if</span> target &gt; list_target:</span>
<span class="line">                <span class="comment"># 向右移动</span></span>
<span class="line">                col += <span class="number">1</span></span>
<span class="line">            <span class="comment"># 如果等于返回true</span></span>
<span class="line">            <span class="keyword">elif</span> target == list_target:</span>
<span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line">            <span class="comment"># 如果小于</span></span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                <span class="comment"># 向上移动</span></span>
<span class="line">                row_n -= <span class="number">1</span></span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span>
</pre></td></tr></table></figure>
<h2 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>看到题目的直接反应就是用字符串的替换方法，可能题目的意思时不能调用str的方法，但是牛客这里可以通过。</p>
<p>看有的解析还用了正则替换，当然都可以</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line"><span class="comment"># s 源字符串</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceSpace</span><span class="params">(self, s)</span>:</span></span>
<span class="line">        <span class="keyword">return</span> str(s).replace(<span class="string">" "</span>, <span class="string">"%20"</span>)</span>
</pre></td></tr></table></figure>
<h2 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a>从尾到头打印链表</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个链表，从尾到头打印链表每个节点的值。</p>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>有很多种办法，可以正向遍历存入列表，然后翻转列表；可以使用栈存储，还可以使用递归向列表中添加节点的值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span>
<span class="line">        self.list1 = []</span>
<span class="line"></span>
<span class="line">    <span class="comment"># 返回从尾部到头部的列表值序列，例如[1,2,3]</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printListFromTailToHead</span><span class="params">(self, listNode)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> listNode <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span>
<span class="line">            self.printListFromTailToHead(listNode.next)</span>
<span class="line">            self.list1.append(listNode.val)</span>
<span class="line">        <span class="keyword">return</span> self.list1</span>
</pre></td></tr></table></figure>
<h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。<br>n&lt;=39</p>
<h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>首先想到的是递归，最简洁，但是会有超时之类的问题，所以改为迭代相加</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Fibonacci</span><span class="params">(self, n)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        斐波那契数列</span>
<span class="line">        :param n:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        num0 = <span class="number">0</span></span>
<span class="line">        num1 = <span class="number">1</span></span>
<span class="line">        num_n = <span class="number">0</span></span>
<span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">1</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n + <span class="number">1</span>):</span>
<span class="line">            num_n = num0 + num1</span>
<span class="line">            num0 = num1</span>
<span class="line">            num1 = num_n</span>
<span class="line">        <span class="keyword">return</span> num_n</span>
</pre></td></tr></table></figure>
<h2 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>
<h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>通过分析前几次结果，我们也能发现这也是一个斐波那契数列，所以按照同样的方法即可<br>f(1) = 1, f(2) = 2, f(3) = 3, f(4) = 5，  可以总结出f(n) = f(n-1) + f(n-2)的规律</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloor</span><span class="params">(self, number)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        f(n) = f(n-1) + f(n-2)</span>
<span class="line">        :param number:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        a, b = <span class="number">1</span>, <span class="number">1</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(number):</span>
<span class="line">            a, b = b, a + b</span>
<span class="line">        <span class="keyword">return</span> a</span>
</pre></td></tr></table></figure>
<h2 id="变态跳台阶"><a href="#变态跳台阶" class="headerlink" title="变态跳台阶"></a>变态跳台阶</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>
<h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><ol>
<li><p>第一种方法:<br>因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级<br>跳1级，剩下n-1级，则剩下跳法是f(n-1)<br>跳2级，剩下n-2级，则剩下跳法是f(n-2)<br>所以f(n)=f(n-1)+f(n-2)+…+f(1)<br>因为f(n-1)=f(n-2)+f(n-3)+…+f(1)<br>所以f(n)=2*f(n-1)</p>
</li>
<li><p>第二种方法<br>每个台阶都有跳与不跳两种情况（除了最后一个台阶），最后一个台阶必须跳。所以共用2^(n-1)中情况</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloorII</span><span class="params">(self, number)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        每个台阶都有跳与不跳两种情况（除了最后一个台阶），最后一个台阶必须跳。所以共用2^(n-1)中情况</span>
<span class="line">        :param number: int</span>
<span class="line">        :return: int</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">if</span> number &lt;= <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            <span class="keyword">return</span> pow(<span class="number">2</span>, number - <span class="number">1</span>)</span>
</pre></td></tr></table></figure>
<h2 id="矩形覆盖"><a href="#矩形覆盖" class="headerlink" title="矩形覆盖"></a>矩形覆盖</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>我们可以用2<em>1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2</em>1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p>
<h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>通过分析前几次结果，我们也能发现这也是一个斐波那契数列，所以按照同样的方法即可,<br>对于0这个特殊值需要特殊处理</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rectCover</span><span class="params">(self, number)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        分析可知，还是斐波那契数列</span>
<span class="line">        :param number:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">if</span> number == <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">        a, b = <span class="number">1</span>, <span class="number">1</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(number):</span>
<span class="line">            a, b = b, a + b</span>
<span class="line">        <span class="keyword">return</span> a</span>
</pre></td></tr></table></figure>
<h2 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>我们可以用2<em>1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2</em>1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p>
<h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>重点在怎么求补码，我的解法是转换为二进制字符串然后统计1的个数</p>
<p>还有吧一种使用&amp;进行操作的这里不做说明</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NumberOf1</span><span class="params">(self, n)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        求补码然后使用字符串count函数统计</span>
<span class="line">        :param n:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">return</span> bin(<span class="number">2</span> ** <span class="number">32</span> + n).count(<span class="string">'1'</span>)</span>
<span class="line">        <span class="keyword">return</span> bin(n).count(<span class="string">'1'</span>)</span>
</pre></td></tr></table></figure>
<h2 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a>数值的整数次方</h2><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p>
<h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>没怎么研究，直接使用的内置函数，通过查阅资料，看到一种快速幂求解方式，有兴趣自己研究下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Power</span><span class="params">(self, base, exponent)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        还可以使用快速幂求法</span>
<span class="line">        :param base: </span>
<span class="line">        :param exponent: </span>
<span class="line">        :return: </span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">return</span> pow(base, exponent)</span>
</pre></td></tr></table></figure>
<h2 id="调整数组顺序使奇数位于偶数前面"><a href="#调整数组顺序使奇数位于偶数前面" class="headerlink" title="调整数组顺序使奇数位于偶数前面"></a>调整数组顺序使奇数位于偶数前面</h2><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p>
<h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><p>用了最简单的解法，创建两个列表分别接收奇数和偶数，最后拼起来</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reOrderArray</span><span class="params">(self, array)</span>:</span></span>
<span class="line">        odd_list = []</span>
<span class="line">        even_list = []</span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> array:</span>
<span class="line">            <span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>:</span>
<span class="line">                odd_list.append(i)</span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                even_list.append(i)</span>
<span class="line">        <span class="keyword">return</span> odd_list + even_list</span>
</pre></td></tr></table></figure>
<h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><h3 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个链表，反转链表后，输出链表的所有元素。</p>
<h3 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h3><p>首先判断头节点或者第一个节点是否为空，在不为空的时候迭代链表</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="comment"># 返回ListNode</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReverseList</span><span class="params">(self, pHead)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        倒置链表</span>
<span class="line">        :param pHead:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 判断当前节点是否为空或者下一个节点为空</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pHead <span class="keyword">or</span> <span class="keyword">not</span> pHead.next:</span>
<span class="line">            <span class="keyword">return</span> pHead</span>
<span class="line">        <span class="comment"># 初始化未节点为空</span></span>
<span class="line">        last = <span class="keyword">None</span></span>
<span class="line">        <span class="comment"># 循环迭代头节点</span></span>
<span class="line">        <span class="keyword">while</span> pHead:</span>
<span class="line">            <span class="comment"># 创建一个中间节点接受头节点的下一个节点</span></span>
<span class="line">            tmp = pHead.next</span>
<span class="line">            <span class="comment"># 将尾节点赋值给尾节点</span></span>
<span class="line">            pHead.next = last</span>
<span class="line">            <span class="comment"># 将头节点赋值给尾节点</span></span>
<span class="line">            last = pHead</span>
<span class="line">            <span class="comment"># 将中间节点赋值给头节点</span></span>
<span class="line">            pHead = tmp</span>
<span class="line">        <span class="keyword">return</span> last</span>
</pre></td></tr></table></figure>
<h2 id="合并两个排序的链表"><a href="#合并两个排序的链表" class="headerlink" title="合并两个排序的链表"></a>合并两个排序的链表</h2><h3 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则</p>
<h3 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h3><p>我们使用其中的一个结点将两个链表拼接起来，换句话说，就是将一个链表合并到另一个链表上，所以并不能创建一个新链表去进行操作。</p>
<p>当其中某一个链表为空时，只需要返回另一个链表即可，这种情况需要单独讨论</p>
<p>当两个链表均不为空时，我们需要去比较结点两个链表中结点的大小，当l1的结点值小于l2的结点时，我们就需要将l2合并到l1上，把l2的结点一个一个拼到l1上，知道l2为为空时，循环就可以结束了。这个过程是重复的，所以我们这里可以使用递归操作，反之，当l2的结点小于l1时，就把l1拼接到l2上</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="comment"># 返回ListNode</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReverseList</span><span class="params">(self, pHead)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        倒置链表</span>
<span class="line">        :param pHead:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 判断当前节点是否为空或者下一个节点为空</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pHead <span class="keyword">or</span> <span class="keyword">not</span> pHead.next:</span>
<span class="line">            <span class="keyword">return</span> pHead</span>
<span class="line">        <span class="comment"># 初始化未节点为空</span></span>
<span class="line">        last = <span class="keyword">None</span></span>
<span class="line">        <span class="comment"># 循环迭代头节点</span></span>
<span class="line">        <span class="keyword">while</span> pHead:</span>
<span class="line">            <span class="comment"># 创建一个中间节点接受头节点的下一个节点</span></span>
<span class="line">            tmp = pHead.next</span>
<span class="line">            <span class="comment"># 将尾节点赋值给尾节点</span></span>
<span class="line">            pHead.next = last</span>
<span class="line">            <span class="comment"># 将头节点赋值给尾节点</span></span>
<span class="line">            last = pHead</span>
<span class="line">            <span class="comment"># 将中间节点赋值给头节点</span></span>
<span class="line">            pHead = tmp</span>
<span class="line">        <span class="keyword">return</span> last</span>
</pre></td></tr></table></figure>
<h2 id="树的子结构"><a href="#树的子结构" class="headerlink" title="树的子结构"></a>树的子结构</h2><h3 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）</p>
<h3 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h3><p>判断是否是子树，也就是其中部分树与另一个树相等，我们可以单独写一个函数判断两个树是否相同，然后将一个树的左右子树递归带入即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">HasSubtree</span><span class="params">(self, pRoot1, pRoot2)</span>:</span></span>
<span class="line">        <span class="comment"># 如果root1或者root2有一个为null</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pRoot1 <span class="keyword">or</span> <span class="keyword">not</span> pRoot2:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="keyword">return</span> self.is_subtree(pRoot1, pRoot2) \</span>
<span class="line">               <span class="keyword">or</span> self.HasSubtree(pRoot1.left, pRoot2) \</span>
<span class="line">               <span class="keyword">or</span> self.HasSubtree(pRoot1.right, pRoot2)</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_subtree</span><span class="params">(self, A, B)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        判断是否时子树</span>
<span class="line">        :param A:</span>
<span class="line">        :param B:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> B:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line">        <span class="comment"># 判断a不为空或者a的值与b的值不相等</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> A <span class="keyword">or</span> A.val != B.val:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="keyword">return</span> self.is_subtree(A.left, B.left) \</span>
<span class="line">               <span class="keyword">and</span> self.is_subtree(A.right, B.right)</span>
</pre></td></tr></table></figure>
<h2 id="合并两个排序的链表-1"><a href="#合并两个排序的链表-1" class="headerlink" title="合并两个排序的链表"></a>合并两个排序的链表</h2><h3 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则</p>
<h3 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h3><p>我们使用其中的一个结点将两个链表拼接起来，换句话说，就是将一个链表合并到另一个链表上，所以并不能创建一个新链表去进行操作。</p>
<p>当其中某一个链表为空时，只需要返回另一个链表即可，这种情况需要单独讨论</p>
<p>当两个链表均不为空时，我们需要去比较结点两个链表中结点的大小，当l1的结点值小于l2的结点时，我们就需要将l2合并到l1上，把l2的结点一个一个拼到l1上，知道l2为为空时，循环就可以结束了。这个过程是重复的，所以我们这里可以使用递归操作，反之，当l2的结点小于l1时，就把l1拼接到l2上</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="comment"># 返回ListNode</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReverseList</span><span class="params">(self, pHead)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        倒置链表</span>
<span class="line">        :param pHead:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 判断当前节点是否为空或者下一个节点为空</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pHead <span class="keyword">or</span> <span class="keyword">not</span> pHead.next:</span>
<span class="line">            <span class="keyword">return</span> pHead</span>
<span class="line">        <span class="comment"># 初始化未节点为空</span></span>
<span class="line">        last = <span class="keyword">None</span></span>
<span class="line">        <span class="comment"># 循环迭代头节点</span></span>
<span class="line">        <span class="keyword">while</span> pHead:</span>
<span class="line">            <span class="comment"># 创建一个中间节点接受头节点的下一个节点</span></span>
<span class="line">            tmp = pHead.next</span>
<span class="line">            <span class="comment"># 将尾节点赋值给尾节点</span></span>
<span class="line">            pHead.next = last</span>
<span class="line">            <span class="comment"># 将头节点赋值给尾节点</span></span>
<span class="line">            last = pHead</span>
<span class="line">            <span class="comment"># 将中间节点赋值给头节点</span></span>
<span class="line">            pHead = tmp</span>
<span class="line">        <span class="keyword">return</span> last</span>
</pre></td></tr></table></figure>
<h2 id="二叉树的镜像"><a href="#二叉树的镜像" class="headerlink" title="二叉树的镜像"></a>二叉树的镜像</h2><h3 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h3><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p>
<p>二叉树的镜像定义：源二叉树<br>            8<br>           /  \<br>          6   10<br>         / \  / \<br>        5  7 9 11<br>        镜像二叉树<br>            8<br>           /  \<br>          10   6<br>         / \  / \<br>        11 9 7  5</p>
<h3 id="分析-14"><a href="#分析-14" class="headerlink" title="分析"></a>分析</h3><p>一般看到树的题都是使用递归处理最简单明了，转变为镜像数，我们很容易想到去交换树的左右子树，然后递归左子树和右子树即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Mirror</span><span class="params">(self, root)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        返回镜像树的根节点</span>
<span class="line">        :param root:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 如果跟节点为空</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span>
<span class="line">        <span class="comment"># 交换左子树和右子树</span></span>
<span class="line">        root.left, root.right = root.right, root.left</span>
<span class="line">        <span class="comment"># 递归左右子树</span></span>
<span class="line">        self.Mirror(root.left)</span>
<span class="line">        self.Mirror(root.right)</span>
</pre></td></tr></table></figure>
<h2 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a>顺时针打印矩阵</h2><h3 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p>
<h3 id="分析-15"><a href="#分析-15" class="headerlink" title="分析"></a>分析</h3><p>找出边界条件，将矩阵分为四个方向，注意每个方向上的结束条件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="comment"># matrix类型为二维列表，需要返回列表</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printMatrix</span><span class="params">(self, matrix)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> matrix <span class="keyword">is</span> <span class="keyword">None</span>:</span>
<span class="line">            <span class="keyword">return</span></span>
<span class="line">        rows = len(matrix)</span>
<span class="line">        cols = len(matrix[<span class="number">0</span>])</span>
<span class="line">        start = <span class="number">0</span></span>
<span class="line">        result = []</span>
<span class="line">        <span class="keyword">while</span> rows &gt; <span class="number">2</span> * start <span class="keyword">and</span> cols &gt; <span class="number">2</span> * start:</span>
<span class="line">            endx = rows - <span class="number">1</span> - start</span>
<span class="line">            endy = cols - <span class="number">1</span> - start</span>
<span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(start, endy + <span class="number">1</span>):</span>
<span class="line">                result.append(matrix[start][i])</span>
<span class="line">            <span class="keyword">if</span> start &lt; endx:</span>
<span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(start + <span class="number">1</span>, endx + <span class="number">1</span>):</span>
<span class="line">                    result.append(matrix[i][endy])</span>
<span class="line">            <span class="keyword">if</span> start &lt; endx <span class="keyword">and</span> start &lt; endy:</span>
<span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(endy - <span class="number">1</span>, start - <span class="number">1</span>, <span class="number">-1</span>):</span>
<span class="line">                    result.append(matrix[endx][i])</span>
<span class="line">            <span class="keyword">if</span> start &lt; endx - <span class="number">1</span> <span class="keyword">and</span> start &lt; endy:</span>
<span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(endx - <span class="number">1</span>, start, <span class="number">-1</span>):</span>
<span class="line">                    result.append(matrix[i][start])</span>
<span class="line">            start += <span class="number">1</span></span>
<span class="line">        <span class="keyword">return</span> result</span>
</pre></td></tr></table></figure>
<h2 id="包含min函数的栈"><a href="#包含min函数的栈" class="headerlink" title="包含min函数的栈"></a>包含min函数的栈</h2><h3 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h3><p>定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的min函数。</p>
<h3 id="分析-16"><a href="#分析-16" class="headerlink" title="分析"></a>分析</h3><p>得到最小元素的关键就是怎么去保存这个最小元素，这里在push的时候将插入的值作为键，当前最小值作为值作为一个元素插入栈。就可以得到每个元素插入的时候最小值是什么</p>
<p>(当然也可以使用单独的字段保存最小值)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span>
<span class="line">        self.stack = []</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, node)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        推入元素</span>
<span class="line">        使当前元素的值作为键，当前最小值作为值</span>
<span class="line">        :param node:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        curMin = self.min()</span>
<span class="line">        <span class="keyword">if</span> curMin <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> node &lt; curMin:</span>
<span class="line">            curMin = node</span>
<span class="line">        self.stack.append((node, curMin))</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span>
<span class="line">        self.stack.pop()</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        弹出顶部元素的值</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">if</span> len(self.stack) == <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            <span class="keyword">return</span> self.stack[len(self.stack) - <span class="number">1</span>][<span class="number">0</span>]</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">min</span><span class="params">(self)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        得到最小栈中最小的元素</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">if</span> len(self.stack) == <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            <span class="keyword">return</span> self.stack[len(self.stack) - <span class="number">1</span>][<span class="number">1</span>]</span>
</pre></td></tr></table></figure>
<h2 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h2><h3 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p>
<h3 id="分析-17"><a href="#分析-17" class="headerlink" title="分析"></a>分析</h3><p>在前序遍历中找到跟节点，根据中序遍历中的跟节点的左右找到左右子树的元素，进行递归即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span>
<span class="line">        self.val = x</span>
<span class="line">        self.left = <span class="keyword">None</span></span>
<span class="line">        self.right = <span class="keyword">None</span></span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="comment"># 返回构造的TreeNode根节点</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reConstructBinaryTree</span><span class="params">(self, pre, tin)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        根据前序和中序遍历重建二叉树</span>
<span class="line">        :param pre:</span>
<span class="line">        :param tin:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pre <span class="keyword">and</span> <span class="keyword">not</span> tin:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span>
<span class="line">        <span class="comment"># 根据前序遍历获取到根节点</span></span>
<span class="line">        root = TreeNode(pre[<span class="number">0</span>])</span>
<span class="line">        <span class="comment"># 根据中序遍历得到根节点的索引</span></span>
<span class="line">        i = tin.index(pre[<span class="number">0</span>])</span>
<span class="line">        <span class="comment"># 　递归得到左子树（前序遍历的第１位到根节点索引＋１位，中序遍历的第０位到根节点的索引位）</span></span>
<span class="line">        root.left = self.reConstructBinaryTree(pre[<span class="number">1</span>:i + <span class="number">1</span>], tin[:i])</span>
<span class="line">        <span class="comment"># 　递归得到左子树（前序遍历的第根节点＋１位到最后一位，中序遍历的第根节点＋１到最后一位）</span></span>
<span class="line">        root.right = self.reConstructBinaryTree(pre[i + <span class="number">1</span>:], tin[i + <span class="number">1</span>:])</span>
<span class="line">        <span class="keyword">return</span> root</span>
</pre></td></tr></table></figure>
<h2 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h2><h3 id="题目描述-18"><a href="#题目描述-18" class="headerlink" title="题目描述"></a>题目描述</h3><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p>
<h3 id="分析-18"><a href="#分析-18" class="headerlink" title="分析"></a>分析</h3><p>在入队的时候均使用栈1存储，出队的时候先判断栈2是否为空，如果为空，将栈1的元素依次弹出到栈2，然后弹出栈2的元素</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span>
<span class="line">        self.stack1 = []</span>
<span class="line">        self.stack2 = []</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, node)</span>:</span></span>
<span class="line">        <span class="comment"># write code here</span></span>
<span class="line">        <span class="comment"># 直接向栈1压入元素</span></span>
<span class="line">        self.stack1.append(node)</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span>
<span class="line">        <span class="comment"># return xx</span></span>
<span class="line">        <span class="comment"># 如果栈2位空的情况</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.stack2:</span>
<span class="line">            <span class="comment"># 迭代栈1，将栈1的元素弹出并压入栈2</span></span>
<span class="line">            <span class="keyword">while</span> self.stack1:</span>
<span class="line">                self.stack2.append(self.stack1.pop())</span>
<span class="line">            <span class="comment"># 此时弹出栈2的元素</span></span>
<span class="line">            <span class="keyword">return</span> self.stack2.pop()</span>
<span class="line">        <span class="comment"># 如果栈1不为空，说明已经将元素压入栈2，直接弹出即可</span></span>
<span class="line">        <span class="keyword">return</span> self.stack2.pop()</span>
</pre></td></tr></table></figure>
<h2 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h2><h3 id="题目描述-19"><a href="#题目描述-19" class="headerlink" title="题目描述"></a>题目描述</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0</p>
<h3 id="分析-19"><a href="#分析-19" class="headerlink" title="分析"></a>分析</h3><p>使用py的内建函数直接求得最小值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray</span><span class="params">(self, rotateArray)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        旋转数组的最小值</span>
<span class="line">        :param rotateArray:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> rotateArray:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">        <span class="keyword">return</span> min(rotateArray)</span>
</pre></td></tr></table></figure>
<h2 id="栈的压入、弹出序列"><a href="#栈的压入、弹出序列" class="headerlink" title="栈的压入、弹出序列"></a>栈的压入、弹出序列</h2><h3 id="题目描述-20"><a href="#题目描述-20" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4，5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p>
<h3 id="分析-20"><a href="#分析-20" class="headerlink" title="分析"></a>分析</h3><p>使用一个辅助栈来存储，遍历入栈顺序依次添加到辅助栈，判断栈的长度且栈顶是都等于弹出序列</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">IsPopOrder</span><span class="params">(self, pushV, popV)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pushV:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="comment"># 创建一个辅助栈</span></span>
<span class="line">        stack = []</span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> pushV:</span>
<span class="line">            <span class="comment"># 将遍历入栈顺序，添加到辅助栈中</span></span>
<span class="line">            stack.append(i)</span>
<span class="line">            <span class="comment"># 如果栈不为空，且栈顶元素等于弹出序列</span></span>
<span class="line">            <span class="keyword">while</span> len(stack) <span class="keyword">and</span> stack[<span class="number">-1</span>] == popV[<span class="number">0</span>]:</span>
<span class="line">                <span class="comment"># 出栈</span></span>
<span class="line">                stack.pop()</span>
<span class="line">                popV.pop(<span class="number">0</span>)</span>
<span class="line">        <span class="comment"># 如果辅助栈为空</span></span>
<span class="line">        <span class="keyword">if</span> len(stack):</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span>
</pre></td></tr></table></figure>
<h2 id="从上往下打印二叉树"><a href="#从上往下打印二叉树" class="headerlink" title="从上往下打印二叉树"></a>从上往下打印二叉树</h2><h3 id="题目描述-21"><a href="#题目描述-21" class="headerlink" title="题目描述"></a>题目描述</h3><p>从上往下打印出二叉树的每个节点，同层节点从左至右打印。</p>
<h3 id="分析-21"><a href="#分析-21" class="headerlink" title="分析"></a>分析</h3><p>使用队列去存储中间值,使用while循环去遍历即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="comment"># 返回从上到下每个节点值列表，例：[1,2,3]</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PrintFromTopToBottom</span><span class="params">(self, root)</span>:</span></span>
<span class="line">        result = []</span>
<span class="line">        <span class="comment"># 如果根节点为空</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span>
<span class="line">            <span class="keyword">return</span> result</span>
<span class="line">        <span class="comment"># 将根节点放入列表中</span></span>
<span class="line">        q = [root]</span>
<span class="line">        <span class="comment"># 当ｑ列表不为空</span></span>
<span class="line">        <span class="keyword">while</span> len(q):</span>
<span class="line">            <span class="comment"># 　将ｑ列表的第一个元素赋值给新节点</span></span>
<span class="line">            node = q.pop(<span class="number">0</span>)</span>
<span class="line">            <span class="comment"># 将节点的值添加到结果列表中</span></span>
<span class="line">            result.append(node.val)</span>
<span class="line">            <span class="comment"># 如果节点有左子树</span></span>
<span class="line">            <span class="keyword">if</span> node.left:</span>
<span class="line">                <span class="comment"># 将节点的左子树放入ｑ列表</span></span>
<span class="line">                q.append(node.left)</span>
<span class="line">            <span class="keyword">if</span> node.right:</span>
<span class="line">                <span class="comment"># 将节点的右子树放入ｑ列表</span></span>
<span class="line">                q.append(node.right)</span>
<span class="line">        <span class="keyword">return</span> result</span>
</pre></td></tr></table></figure>
<h2 id="二叉搜索树的后序遍历序列"><a href="#二叉搜索树的后序遍历序列" class="headerlink" title="二叉搜索树的后序遍历序列"></a>二叉搜索树的后序遍历序列</h2><h3 id="题目描述-22"><a href="#题目描述-22" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p>
<h3 id="分析-22"><a href="#分析-22" class="headerlink" title="分析"></a>分析</h3><p>根据后序遍历的特点，我们可以知道数组中的最后宇哥元素时根节点，有了根节点，我们可以找到列表中最后一个小于根节点的值的元素。遍历这个元素到数组的最后一个元素之间的元素(元素为根节点的右子树)，右子树的所有元素应该大于根节点，如果有小于根节点的元素，返回false，接下来递归数组中的左右元素</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">VerifySquenceOfBST</span><span class="params">(self, sequence)</span>:</span></span>
<span class="line">        length = len(sequence)</span>
<span class="line">        <span class="keyword">if</span> length == <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="keyword">if</span> length == <span class="number">1</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line">        <span class="comment"># 数组的最后元素是该树的根节点</span></span>
<span class="line">        root = sequence[<span class="number">-1</span>]</span>
<span class="line">        left = <span class="number">0</span></span>
<span class="line">        <span class="comment"># 找到最后一个小于根节点的元素</span></span>
<span class="line">        <span class="keyword">while</span> sequence[left] &lt; root:</span>
<span class="line">            left += <span class="number">1</span></span>
<span class="line">        <span class="comment"># 遍历最后一个小于根节点的元素到根节点之前</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(left, length - <span class="number">1</span>):</span>
<span class="line">            <span class="comment"># 判断是否大于根节点(右子树元素)</span></span>
<span class="line">            <span class="keyword">if</span> sequence[i] &lt; root:</span>
<span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="comment"># 递归左右子树</span></span>
<span class="line">        <span class="keyword">return</span> self.VerifySquenceOfBST(sequence[:left]) \</span>
<span class="line">               <span class="keyword">or</span> self.VerifySquenceOfBST(sequence[left:length - <span class="number">1</span>])</span>
</pre></td></tr></table></figure>
<h2 id="二叉树中和为某一值的路径"><a href="#二叉树中和为某一值的路径" class="headerlink" title="二叉树中和为某一值的路径"></a>二叉树中和为某一值的路径</h2><h3 id="题目描述-23"><a href="#题目描述-23" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一颗二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。</p>
<h3 id="分析-23"><a href="#分析-23" class="headerlink" title="分析"></a>分析</h3><p>首先对特殊边界条件进行判断，然后分别递归左右子树，向下递归时需要使用目标值减去根节点的值，最后将左右子树的递归结果拼接为一个列表进行遍历，使用一个新列表去接受根节点加上遍历的元素值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="comment"># 返回二维列表，内部每个列表表示找到的路径</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">FindPath</span><span class="params">(self, root, expectNumber)</span>:</span></span>
<span class="line">        <span class="comment"># 如果是个空树</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span>
<span class="line">            <span class="keyword">return</span> []</span>
<span class="line">        <span class="comment"># 如果根节点不为空，并且根节点的值等于指定值而且左右子树均为空</span></span>
<span class="line">        <span class="keyword">if</span> root <span class="keyword">and</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right <span class="keyword">and</span> root.val == expectNumber:</span>
<span class="line">            <span class="keyword">return</span> [[root.val]]</span>
<span class="line">        res = []</span>
<span class="line">        <span class="comment"># 递归左子树</span></span>
<span class="line">        left = self.FindPath(root.left, expectNumber - root.val)</span>
<span class="line">        <span class="comment"># 递归右子树</span></span>
<span class="line">        right = self.FindPath(root.right, expectNumber - root.val)</span>
<span class="line">        <span class="comment"># 遍历拼接左右子树的结果</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> left + right:</span>
<span class="line">            <span class="comment"># 将根节点的值+i添加到res数组上</span></span>
<span class="line">            res.append([root.val] + i)</span>
<span class="line">        <span class="keyword">return</span> res</span>
</pre></td></tr></table></figure>
<h2 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a>复杂链表的复制</h2><h3 id="题目描述-24"><a href="#题目描述-24" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）</p>
<h3 id="分析-24"><a href="#分析-24" class="headerlink" title="分析"></a>分析</h3><p>这里给出的解法的核心就是使用两个字典保存随机节点和新老节点的对应，在需要构建的节点直接取出赋值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomListNode</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span>
<span class="line">        self.label = x</span>
<span class="line">        self.next = <span class="keyword">None</span></span>
<span class="line">        self.random = <span class="keyword">None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="comment"># 返回 RandomListNode</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Clone</span><span class="params">(self, pHead)</span>:</span></span>
<span class="line">        head = pHead</span>
<span class="line">        p_head = <span class="keyword">None</span></span>
<span class="line">        new_head = <span class="keyword">None</span></span>
<span class="line"></span>
<span class="line">        <span class="comment"># 保存随机节点和新老节点的字典</span></span>
<span class="line">        random_dic = &#123;&#125;</span>
<span class="line">        old_new_dic = &#123;&#125;</span>
<span class="line"></span>
<span class="line">        <span class="comment"># 当头节点不为空时</span></span>
<span class="line">        <span class="keyword">while</span> head:</span>
<span class="line">            <span class="comment"># 根据旧链表构造一个新节点</span></span>
<span class="line">            node = RandomListNode(head.label)</span>
<span class="line">            <span class="comment"># 将头节点的随机指向的节点赋值给新节点的头节点</span></span>
<span class="line">            node.random = head.random</span>
<span class="line">            <span class="comment"># 将节点对象的内存地址和头节点的id保存到字典中</span></span>
<span class="line">            old_new_dic[id(head)] = id(node)</span>
<span class="line">            <span class="comment"># 将随机节点的对象地址和对象节点保存在随机字典中</span></span>
<span class="line">            random_dic[id(node)] = node</span>
<span class="line">            <span class="comment"># 将头节点的下一个元素赋值给头节点</span></span>
<span class="line">            head = head.next</span>
<span class="line"></span>
<span class="line">            <span class="comment"># 如果新头节点存在</span></span>
<span class="line">            <span class="keyword">if</span> new_head:</span>
<span class="line">                <span class="comment"># 将构造的新节点赋值给头节点的下一个节点</span></span>
<span class="line">                new_head.next = node</span>
<span class="line">                <span class="comment"># 将新头节点的下一个节点赋值给头节点</span></span>
<span class="line">                new_head = new_head.next</span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                <span class="comment"># 头新节点不存在时，直接将构造的新节点赋值给头节点</span></span>
<span class="line">                new_head = node</span>
<span class="line">                <span class="comment"># 将新构造的节点赋值给节点</span></span>
<span class="line">                p_head = node</span>
<span class="line">        new_head = p_head</span>
<span class="line">        <span class="comment"># 如果新头节点存在</span></span>
<span class="line">        <span class="keyword">while</span> new_head:</span>
<span class="line">            <span class="comment"># 并且头节点的随机指针不为空</span></span>
<span class="line">            <span class="keyword">if</span> new_head.random <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span>
<span class="line">                <span class="comment"># 从随机字典中取出随机节点赋值给头节点的随机指针</span></span>
<span class="line">                new_head.random = random_dic[old_new_dic[id(new_head.random)]]</span>
<span class="line">            <span class="comment"># 将头节点的下一个节点赋值给头结点</span></span>
<span class="line">            new_head = new_head.next</span>
<span class="line">        <span class="comment"># 返回头节点</span></span>
<span class="line">        <span class="keyword">return</span> p_head</span>
</pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<ul>
<li>上述测试在<strong>Python3.5</strong>中成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB权威指南学习笔记(4)--应用管理和服务器管理]]></title>
      <url>/2018/04/17/MongDB-study-4/</url>
      <content type="html"><![CDATA[<p>Mongo</p>
<p>应用管理和服务器管理</p>
<a id="more"></a>
<h2 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h2><h3 id="配置身份验证"><a href="#配置身份验证" class="headerlink" title="配置身份验证"></a>配置身份验证</h3><p>admin和local是两个特殊的数据库，它们当中的用户可对任何数据库进行操作，这两个数据库中的用户可作为超级用户</p>
<p>在开启安全检查的数据库呗启动前，应该至少添加一个管理员用户</p>
<p>添加一名管理员用户<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">use admin</span>
<span class="line"></span>
<span class="line">db.addUser(<span class="string">"root"</span>,<span class="string">"123456"</span>)</span>
</pre></td></tr></table></figure></p>
<p>切换到test数据库，并增加两个用户<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">use test</span>
<span class="line"></span>
<span class="line">db.addUser(<span class="string">"test_user"</span>,<span class="string">"123456"</span>)</span>
<span class="line"></span>
<span class="line"><span class="comment">// 创建只读权限用户</span></span>
<span class="line">db.addUser(<span class="string">"read_user"</span>,<span class="string">"123456"</span>,<span class="literal">true</span>)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>运行addUser时，必须拥有相应数据库的写入权限</li>
<li>addUser的第三个参数为readOnly,设置为true时，为只读</li>
</ul>
</blockquote>
<p>使用–auth参数重启服务器，以启用安全检查</p>
<h4 id="身份验证的工作原理"><a href="#身份验证的工作原理" class="headerlink" title="身份验证的工作原理"></a>身份验证的工作原理</h4><p>数据库中的用户时作为文档呗存储在system.users集合中的。</p>
<p>想要删除一个用户，只需要从集合中删除这一用户的文档<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">db.system.users.remove(&#123;</span>
<span class="line">    <span class="string">"user"</span>:<span class="string">"test_user"</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<h3 id="建立和删除索引"><a href="#建立和删除索引" class="headerlink" title="建立和删除索引"></a>建立和删除索引</h3><h4 id="在独立的服务器上建立索引"><a href="#在独立的服务器上建立索引" class="headerlink" title="在独立的服务器上建立索引"></a>在独立的服务器上建立索引</h4><p>在独立的服务器上，可在空闲时间于后台建立索引，在后台建立索引，可利用backgroud为true参数运行命令<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">db.foo.ensureIndex(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"somefield"</span>:<span class="number">1</span></span>
<span class="line">    &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"backgroud"</span>:<span class="literal">true</span></span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<p>在前台建立索引要比在后台建立索引耗时少，但在建立索引期间会锁定数据库</p>
<h4 id="在发副本集上建立索引"><a href="#在发副本集上建立索引" class="headerlink" title="在发副本集上建立索引"></a>在发副本集上建立索引</h4><p>在主节点中建立索引，然后等待其呗复制到其他备份节点即可。</p>
<p>但是对于较大的集合，推荐的方式是:</p>
<ul>
<li>关闭一个备份节点</li>
<li>将其作为独立的节点启动</li>
<li>在这一服务器上建立索引</li>
<li>重新将其作为成员加入副本集</li>
<li>对每个备份节点指定同样的操作</li>
</ul>
<p>对于主节点来说，有两种选择</p>
<ul>
<li>在后台对主节点建立索引</li>
<li>关闭主节点，执行上述步骤</li>
</ul>
<h4 id="在分片集群上建立索引"><a href="#在分片集群上建立索引" class="headerlink" title="在分片集群上建立索引"></a>在分片集群上建立索引</h4><p>在分片集群上建立索引。与在副本集中建立索引的步骤相同，不过需要在每个分片上分别建立一次</p>
<h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><p>如果不在需要索引，可使用dropIndexes命令并指定索引名来删除索引<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">db.runCommand(&#123;</span>
<span class="line">    "dropIndexes”:"foo",</span>
<span class="line">    "index":"alpabet"</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<h2 id="启动和停止mongodb"><a href="#启动和停止mongodb" class="headerlink" title="启动和停止mongodb"></a>启动和停止mongodb</h2><h3 id="从命令行启动"><a href="#从命令行启动" class="headerlink" title="从命令行启动"></a>从命令行启动</h3><p>配置选项</p>
<ul>
<li>–path：指定一个目录为数据目录(默认为/data/db/)</li>
<li>–port：指定服务器监听的端口号(默认为27017)</li>
<li>–fork：调用fork创建子进程，在后台运行mongodb</li>
<li>–logpath：所有输出信息会被发送到指定文件，如果文件不存在，会自动生成，如果存在，会覆盖掉</li>
<li>–directoryperdb:将每个数据库存放在单独的目录中</li>
<li>–config 额外加载配置文件，未在命令行中指定的玄仙将使用配置文件中的参数</li>
</ul>
<h3 id="停止mongodb"><a href="#停止mongodb" class="headerlink" title="停止mongodb"></a>停止mongodb</h3><p>最简洁的方法是使用shutdown命令，必须在admin数据库上执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">use admin</span>
<span class="line">db.shutdownServer()</span>
</pre></td></tr></table></figure></p>
<h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>不要将mongodb服务器直接暴露在外网上，最好设置防火墙，只允许内网地址对mongo的访问</p>
<p>安全性选项；</p>
<ul>
<li>–bind_ip：指定mongo监听的端口。</li>
<li>–nounixsocket:如果不打算使用unix socket进行连接，则可禁用此选项</li>
<li>noscripting:禁止服务器端JavaScript脚本的运行</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>上述测试在<strong>MongoDB 3.4.3-8-g05b19c6</strong>中成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB权威指南学习笔记(3)--复制和分片]]></title>
      <url>/2018/04/15/MongDB-study-3/</url>
      <content type="html"><![CDATA[<p>Mongo</p>
<p>复制和分片</p>
<a id="more"></a>
<h2 id="创建副本集"><a href="#创建副本集" class="headerlink" title="创建副本集"></a>创建副本集</h2><h3 id="建立副本集"><a href="#建立副本集" class="headerlink" title="建立副本集"></a>建立副本集</h3><p>使用<strong>mongo –nodb</strong>选项启动mongo shell，启动shell但是不连接到任何mongod<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ mongo --nodb</span>
</pre></td></tr></table></figure></p>
<p>创建副本集<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">replicaSet=<span class="keyword">new</span> ReplSetTest(&#123;</span>
<span class="line">    <span class="string">"nodes"</span>:<span class="number">3</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<p>会创建一个包含三个服务器的副本集：一个住服务器和两个备份服务器</p>
<p>指定命令使mongod服务器启动<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">replicaSet.startSet()</span>
<span class="line">replicaSet.initiate()</span>
</pre></td></tr></table></figure></p>
<p>然后会启动三个mongod进行，分别运行在31000\31001和31002端口</p>
<p>连接到运行在31000端口的mongod<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">conn1=<span class="keyword">new</span> Mongo(<span class="string">"127.0.0.1:31000"</span>)</span>
<span class="line"></span>
<span class="line">&gt; primary=conn1.getDB(<span class="string">"test"</span>)</span>
</pre></td></tr></table></figure></p>
<p>在连接到主节点的连接上执行isMaster命令，可以看到副本集的状态<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">&gt; primary.isMaster()</span>
</pre></td></tr></table></figure></p>
<p>在主节点插入一些文档，</p>
<p>备份节点可能会落后于主节点，可能没有最新写入的数据，所以备份节点在默认情况下会拒绝读取请求，以防应用意外拿到过期的数据。当在备份节点做查询时，可能会得到一个错误提示，说当前节点不是主节点</p>
<p>如果希望从备份节点读取数据，需要设置“从备份节点读取数据没有问题”的标示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">conn2.setSlaveOk()</span>
</pre></td></tr></table></figure></p>
<p>然后就可以在该连接的备份节点中读取数据</p>
<blockquote>
<p>不能对备份节点执行写操作，备份节点只能通过复制功能写入数据，不接受客户端的写入请求<br>具有自动故障转移的功能，如果主节点挂了，其中一个备份节点会自动选举为主节点</p>
</blockquote>
<h3 id="配置副本集"><a href="#配置副本集" class="headerlink" title="配置副本集"></a>配置副本集</h3><p>首先需要为副本集选定一个名字，使用<strong>–replset name</strong>选项重启server<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ mongod --replSet spock -f mongod.conf --fork</span>
</pre></td></tr></table></figure></p>
<p>然后使用同样的replset和标识符<strong>stock</strong>再启动两个mongod服务器作为副本集中的其他成员<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"># server2</span>
<span class="line">$ mongod --replSet spck -f mongo.conf --fork</span>
<span class="line"></span>
<span class="line">#server3</span>
<span class="line">$ mongod --replSet spck -f mongo.conf --fork</span>
</pre></td></tr></table></figure></p>
<p>只要将后两个成员添加到副本集中，它们就会自动克隆第一个成员的数据</p>
<p>将replSet选项添加到每个成员的mongod.conf文件中，启动时就会自动使用这个选项</p>
<p>为了让每个mongod能够知道批次的存在，需要创建一个配置文件，在配置文件中列出每一个成员，并且将配置文件发送给server-1，然后server-1会负责将配置文件传播给其他成员</p>
<p>在shell中创建一个如下所示的文档<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line">config=&#123;</span>
<span class="line">    <span class="string">"_id"</span>:<span class="string">"spock"</span>,</span>
<span class="line">    <span class="string">"members"</span>[</span>
<span class="line">        &#123;</span>
<span class="line">            <span class="string">"_id"</span>:<span class="number">0</span>,</span>
<span class="line">            <span class="string">"host"</span>:<span class="string">"server-1:27017"</span></span>
<span class="line">        &#125;,</span>
<span class="line">        &#123;</span>
<span class="line">            <span class="string">"_id"</span>:<span class="number">1</span>,</span>
<span class="line">            <span class="string">"host"</span>:<span class="string">"server-2:27017"</span></span>
<span class="line">        &#125;,</span>
<span class="line">        &#123;</span>
<span class="line">            <span class="string">"_id"</span>:<span class="number">2</span>,</span>
<span class="line">            <span class="string">"host"</span>:<span class="string">"server-3:27017"</span></span>
<span class="line">        &#125;</span>
<span class="line">    ]</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>第一个_id字段就是副本集名称</li>
<li>将host字段的值修改为实际ip</li>
</ul>
</blockquote>
<p>这个config对象就是副本集的配置，现在需要将其发送给其中一个副本集成员，连接到一个有效的服务器，使用config对象对副集进行初始化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接到server1</span></span>
<span class="line">db=(<span class="keyword">new</span> Mongo(<span class="string">"server-1:27017"</span>)).getDB(<span class="string">"test"</span>)</span>
<span class="line"></span>
<span class="line"><span class="comment">// 初始化副本集</span></span>
<span class="line">rs.initiate(config)</span>
</pre></td></tr></table></figure></p>
<p>server-1会解析这个配置对象，然后向其他成员发送消息，提醒他们使用新的配置，所有车公园配置完成之后，他们会自动选出一个主节点，然后就可以正常处理请求了</p>
<h4 id="rs辅助函数"><a href="#rs辅助函数" class="headerlink" title="rs辅助函数"></a>rs辅助函数</h4><p>rs是一个全局变量，其中包含与复制相关的函数</p>
<h4 id="网络注意事项"><a href="#网络注意事项" class="headerlink" title="网络注意事项"></a>网络注意事项</h4><p>副本集内的每个成员都必须能够连接到其他所有成员</p>
<p>副本集的配置中不应该使用localhost作为主机</p>
<h4 id="修改副本集配置"><a href="#修改副本集配置" class="headerlink" title="修改副本集配置"></a>修改副本集配置</h4><p>可以随时修改副本集的配置，可以添加或者删除成员，也可以修改已有成员<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//向副本集中添加成员</span></span>
<span class="line">rs.add(<span class="string">"server-4:27017"</span>)</span>
<span class="line"></span>
<span class="line"><span class="comment">// 删除成员</span></span>
<span class="line">rs.remove(<span class="string">"server-1:27017"</span>)</span>
<span class="line"></span>
<span class="line"><span class="comment">// 查看配置</span></span>
<span class="line">rs.config()</span>
<span class="line"></span>
<span class="line"><span class="comment">// 重新配置配置文件</span></span>
<span class="line">rs.reconfig(config)</span>
</pre></td></tr></table></figure></p>
<h2 id="副本集的组成"><a href="#副本集的组成" class="headerlink" title="副本集的组成"></a>副本集的组成</h2><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>复制用于在多台服务器之间备份数据，mongo的复制功能时使用操作日志oplog实现的，操作日志包含了主节点的每一次写操作。</p>
<p>如果某个备份节点由于某些原因挂掉，当他重新启动后，就会自动从oplog中最后一个操作开始进行同步</p>
<h4 id="初始化同步"><a href="#初始化同步" class="headerlink" title="初始化同步"></a>初始化同步</h4><p>副本集中的成员启动之后，就会检查自身状态，确定是否可以从某个成员那里进行同步，如果不行的话，它会尝试从副本的另一个成员那里进行完整的数据复制，这个过程就是<strong>初始化同步</strong></p>
<h4 id="处理陈旧数据"><a href="#处理陈旧数据" class="headerlink" title="处理陈旧数据"></a>处理陈旧数据</h4><p>如果备份节点远远落后同步源当前的操作，那么这个备份节点就是陈旧的。如果备份节点曾静停机过，写入量炒股哟自身处理能力，或者时有太多的读请求，这些情况都有可能导致备份节点陈旧</p>
<p>当一个节点陈旧时候，它会查询副本中的其他成员，如果成员的oplog足够详尽，可以用于处理那些落下的操作，就从这个成员进行同步，如果都没有参考价值，那么这个成员的复制操作就会中止，这个成员需要重新进行完全同步。</p>
<h3 id="心跳"><a href="#心跳" class="headerlink" title="心跳"></a>心跳</h3><p>为了维护集合的最新视图，每个成员每隔2s就会向其他成员发送一个心跳请求。用于检查每个成员的状态</p>
<p>成员状态</p>
<ul>
<li>STARTUP：成员刚启动时出于这个状态，会尝试加在成员的副本集配置，加在成功后，就进入STARTUP2状态</li>
<li>STARTUP2：整个初始化同步过程都处理这个状态，但是如果在普通成员上，这个状态只会持续几秒种。在这个状态下，mongodb会创建几个线程，用于处理复制和选举，然后切换到RECOVERING状态</li>
<li>表示成员运转正常，但是暂时还不能处理读取请求</li>
<li>ARBITER:在正常的操作中，仲裁者应该处理ARBITER状态</li>
</ul>
<p>系统出现问题时会处理下面这些状态:</p>
<ul>
<li>DOWN:如果一个正常运行的成员变得不可达，它就出于DOWN状态</li>
<li>UNKNOWN：如果一个成员无法到达其他任何成员，其他成员就无法知道它处理什么状态，会将其报告为UNKOWN状态</li>
<li>REMOVE:当成员被移出副本集时，就出于这个状态</li>
<li>ROLLBACK:当成员正在进行数据回滚，就出于ROLLBACK状态，回滚过程结束时，服务器会转换为RECOVERING状态，然后成为备份节点</li>
<li>FATAL：如果一个成员发生了不可挽回的错误，也不再尝试恢复正常的话，它就出于FATAL状态</li>
</ul>
<h3 id="选举"><a href="#选举" class="headerlink" title="选举"></a>选举</h3><p>当一个成员无法到达主节点时，它就会申请被选举为主节点。希望呗选举为主节点的成员，会向它能到达的所有成员发送通知如果这个成员不符合候选人要求，其他成员可能知道相关原因</p>
<p>假如没有反对的理由，其他成员就会对这个成员进行选举投票。如果这个成员得到副本大多数赞成票，它就会选举成功，会转到主节点状态。如果　达不到大多数要求，那就出于备份节点状态，之后还可以再次申请呗选举为主节点，主节点会一致出于主节点状态。除非它不在满足大多数的要求或者挂了而退位。</p>
<h2 id="从应用程序连接副本集"><a href="#从应用程序连接副本集" class="headerlink" title="从应用程序连接副本集"></a>从应用程序连接副本集</h2><h3 id="客户端到副本集的连接"><a href="#客户端到副本集的连接" class="headerlink" title="客户端到副本集的连接"></a>客户端到副本集的连接</h3><p>从应用程序的角度，使用副本集与使用单台服务器一致。默认情况下，驱动程序连接到主节点，并且将所有路由都路由到主节点。应用程序可以像是有那个单台服务器一样进行读写，副本集会在后台处理热备份</p>
<p>连接副本集与连接单台服务器非常想，一个常用的连接字符串如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">mongodb:<span class="comment">//server-1:27017,server-2:27017</span></span>
</pre></td></tr></table></figure></p>
<p>当主节点挂掉之后，驱动程序会尽快自动找到新的主节点，在选举过程中，主节点可能会暂时不可用，如果没有可达的成员能够成为主节点，主节点可能长时间不可用</p>
<h3 id="等待写入复制"><a href="#等待写入复制" class="headerlink" title="等待写入复制"></a>等待写入复制</h3><p>使用getLastError命令检查写入是否成功，也可以使用这个命令确保写入操作呗复制到备份节点，参数w会强制要求getLastError等待，一直到给定数量的成员都执行完了最后的写入操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">db.runCommand(&#123;</span>
<span class="line">    <span class="string">"getLastError"</span>:<span class="number">1</span>,</span>
<span class="line">    <span class="string">"w"</span>:<span class="string">"majority"</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<p>可以指定<strong>wtimeout</strong>的值设置超时时间，如果这个超过这个时间还没有返回，就会返回失败</p>
<p>设置超时时间为1s<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">db.runCommand(&#123;</span>
<span class="line">    <span class="string">"getLastError"</span>:<span class="number">1</span>,</span>
<span class="line">    <span class="string">"w"</span>:<span class="string">"majority"</span>，</span>
<span class="line">    <span class="string">"wtimeout"</span>:<span class="number">1000</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<h2 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h2><p>分片是指将数据拆分，将其分散存放在不同的机器上的过程。</p>
<p>几乎所有数据库都能进行手动分片，但mongo支持自动分片，可以使数据库架构对应用程序不可见，也可以简化系统管理。对应用来说，和使用单机mongo服务器一样。</p>
<p>在分片之前需要先执行<strong>mongos</strong>进行一次路由过程</p>
<h3 id="快速建立一个简单集群"><a href="#快速建立一个简单集群" class="headerlink" title="快速建立一个简单集群"></a>快速建立一个简单集群</h3><p>使用<strong>-nodb</strong>选项启动mongo shell<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ mongo --nodb</span>
</pre></td></tr></table></figure></p>
<p>使用<strong>ShardingTest</strong>创建集群<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">cluster=<span class="keyword">new</span> ShardingTest(&#123;</span>
<span class="line">    <span class="string">"shards"</span>:<span class="number">3</span>,</span>
<span class="line">    <span class="string">"chunksize"</span>:<span class="number">1</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<p>会创建包含三个切片的集群，分别运行在30000,30001,30002端口，默认情况下ShardingTest会在30999端口启动mongos</p>
<p>连接到mongos使用集群<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">db=(<span class="keyword">new</span> Mongo(<span class="string">"127.0.0.1:30999"</span>)).getDB(<span class="string">"test"</span>)</span>
</pre></td></tr></table></figure></p>
<p>接下来和使用单机服务器完全一样</p>
<p>使用<strong>sh.status()</strong>可以查看集群的状态，分片摘要信息、数据库摘要信息、集合摘要信息</p>
<p>主分片是为每个数据库随机选择的，所有数据都会位于主分片上。目前还不能自动将数据分发到不同的分片上，因为它不知道你希望如何分发数据。对每一个集合，必须明确指定，应该如何分发数据。</p>
<p>要求一个集合分片，首先要对这个集合的数据库启用分片，执行下列命令<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sh.enableSharding(<span class="string">"test"</span>)</span>
</pre></td></tr></table></figure></p>
<p>对集合分片时，要 选择一个片键。片键时集合的一个键，mongodb根据这个键拆分数据。(例如，如果选择基于“username”进行分片，mongo会根据不同的用户名进行分片) 选择片键可以认为时选择集合中的数据的顺序。它与索引时个相似的概念；随着集合的不断增长，片键就会成为集合上最重要的索引。只有呗索引过的键才能作为片键</p>
<p>在启用分片时，先在希望作为片键的键上创建索引<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">db.users.ensureIndex(&#123;</span>
<span class="line">    <span class="string">"username"</span>:<span class="number">1</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<p>然后对集合进行分片<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">sh.shardCollection(<span class="string">"test.users"</span>,&#123;</span>
<span class="line">    <span class="string">"username"</span>:<span class="number">1</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<p>集合会被分为读个数据块，每一个数据块都是集合的一个数据子集</p>
<p>包含片键的查询能够直接被发送到目标分片或者是集群分片的一个子集，这样的查询叫定向查询</p>
<p>有些查询必须被发送到所有分片，这样的查询叫分散-聚集查询，mongo将查询分散到所有分片上，然后将各个分片的查询结果聚集起来。</p>
<p>关闭集群<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">cluster.stop()</span>
</pre></td></tr></table></figure></p>
<h2 id="配置分片"><a href="#配置分片" class="headerlink" title="配置分片"></a>配置分片</h2><h3 id="何时分片"><a href="#何时分片" class="headerlink" title="何时分片"></a>何时分片</h3><p>通常不必太早分片，因为分片不仅会增加部署的操作复杂度，还要求作出设计决策，而该决策以后很难再改。另外最好也不要在系统运行太久之后在分片。</p>
<p>分片用来:</p>
<ul>
<li>增加可用RAM</li>
<li>增加可用磁盘空间</li>
<li>减轻单台服务器的负载</li>
<li>处理单个mongod无法承受的吞吐量</li>
</ul>
<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><h4 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h4><p>配置服务器相当于集群的大脑，保存着集群和分片的元数据，即各分片包含哪些数据的信息，因此，应该首先建林配置服务器</p>
<p>启动配置服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ mongod --configscr --dbpath /var/lib/mongodb <span class="_">-f</span> /var/lib/config/mongod.conf</span>
</pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>启动配置服务器时，不要使用–replSet选项：配置服务器不是副本集成员</li>
<li>–configscr 指定mongod为新的配置服务器，该配置将mongod的默认监听端口改为27019，并吧默认的数据目录改为/data/confgdb(可使用–port和–dbpath选项修改这两项配置)</li>
</ul>
</blockquote>
<h4 id="mongos进程"><a href="#mongos进程" class="headerlink" title="mongos进程"></a>mongos进程</h4><p>当服务器出于运行状态后，启动一个mongos进程提供应用程序连接。mongos进程需要知道配置服务器的地址，所以必须使用–configdb选项启动mongos<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ mongos -configdb config-1:279019,config-2:279019.config-3:279019 <span class="_">-f</span> /var/lib/mongos.conf</span>
</pre></td></tr></table></figure></p>
<h4 id="将副本集转换为分片"><a href="#将副本集转换为分片" class="headerlink" title="将副本集转换为分片"></a>将副本集转换为分片</h4><p>假设我们已经拥有了一个副本集</p>
<p>如果已经有一个使用中的副本集，该副本集会成为第一个分片。为了将副本集转换为分片，需告知mongos副本集名称和副本集成员列表</p>
<p>例如在server-1到server-5上有一个名为spock的副本集，可连接到mongos并运行：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sh.addShard(<span class="string">"spock/server-1:27017,server-2:27017,server-4:27017"</span>)</span>
</pre></td></tr></table></figure></p>
<p>可在参数中指定副本集的所有成员。如果运行sh.status()，可发现mongodb已经找到了其他的副本集成员</p>
<p>也可以创建但mongod服务器的分片(而不是副本集分片)，直接在addShard()中指定单个mongod的主机名和端口<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sh.addShard(<span class="string">"some-server:27017"</span>)</span>
</pre></td></tr></table></figure></p>
<h4 id="数据分片"><a href="#数据分片" class="headerlink" title="数据分片"></a>数据分片</h4><p>除非明确指定规则，否则mongodb不会自动对数据进行拆分，如有必要，必须明确告知数据库和集合。</p>
<p>假设我们希望对music数据库中的artists集合按照name键进行分片。首先，对music数据库启用分片<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">db.enableSharding(<span class="string">"music"</span>)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>对数据库分片是对集合分片的先决条件</p>
</blockquote>
<p>对数据库启用分片之后，就可以使用shardCollection()命令对集合分片了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">sh.shardCollection(<span class="string">"music.artists"</span>,&#123;</span>
<span class="line">    <span class="string">"name"</span>:<span class="number">1</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>如果对已存在的集合进行分片，那么name键上必须有索引</li>
<li>如果进行分片的集合还不存在，mongos会自动在片键上创建索引</li>
</ul>
</blockquote>
<h3 id="均衡器"><a href="#均衡器" class="headerlink" title="均衡器"></a>均衡器</h3><p>均衡器负责数据的迁移，它会周期性的检查分片－是否存在不均衡，如果存在，就会开始快的迁移</p>
<h2 id="选择片键"><a href="#选择片键" class="headerlink" title="选择片键"></a>选择片键</h2><h3 id="检查使用情况"><a href="#检查使用情况" class="headerlink" title="检查使用情况"></a>检查使用情况</h3><p>对集合进行分片，要选择一或两个字段用于拆分数据。这个键就叫做片键</p>
<h3 id="数据分发"><a href="#数据分发" class="headerlink" title="数据分发"></a>数据分发</h3><p>数据分发有三种：</p>
<ul>
<li>升序片键</li>
<li>随机分发片键</li>
<li>基于位置的片键</li>
</ul>
<h4 id="升序片键"><a href="#升序片键" class="headerlink" title="升序片键"></a>升序片键</h4><p>升序片键类似于”date”字段或者是objectId，是一种会随着时间稳定增长的字段。</p>
<h4 id="随机分发的片键"><a href="#随机分发的片键" class="headerlink" title="随机分发的片键"></a>随机分发的片键</h4><p>随机分发的键可以是用户名、邮件地址、uuid、md5或者是数据集中其他没有规律的键</p>
<h4 id="基于位置的片键"><a href="#基于位置的片键" class="headerlink" title="基于位置的片键"></a>基于位置的片键</h4><p>基于位置的片键可以是用户的ip、经纬度或者地址。位置片键不必与实际的物理位置字段相关。数据会根据这个位置进行分组。</p>
<h3 id="片键策略"><a href="#片键策略" class="headerlink" title="片键策略"></a>片键策略</h3><h4 id="散列片键"><a href="#散列片键" class="headerlink" title="散列片键"></a>散列片键</h4><p>如果追求的是数据加在速度的极值，那么散列片键时最佳选择。散列片键可使其他任何键随机分发。所以，如果打算在大量查询中使用升序键，但又同时希望吸入数据随机分发的话，散列片键会是个好选择。</p>
<p>弊端时无法使用散列片键作为指定目标的范围查询。</p>
<p>创建散列片键，首先要创建散列索引<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">db.users.ensureIndex(&#123;</span>
<span class="line">    <span class="string">"username"</span>:<span class="string">"hashed"</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<p>然后对集合分片<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">db.shardCollection(<span class="string">"app.users"</span>,&#123;</span>
<span class="line">    <span class="string">"username"</span>:<span class="string">"hashed"</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>局限性:</p>
<ul>
<li>不能使用enique选项</li>
<li>不能使用数组字段</li>
<li>浮点型的值会先呗取整，然后才会进入散列，所有1和1.99999会得到相同的散列值</li>
</ul>
</blockquote>
<h4 id="GridFS的散列片段"><a href="#GridFS的散列片段" class="headerlink" title="GridFS的散列片段"></a>GridFS的散列片段</h4><p>GridFS集合通常非常适合做分片，因为它们包含大量的文件数据</p>
<p>在<strong>files_id</strong>字段上创建散列索引，则每个文件都会随机分发到集群中，但是一个文件只能呗包含在一个单一的块中，这时非常好的</p>
<p>为了实现这种策略，需要在{“files_id”:”hashed”}创建新的索引，然后依据这个字段对集合分片</p>
<h3 id="片键规则和指导方阵"><a href="#片键规则和指导方阵" class="headerlink" title="片键规则和指导方阵"></a>片键规则和指导方阵</h3><h4 id="片键限制"><a href="#片键限制" class="headerlink" title="片键限制"></a>片键限制</h4><p>片键不可以是数组，向片键插入数据值也是不被允许的</p>
<p>文档一旦插入，其片键值就无法修改了。因此应该选择不会呗改变的字段，或者时很少发生变化的字段</p>
<p>大多数特殊类型的索引都不能用作片键</p>
<h4 id="片键的势"><a href="#片键的势" class="headerlink" title="片键的势"></a>片键的势</h4><p>不管片键时跳跃增长还是稳定增长，选择一个值发生变化的键时非常重要的。与索引一样，分片在势比比较高的字段性能更佳</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述测试在<strong>MongoDB 3.4.3-8-g05b19c6</strong>中成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB权威指南学习笔记(2)--设计应用]]></title>
      <url>/2018/04/13/MongDB-study-2/</url>
      <content type="html"><![CDATA[<p>Mongo</p>
<p>设计应用</p>
<a id="more"></a>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>使用<strong>ensureIndex()</strong>创建索引<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">db.users.ensureIndex(&#123;</span>
<span class="line">    "username:1</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>通常。在一个特定的集合，不应该拥有两个以上的索引</p>
<h4 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h4><p>索引的值是按照一定顺序排列的，因此，使用索引键对文档进行排序非常快。然而，只有在首先使用索引键进行排序时，索引才有用。</p>
<p>复合索引就是建立在多个字段上的索引</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">db.users.ensureIndex(&#123;</span>
<span class="line">    "age": 1,</span>
<span class="line">    "username:1</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure>
<p>通常来说，如果mongodb使用索引进行查询，那么查询结果文档通常就是按照索引顺序排序的</p>
<p>如果对查询结果的范围做了限制，那么mongo在几次匹配之后就可以不在扫描索引，在这种情况下，将排序键放在第一位时一个和好的策略。</p>
<p>可以通过<strong>hint</strong>来强制使用某个特定的索引</p>
<h4 id="使用复合索引"><a href="#使用复合索引" class="headerlink" title="使用复合索引"></a>使用复合索引</h4><p>在多个键上建立的索引就是复合索引</p>
<h5 id="选择键的方向"><a href="#选择键的方向" class="headerlink" title="选择键的方向"></a>选择键的方向</h5><p>索引使用的方向，与排序方向相同即可，注意，相互反转(在每个方向上*-1)的索引时等价的{“age”:1,”username”:-1}适用的查询和{“age”-1,”username”1}是完全一样的</p>
<p>只有基于多个查询条件进行排序时，索引方向才是你叫重要的，如果只是基于单一索引键进行排序</p>
<h5 id="使用覆盖索引"><a href="#使用覆盖索引" class="headerlink" title="使用覆盖索引"></a>使用覆盖索引</h5><p>如果你的查询只需要查找索引中包含的字段，那就根据没必要获取实际的文档。当一个索引包含用户请求的所有字段，可以认为这个索引覆盖了本次查询。在实际中，应该使用覆盖索引，而不是获取文档</p>
<p>为了确认查询只使用索引就可以完成，应该使用投射来指定不要返回<strong>_id</strong>字段</p>
<p>如果在覆盖索引上执行<strong>explain()</strong>，<strong>indexOnly</strong>字段的值要设为true</p>
<h5 id="隐式索引"><a href="#隐式索引" class="headerlink" title="隐式索引"></a>隐式索引</h5><p>复合索引具有双重功能，而且对不同的查询可以表现出不同的索引。</p>
<p>如果有一个拥有n个键的索引，难免你同时得到了所有这n个键的前缀组成的索引。</p>
<h4 id="操作符如何使用索引"><a href="#操作符如何使用索引" class="headerlink" title="$操作符如何使用索引"></a>$操作符如何使用索引</h4><h5 id="低效率的操作符"><a href="#低效率的操作符" class="headerlink" title="低效率的操作符"></a>低效率的操作符</h5><p><strong>$where</strong>查询和检查一个键是否存在的查询完全无法使用索引</p>
<p><strong>$ne</strong>查询可以使用索引，但并不是很有效，因为必须要查看所有索引的条目</p>
<p><strong>$nin</strong>就总是要进行全表扫描</p>
<h5 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h5><p>设计多个字段的索引时，应该将会用于精确匹配的字段防到索引的前面，将用于范围匹配的字段放到最后</p>
<h4 id="索引对象和数组"><a href="#索引对象和数组" class="headerlink" title="索引对象和数组"></a>索引对象和数组</h4><p>mongo允许对嵌套字段和数组建立索引，嵌套对象和数组字段可以与符合索引中顶级字段一起使用。</p>
<h5 id="索引嵌套文档"><a href="#索引嵌套文档" class="headerlink" title="索引嵌套文档"></a>索引嵌套文档</h5><p>可以在嵌套文档的键上建立索引，方式和正常的键一样。</p>
<p>例如:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    "username:"sid",</span>
<span class="line">    "loc":&#123;</span>
<span class="line">        "ip":"1.2.3.4"</span>
<span class="line">        "city":"xxx"</span>
<span class="line">        "state":"xxx"</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>需要在<strong>loc</strong>的某一个字段建立索引，以便提高这个字段的查询速度<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">db.users.ensureIndex(&#123;</span>
<span class="line">    <span class="string">"loc.city"</span>:<span class="number">1</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>对嵌套文档本身建立索引和对嵌套文档的某个字段建立索引是不同的</li>
<li>对整个文档建立索引，只会提高整个字段子文档的查询速度。只有在进行与子文档字段顺序完全匹配的子文档查询(db.users.find({“loc”:{“ip”:”1.2.3.4”,”city”:”xxx”,”state”:”ny”}}))，查询优化器才会使用索引，无法对形如db.users.find({“loc.city”:”xxx”})的查询使用索引</li>
</ul>
</blockquote>
<h5 id="索引数组"><a href="#索引数组" class="headerlink" title="索引数组"></a>索引数组</h5><p>对数组建立索引，可以高效的搜索数组中的特定元素 </p>
<h5 id="多键索引"><a href="#多键索引" class="headerlink" title="多键索引"></a>多键索引</h5><p>对于索引的键，如果这个键在文档中是一个数组，那么这个索引就会呗还标记为多键索引，多键索引可能会比非多键索引慢一些，可能会友多个索引条目指向同一个文档，因此在返回结果时必须要先去除重复的内容</p>
<h4 id="索引基数"><a href="#索引基数" class="headerlink" title="索引基数"></a>索引基数</h4><p>基数就是集合中某个字段拥有不同值的数量，一般来说，应该在基数比较高的键上建立索引，或者至少应该吧基数高的键放在复合索引的前面</p>
<h3 id="使用explain-和hint"><a href="#使用explain-和hint" class="headerlink" title="使用explain()和hint()"></a>使用explain()和hint()</h3><p>explain()能够提供大量的查询相关的信息。对于任意查询，都可以在最后添加一个explain()调用</p>
<p>字段说明：</p>
<ul>
<li><strong>“cursor”: “BtreeCursor age_1_username_1”</strong><br>  BtreeCursor表示使用了索引，使用了{“age”:1,”username”:1}的索引</li>
<li><strong>“isMultiKey”:false</strong><br>  用于说明本次查询是否使用了多键索引</li>
<li><strong>“n”:8332</strong><br>  本次查询返回的文档数量</li>
<li><strong>nscannedObjects”:8332</strong><br>  按到索引去磁盘上查找实际文档的次数</li>
<li><strong>“nscanned”:8332</strong><br>  如果有使用索引，那么这个数字就是查找过的索引条目数量，如果本次查询是一次全表查询，那么这个数字就表示检查过的文档数量。</li>
<li><strong>“scanAndOrder”：false</strong><br>  是否在内存中对结果集进行了排序</li>
<li><strong>“indexOnly”:false</strong><br>  是否只使用索引就能完成此次查询</li>
<li><strong>“nYields”:0</strong><br>  为了让写入请求能够顺序执行，本次插叙暂停的次数</li>
<li><strong>“millis”:91</strong><br>  数据库执行本次查询所耗费的毫秒数</li>
<li><strong>“indexBounds”:{…}</strong><br>  描述了索引的使用情况，给出了索引的遍历范围</li>
</ul>
<h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><p>唯一索引可以确保集合的每一个文档都有唯一值</p>
<p>如果向保证同文档的“username”键都拥有不同的值，那么可以创建一个唯一索引<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">db.users.ensureIndex(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"username"</span>:<span class="number">1</span></span>
<span class="line">    &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"unique"</span>:<span class="literal">true</span></span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<h5 id="复合唯一索引"><a href="#复合唯一索引" class="headerlink" title="复合唯一索引"></a>复合唯一索引</h5><p>创建符合唯一索引时，单个键的值可以相同，但所有键的组合值必须时唯一的</p>
<h5 id="去除重复"><a href="#去除重复" class="headerlink" title="去除重复"></a>去除重复</h5><p>在已有的集合创建唯一索引时可能会失败，因为集合中肯能已经存在重复值了，通常需要先对已有的数据进行处理，在极少数情况下，可能希望直接删除重复的值，创建索引时使用<strong>dropDups</strong>选项，如果遇到重复的值，第一个会被保留，之后的重复文档都会呗删除<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">db.users.ensureIndex(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"username"</span>:<span class="number">1</span></span>
<span class="line">    &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"unique"</span>:<span class="literal">true</span>，</span>
<span class="line">        <span class="string">"dropDups"</span>；<span class="literal">true</span></span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<h3 id="索引管理"><a href="#索引管理" class="headerlink" title="索引管理"></a>索引管理</h3><p>所有的数据库索引信息都存储在<strong>system.indexes</strong>集合中，这个是一个保留集合，不能在其中插入或者删除文档，直蹦通过ensureIndex或者dropIndexes对其进行操作</p>
<p>创建一个索引之后，可以执行db.collectionName.getIndexes()查询给定集合上的所有索引信息</p>
<h2 id="特殊的索引和集合"><a href="#特殊的索引和集合" class="headerlink" title="特殊的索引和集合"></a>特殊的索引和集合</h2><h3 id="固定集合"><a href="#固定集合" class="headerlink" title="固定集合"></a>固定集合</h3><p>mongo中普通的集合是动态的，可以自动增长，但是固定集合，固定集合需要事先创建好，而却他的大小时固定的。固定集合的行为类似于循环队列，如果已经满了，最老的文档会被删除，新插入的文档会占据这块空间</p>
<h4 id="创建固定集合"><a href="#创建固定集合" class="headerlink" title="创建固定集合"></a>创建固定集合</h4><p>不同于普通集合，固定集合必须在使用前显示创建，可以使用create命令创建固定集合，使用<strong>createCollection</strong>函数</p>
<p>创建一个名为my_collection大小为10000字节的固定集合<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">db.createCollection(<span class="string">"my_collection"</span>,&#123;</span>
<span class="line">    <span class="string">"capped"</span>:<span class="literal">true</span>,</span>
<span class="line">    <span class="string">"size"</span>:<span class="number">10000</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<p>限制固定集合中的文档的数量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">db.createCollection(<span class="string">"my_collection"</span>,&#123;</span>
<span class="line">    <span class="string">"capped"</span>:<span class="literal">true</span>,</span>
<span class="line">    <span class="string">"size"</span>:<span class="number">10000</span>，</span>
<span class="line">    <span class="string">"max"</span>:<span class="number">100</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<p>创建固定集合还可以将已有的某个常规集合转换成固定集合，使用<strong>convertToCapped</strong>命令<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">db.runCommand(<span class="string">"convertToCapped"</span>,<span class="string">"test"</span>,<span class="string">"size"</span>:<span class="number">10000</span>)</span>
</pre></td></tr></table></figure></p>
<h4 id="自然排序"><a href="#自然排序" class="headerlink" title="自然排序"></a>自然排序</h4><p>对于固定排序，自然排序就是文档从旧到新排序的，当然也可以按照从新到旧的顺序排序<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">db.my_collection.find().sort(&#123;</span>
<span class="line">    <span class="string">"$natural"</span>:<span class="number">-1</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<h3 id="TTL索引"><a href="#TTL索引" class="headerlink" title="TTL索引"></a>TTL索引</h3><p>允许为每一个文档设置一个超市时间，一个文档到达预设置的老化程度之后就会呗删除</p>
<p>在ensureIndex中指定expireAlterSecs选项就可以创建一个TTL索引<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">db.foo.ensureIndex(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"lastUpdate"</span>:<span class="number">1</span></span>
<span class="line">    &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"expireAlterSecs"</span>:<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span></span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<p>在lastUpdate字段上建立了一个ttl索引，如果一个文档的lastUpdate字段存在并且它的值时日期类型，当服务器时间比文档的lastUpdate字段的时间晚expireAlterSecs秒时，文档就会呗删除</p>
<blockquote>
<p>mongo每分钟对ttl索引进行一次清理，所以不应该依赖以秒为单位保证索引的存活状态</p>
</blockquote>
<h3 id="地理空间索引"><a href="#地理空间索引" class="headerlink" title="地理空间索引"></a>地理空间索引</h3><p>mongo支持几种类型的地理空间索引，其中常用的时2dsphere索引和2d索引</p>
<h4 id="地理空间查询的类型"><a href="#地理空间查询的类型" class="headerlink" title="地理空间查询的类型"></a>地理空间查询的类型</h4><p>可以使用多种不同类型的地理空间查询：交集、包含、以及接近。查询时，需要将希望查找的内容制定为形如{“$geometry”:geoJsonDesc}的GeoJson对象</p>
<p>例如:可以使用$geoIntersects操作符找出与查询位置相交的文档<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eastVillage=&#123;</span>
<span class="line">    <span class="string">"type"</span>:<span class="string">"xxx"</span>,</span>
<span class="line">    <span class="string">"coordinates"</span>:&#123;</span>
<span class="line">        [<span class="number">-73.9917900</span>,<span class="number">40.7264100</span>],</span>
<span class="line">        [<span class="number">-73.9917900</span>,<span class="number">40.7264100</span>],</span>
<span class="line">        [<span class="number">-73.9917900</span>,<span class="number">40.7264100</span>],</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">db.open.street.map.find(&#123;</span>
<span class="line">    <span class="string">"loc"</span>:&#123;</span>
<span class="line">        <span class="string">"$geoIntersects"</span>:&#123;</span>
<span class="line">            <span class="string">"$geometry"</span>:eastVillage</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<p>使用”$within”查询完全包含在某个区域的文档<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">db.open.street.map.find(&#123;</span>
<span class="line">    <span class="string">"loc"</span>:&#123;</span>
<span class="line">        <span class="string">"$within"</span>:&#123;</span>
<span class="line">            <span class="string">"$geometry"</span>:eastVillage</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<p>使用”$near“查询附近的位置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">db.open.street.map.find(&#123;</span>
<span class="line">    <span class="string">"loc"</span>:&#123;</span>
<span class="line">        <span class="string">"$near"</span>:&#123;</span>
<span class="line">            <span class="string">"$geometry"</span>:eastVillage</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>$near是唯一一个会对查询结果进行自动排序的地理空间操作符，返回结果时按照距离由近及远排序的</p>
</blockquote>
<h3 id="使用GridFS存储文件"><a href="#使用GridFS存储文件" class="headerlink" title="使用GridFS存储文件"></a>使用GridFS存储文件</h3><p>shell下使用mongofiles 命令即可</p>
<h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><h3 id="聚合框架"><a href="#聚合框架" class="headerlink" title="聚合框架"></a>聚合框架</h3><p>对聚合框架可以对集合中的文档进行变化和组合，可以用多个构件创建一个管道，用于对一连串的文档进行处理，包括<strong>筛选</strong>、<strong>投射</strong>、<strong>分组</strong>、<strong>排序</strong>、<strong>限制</strong>、<strong>跳过</strong><br>将一系列操作分别传给<strong>aggregate()</strong>函数即可<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
</pre></td><td class="code"><pre><span class="line">db.articles.aggregate(</span>
<span class="line">    &#123;</span>
<span class="line">        "$project":&#123;</span>
<span class="line">            "author:1</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        "$group":&#123;</span>
<span class="line">            "_id":"$auhtor",</span>
<span class="line">            "count":&#123;</span>
<span class="line">                "$sum":1</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        "$sort":&#123;</span>
<span class="line">            "count":-1</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        "$limit":5</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li><strong>$project</strong>：通过指定”filename”，1选择需要投射的字段，0排序不需要的字段，执行完<strong>$project</strong>操作，结果集会以{“_id”:id,”filename”:xxx}形式表示</li>
<li><strong>$group</strong>:指定需要进行分组的字段，是由“_id”:”$author”指定的，第二个字段为分组的每个文档的“count”字段+1，(新加入的文档中并不会有”count”字段，这是”$group”创建的一个新字段)，执行后文档结构为{“_id”:”auhthorName”,”count”:articleCount}</li>
<li><strong>$sort</strong>:对文档中的”count”字段进行降序排序</li>
<li><strong>$limit</strong>：限制最终返回结果为当前结果中的5个文档</li>
</ul>
</blockquote>
<h3 id="管道操作符"><a href="#管道操作符" class="headerlink" title="管道操作符"></a>管道操作符</h3><h4 id="match"><a href="#match" class="headerlink" title="$match"></a>$match</h4><p>用于对文档集合进行筛选，之后就可以在筛选得到的文档子集做聚合</p>
<blockquote>
<ul>
<li>不能在$match中使用地理空间操作符</li>
<li>尽可能将$match放在管道的前面位置</li>
</ul>
</blockquote>
<h4 id="project"><a href="#project" class="headerlink" title="$project"></a>$project</h4><p>可以从文档中提取字段，可以重命名字段</p>
<p>只包含一个<strong>author</strong>字段<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">db.articles.aggregate(&#123;</span>
<span class="line">    <span class="string">"$project"</span>:&#123;</span>
<span class="line">        <span class="string">"author"</span>:<span class="number">1</span>,</span>
<span class="line">        <span class="string">"_id"</span>:<span class="number">0</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<p>将投射过的字段进行重命名，将”_id”在返回结果中重命名为”userId”<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">db.users.aggregate(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"$project"</span>:&#123;</span>
<span class="line">            <span class="string">"userId"</span>:<span class="string">"$_id"</span>,</span>
<span class="line">            <span class="string">"_id"</span>:<span class="number">0</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>“$fidldname”会引用fieldname字段的值</li>
<li>“$tag.3”会被替换为tags数组中的第4个元素</li>
<li>必须显式将“_id”排除，否在这个字段的值将会返回两次</li>
</ul>
</blockquote>
<h5 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h5><p>算术表达式可用于操作数值，指定一组数值，就可以使用这个表达式进行操作了</p>
<p>将”salary“和”bonus“字段的值相加<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">db.employees.aggregate(</span>
<span class="line">    &#123;</span>
<span class="line">        "$project":&#123;</span>
<span class="line">            "todayPay:&#123;</span>
<span class="line">                "$add":["$salary","$bonus"]</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<p>操作符的语法：</p>
<ul>
<li><strong>“$add”:[expr1[,expr2,…,exprN]]</strong><br>  接受一个或多个表达式作为参数，将这些表达式相加</li>
<li><strong>“$subtract”:[expr1,expr2]</strong><br>  接受两个表达式作为参数，用第一个表达式减去第二个表达式作为结果</li>
<li><strong>“$multiply”:[expr1[,expr2,…,exprN]]</strong><br>  接受一个或者多个表达式，并且将它们相乘</li>
<li><strong>”$divide“:[expr1,expr2]</strong><br>  接受两个表达式，用第一个表达式除以第二个表达式的商作为结果</li>
<li><strong>“$mod”:[expr1,expr2]</strong><br>  接受两个表达式，将第一个表达式除以第二个表达式得到的余数作为结果</li>
</ul>
<h5 id="日期表达式"><a href="#日期表达式" class="headerlink" title="日期表达式"></a>日期表达式</h5><ul>
<li>$year</li>
<li>$month</li>
<li>$week</li>
<li>$dayOfMonth</li>
<li>$dayOfWeek</li>
<li>$dayOfYear</li>
<li>$hour</li>
<li>$minute</li>
<li>$second</li>
</ul>
<h5 id="字符串表达式"><a href="#字符串表达式" class="headerlink" title="字符串表达式"></a>字符串表达式</h5><ul>
<li><strong>“$substr”:[expr,startOffset,numToReturn]</strong><br>  第一个参数expr必须是个字符串，截取这个字符串的子串（从startOffset字节开始的numToReturn字节）</li>
<li><strong>“$concat”:[expr1,expr2,…,exprN]</strong><br>  将给定的表达式(或者字符串)连接在一起作为返回结果</li>
<li><strong>“$toLower”:expr</strong><br>  参数expr必须是个字符串值，返回expr的小写形式</li>
<li><strong>”$toUpper:expr</strong><br>  参数expr必须是个字符串值，返回expr的大写形式</li>
</ul>
<h5 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h5><ul>
<li><strong>“$cmp”:[expr1,expr2]</strong><br>  比较expr1和expr2的大小，如果expr1小于expr2，返回负数，反之返回正数</li>
<li><strong>“$strcasecmp”:[string1，string2]</strong><br>  比较string1和string2，区分大小写，只对罗马字符组成的字符串有效</li>
<li><strong>“$eq”/”$ne“/“$gt”/“gte”/“$lt”/“$lte”:[expr1,expr2]</strong><br>  你叫expr1和expr2的大小，返回true或者false</li>
</ul>
<p>布尔表达式</p>
<ul>
<li><strong>“$and”:[expr,[,expr2,…,exprN]]</strong><br>  所有表达式的值都是true，那就返回true，否则返回false</li>
<li><strong>“$or”:[expr,[,expr2,…,exprN]]</strong><br>  只要有任意表达式的值为true，返回true，否贼返回false</li>
<li><strong>“$not”:expr</strong><br>  对expr取反</li>
</ul>
<p>控制语句</p>
<ul>
<li><strong>“$cond”:[booleanExpr，trueExpr，falseExpr]</strong><br>  如果booleanExpr的值为true，那就返回trueExpr，否则返回falseExpr</li>
<li><strong>“$isNull”:[expr,replacementExpr]</strong><br>  如果expr是null，返回replacementExpr，否则返回expr</li>
</ul>
<h4 id="group"><a href="#group" class="headerlink" title="$group"></a>$group</h4><p>将文档依据特定字段的不同值进行分组</p>
<h5 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h5><ul>
<li><p><strong>“$sum”: value</strong><br>  对于分组中的每一个文档，将value与结果相加</p>
</li>
<li><p><strong>“$avg”: value</strong><br>  返回每个分组的平均值</p>
</li>
</ul>
<h5 id="极值操作符"><a href="#极值操作符" class="headerlink" title="极值操作符"></a>极值操作符</h5><ul>
<li><p><strong>“$max”: expr</strong><br>  返回分组内的最大值</p>
</li>
<li><p><strong>“$min”: expr</strong><br>  返回分组内的最小值</p>
</li>
<li><p><strong>“$first”: expr</strong><br>  返回分组的第一个值</p>
</li>
<li><p><strong>“$last”: expr</strong><br>  返回分组的最后一个值</p>
</li>
</ul>
<h5 id="数组操作符"><a href="#数组操作符" class="headerlink" title="数组操作符"></a>数组操作符</h5><ul>
<li><p><strong>“$addToSet”: expr</strong><br>  如果当前数组中不包含expr，那就将它添加到数组中，在反结果集中，每个元素最多只出现一次，而且元素的顺序时不确定的</p>
</li>
<li><p><strong>“$push”: expr</strong><br>  不管expr时什么值，都将它添加到数组只能怪，返回包含所有值的数组</p>
</li>
</ul>
<h4 id="unwind"><a href="#unwind" class="headerlink" title="$unwind"></a>$unwind</h4><p>拆分可以将数组中的每一个值拆分为单独的文档</p>
<blockquote>
<p>如果希望在查询中得到特定的子文档，先使用“$unwind”得到所有子文档，再使用“$match”得到想要的文档</p>
</blockquote>
<h4 id="sort"><a href="#sort" class="headerlink" title="$sort"></a>$sort</h4><p>根据任何字段或多个字段进行排序</p>
<h4 id="limit"><a href="#limit" class="headerlink" title="$limit"></a>$limit</h4><p>接受一个数字n，返回结果集中的前n个文档</p>
<h4 id="skip"><a href="#skip" class="headerlink" title="$skip"></a>$skip</h4><p>接受一个数字m，丢弃结果集中的钱n个文档</p>
<h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3><h4 id="找出集合中的所有键"><a href="#找出集合中的所有键" class="headerlink" title="找出集合中的所有键"></a>找出集合中的所有键</h4><p>map函数使用特定的emit函数返回要处理的值，emit会给mapreduce一个键和一个值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
</pre></td><td class="code"><pre><span class="line">map=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span>
<span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="keyword">this</span>)&#123;</span>
<span class="line">        emit(key,&#123;</span>
<span class="line">            <span class="attr">count</span>:<span class="number">1</span></span>
<span class="line">        &#125;)</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">reduce=<span class="function"><span class="keyword">function</span>(<span class="params">key,emits</span>)</span>&#123;</span>
<span class="line">    total=<span class="number">0</span>;</span>
<span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> emits)&#123;</span>
<span class="line">        total+=emit[i].count;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">return</span> &#123;</span>
<span class="line">        <span class="string">"count"</span>:total</span>
<span class="line">    &#125;;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">mr=db.runCommand(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"mapreduce"</span>:<span class="string">"foo"</span>,</span>
<span class="line">        <span class="string">"map"</span>:map,</span>
<span class="line">        <span class="string">"reduce"</span>:reduce</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>操作相关元信息</p>
<ul>
<li><strong>“reuslt”:”tmp.mr.mapreduce_1266787811_1”</strong><br>  存放mapreduce结果的集合名，临时集合</li>
<li><strong>“timeMollis”:12</strong><br>  操作花费的时间，单位时毫秒</li>
<li><strong>“counts”:{…}</strong><br>  用于调试，包含三个键</li>
<li><strong>“input”:6</strong><br>  发送到map函数的文档个数</li>
<li><strong>“emit”:14</strong><br>  在map函数中emit调用的次数</li>
<li><strong>“output”:5</strong><br>  结果集合中的文档数量</li>
</ul>
</blockquote>
<h3 id="聚合命令"><a href="#聚合命令" class="headerlink" title="聚合命令"></a>聚合命令</h3><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p>返回集合中文档的数量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">db.foo.count(&#123;<span class="string">"x"</span>;<span class="number">2</span>&#125;)</span>
</pre></td></tr></table></figure></p>
<h4 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h4><p>用来找出给定键的所有不同值，使用时必须指定集合和键<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">db.runCommand(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"distinct"</span>:<span class="string">"people"</span>,</span>
<span class="line">        <span class="string">"key"</span>:<span class="string">"age"</span></span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<h4 id="group-1"><a href="#group-1" class="headerlink" title="group"></a>group</h4><p>选定分组所依据的键进行分组，然后对分组内的文档进行聚合得到结果文档</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line">db.runCommand(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"ns"</span>:<span class="string">"stocks"</span>,</span>
<span class="line">        <span class="string">"key"</span>:<span class="string">"day"</span>,</span>
<span class="line">        <span class="string">"inital"</span>:&#123;</span>
<span class="line">            <span class="string">"time"</span>:<span class="number">0</span></span>
<span class="line">        &#125;,</span>
<span class="line">        <span class="string">"$reduce"</span>:funcion(doc,prev)&#123;</span>
<span class="line">            <span class="keyword">if</span> (doc.time&gt;prev.time)&#123;</span>
<span class="line">                prev.price=doc.price;</span>
<span class="line">                price.time=doc.time;</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure>
<blockquote>
<ul>
<li>“ns”:”stock”:指定要进行分组的集合</li>
<li>“key”:”day”:指定文档分组依据的键</li>
<li>“initial”:{“time”:0}:每一组reduce函数调用中的初始time值，会作为初始文档传递给后续过程。每一组的所有成员都会使用这个累加器，所以它的任何变化都可以保存下来</li>
<li>“reduce”:function(doc,prev){}:在集合内的每个文档上执行，系统会传递两个参数，当前文档和累加器文档。</li>
</ul>
</blockquote>
<h5 id="使用完成器"><a href="#使用完成器" class="headerlink" title="使用完成器"></a>使用完成器</h5><p>完成器用于精简从数据库传到用户的数据</p>
<h5 id="将函数作为键使用"><a href="#将函数作为键使用" class="headerlink" title="将函数作为键使用"></a>将函数作为键使用</h5><p>分组所依据 的条件非常复杂，需要定义一个函数来决定文档分组所依据的键</p>
<p>定义分组函数就要用到<strong>$keyf</strong>键，使用<strong>$keyf</strong>的group命令<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">db.posts.group(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"ns"</span>:<span class="string">"posts"</span>,</span>
<span class="line">        <span class="string">"$keyf"</span>:<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span>
<span class="line">            <span class="keyword">return</span> x.category.toLowerCase();</span>
<span class="line">        &#125;,</span>
<span class="line">        <span class="string">"initializer"</span>:...</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<h2 id="应用程序设计"><a href="#应用程序设计" class="headerlink" title="应用程序设计"></a>应用程序设计</h2><h3 id="范式化与反范式化"><a href="#范式化与反范式化" class="headerlink" title="范式化与反范式化"></a>范式化与反范式化</h3><p>决定何时采用范式化何时采用反范式化需要根据自己的应用程序的实际情况仔细权衡</p>
<p>一般来说，数据生成越频繁，就越不应该将这些数据内嵌到其他文档中</p>
<p>如果内嵌字段或者内嵌字段数量时无限增长的，那么应该将这些内容保存在单独的集合中，使用引用的方式进行访问</p>
<p>如果某些字段时文档数据的一部分，那么需要将这些字段内嵌到文档中</p>
<p>如果在查询文档时经常需要将需要将某个字段排除出去，那么这个字段应该放在另外的集合中</p>
<p>内嵌数据与引用数据的比较:</p>
<table>
<thead>
<tr>
<th>更适合内嵌</th>
<th>更适合引用</th>
</tr>
</thead>
<tbody>
<tr>
<td>子文档较小</td>
<td>子文档较大</td>
</tr>
<tr>
<td>数据不会定期改变</td>
<td>数据经常改变</td>
</tr>
<tr>
<td>最终数据一致即可</td>
<td>中间阶段的数据必须一致</td>
</tr>
<tr>
<td>文档数据小幅增加</td>
<td>文档数据大幅增加</td>
</tr>
<tr>
<td>数据通常需要执行二次查询才能获得</td>
<td>数据通常不包含在结果中</td>
</tr>
<tr>
<td>快速读取</td>
<td>快速写入</td>
</tr>
</tbody>
</table>
<h3 id="优化数据操作"><a href="#优化数据操作" class="headerlink" title="优化数据操作"></a>优化数据操作</h3><p>需要在写入效率更高的模式与读取更高的模式之间权衡</p>
<h3 id="不适合MongoDB的场景"><a href="#不适合MongoDB的场景" class="headerlink" title="不适合MongoDB的场景"></a>不适合MongoDB的场景</h3><ul>
<li>不支持事务</li>
<li>在多个不同维度上对不同类型的数据进行连接</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>上述测试在<strong>MongoDB 3.4.3-8-g05b19c6</strong>中成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB权威指南学习笔记(1)--基础知识与对文档的增删改查]]></title>
      <url>/2018/04/11/MongDB-study-1/</url>
      <content type="html"><![CDATA[<p>Mongo</p>
<p>基础知识与对文档的增删改查</p>
<a id="more"></a>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>文档就是键值对的一个有序集，例如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"greeting"</span>:<span class="string">"hello"</span>&#125;</span>
</pre></td></tr></table></figure>
<p>文档中的值可以时多种不同的数据类型；文档中的键时字符串，但有少数例外情况</p>
<ul>
<li>键不能含有\0（空字符）</li>
<li>.和$具有特殊含义，只能在特定环境下使用</li>
</ul>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合就是一组文档，一个集合就相当于关系数据库的一张表</p>
<h4 id="动态模式"><a href="#动态模式" class="headerlink" title="动态模式"></a>动态模式</h4><p>集合时动态模式的，就是说集合里面的文档可以时各式各样的。</p>
<h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><p>命名需要满足以下条件：</p>
<ul>
<li>不能是空字符串</li>
<li>不能包含\0字符</li>
<li>不能以<strong>system.</strong>开头</li>
<li>不能包含<strong>$</strong></li>
</ul>
<h5 id="子集合"><a href="#子集合" class="headerlink" title="子集合"></a>子集合</h5><p>使用<strong>.</strong>来分割不同命名空间的子集合，例如一个博客系统可能包含两个集合，分别时blog.posts和blog.authors。</p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>数据库就是多个集合，一个mongo实例可以承载多个数据库，每个数据库可以有多个集合，每个数据库都有独立的权限。</p>
<p>数据库命名需要满足以下条件</p>
<ul>
<li>不能是空字符串</li>
<li>不能含有特殊字符，基本只能使用字母和数字</li>
<li>区分大小写，（应全部小写）</li>
<li>最多为64字节</li>
</ul>
<p>有一些数据库名时保留的，可以直接访问这些特殊含义的数据库</p>
<ul>
<li>admin: root数据库</li>
<li>local： 不可复制，所有本地集合都可以存储在其中</li>
<li>config： 用于存储分片信息</li>
</ul>
<h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p>功能完备的JavaScript解释器，可以运行任意JavaScript程序</p>
<h4 id="mongodb客户端"><a href="#mongodb客户端" class="headerlink" title="mongodb客户端"></a>mongodb客户端</h4><ol>
<li><p>db： 查看当前指向那个数据库</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ db</span>
</pre></td></tr></table></figure>
</li>
<li><p>use: 选择数据库</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ use foobar</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><p>insert函数将一个文档添加到集合中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明post变量</span></span>
<span class="line">post=&#123;</span>
<span class="line">    <span class="string">"title"</span>:<span class="string">"my blog test"</span>,</span>
<span class="line">    <span class="string">"content"</span>:<span class="string">"blog post"</span>,</span>
<span class="line">    <span class="string">"date"</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()</span>
<span class="line">&#125;</span>
<span class="line"><span class="comment">// 插入blog集合</span></span>
<span class="line">db.blog.insert(post)</span>
</pre></td></tr></table></figure></p>
<p>查询调用find方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">db.blog.find()</span>
</pre></td></tr></table></figure></p>
<h5 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h5><ul>
<li>find():查询所有文档（shell会自动显示最多20个匹配的文档）</li>
<li>findOne()：查询一个文档</li>
</ul>
<h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><p>使用update()进行更新操作，接受两个参数，第一个限定条件，第二个时新的文档。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">post.comments=[]</span>
<span class="line">db.blog.update(&#123;<span class="attr">title</span>:<span class="string">"my blog test"</span>&#125;,post)</span>
</pre></td></tr></table></figure></p>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p>使用remove()方法将文档从数据库永久删除</p>
<ul>
<li>如果不携带参数，会将集合内所有文档都删除</li>
<li>携带一个限定条件作为参数，会删除指定文档</li>
</ul>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul>
<li>null</li>
<li>布尔型</li>
<li>数值</li>
<li>字符串</li>
<li>日期</li>
<li>正则表达式</li>
<li>数组</li>
<li>内嵌文档</li>
<li>对象id</li>
<li>二进制数据</li>
<li>代码</li>
</ul>
<h3 id="使用MongoDB-shell"><a href="#使用MongoDB-shell" class="headerlink" title="使用MongoDB shell"></a>使用MongoDB shell</h3><p>在启动shell指定机器名和端口，就可以连接不同的机器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ mongo some-host:30000/myDB</span>
</pre></td></tr></table></figure></p>
<h4 id="使用shell执行脚本"><a href="#使用shell执行脚本" class="headerlink" title="使用shell执行脚本"></a>使用shell执行脚本</h4><ul>
<li><p>在shell中传递脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ mongo script.js</span>
</pre></td></tr></table></figure>
</li>
<li><p>使用laod()，从交互式shell运行脚本</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">load(<span class="string">"scipt.js"</span>)</span>
</pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>在脚本中可以访问db变量，以及其他全局变量，然而shell辅助函数不可以在文件中使用</p>
</blockquote>
<ul>
<li><p>在shell中使用run()执行命令行程序</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">run(<span class="string">"ls"</span>,<span class="string">"-l"</span>)</span>
</pre></td></tr></table></figure>
</li>
<li><p>如果某些脚本被频繁加在，可以将他们添加到<strong>mongorc.js</strong>文件中，这个文件会在启动shell时自动运行</p>
</li>
</ul>
<h2 id="创建-更新-删除文档"><a href="#创建-更新-删除文档" class="headerlink" title="创建 更新 删除文档"></a>创建 更新 删除文档</h2><h3 id="插入并保存"><a href="#插入并保存" class="headerlink" title="插入并保存"></a>插入并保存</h3><p>使用insert()方法向目标集合插入一个文档<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">db.foo.insert(&#123;<span class="string">"bar"</span>:<span class="string">"baz"</span>&#125;)</span>
</pre></td></tr></table></figure></p>
<h4 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h4><p>使用batchInsert()方法向目标集合批量插入文档<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">db.foo.insert([&#123;<span class="string">"_id"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"_id"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"_id"</span>:<span class="number">2</span>&#125;])</span>
</pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>不能在单词请求中将多个文档批量插入多个集合中</li>
<li>如果在执行批量插入的过程中有一个文档插入失败，那么在该文档之前的所有文档都会成功插入，这个文档之后的文档都会插入失败</li>
<li>插入文档的<strong>_id</strong>不能重复</li>
<li>在批量插入遇到错误时，可以使用<strong>continueOnError</strong>选项忽略错误并继续执行后续插入，但在shell中并不支持，在驱动中可以执行</li>
</ul>
</blockquote>
<h4 id="插入校验"><a href="#插入校验" class="headerlink" title="插入校验"></a>插入校验</h4><p>mongo只对数据进行最基本的检查，检查文档的基本结构，如果没有<strong>_id</strong>字段，就自动增加一个，并且所有文档都必须小于16MB</p>
<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p>使用remove()删除</p>
<h4 id="删除速度"><a href="#删除速度" class="headerlink" title="删除速度"></a>删除速度</h4><p>删除文档通常很快，如果要清空集合，建议使用drop直接删除集合（然后在空集合上重建索引）</p>
<h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><p>使用update()进行更新</p>
<p>更新操作不可分割，先到先执行</p>
<h4 id="文档替换"><a href="#文档替换" class="headerlink" title="文档替换"></a>文档替换</h4><p>用一个新文档完全替换匹配的文档，这适用于大规模迁移的情况</p>
<h4 id="使用修改器"><a href="#使用修改器" class="headerlink" title="使用修改器"></a>使用修改器</h4><p>通常文档只会有一部分字段要更新，所以可以使用原子性的更新修改器，指定对文档中的某些字段进行更新。</p>
<p>更新修改器是种特殊的键，用来制定复杂的更新操作</p>
<h5 id="设置操作"><a href="#设置操作" class="headerlink" title="设置操作"></a>设置操作</h5><p><strong>$set</strong>修改器:用来制定一个字段的值，如果这个字段不存在，则创建它。这对更新模式或者增加用户定义的键非常方便。</p>
<ol>
<li><p>向已有的集合中添加字段</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">db.blog.update(</span>
<span class="line">    &#123;</span>
<span class="line">    <span class="string">"_id"</span>:ObjectId(<span class="string">"5ace2559f02a40eb6148fc34"</span>)</span>
<span class="line">     &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"$set"</span>:&#123;</span>
<span class="line">                <span class="string">"test"</span>:<span class="string">"test"</span></span>
<span class="line">            &#125;</span>
<span class="line">      &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure>
</li>
<li><p>修改集合中已有的字段(可以修改键的类型或内嵌文档)</p>
</li>
</ol>
<blockquote>
<p>增加、修改、删除键时，应该使用$修改器</p>
</blockquote>
<h5 id="增加减少操作"><a href="#增加减少操作" class="headerlink" title="增加减少操作"></a>增加减少操作</h5><p><strong>$inc</strong>修改器：用来增加已有键的值，如果该键不存在那就创建一个。对于更新分析数据、因果关系等有数值变化的地方非常方便</p>
<p>更新id为xxx的value=value+1<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">db.foo.update(&#123;</span>
<span class="line">            <span class="string">"_id"</span>:ObjectId(<span class="string">"5ace332ff02a40eb6148fc36"</span>)</span>
<span class="line">        &#125;,</span>
<span class="line">        &#123;</span>
<span class="line">            <span class="string">"$inc"</span>:&#123;</span>
<span class="line">                <span class="string">"value"</span>:<span class="number">1</span></span>
<span class="line">            &#125;</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>除了<strong>_id</strong>不能修改其他都可以修改</li>
<li>和<strong>$set</strong>用法类似，专门用来增加或减少数字的</li>
<li>只能用于整型、长整型或双精度浮点型的值</li>
</ul>
</blockquote>
<h5 id="数组修改器"><a href="#数组修改器" class="headerlink" title="数组修改器"></a>数组修改器</h5><p>有一大类修改器可以用于操作数组</p>
<h5 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h5><p><strong>$push</strong>修改器：如果数组已经存在，<strong>$push</strong>会向已有的数组末尾加入一个元素，要是没有就创建一个新的数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
</pre></td><td class="code"><pre><span class="line">db.blog.update(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"_id"</span>:ObjectId(<span class="string">"5ace2559f02a40eb6148fc34"</span>)</span>
<span class="line">     &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"$push"</span>:&#123;</span>
<span class="line">            <span class="string">"posts"</span>:&#123;</span>
<span class="line">                <span class="string">"name"</span>:<span class="string">"joe"</span>,</span>
<span class="line">                    <span class="string">"email"</span>:<span class="string">"xxx@qq.com"</span></span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="comment">/* 1 */</span></span>
<span class="line">&#123;</span>
<span class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"5ace2559f02a40eb6148fc34"</span>),</span>
<span class="line">    <span class="string">"title"</span> : <span class="string">"my blog test2"</span>,</span>
<span class="line">    <span class="string">"content"</span> : <span class="string">"blog post2"</span>,</span>
<span class="line">    <span class="string">"date"</span> : ISODate(<span class="string">"2018-04-11T15:10:17.952Z"</span>),</span>
<span class="line">    <span class="string">"test"</span> : <span class="string">"test"</span>,</span>
<span class="line">    <span class="string">"posts"</span> : [ </span>
<span class="line">        &#123;</span>
<span class="line">            <span class="string">"name"</span> : <span class="string">"joe"</span>,</span>
<span class="line">            <span class="string">"email"</span> : <span class="string">"xxx@qq.com"</span></span>
<span class="line">        &#125;</span>
<span class="line">    ]</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>以上是一种比较简单的<strong>$push</strong>使用形式，也可以应用在一些比较复杂的数组操作，使用<strong>$each</strong>子操作符，可以通过一次<strong>$push</strong>操作符添加多个值</p>
<p>添加多个元素到数组中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line">db.blog.update(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"_id"</span>:ObjectId(<span class="string">"5ace2559f02a40eb6148fc34"</span>)</span>
<span class="line">     &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"$push"</span>:&#123;</span>
<span class="line">            <span class="string">"posts"</span>:&#123;</span>
<span class="line">                <span class="string">"$each"</span>:[<span class="number">111</span>,<span class="number">1111</span>,<span class="number">111111</span>]</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<p>如果希望数组的长度时固定的，可以使用<strong>$slice</strong>和<strong>$push</strong>组合在一起使用，可以保证数组不会超过设定好的最大长度，实际上就得到了一个<strong>最多包含n个元素</strong>的数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line">db.blog.update(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"_id"</span>:ObjectId(<span class="string">"5ace2559f02a40eb6148fc34"</span>)</span>
<span class="line">     &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"$push"</span>:&#123;</span>
<span class="line">            <span class="string">"posts"</span>:&#123;</span>
<span class="line">                <span class="string">"$each"</span>:[<span class="number">111</span>,<span class="number">1111</span>,<span class="number">111111</span>]，</span>
<span class="line">                <span class="string">"$slice"</span>:<span class="number">-10</span></span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li><strong>$slice</strong>的值必须时负整数，如果数组的元素数量小鱼10($push之后)，那么所有元素都会被保留，如果数组的元素大于10，那么只有最后10个元素会被保留。</li>
</ul>
</blockquote>
<p>可以在清理元素之前使用<strong>$sort</strong>，只要向数组中添加子对象就需要清理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line">db.blog.update(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"_id"</span>:ObjectId(<span class="string">"5ace2559f02a40eb6148fc34"</span>)</span>
<span class="line">     &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"$push"</span>:&#123;</span>
<span class="line">            <span class="string">"posts"</span>:&#123;</span>
<span class="line">                <span class="string">"$each"</span>:[<span class="number">111</span>,<span class="number">1111</span>,<span class="number">111111</span>]，</span>
<span class="line">                <span class="string">"$slice"</span>:<span class="number">-10</span>,</span>
<span class="line">                <span class="string">"$sort"</span>:&#123;</span>
<span class="line">                    <span class="string">"rating"</span>:<span class="number">-1</span></span>
<span class="line">                &#125;</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<p>这样会根据<strong>rating</strong>字段的值对数组中所有元素进行排序，然后保留前10个。</p>
<blockquote>
<p>不能只将<strong>$slice</strong>或者<strong>$sort</strong>和<strong>$push</strong>配合使用，且必须使用<strong>$each</strong></p>
</blockquote>
<h5 id="将数组作为数据集使用"><a href="#将数组作为数据集使用" class="headerlink" title="将数组作为数据集使用"></a>将数组作为数据集使用</h5><p>如果想将数组作为数据集使用，保证数组内的元素不会重复。可以使用<strong>$ne</strong>实现。</p>
<p>例如:要是作者不在引文列表中，就添加进去<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line">db.papers.update(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"authors cited"</span>:&#123;</span>
<span class="line">            <span class="string">"$ne"</span>: <span class="string">"Richie"</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"$push"</span>:&#123;</span>
<span class="line">            <span class="string">"authors cited"</span>:<span class="string">"Richie"</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<p>实现上述需求，还可以使用<strong>$addToSet</strong>实现，有些时候，更适合用<strong>$addToSet</strong><br>例如：有一个表示用户的文档，已经有了电子邮件地址的数据集，添加新地址时，用<strong>$addToSet</strong>可以避免插入重复地址<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">db.users.update(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"_id"</span>:ObjectId(<span class="string">"5ace2559f02a40eb6148fc34"</span>)</span>
<span class="line">    &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"$addToSet"</span>:&#123;</span>
<span class="line">            <span class="string">"emails"</span>:<span class="string">"doe@gmail.com"</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<p>将<strong>$addToSet</strong>和<strong>$each</strong>组合可以实现添加多个不同的值，可以一次添加多个邮件地址，<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line">db.users.update(</span>
<span class="line">    &#123;</span>
<span class="line">        "_id":ObjectId("5ace2559f02a40eb6148fc34")</span>
<span class="line">    &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        "$addToSet":&#123;</span>
<span class="line">            "emails":&#123;</span>
<span class="line">                "$each”: ["xxx@xxx.com","1111@xxx.com"]</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<h5 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h5><p><strong>$pop</strong>修改器:从数组的任何一端删除元素</p>
<p>从数组末尾删除一个元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="string">"$pop"</span>:&#123;</span>
<span class="line">        <span class="string">"key"</span>:<span class="number">1</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>从数组头部删除一个元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="string">"$pop"</span>:&#123;</span>
<span class="line">        <span class="string">"key"</span>:<span class="number">-1</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p><strong>$pull</strong>：居于特定条件删除元素，而不仅仅以及元素位置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">db.lists.update(&#123;&#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"$pull"</span>:&#123;</span>
<span class="line">            <span class="string">"todo"</span>:<span class="string">"xxx"</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<p>删除todo等于xxx的文档</p>
<h5 id="基于位置的数组修改器"><a href="#基于位置的数组修改器" class="headerlink" title="基于位置的数组修改器"></a>基于位置的数组修改器</h5><p>若时数组中有多个值，我们只想对其中的一部分进行操作，有另种方式</p>
<ul>
<li><p>通过位置</p>
<p>  增加第一个评论的投票数量</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">db.blog.update(</span>
<span class="line">    &#123;</span>
<span class="line">        "post":post_id</span>
<span class="line">    &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        "$inc":&#123;</span>
<span class="line">            "commonts.0.votes:1</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure>
</li>
<li><p>定位操作符</p>
<p>  很多情况，不查询文档就不能知道要修改的数组下标，但是mongo提供了$,用来定位查询文档已经匹配的数组元素、进行隔壁服更新</p>
<p>  要是用户john把名字改成了Jim，就可以用定位符替换他在评论中的名字</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">db.blog.update(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"comments.author"</span>:<span class="string">"john"</span></span>
<span class="line">    &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"$set"</span>:&#123;</span>
<span class="line">            <span class="string">"commonts.$.votes"</span>:<span class="string">"jim"</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">)</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h4 id="upsert"><a href="#upsert" class="headerlink" title="upsert"></a>upsert</h4><p>是一种特殊的更新，要是没有找到符合更新条件的文档，就会以这个条件和更新文档为基础创建一个新的文档，如果找到了匹配的文档，则正常更新。</p>
<p>upsert非常方便，不必预制集合，同一套代码既可以用于创建文档也可以用于更新文档</p>
<p>记录网站页面访问次数的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line">db.analytics.update(</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"url"</span>:<span class="string">"/blog"</span></span>
<span class="line">    &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"$inc"</span>:&#123;</span>
<span class="line">            <span class="string">"pageviews"</span>:<span class="number">1</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;,</span>
<span class="line">    <span class="literal">true</span></span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>第三个参数<strong>true</strong>表示这是个upsert</li>
<li>upsert操作时原子性的，创建文档会将条件文档作为基础，然后对他应用修改器文档</li>
</ul>
</blockquote>
<h5 id="save-hello-帮助程序"><a href="#save-hello-帮助程序" class="headerlink" title="save hello 帮助程序"></a>save hello 帮助程序</h5><p>save时一个shell函数，如果文档不存在，它会自动创建文档，如果文档存在，它就更新这个文档，它只有一个参数，文档。要是这个文档含有<strong>_id</strong>键，save会调用upsert,否在会调用insert</p>
<h4 id="更新多个文档"><a href="#更新多个文档" class="headerlink" title="更新多个文档"></a>更新多个文档</h4><p>默认情况下，更新只能对符合匹配条件的第一个文档执行操作，要是有多个文档符合条件，只有第一个文档会呗更新。</p>
<p>如果要更新所有匹配的文档，可以将update的第四个参数设置为true</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line">db.users.update(&#123;</span>
<span class="line">        <span class="string">"brithday"</span>:<span class="string">"10/13/1978"</span></span>
<span class="line">    &#125;,</span>
<span class="line">    &#123;</span>
<span class="line">        <span class="string">"$set"</span>:&#123;</span>
<span class="line">            <span class="string">"gift"</span>:<span class="string">"happy birhday"</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;,</span>
<span class="line">    <span class="literal">false</span>,</span>
<span class="line">    <span class="literal">true</span></span>
<span class="line">)</span>
</pre></td></tr></table></figure>
<h4 id="返回呗更新的文档"><a href="#返回呗更新的文档" class="headerlink" title="返回呗更新的文档"></a>返回呗更新的文档</h4><p><strong>findAndModift</strong>能够在一个操作中返回匹配结果并进行更新</p>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><h4 id="指定需要返回的键"><a href="#指定需要返回的键" class="headerlink" title="指定需要返回的键"></a>指定需要返回的键</h4><p>有时并不需要将文档中所有键/值对都返回，可以通过find(或findOne)的第二个参数来指定想要的键。<br>这样可以减少传输的数据量，又能节省客户端解码文档的时间和内存消耗。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">db.users.find(&#123;&#125;,&#123;</span>
<span class="line">    <span class="string">"username"</span>:<span class="number">1</span>,</span>
<span class="line">    <span class="string">"email"</span>:<span class="number">1</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure>
<blockquote>
<p>如果不指定”_od”是否返回，”_id”是默认呗返回的</p>
</blockquote>
<p>既然可以选择需要的键，当然也可以排除查询结果中的某些键值对<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">db.users.find(&#123;&#125;,&#123;</span>
<span class="line">    <span class="string">"xxx"</span>:<span class="number">0</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<h3 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h3><h4 id="查询条件-1"><a href="#查询条件-1" class="headerlink" title="查询条件"></a>查询条件</h4><p>比较操作符：</p>
<ul>
<li><strong>$lt</strong> ：&lt;</li>
<li><strong>$lte</strong>:&lt;=</li>
<li><strong>$gt</strong>:&gt;</li>
<li><strong>$gte</strong>:&gt;=</li>
</ul>
<p>例如查询“age”字段大于等于18、小于等于30的所有文档<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">db.users.find(&#123;</span>
<span class="line">    <span class="string">"age"</span>:&#123;</span>
<span class="line">        <span class="string">"$gte"</span>:<span class="number">18</span>,</span>
<span class="line">        <span class="string">"$lte"</span>:<span class="number">30</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<h4 id="OR查询"><a href="#OR查询" class="headerlink" title="OR查询"></a>OR查询</h4><p>有两种方式进行OR查询：</p>
<ul>
<li><strong>$in</strong>可以用于查询一个键的多个值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">db.users.find(&#123;</span>
<span class="line">    <span class="string">"user_id"</span>:&#123;</span>
<span class="line">        <span class="string">"$in"</span>:[<span class="number">123456</span>,<span class="string">"joe"</span>]</span>
<span class="line">    &#125;</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>与<strong>$in</strong>相反的是<strong>$nin</strong>，将返回与数组中所有条件都不匹配的文档</p>
</blockquote>
<ul>
<li><strong>$or</strong>可以在多个键中查询任意的给定值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">db.raffle.find(&#123;</span>
<span class="line">    <span class="string">"$or"</span>;[</span>
<span class="line">        &#123;</span>
<span class="line">            <span class="string">"ticket_no"</span>:<span class="number">725</span></span>
<span class="line">        &#125;,</span>
<span class="line">        &#123;</span>
<span class="line">            <span class="string">"winner"</span>:<span class="literal">true</span></span>
<span class="line">        &#125;</span>
<span class="line">    ]</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h4 id="not"><a href="#not" class="headerlink" title="$not"></a>$not</h4><p>是元条件句，可以用在任何其他条件之上，表示否定的含义</p>
<h4 id="条件语义"><a href="#条件语义" class="headerlink" title="条件语义"></a>条件语义</h4><p>条件语句时内层文档的键，而修改器是外层文档的键</p>
<p>一个键可以在任意多个条件，但是一个键不能对应多个更新修改器</p>
<h3 id="特定类型的查询"><a href="#特定类型的查询" class="headerlink" title="特定类型的查询"></a>特定类型的查询</h3><h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><p>null不仅会匹配某个键的值为null的文档，而且还会匹配不包含这个键的文档。这个匹配还会返回缺少这个键的所有文档</p>
<p>如果仅想匹配键值为null的文档，既要检查该键的值是否时null，还要通过<strong>$exists</strong>条件判断键值是否存在。</p>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>正则表达式能够有效地匹配字符串。</p>
<p>例如:<br>想要查找所有名为Joe或者joe的用户，就可以使用正则表达式执行不区分大小写的匹配<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">db.users.find(&#123;</span>
<span class="line">    <span class="string">"name"</span>:<span class="regexp">/joe/i</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>系统可以接受正则表达式标志(i)，但不一定要有。</li>
<li>mongoDB使用Perl兼容的正则表达式来匹配正则表达式</li>
</ul>
</blockquote>
<h4 id="查询数组"><a href="#查询数组" class="headerlink" title="查询数组"></a>查询数组</h4><p>查询数组元素和查询标量值是一样的</p>
<p>例如有一个水果列表<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">db.food.insert(&#123;</span>
<span class="line">    <span class="string">"fruit"</span>:[<span class="string">"aople"</span>,<span class="string">"banana"</span>,<span class="string">"peach"</span>]</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<p>通过下面的查询可以成功匹配到文档<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">db.food.find(&#123;</span>
<span class="line">    <span class="string">"fruit"</span>:<span class="string">"banana"</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<h5 id="all"><a href="#all" class="headerlink" title="$all"></a>$all</h5><p>如果需要通过多个元素来匹配数组，就需要使用<strong>$all</strong>。</p>
<ul>
<li><p>要找到既有apple又有banana的文档</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">db.food.find(&#123;</span>
<span class="line">    <span class="string">"fruit"</span>:&#123;</span>
<span class="line">        <span class="string">"$all"</span>:[<span class="string">"apple"</span>,<span class="string">"banana"</span>]</span>
<span class="line">    &#125;</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure>
</li>
<li><p>如果不使用<strong>$all</strong>，那就是对整个数组进行精确匹配，但是精确匹配对于缺少元素或者元素沉余的情况不适用</p>
</li>
</ul>
<p>下面将不能匹配到文档<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">db.food.find(&#123;</span>
<span class="line">    <span class="string">"fruit"</span>:[<span class="string">"apple"</span>,<span class="string">"banana"</span>]</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<ul>
<li>如果想查询数组特定位置的元素，需要使用<strong>key.inex</strong>语法指定下标</li>
</ul>
<p>将数组第三个元素和<strong>peach</strong>进行匹配<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">db.food.find(&#123;</span>
<span class="line">    <span class="string">"fruit.2"</span>:<span class="string">"peach"</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<h5 id="size"><a href="#size" class="headerlink" title="$size"></a>$size</h5><p>用它查询特定长度的数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">db.food.find(&#123;</span>
<span class="line">    <span class="string">"fruit"</span>:&#123;</span>
<span class="line">        <span class="string">"$size"</span>:<span class="number">3</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>$size并不能与其他查询条件组合使用，但是这种查询可以通过在文档中添加一个“size”的值</p>
</blockquote>
<h5 id="slice操作符"><a href="#slice操作符" class="headerlink" title="$slice操作符"></a>$slice操作符</h5><p>可以返回某个键匹配的数组元的一个子集</p>
<p>假设现在有一个博客文章的文档，我们希望返回前10条评论<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">db.blog.posts.findOne(criteria,&#123;</span>
<span class="line">    <span class="string">"comments"</span>:&#123;</span>
<span class="line">        <span class="string">"$slice"</span>:<span class="number">10</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<p>返回后10条<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">db.blog.posts.findOne(criteria,&#123;</span>
<span class="line">    <span class="string">"comments"</span>:&#123;</span>
<span class="line">        <span class="string">"$slice"</span>:<span class="number">-10</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<p>指定偏移量以及希望返回的元素数量，来返回元素集合中间位置的某些结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">db.blog.posts.findOne(criteria,&#123;</span>
<span class="line">    <span class="string">"comments"</span>:&#123;</span>
<span class="line">        <span class="string">"$slice"</span>:[<span class="number">23</span>,<span class="number">10</span>]</span>
<span class="line">    &#125;</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<p>除非特别声明，否则使用<strong>$slice</strong>时返回文档中的所欲键，别的键说明符都是默认返回未提及的键</p>
<h5 id="返回一个匹配的数组元素"><a href="#返回一个匹配的数组元素" class="headerlink" title="返回一个匹配的数组元素"></a>返回一个匹配的数组元素</h5><p>希望返回与查询条件相匹配的任意一个数组元素，可以使用$操作符得到一个匹配的元素。</p>
<p>用如下的方式得到Bob的评论<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">db.blog.posts.find(&#123;</span>
<span class="line">    <span class="string">"comments.name"</span>:<span class="string">"bob"</span></span>
<span class="line">&#125;,&#123;</span>
<span class="line">    <span class="string">"comments.$"</span>:<span class="number">1</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<h5 id="数组和范围查询的相互作用"><a href="#数组和范围查询的相互作用" class="headerlink" title="数组和范围查询的相互作用"></a>数组和范围查询的相互作用</h5><p>文档中的标量(非数组元素)必须与查询条件中的每一条语句相匹配</p>
<p>使用<strong>$elemMatch</strong>要求使用查询条件中的两个语句与一个数组元素进行比较，<strong>$elemMatch</strong>不会匹配非数组元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">db.test.find(&#123;</span>
<span class="line">    <span class="string">"x"</span>:&#123;</span>
<span class="line">        <span class="string">"$elemMatch"</span>:&#123;</span>
<span class="line">            <span class="string">"$gt"</span><span class="number">10</span>,</span>
<span class="line">            <span class="string">"$lt"</span>:<span class="number">20</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<h4 id="查询内嵌文档"><a href="#查询内嵌文档" class="headerlink" title="查询内嵌文档"></a>查询内嵌文档</h4><p>有两种方法可以查询内嵌文档</p>
<ul>
<li>查询整个文档</li>
<li>针对其键/值对进行查询</li>
</ul>
<p>查询整个内嵌文档与普通查询完全相同，例如有如下文档<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="string">"name"</span>:&#123;</span>
<span class="line">        <span class="string">"first"</span>:<span class="string">"joe"</span>,</span>
<span class="line">        <span class="string">"last"</span>:<span class="string">"schmoe"</span></span>
<span class="line">    &#125;,</span>
<span class="line">    <span class="string">"age"</span>:<span class="number">45</span></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>要查询姓名为joe schmoe的人可以这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">db.peop;e.find(&#123;</span>
<span class="line">    <span class="string">"name"</span>:&#123;</span>
<span class="line">        <span class="string">"first"</span>:<span class="string">"joe"</span>,</span>
<span class="line">        <span class="string">"last"</span>:<span class="string">"schmoe"</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>如果想要查询一个完整的子文档，那么子文档必须精确匹配，如果joe决定添加一个代表钟建明的键，那么查询就不在可行。</p>
</blockquote>
<p>如果允许的话，通常只针对内嵌文档的特定键值进行查询，我们一般使用<strong>点表示法</strong>查询内嵌文档的键<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">db.people.find(&#123;</span>
<span class="line">    <span class="string">"name.first"</span>:<span class="string">"joe"</span>,</span>
<span class="line">    <span class="string">"name.last"</span>:<span class="string">"schmoe"</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>查询文档可以包含点来表达进入内嵌文档内部的意思</p>
</blockquote>
<h3 id="where查询"><a href="#where查询" class="headerlink" title="$where查询"></a>$where查询</h3><p>为安全起见，应该严格限制或消除<strong>$where</strong>语句的使用</p>
<p>最常见的应用就是比较文档中的两个键的值是否相等</p>
<h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><p>数据库使用游标返回find的执行结果，客户端对游标的实现通常能够对最终结果进行有效的控制。可以限制结果的数量，略过部分结果，根据任意键按任意顺序的组合对结果进行各种排序，或者执行一些强大的操作。</p>
<h4 id="limit、skip、sort"><a href="#limit、skip、sort" class="headerlink" title="limit、skip、sort"></a>limit、skip、sort</h4><p>要限制结果数量，可在find后使用limit函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">db.c.find().limit(<span class="number">3</span>)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>要是匹配的结果不到3个，则返回匹配数量的结果。</p>
</blockquote>
<p>skip和limit类似，不过时跳过前n个匹配的文档，返回余下的文档<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">db.c.find().skip(<span class="number">3</span>)</span>
</pre></td></tr></table></figure></p>
<p>sort接受一个独享作为参数，这个对象时一组键值对，键对应文档的键名，值代表排序的方向。排序方向可以是1(升序)或者-1(降序)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">db.c.find(&#123;</span>
<span class="line">    <span class="string">"username"</span>:<span class="number">1</span>,</span>
<span class="line">    <span class="string">"age"</span>:<span class="number">-1</span></span>
<span class="line">&#125;)</span>
</pre></td></tr></table></figure></p>
<h5 id="比较顺序"><a href="#比较顺序" class="headerlink" title="比较顺序"></a>比较顺序</h5><p>如果混合类型的键排序，其排序顺序是预先定义好的，优先级从小到大，其顺序如下：</p>
<ol>
<li>最小值</li>
<li>null</li>
<li>数字</li>
<li>字符串</li>
<li>对象(文档)</li>
<li>数组</li>
<li>二进制数据</li>
<li>对象id</li>
<li>布尔型</li>
<li>日期型</li>
<li>时间戳</li>
<li>正则表达式</li>
<li>最大值</li>
</ol>
<h4 id="避免使用skip略过大量结果"><a href="#避免使用skip略过大量结果" class="headerlink" title="避免使用skip略过大量结果"></a>避免使用skip略过大量结果</h4><ol>
<li><p>不同skip对结果分页<br> 用limit返回结果的第一页，然后每个后续页面作为相对于开始的偏移量返回</p>
</li>
<li><p>随机选取文档<br>在插入文档时给每个文档都添加一个额外的随机键</p>
</li>
</ol>
<h4 id="搞基查询选项"><a href="#搞基查询选项" class="headerlink" title="搞基查询选项"></a>搞基查询选项</h4><p>两种类型查询：</p>
<ul>
<li>简单查询</li>
<li>封装查询</li>
</ul>
<p>用于向查询中添加各种选项：</p>
<ul>
<li><p>$maxscan : integer<br>  指定本次扫描中扫描文档数量的上限</p>
</li>
<li><p>$min: document<br>  查询的开始条件，在这样的查询中，文档必须与索引的键完全匹配</p>
</li>
<li><p>$max: document<br>  查询的结束条件，在这样的查询中，文档必须与索引的键完全匹配</p>
</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>上述测试在<strong>MongoDB 3.4.3-8-g05b19c6</strong>中成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[manjaro系统相关脚本和配置]]></title>
      <url>/2018/04/10/manjaro%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>安装软件</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
<span class="line">86</span>
<span class="line">87</span>
<span class="line">88</span>
<span class="line">89</span>
<span class="line">90</span>
<span class="line">91</span>
<span class="line">92</span>
<span class="line">93</span>
<span class="line">94</span>
<span class="line">95</span>
<span class="line">96</span>
<span class="line">97</span>
<span class="line">98</span>
<span class="line">99</span>
<span class="line">100</span>
<span class="line">101</span>
<span class="line">102</span>
<span class="line">103</span>
<span class="line">104</span>
<span class="line">105</span>
<span class="line">106</span>
<span class="line">107</span>
<span class="line">108</span>
<span class="line">109</span>
<span class="line">110</span>
<span class="line">111</span>
<span class="line">112</span>
<span class="line">113</span>
<span class="line">114</span>
<span class="line">115</span>
<span class="line">116</span>
<span class="line">117</span>
<span class="line">118</span>
<span class="line">119</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span>
<span class="line"><span class="comment"># 更新源</span></span>
<span class="line">sudo pacman-mirrors -i -c China -m rank</span>
<span class="line"></span>
<span class="line"><span class="comment"># 设置arch源</span></span>
<span class="line">sudo vim /etc/pacman.conf</span>
<span class="line"></span>
<span class="line">[archlinuxcn]</span>
<span class="line">SigLevel = Optional TrustedOnly</span>
<span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$arch</span></span>
<span class="line"></span>
<span class="line"><span class="comment">#更新系统</span></span>
<span class="line">sudo pacman -Syyu --noconfirm</span>
<span class="line"></span>
<span class="line"><span class="comment">#添加密钥</span></span>
<span class="line">sudo pacman -S --noconfirm archlinuxcn-keyring</span>
<span class="line"></span>
<span class="line"><span class="comment"># 安装yaourt</span></span>
<span class="line">sudo  pacman -Sy --noconfirm  yaourt axel</span>
<span class="line"></span>
<span class="line"><span class="comment"># 安装常用软件</span></span>
<span class="line">yaourt -Sy --noconfirm  git vim docker zsh uget aria2 smplayer foxitreader visual-studio-code-bin shadowsocks-qt5 nvm google-chrome netease-cloud-music wps-office p7zip net-tools dnsutils inetutils iproute2 virtualbox mysql-workbench privoxy robo3t-bin postman-bin terminator shutter cairo-dock cairo-dock-plug-ins proxychains remmina-git uget-integrator-chrome kolourpaint</span>
<span class="line"></span>
<span class="line"><span class="comment">#git生成公钥</span></span>
<span class="line">git config --global user.name “EarthChen”</span>
<span class="line">git config --global user.email “1791538609@qq.com”</span>
<span class="line">ssh-keygen -t rsa</span>
<span class="line"></span>
<span class="line"><span class="comment"># java和maven</span></span>
<span class="line"><span class="built_in">export</span> JAVA_HOME=/home/earthchen/ide/jdk1.8.0_171</span>
<span class="line"><span class="built_in">export</span> JAVA_BIN=<span class="variable">$JAVA_HOME</span>/bin</span>
<span class="line"><span class="built_in">export</span> JAVA_LIB=<span class="variable">$JAVA_HOME</span>/lib</span>
<span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_LIB</span>/tools.jar:<span class="variable">$JAVA_LIB</span>/dt.jar</span>
<span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_BIN</span>:<span class="variable">$PATH</span></span>
<span class="line"></span>
<span class="line"><span class="built_in">export</span> M3_HOME=/home/earthchen/ide/apache-maven-3.5.0</span>
<span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;M3_HOME&#125;</span>/bin:<span class="variable">$&#123;PATH&#125;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="comment"># sougou</span></span>
<span class="line"></span>
<span class="line">sudo pacman -S --noconfirm fcitx-im <span class="comment">#默认全部安装</span></span>
<span class="line">sudo pacman -S --noconfirm fcitx-configtool</span>
<span class="line">sudo pacman -S --noconfirm fcitx-sogoupinyin</span>
<span class="line"></span>
<span class="line">sudo  nano ~/.xprofile</span>
<span class="line"></span>
<span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span>
<span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span>
<span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">"@im=fcitx"</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="comment">#docker加速器</span></span>
<span class="line">sudo mkdir -p /etc/docker</span>
<span class="line">sudo vim /etc/docker/daemon.json</span>
<span class="line"></span>
<span class="line">&#123;</span>
<span class="line">    <span class="string">"registry-mirrors"</span>:[<span class="string">"https://dmmxhzvq.mirror.aliyuncs.com"</span>]</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">sudo systemctl daemon-reload</span>
<span class="line">sudo systemctl restart docker</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="comment"># 将当前用户加入docker组</span></span>
<span class="line">sudo gpasswd <span class="_">-a</span> <span class="variable">$&#123;USER&#125;</span> docker</span>
<span class="line">sudo systemctl restart docker</span>
<span class="line"></span>
<span class="line"><span class="comment">#oh  my   zsh</span></span>
<span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span>
<span class="line"></span>
<span class="line"><span class="comment"># node and  npm</span></span>
<span class="line"><span class="built_in">source</span> .zshrc</span>
<span class="line">nvm install node</span>
<span class="line">nvm use node</span>
<span class="line"></span>
<span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span>
<span class="line"></span>
<span class="line"><span class="comment"># spf13</span></span>
<span class="line">curl https://j.mp/spf13-vim3 -L &gt; spf13-vim.sh &amp;&amp; sh spf13-vim.sh</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="comment"># docker启动mysql</span></span>
<span class="line">docker run --name=mysql -p 3306:3306 -v /var/lib/mysql:/var/lib/mysql  <span class="_">-e</span> MYSQL_ROOT_PASSWORD=123456 <span class="_">-d</span> mysql:latest --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span>
<span class="line"></span>
<span class="line"><span class="comment"># docker启动redis</span></span>
<span class="line">docker run --name=redis -p 6379:6379 <span class="_">-d</span> redis:latest</span>
<span class="line"></span>
<span class="line"><span class="comment"># docker 启动mongo</span></span>
<span class="line">docker run --name mongo -p 27017:27017 <span class="_">-d</span> mongo:latest </span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="comment"># 创建微信启动器</span></span>
<span class="line">sudo vim /usr/share/applications/weixin.desktop</span>
<span class="line"></span>
<span class="line">[Desktop Entry]  </span>
<span class="line">Name=wechat  </span>
<span class="line">GenericName=wechat  </span>
<span class="line">Comment=wechat </span>
<span class="line">Exec=/home/earthchen/ide/electronic-wechat-linux-x64/electronic-wechat</span>
<span class="line">Icon=/home/earthchen/ide/electronic-wechat-linux-x64/weixin.png</span>
<span class="line">Terminal=<span class="literal">false</span>  </span>
<span class="line">Encoding=UTF-8  </span>
<span class="line">Type=Application  </span>
<span class="line">Categories=Qt;Development;</span>
<span class="line"></span>
<span class="line"><span class="comment"># jrebel激活码</span></span>
<span class="line"></span>
<span class="line">T28clW9MXLLwkRl5ngmW6gqnaXWqJ9O0u6soiSiBcFBXv+0PXxGHoU/JQt4Bi1XW7DhesXWzLlgJVtwT+2DpSfNE1D<span class="keyword">do</span>ZDkMDp1pgGC7JJL9kBHOJjZHbVj4DcB+1KfeNV6xXA==</span>
<span class="line"></span>
<span class="line"><span class="comment"># 时间同步</span></span>
<span class="line">sudo ntpdate cn.pool.ntp.org </span>
<span class="line"></span>
<span class="line"><span class="comment"># idea注册码</span></span>
<span class="line">EB101IWSWD-eyJsaWNlbnNlSWQiOiJFQjEwMUlXU1dEIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQ<span class="keyword">if</span>Sx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQ<span class="keyword">if</span>Sx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQ<span class="keyword">if</span>Sx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQ<span class="keyword">if</span>Sx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQ<span class="keyword">if</span>Sx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In1dLCJoYXNoIjoiNjk0NDAzMi8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-Gbb7jeR8JWOVxdUFaXfJzVU/O7c7xHQyaidCnhYLp7v32zdeXiHUU7vlrrm5y9ZX0lmQk3plCCsW+phrC9gGAPd6WDKhkal10qVNg0larCR2tQ3u8jfv1t2JAvWrMOJfFG9kKsJuw1P4TozZ/E7Qvj1cupf/rldhoOmaXMyABxNN1af1RV3bVhe4FFZe0p7xlIJF/ctZkFK62HYmh8V3AyhUNTzrvK2k+t/tlDJz2LnW7nYttBLHld8LabPlEEjpTHswhzlthzhVqALIgvF0uNbIJ5Uwpb7NqR4U/2ob0Z+FIcRpFUIAHEAw+RLGwkCge5DyZKfx+RoRJ/In4q/UpA==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1<span class="keyword">do</span>C6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoP<span class="keyword">fi</span>YXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</span>
<span class="line"></span>
<span class="line"><span class="comment"># 添加到hosts</span></span>
<span class="line">0.0.0.0 account.jetbrains.com</span>
</pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="idea-pycharm-stop按钮失效"><a href="#idea-pycharm-stop按钮失效" class="headerlink" title="idea pycharm stop按钮失效"></a>idea pycharm stop按钮失效</h4><p>解决办法如下：(idea为例，pycharm同下)</p>
<ol>
<li><p>编写启动脚本start.sh</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/baah</span></span>
<span class="line">(</span>
<span class="line"><span class="built_in">trap</span> - SIGINT</span>
<span class="line"><span class="built_in">exec</span> /bin/bash /home/earthchen/ide/idea-IU-181.4203.550/bin/idea.sh $*</span>
<span class="line">) &amp;</span>
</pre></td></tr></table></figure>
</li>
<li><p>赋予可执行权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ chmod +x start.sh</span>
</pre></td></tr></table></figure>
</li>
<li><p>修改启动器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/share/applications/</span></span>
<span class="line">[Desktop Entry]</span>
<span class="line">Version=1.0</span>
<span class="line">Type=Application</span>
<span class="line">Name=IntelliJ IDEA Ultimate Edition</span>
<span class="line">Icon=/home/earthchen/ide/idea-IU-181.4203.550/bin/idea.png</span>
<span class="line">Exec=<span class="string">"/home/earthchen/ide/idea-IU-181.4203.550/bin/start.sh"</span> %f</span>
<span class="line">Comment=The Drive to Develop</span>
<span class="line">Categories=Development;IDE;</span>
<span class="line">Terminal=<span class="literal">false</span></span>
<span class="line">StartupWMClass=jetbrains-idea</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="备份还原"><a href="#备份还原" class="headerlink" title="备份还原"></a>备份还原</h4><p>为了避免滚挂，使用tar命令打包备份系统</p>
<ol>
<li><p>创建需要排除的文件路径</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line">/proc/*</span>
<span class="line">/dev/*</span>
<span class="line">/sys/*</span>
<span class="line">/tmp/*</span>
<span class="line">/mnt/*</span>
<span class="line">/media/*</span>
<span class="line">/run/*</span>
<span class="line">/var/lock/*</span>
<span class="line">/var/run/*</span>
<span class="line">/var/lib/pacman/*</span>
<span class="line">/var/cache/pacman/pkg/*</span>
<span class="line">/lost+found</span>
</pre></td></tr></table></figure>
</li>
<li><p>使用打包命令打包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo tar cvpjf backup.tar.bz2 --exclude-from=excl /</span>
</pre></td></tr></table></figure>
</li>
<li><p>使用livecd进入系统进行恢复<br>进入根目录，执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo tar xvpjf backup.tar.bz2</span>
</pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高性能MySQL学习笔记]]></title>
      <url>/2018/04/04/%E9%AB%98%E6%80%A7%E8%83%BDMySQL-study/</url>
      <content type="html"><![CDATA[<p>高性能MySQL读书笔记。。。</p>
<a id="more"></a>
<h2 id="MySQL架构"><a href="#MySQL架构" class="headerlink" title="MySQL架构"></a>MySQL架构</h2><h3 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h3><h4 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h4><p>在处理并发读或者写时，通过实现一个由两种类型的锁组成的锁系统来解决问题。</p>
<ol>
<li><p>两种锁的类型为:</p>
<ul>
<li>共享锁(读锁):是共享的，或者说是互补阻塞的。多个客户在同意时刻可以同事读取同一个资源。</li>
<li>排他锁(写锁):排他的，一个写锁会阻塞其他写锁和读锁。</li>
</ul>
</li>
<li><p>锁粒度</p>
</li>
</ol>
<p>2.1 表锁<br>是最基本的锁策略，开销最小的策略。</p>
<ul>
<li>当一个用户获得写锁时，会阻塞其他用户对该表进行的所有读写操作。</li>
<li>读锁相互不阻塞。</li>
</ul>
<p>2.2 行级锁<br>可以最大成都的支持并发处理(最大的锁开销).</p>
<h3 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h3><p>事物就是一组原子性的sql，或者说是一个独立的工作单元。</p>
<blockquote>
<p>ACID的概念:</p>
<ul>
<li>原子性</li>
<li>一致性</li>
<li>隔离性</li>
<li>持久性</li>
</ul>
</blockquote>
<h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>在sql标准中定义了四种隔离级别</p>
<ul>
<li><p>READ UNCOMMITTED （未提交读）</p>
<p>  事物中的修改，即使没有提交，对其他事物也都是可见的。事物可以读取未提交的数据，成为脏读。</p>
</li>
<li><p>READ COMMITED（提交读）</p>
<p>  大多数数据库系统的默认隔离级别都是提交读(但MySQL不是)。该隔离级别定义为:一个事物开始时，只能看见已经提交的事务所做的修改。这个级别有时候也叫做不可重复读。</p>
</li>
<li><p>REPEATABLE READ (可重复读)</p>
<p>  该级别保证在同一个事务中多次读取同样的记录结果是一直的。该级别不能解决<strong>幻读</strong>的问题。幻读就是在某个事务读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的记录时，就会产生幻行。</p>
</li>
<li><p>SERIALIZABLE （可串行化）</p>
<p>  是最高的隔离级别，通过强制事务穿行执行，避免了前面所说的幻读的问题。简单来说，该级别会在读取的每一行的数据上都加锁，所以可能导致大量的超时和锁征用的问题。</p>
</li>
</ul>
<h3 id="MySQL的存储引擎"><a href="#MySQL的存储引擎" class="headerlink" title="MySQL的存储引擎"></a>MySQL的存储引擎</h3><p>默认引擎为InnoDB,一般没有特殊需求直接使用即可。</p>
<h2 id="Schema与数据类型优化"><a href="#Schema与数据类型优化" class="headerlink" title="Schema与数据类型优化"></a>Schema与数据类型优化</h2><h3 id="选择优化的数据类型"><a href="#选择优化的数据类型" class="headerlink" title="选择优化的数据类型"></a>选择优化的数据类型</h3><ol>
<li>更小的通常更好</li>
<li>简单就好</li>
<li>尽量避免null</li>
</ol>
<h3 id="MySQL-schema设计中的陷阱"><a href="#MySQL-schema设计中的陷阱" class="headerlink" title="MySQL schema设计中的陷阱"></a>MySQL schema设计中的陷阱</h3><ol>
<li>太多的列</li>
<li>太多的关联</li>
<li>全能的枚举</li>
<li>变相的枚举</li>
<li>非此发明的null</li>
</ol>
<h3 id="范式和反范式"><a href="#范式和反范式" class="headerlink" title="范式和反范式"></a>范式和反范式</h3><h4 id="范式的优缺点"><a href="#范式的优缺点" class="headerlink" title="范式的优缺点"></a>范式的优缺点</h4><blockquote>
<p>优点：</p>
<ul>
<li>范式的更新操作通常更快</li>
<li>有较少的重复数据，在修改时，只要修改更少的数据</li>
<li>表通常更小，更好的放在内存中，执行操作会更快</li>
<li>检索列表数据时更少需要DISTINCT或者GROUP BY语句</li>
</ul>
<p>缺点</p>
<ul>
<li>通常需要关联，多表关联的代价昂贵，也可能使得一些索引策略无效</li>
</ul>
</blockquote>
<h4 id="反范式的优缺点"><a href="#反范式的优缺点" class="headerlink" title="反范式的优缺点"></a>反范式的优缺点</h4><blockquote>
<p>优点：</p>
<ul>
<li>反范式很好的避免关联</li>
<li>能使用更有效的索引策略</li>
</ul>
<p>缺点</p>
<ul>
<li>造成较多的数据冗余</li>
</ul>
</blockquote>
<h4 id="混用范式和反范式"><a href="#混用范式和反范式" class="headerlink" title="混用范式和反范式"></a>混用范式和反范式</h4><p>完全的范式和反范式是不存在的，在实际操作中建议混用这两种策略，可能使用部分范式化的schema、缓存表、以及其他技巧。</p>
<h3 id="缓存表和汇总表"><a href="#缓存表和汇总表" class="headerlink" title="缓存表和汇总表"></a>缓存表和汇总表</h3><ol>
<li><p>用缓存表表示存储那些可以比较简单的从schema其他表获取（但是每次获取的数据比较慢）数据的表（逻辑上的沉余的数据）</p>
</li>
<li><p>用汇总表表示使用GROUP BY语句聚合数据的表（数据不是路逻辑上沉余的）</p>
</li>
</ol>
<h4 id="物化视图"><a href="#物化视图" class="headerlink" title="物化视图"></a>物化视图</h4><p>实际上是预计计算并且存储在磁盘上的表，可以通过各种各样的策略刷新和更新</p>
<h4 id="计数器表"><a href="#计数器表" class="headerlink" title="计数器表"></a>计数器表</h4><p>如果应用在表中保存计算器，则在更新计数器时可能碰到并发问题，创建一个独立的表存储计数器通常是个好主意，这样可以使计数器表小且快，使用独立的表可以帮助避免查询缓存失效。</p>
<h3 id="加快ALTER-TABLE操作的数据"><a href="#加快ALTER-TABLE操作的数据" class="headerlink" title="加快ALTER TABLE操作的数据"></a>加快ALTER TABLE操作的数据</h3><p>myql执行大部分修改表结构的操作方法是用一个新的结构创建一个空表，从旧表查询中所有数据插入新表，然后删除旧表</p>
<ol>
<li>一般来说，ALTER TABLE操作将导致myql服务中断，对常见的场景，能使用的技巧只有两种：<ul>
<li>先在一台不提供服务的机器上执行ALTER TABLE,然后和提供服务的主库进行切换</li>
<li>影子拷贝，意思是要用要求的表结构创建一张和源表无关的新表，然后通过重命名和删表操作交换两张表</li>
</ul>
</li>
</ol>
<p>不是所有的ALTER TABLE操作都会引起表重建，有两种方式：</p>
<h4 id="只修改-frm文件"><a href="#只修改-frm文件" class="headerlink" title="只修改.frm文件"></a>只修改.frm文件</h4><h4 id="快速创建myisam索引"><a href="#快速创建myisam索引" class="headerlink" title="快速创建myisam索引"></a>快速创建myisam索引</h4><h2 id="创建高性能的索引"><a href="#创建高性能的索引" class="headerlink" title="创建高性能的索引"></a>创建高性能的索引</h2><h3 id="索引基础"><a href="#索引基础" class="headerlink" title="索引基础"></a>索引基础</h3><h4 id="索引基础-1"><a href="#索引基础-1" class="headerlink" title="索引基础"></a>索引基础</h4><h5 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B-Tree索引"></a>B-Tree索引</h5><p>如果没有特别说明，一般说的都是B-Tree索引，它使用B-Tree数据结构来存储数据。</p>
<ol>
<li><p>该索引对如下类型的查询有效：</p>
<ul>
<li>全值匹配(和索引中所有列进行匹配)</li>
<li>匹配最左前缀(只使用索引的第一列)</li>
<li>匹配范围值</li>
<li>匹配列前缀(匹配某一列的值的开头部分)</li>
<li>精确匹配某一列并范围匹配另外一列</li>
<li>只访问索引的查询(只需要访问索引，无需访问数据行)</li>
</ul>
</li>
<li><p>该索引的一些限制</p>
<ul>
<li>如果不是按照索引的最左列开始查找，则无法使用索引</li>
<li>不能跳过索引中的列</li>
<li>如果查询中有某个列的范围查询，则右边的所有列都无法使用索引优化查找</li>
</ul>
</li>
</ol>
<h5 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h5><p>基于哈希表实现，只有精确匹配索引所有列才有效。<br>在mysql中只有<strong>Memory</strong>引擎显示支持哈希索引</p>
<ol>
<li>哈希索引的限制<ul>
<li>只包含哈希值和行指针,而不包含字段值</li>
<li>不是按照索引值的顺序存储的，无法用于排序</li>
<li>不支持部分索引列匹配查找</li>
<li>只支持等值比较查询</li>
<li>访问哈希索引的数据非常快，除非有很多哈希冲突</li>
<li>如果冲突多，一些索引维护操作的代价会很高</li>
</ul>
</li>
</ol>
<h5 id="空间数据索引"><a href="#空间数据索引" class="headerlink" title="空间数据索引"></a>空间数据索引</h5><p>MyISAM表支持空间索引，可以用作地理数据存储，和b-tree索引不同，这类索引无须前缀查询，空间索引会从所有维度来所有数据。</p>
<h5 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h5><p>查找的是文本中的关键词，而不是直接比较索引中的值</p>
<h3 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h3><p>索引可以让服务器快速定位到表的指定位置，但这不是索引的唯一作用。</p>
<blockquote>
<p>索引的三个优点</p>
<ul>
<li>大大减少服务器需要扫描的数据量</li>
<li>帮助服务器避免排序和临时表</li>
<li>将随机io变为顺序io</li>
</ul>
</blockquote>
<h3 id="高性能的索引策略"><a href="#高性能的索引策略" class="headerlink" title="高性能的索引策略"></a>高性能的索引策略</h3><h4 id="独立的列"><a href="#独立的列" class="headerlink" title="独立的列"></a>独立的列</h4><p>如果查询中的列不是独立的，则mysql就不会使用索引</p>
<h4 id="前缀索引和索引选择性"><a href="#前缀索引和索引选择性" class="headerlink" title="前缀索引和索引选择性"></a>前缀索引和索引选择性</h4><ol>
<li><p>索引前缀：有时候索引很长的字符列，这会让索引变的大且慢。解决这个问题有两种方案。</p>
<ul>
<li>使用哈希索引</li>
<li>通常可以索引开始的部分字符，这样可以大大减少索引空间，从而提高索引效率</li>
</ul>
</li>
<li><p>索引选择性：不重复的索引值(也称之为基数)和数据表的记录总数的比值，索引的选择性越高则查询效率越高</p>
</li>
</ol>
<h4 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h4><p>一个常见的错误就是，为每个列创建独立的索引</p>
<p>在多个列上建立索引大部分情况下并不能提高mysql的查询性能，mysql5.0之后的版本引入了一种“索引合并”的策略，一定程度上可以使用表上的多个单列索引来定位指定的行。</p>
<p>索引合并有时候是一种优化的结构，但实际上更多时候说明了表上的索引建的很糟糕：</p>
<ul>
<li>当出现服务器对多个索引做香蕉操作时，（通常有多个and条件），通常意味着需要一个包含所有相关列的多列索引，而不是多个独立的单列索引。</li>
<li>当服务器需要对多个索引做联合操作时(通常有多个or条件)，通常需要耗费大量cou和和内存上在算法的的缓存、排序和合并操作上。</li>
<li>优化器不会吧这些计算到“查询成本”中，优化器只关心随机页面读取。</li>
</ul>
<h4 id="选择合适的索引列顺序"><a href="#选择合适的索引列顺序" class="headerlink" title="选择合适的索引列顺序"></a>选择合适的索引列顺序</h4><p>正确的顺序依赖于使用该索引的查询，并且需要同事考虑如何更好的满足排序和分组的需要。</p>
<p>在一个多列的B-Tree索引中，索引列的顺序意味着索引首先按照从左到右进行排序，所以索引可以按照升序或者降序进行扫描，以满足精确符合列顺序的ORDER BY、GROUP BY和DISTINCT等子句的查询需求。</p>
<p>当不考虑排序和分组时，将选择性最高的列防在前面通常是很好的。然而性能不只是依赖于所有索引列的选择性，也和查询条件的具体值有关，也就是和值的分布有关。</p>
<h4 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h4><p>聚簇索引并不是一种单独的索引类型，而是一种数据存储方式，InnoDB的聚簇索引实际上在同一个结构中保存了B-Tree索引和数据行。</p>
<p>当表有聚簇索引时，数据行实际上存放在索引的叶子页中。InnoDB将通过主键聚集数据，如果没有定义主键，会选择一个唯一的非空索引来替代，如果没有这样的索引，会隐式定义一个主键来作为聚簇索引。</p>
<blockquote>
<p>优点:</p>
<ul>
<li>可以把相关数据保存在一起</li>
<li>数据访问更快</li>
<li>使用覆盖索引扫描的查询可以直接使用页节点中的主键值</li>
</ul>
<p>缺点:</p>
<ul>
<li>最大限度的提高了io密集型应用的性能，如果数据全部放在内存中，则访问的顺序就不重要了</li>
<li>插入速度严重依赖于插入顺序</li>
<li>更新聚簇索引列的代价很高</li>
<li>居于聚簇索引的表在插入新航，或者主键呗更新导致需要移动行的时候，可能面临”页分裂”的问题</li>
<li>可能导致全表扫描变慢，尤其行比较稀疏，或者由于页分裂导致数据存储不连续</li>
<li>二级索可能比想象的更大，因为二级索引的叶子节点包含了引用行的主键列。</li>
<li>二级索引访问需要两次索引查找，而不是一次</li>
</ul>
</blockquote>
<h5 id="InnoDB-MyISAM的数据分布对比"><a href="#InnoDB-MyISAM的数据分布对比" class="headerlink" title="InnoDB MyISAM的数据分布对比"></a>InnoDB MyISAM的数据分布对比</h5><ol>
<li><p>MyISAM的数据分组非常简单，按照数据插入的顺序存储在磁盘上。</p>
</li>
<li><p>InnoDB的数据分布使用非常不同的方式存储同样的数据，聚簇索引“就是”表，不需要独立的行存储</p>
</li>
<li><p>使用InnoDB时应该尽可能的按主键顺序插入数据，并且尽可能使用单调增加的聚簇键的值来插入新行</p>
</li>
</ol>
<h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>如果一个索引包含(或者说覆盖)所有需要查询的字段的值，我们就称之为”覆盖索引”</p>
<p>如果查询只需要扫描索引而无须回表，能带来许多好处</p>
<ul>
<li>索引条目通常远小鱼数据行的大小，所以如果只需要读取索引，那mysql就会极大的减少数据访问量</li>
<li>因为索引是按照列值顺序存储的，所以对于io密集型的范围查询会比随机从磁盘读取每一行数据的io要少的多</li>
<li>一些存储引擎（如MyISAM）在内存中只缓存索引数据，数据则依赖操作系统来缓存，因此访问数据需要一次系统调用</li>
<li>由于InnoDB的聚簇索引，覆盖索引对InnoDB表特别有用</li>
</ul>
<h4 id="使用索引扫描来做排序"><a href="#使用索引扫描来做排序" class="headerlink" title="使用索引扫描来做排序"></a>使用索引扫描来做排序</h4><p>MySQL有两种方式可以生成有序的结果，通过排序操作，或者按照索引顺序扫描；如果EXPLAIN出来的type列的值为“index”，则说明使用了索引扫描来做排序</p>
<p>MySQL可以使用同一个索引既满足排序又用于查找行，所以，如果可能，设计索引时应该尽可能的满足这两种任务</p>
<p>只有当索引列顺序和ORDER BY子句的顺序完全一致，并且所有列的排序方向都一样时，才能使用索引来对结构做排序。如果需要关联多表，则当只有ORDER BY子句引用的字段全部为第一个表时，才能使用。</p>
<h4 id="压缩-前缀压缩-索引"><a href="#压缩-前缀压缩-索引" class="headerlink" title="压缩(前缀压缩)索引"></a>压缩(前缀压缩)索引</h4><p>MyISAM使用前缀压缩来减少索引的大小，从而让更多的索引可以防到内存中，在某些情况下可以极大提高性能。</p>
<h2 id="查询性能优化"><a href="#查询性能优化" class="headerlink" title="查询性能优化"></a>查询性能优化</h2><h3 id="慢查询基础：优化数据访问"><a href="#慢查询基础：优化数据访问" class="headerlink" title="慢查询基础：优化数据访问"></a>慢查询基础：优化数据访问</h3><p>有效的分析方法:</p>
<ul>
<li>确认应用是否存在检索大量超过需要的数据</li>
<li>确认服务器是否存在大量超过需要的数据行</li>
</ul>
<h4 id="是否向数据可请求了不需要的数据"><a href="#是否向数据可请求了不需要的数据" class="headerlink" title="是否向数据可请求了不需要的数据"></a>是否向数据可请求了不需要的数据</h4><ol>
<li>查询不需要的记录</li>
<li>多表关联时返回全部列</li>
<li>总是取出全部列</li>
<li>重复查询相同的数据</li>
</ol>
<h4 id="MySQL是否扫描额外的记录"><a href="#MySQL是否扫描额外的记录" class="headerlink" title="MySQL是否扫描额外的记录"></a>MySQL是否扫描额外的记录</h4><p>在确定查询只返回需要的数据后，接下来应该看看为了返回结果是否扫描了过多的数据</p>
<p>对于MySQL，简单的衡量查询开销的指标如下：</p>
<ul>
<li>响应时间</li>
<li>扫描的行数</li>
<li>返回的行数</li>
</ul>
<h5 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h5><p>响应时间=服务时间+排队时间</p>
<h5 id="扫描的行数和返回的行数"><a href="#扫描的行数和返回的行数" class="headerlink" title="扫描的行数和返回的行数"></a>扫描的行数和返回的行数</h5><p>理想情况下扫描的行数和返回的行数应该时相同的，但实际上基本不可能。扫描的行数对返回的行数的比率通常很小，一般在1:1和10:1之间。</p>
<h5 id="扫描的行数和访问类型"><a href="#扫描的行数和访问类型" class="headerlink" title="扫描的行数和访问类型"></a>扫描的行数和访问类型</h5><p>在评估查询开销的时候，需要考虑一下从表中找到某一行的数据的成本。</p>
<p>在EXPLAIN语句中的type列反应了访问类型，如果查询没有办法找到合适的访问类型，那么最好的解决办法通常就是增加一个合适的索引</p>
<p>一般MySQL能够使用如下方式应用where条件，从好到坏依次为：</p>
<ul>
<li>在索引中使用where条件来过滤不匹配的记录</li>
<li>使用索引覆盖扫描来返回记录，直接从索引中过滤不需要的记录并返回命中的结果。</li>
<li>从数据表中返回数据，然后过滤不满足条件的记录</li>
</ul>
<h3 id="重构查询方式"><a href="#重构查询方式" class="headerlink" title="重构查询方式"></a>重构查询方式</h3><p>在优化有问题的查询时，目标应该是找到一个更优的方式获得实际需要的结果，而不是一定总是需要从MySQL获取一样的结果集。</p>
<h4 id="一个复杂查询还是多个简单查询"><a href="#一个复杂查询还是多个简单查询" class="headerlink" title="一个复杂查询还是多个简单查询"></a>一个复杂查询还是多个简单查询</h4><p>设计查询的时候一个需要考虑的问题，是否需要将一个复杂的查询分成多个简单的查询。</p>
<p>在MySQL从设计上让连接和断开都很轻量，在返回一个小的查询结果方面很高效。</p>
<p>在其他条件都相同的时候，使用尽可能少的查询当然时好的，但是有时候，将一个大查询分解为多个小查询时很有必要的。在设计应用时，如果也过查询能够胜任时还写成多个独立的查询时不明智的。</p>
<h4 id="切分查询"><a href="#切分查询" class="headerlink" title="切分查询"></a>切分查询</h4><p>有时候我们需要对大查询分而治之，将大查询切分为小查询，每个查询功能完全一样，只完成一小部分，每次只返回一小部分查询结果</p>
<p>删除旧数据就是一个很好的例子，定期清除大量数据时如果用一个大的语句一次性完成的话，则可能需要一次锁住很多数据，占满整个失误日志，耗尽系统资源，阻塞很多小的但是重要的查询。</p>
<h4 id="分解关联查询"><a href="#分解关联查询" class="headerlink" title="分解关联查询"></a>分解关联查询</h4><p>对关联查询进行分解。简单的，可以对每一个表进行一次单表查询，然后将结果在应用程序中进行关联。</p>
<p> 通过分解关联查询的方式有如下的好处：</p>
<ul>
<li>让缓存的效率更高</li>
<li>将查询分解后，执行单个查询可以减少锁的竞争</li>
<li>查询本身效率也可能会有所提升</li>
<li>可以减少沉余记录的查询</li>
<li>相当于在应用中实现了哈希关联，而不是使用MySQL的嵌套循环关联</li>
</ul>
<h3 id="优化特定类型的查询"><a href="#优化特定类型的查询" class="headerlink" title="优化特定类型的查询"></a>优化特定类型的查询</h3><h4 id="优化count-查询"><a href="#优化count-查询" class="headerlink" title="优化count()查询"></a>优化count()查询</h4><p>有两种不同的作用:</p>
<ul>
<li>统计某个列的数量</li>
<li>统计行数</li>
</ul>
<h5 id="简单的优化"><a href="#简单的优化" class="headerlink" title="简单的优化"></a>简单的优化</h5><p>count(*)全表非常快，可以来加速一些特定条件的count查询</p>
<p>比如查询所有id大于5的城市<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> city <span class="keyword">where</span> <span class="keyword">id</span> &gt;<span class="number">5</span></span>
</pre></td></tr></table></figure></p>
<p>通过反转可以将扫描行数减少到5行之内<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">form</span> city) - <span class="keyword">count</span>(*) <span class="keyword">from</span> city <span class="keyword">where</span> <span class="keyword">id</span> &lt;=<span class="number">5</span></span>
</pre></td></tr></table></figure></p>
<h5 id="使用近似值"><a href="#使用近似值" class="headerlink" title="使用近似值"></a>使用近似值</h5><p>有些业务场景并不要求完全精确count值，此时可以用近似值来代替，EXPLAIN出来的优化器估算的行数就是一个不粗的近似值，执行explain并不需要真正的去执行查询</p>
<h5 id="更复杂的优化"><a href="#更复杂的优化" class="headerlink" title="更复杂的优化"></a>更复杂的优化</h5><p>在mysql层面还能做的就只有覆盖索引扫描，如果还不够，就需要考虑修改应用的架构，可以增加汇总表，或者增加外部缓存系统</p>
<h4 id="优化关联查询"><a href="#优化关联查询" class="headerlink" title="优化关联查询"></a>优化关联查询</h4><ul>
<li>确保on或者using字句中的列上有索引</li>
<li>确保任何的group by和order by中的表达式只设计到一个表中的列</li>
<li>当升级mysql时需要注意关联语法、运算符优先级其他可能会发生变化的地方</li>
</ul>
<h4 id="优化子查询"><a href="#优化子查询" class="headerlink" title="优化子查询"></a>优化子查询</h4><p>子查询尽可能使用关联查询代替</p>
<h4 id="优化group-by和distinct"><a href="#优化group-by和distinct" class="headerlink" title="优化group by和distinct"></a>优化group by和distinct</h4><p>使用索引优化是最有效的优化方法</p>
<p>在mysql中，当无法使用索引的时候，group by使用两种策略来完成：使用临时表或者文件排序来左分组</p>
<p>如果需要对关联查询左分组，并且是按照查找表中的某个列进行分组，那么通常采用查找表的标识列分组的效率会比其他列更好</p>
<h5 id="优化group-by-with-rollup"><a href="#优化group-by-with-rollup" class="headerlink" title="优化group  by with rollup"></a>优化group  by with rollup</h5><p>分组查询的一个变种就是要求mysql对返回的分组结果在做一次超级聚合，很多时候建议在应用中实现超级聚合</p>
<h4 id="优化limit分页"><a href="#优化limit分页" class="headerlink" title="优化limit分页"></a>优化limit分页</h4><p>优化分页查询的一个最简单的办法就是尽可能的使用索引覆盖扫描，而不是查询所有的列，然后根据需要左一次关联操作在返回所需的列，对于偏移量很大的时候，这样做的效率提升非常大</p>
<p>比如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> file_id,description <span class="keyword">from</span> <span class="keyword">file</span> <span class="keyword">order</span> <span class="keyword">by</span> title <span class="keyword">limit</span> <span class="number">50</span>,<span class="number">5</span></span>
</pre></td></tr></table></figure></p>
<p>最好改写成以下语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> file_id,description </span>
<span class="line"><span class="keyword">from</span> <span class="keyword">file</span> </span>
<span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> (</span>
<span class="line">    <span class="keyword">select</span> file_id </span>
<span class="line">    <span class="keyword">from</span> <span class="keyword">file</span></span>
<span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> title</span>
<span class="line">    <span class="keyword">limit</span> <span class="number">50</span>,<span class="number">5</span></span>
<span class="line">    )<span class="keyword">as</span> lim <span class="keyword">using</span>(file_id)</span>
</pre></td></tr></table></figure></p>
<p>这里的延迟关联将会大大提升查询效率，它让mysql扫描尽可能少的页面，获取需要访问的记录了后在根据关联列在回到原表查询需要的所有列</p>
<h4 id="优化sql-calc-found-rows"><a href="#优化sql-calc-found-rows" class="headerlink" title="优化sql_calc_found_rows"></a>优化sql_calc_found_rows</h4><p>分页的时候，另一个常用的技巧时在limit语句中加上sql_calc_found_rows提示(hint)，这样就可以获得去掉limit以后的满足条件的行数，因此可以作为分页的总数</p>
<h4 id="优化union查询"><a href="#优化union查询" class="headerlink" title="优化union查询"></a>优化union查询</h4><p>mysql总是通过创建并填充临时表的方式来执行union查询，因此很多优化策略在union查询中都无法使用。</p>
<p>除非确实需要服务器消除重复的行，否则就一定要使用union all，如果没有all关键字，mysql会给临时表加上distinct选项，这回导致对整个临时表的数据做唯一性检查</p>
<h4 id="使用用户自定义变量"><a href="#使用用户自定义变量" class="headerlink" title="使用用户自定义变量"></a>使用用户自定义变量</h4><p>在以下场景不能使用用户自定义变量</p>
<ul>
<li>使用自定义变量的查询，无法使用查询缓存</li>
<li>不能在使用常量或者标识符的地方使用自定义变量，</li>
<li>用户自定义变量的生命周期是在一个连接中游戏哦啊，所以不能用他们来左连接中的通信</li>
<li>如果使用连接池或者使用持久化连接，自定义变脸可能让看起来毫无关系的代码发生交互</li>
<li>不能显示的声明自定义变量的类型</li>
<li>mysql优化器在某些场景下可能会将这些变量优化掉</li>
<li>赋值的顺序和赋值的时间点不总是固定的</li>
<li>赋值符号:=的优先级非常低</li>
<li>使用未定义变量不会产生任何语法错误</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>上述测试在<strong>ubuntu16.04 lts</strong> <strong>jdk1.8</strong> <strong>spring boot 1.5.6.RELEASE</strong>中成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HttpClient工具类]]></title>
      <url>/2018/04/01/httpclientutil/</url>
      <content type="html"><![CDATA[<p>基于restTemplate的httpClient通用工具类。</p>
<a id="more"></a>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
<span class="line">86</span>
<span class="line">87</span>
<span class="line">88</span>
<span class="line">89</span>
<span class="line">90</span>
<span class="line">91</span>
<span class="line">92</span>
<span class="line">93</span>
<span class="line">94</span>
<span class="line">95</span>
<span class="line">96</span>
<span class="line">97</span>
<span class="line">98</span>
<span class="line">99</span>
<span class="line">100</span>
<span class="line">101</span>
<span class="line">102</span>
<span class="line">103</span>
<span class="line">104</span>
<span class="line">105</span>
<span class="line">106</span>
<span class="line">107</span>
<span class="line">108</span>
<span class="line">109</span>
<span class="line">110</span>
<span class="line">111</span>
<span class="line">112</span>
<span class="line">113</span>
<span class="line">114</span>
<span class="line">115</span>
<span class="line">116</span>
<span class="line">117</span>
<span class="line">118</span>
<span class="line">119</span>
<span class="line">120</span>
<span class="line">121</span>
<span class="line">122</span>
<span class="line">123</span>
<span class="line">124</span>
<span class="line">125</span>
<span class="line">126</span>
<span class="line">127</span>
<span class="line">128</span>
<span class="line">129</span>
<span class="line">130</span>
<span class="line">131</span>
<span class="line">132</span>
<span class="line">133</span>
<span class="line">134</span>
<span class="line">135</span>
<span class="line">136</span>
<span class="line">137</span>
<span class="line">138</span>
<span class="line">139</span>
<span class="line">140</span>
<span class="line">141</span>
<span class="line">142</span>
<span class="line">143</span>
<span class="line">144</span>
<span class="line">145</span>
<span class="line">146</span>
<span class="line">147</span>
<span class="line">148</span>
<span class="line">149</span>
<span class="line">150</span>
<span class="line">151</span>
<span class="line">152</span>
<span class="line">153</span>
<span class="line">154</span>
<span class="line">155</span>
<span class="line">156</span>
<span class="line">157</span>
<span class="line">158</span>
<span class="line">159</span>
<span class="line">160</span>
<span class="line">161</span>
<span class="line">162</span>
<span class="line">163</span>
<span class="line">164</span>
<span class="line">165</span>
<span class="line">166</span>
<span class="line">167</span>
<span class="line">168</span>
<span class="line">169</span>
<span class="line">170</span>
<span class="line">171</span>
<span class="line">172</span>
<span class="line">173</span>
<span class="line">174</span>
<span class="line">175</span>
<span class="line">176</span>
<span class="line">177</span>
<span class="line">178</span>
<span class="line">179</span>
<span class="line">180</span>
<span class="line">181</span>
<span class="line">182</span>
<span class="line">183</span>
<span class="line">184</span>
<span class="line">185</span>
<span class="line">186</span>
<span class="line">187</span>
<span class="line">188</span>
<span class="line">189</span>
<span class="line">190</span>
<span class="line">191</span>
<span class="line">192</span>
<span class="line">193</span>
<span class="line">194</span>
<span class="line">195</span>
<span class="line">196</span>
<span class="line">197</span>
<span class="line">198</span>
<span class="line">199</span>
<span class="line">200</span>
<span class="line">201</span>
<span class="line">202</span>
<span class="line">203</span>
<span class="line">204</span>
<span class="line">205</span>
<span class="line">206</span>
<span class="line">207</span>
<span class="line">208</span>
<span class="line">209</span>
<span class="line">210</span>
<span class="line">211</span>
<span class="line">212</span>
<span class="line">213</span>
<span class="line">214</span>
<span class="line">215</span>
<span class="line">216</span>
<span class="line">217</span>
<span class="line">218</span>
<span class="line">219</span>
<span class="line">220</span>
<span class="line">221</span>
<span class="line">222</span>
<span class="line">223</span>
<span class="line">224</span>
<span class="line">225</span>
<span class="line">226</span>
<span class="line">227</span>
<span class="line">228</span>
<span class="line">229</span>
<span class="line">230</span>
<span class="line">231</span>
<span class="line">232</span>
<span class="line">233</span>
<span class="line">234</span>
<span class="line">235</span>
<span class="line">236</span>
<span class="line">237</span>
<span class="line">238</span>
<span class="line">239</span>
<span class="line">240</span>
<span class="line">241</span>
<span class="line">242</span>
<span class="line">243</span>
<span class="line">244</span>
<span class="line">245</span>
<span class="line">246</span>
<span class="line">247</span>
<span class="line">248</span>
<span class="line">249</span>
<span class="line">250</span>
<span class="line">251</span>
<span class="line">252</span>
<span class="line">253</span>
<span class="line">254</span>
<span class="line">255</span>
<span class="line">256</span>
<span class="line">257</span>
<span class="line">258</span>
<span class="line">259</span>
<span class="line">260</span>
<span class="line">261</span>
<span class="line">262</span>
<span class="line">263</span>
<span class="line">264</span>
<span class="line">265</span>
<span class="line">266</span>
<span class="line">267</span>
<span class="line">268</span>
<span class="line">269</span>
<span class="line">270</span>
<span class="line">271</span>
<span class="line">272</span>
<span class="line">273</span>
<span class="line">274</span>
<span class="line">275</span>
<span class="line">276</span>
<span class="line">277</span>
<span class="line">278</span>
<span class="line">279</span>
<span class="line">280</span>
<span class="line">281</span>
<span class="line">282</span>
<span class="line">283</span>
<span class="line">284</span>
<span class="line">285</span>
<span class="line">286</span>
<span class="line">287</span>
<span class="line">288</span>
<span class="line">289</span>
<span class="line">290</span>
<span class="line">291</span>
<span class="line">292</span>
<span class="line">293</span>
<span class="line">294</span>
<span class="line">295</span>
<span class="line">296</span>
<span class="line">297</span>
<span class="line">298</span>
<span class="line">299</span>
<span class="line">300</span>
<span class="line">301</span>
<span class="line">302</span>
<span class="line">303</span>
<span class="line">304</span>
<span class="line">305</span>
<span class="line">306</span>
<span class="line">307</span>
<span class="line">308</span>
<span class="line">309</span>
<span class="line">310</span>
<span class="line">311</span>
<span class="line">312</span>
<span class="line">313</span>
<span class="line">314</span>
<span class="line">315</span>
<span class="line">316</span>
<span class="line">317</span>
<span class="line">318</span>
<span class="line">319</span>
<span class="line">320</span>
<span class="line">321</span>
<span class="line">322</span>
<span class="line">323</span>
<span class="line">324</span>
<span class="line">325</span>
<span class="line">326</span>
<span class="line">327</span>
<span class="line">328</span>
<span class="line">329</span>
<span class="line">330</span>
<span class="line">331</span>
<span class="line">332</span>
<span class="line">333</span>
<span class="line">334</span>
<span class="line">335</span>
<span class="line">336</span>
<span class="line">337</span>
<span class="line">338</span>
<span class="line">339</span>
<span class="line">340</span>
<span class="line">341</span>
<span class="line">342</span>
<span class="line">343</span>
</pre></td><td class="code"><pre><span class="line"></span>
<span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span>
<span class="line"><span class="keyword">import</span> org.springframework.http.*;</span>
<span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.client.HttpClientErrorException;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span>
<span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManager;</span>
<span class="line"><span class="keyword">import</span> javax.net.ssl.X509TrustManager;</span>
<span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span>
<span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span>
<span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span>
<span class="line"><span class="keyword">import</span> java.util.HashMap;</span>
<span class="line"><span class="keyword">import</span> java.util.Map;</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.http.HttpMethod.*;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * http client工具类</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/04/01</span>
<span class="line"> */</span></span>
<span class="line"><span class="meta">@Slf</span>4j</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientUtil</span> </span>&#123;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 携带请求头不携带get参数的get方法</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> url</span>
<span class="line">     * <span class="doctag">@param</span> headerMap</span>
<span class="line">     * <span class="doctag">@param</span> clazz</span>
<span class="line">     * <span class="doctag">@param</span> &lt;T&gt;</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">doGetWithHeader</span><span class="params">(String url,</span>
<span class="line">                                        Map&lt;String, String&gt; headerMap,</span>
<span class="line">                                        Class&lt;T&gt; clazz)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> get(url, headerMap, <span class="keyword">new</span> HashMap&lt;&gt;(), clazz);</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 携带请求头携带get参数的get方法</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> url</span>
<span class="line">     * <span class="doctag">@param</span> headerMap</span>
<span class="line">     * <span class="doctag">@param</span> paramMap</span>
<span class="line">     * <span class="doctag">@param</span> clazz</span>
<span class="line">     * <span class="doctag">@param</span> &lt;T&gt;</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">doGetWithHeader</span><span class="params">(String url,</span>
<span class="line">                                        Map&lt;String, String&gt; headerMap,</span>
<span class="line">                                        Map&lt;String, String&gt; paramMap,</span>
<span class="line">                                        Class&lt;T&gt; clazz)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> get(url, headerMap, paramMap, clazz);</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 不携带请求头不携带get参数的get方法</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> url</span>
<span class="line">     * <span class="doctag">@param</span> clazz</span>
<span class="line">     * <span class="doctag">@param</span> &lt;T&gt;</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">doGet</span><span class="params">(String url,</span>
<span class="line">                              Class&lt;T&gt; clazz)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> get(url, <span class="keyword">new</span> HashMap&lt;&gt;(), <span class="keyword">new</span> HashMap&lt;&gt;(), clazz);</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 不携带请求头携带get参数的get方法</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> url</span>
<span class="line">     * <span class="doctag">@param</span> paramMap</span>
<span class="line">     * <span class="doctag">@param</span> clazz</span>
<span class="line">     * <span class="doctag">@param</span> &lt;T&gt;</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">doGet</span><span class="params">(String url,</span>
<span class="line">                              Map&lt;String, String&gt; paramMap,</span>
<span class="line">                              Class&lt;T&gt; clazz)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> get(url, <span class="keyword">new</span> HashMap&lt;&gt;(), paramMap, clazz);</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(String url,</span>
<span class="line">                             Map&lt;String, String&gt; headerMap,</span>
<span class="line">                             Map&lt;String, String&gt; paramMap,</span>
<span class="line">                             Class&lt;T&gt; clazz)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">if</span> (!paramMap.isEmpty()) &#123;</span>
<span class="line">            StringBuilder urlBuilder = <span class="keyword">new</span> StringBuilder(url);</span>
<span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : paramMap.entrySet()) &#123;</span>
<span class="line">                String name = entry.getKey();</span>
<span class="line">                urlBuilder.append(<span class="string">"?"</span>).append(name).append(<span class="string">"=&#123;"</span>).append(name).append(<span class="string">"&#125;"</span>);</span>
<span class="line">            &#125;</span>
<span class="line">            url = urlBuilder.toString();</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="comment">// 设置请求头</span></span>
<span class="line">        HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span>
<span class="line">        MediaType type = MediaType.parseMediaType(<span class="string">"application/json; charset=UTF-8"</span>);</span>
<span class="line">        headers.setContentType(type);</span>
<span class="line"></span>
<span class="line">        <span class="keyword">if</span> (!headerMap.isEmpty()) &#123;</span>
<span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : headerMap.entrySet()) &#123;</span>
<span class="line">                headers.add(entry.getKey(), entry.getValue());</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        HttpEntity&lt;String&gt; entity = <span class="keyword">new</span> HttpEntity&lt;&gt;(<span class="keyword">null</span>, headers);</span>
<span class="line"></span>
<span class="line">        ResponseEntity&lt;T&gt; responseEntity = <span class="keyword">null</span>;</span>
<span class="line"></span>
<span class="line">        <span class="keyword">try</span> &#123;</span>
<span class="line">            responseEntity = restTemplate.exchange(url, GET, entity, clazz, paramMap);</span>
<span class="line">        &#125; <span class="keyword">catch</span> (HttpClientErrorException e) &#123;</span>
<span class="line">            log.error(<span class="string">"url=&#123;&#125;,request=&#123;&#125;请求出错"</span>, url, entity);</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">if</span> (responseEntity == <span class="keyword">null</span>) &#123;</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">return</span> responseEntity.getBody();</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 携带header的json post请求</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> &lt;T&gt;</span>
<span class="line">     * <span class="doctag">@param</span> url</span>
<span class="line">     * <span class="doctag">@param</span> headerMap</span>
<span class="line">     * <span class="doctag">@param</span> requestJson</span>
<span class="line">     * <span class="doctag">@param</span> clazz</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">doPostJsonWithHeader</span><span class="params">(String url,</span>
<span class="line">                                             Map&lt;String, String&gt; headerMap,</span>
<span class="line">                                             String requestJson,</span>
<span class="line">                                             Class&lt;T&gt; clazz)</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">        <span class="keyword">return</span> postJson(url, headerMap, requestJson, clazz);</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 不携带header的json post请求</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> url</span>
<span class="line">     * <span class="doctag">@param</span> requestJson</span>
<span class="line">     * <span class="doctag">@param</span> clazz</span>
<span class="line">     * <span class="doctag">@param</span> &lt;T&gt;</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">doPostJson</span><span class="params">(String url,</span>
<span class="line">                                   String requestJson,</span>
<span class="line">                                   Class&lt;T&gt; clazz)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> postJson(url, <span class="keyword">new</span> HashMap&lt;&gt;(), requestJson, clazz);</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * post请求</span>
<span class="line">     * &lt;p&gt;</span>
<span class="line">     * json类型</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> url</span>
<span class="line">     * <span class="doctag">@param</span> headerMap</span>
<span class="line">     * <span class="doctag">@param</span> requestJson</span>
<span class="line">     * <span class="doctag">@param</span> clazz</span>
<span class="line">     * <span class="doctag">@param</span> &lt;T&gt;</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">postJson</span><span class="params">(String url,</span>
<span class="line">                                  Map&lt;String, String&gt; headerMap,</span>
<span class="line">                                  String requestJson,</span>
<span class="line">                                  Class&lt;T&gt; clazz)</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">        <span class="comment">//        //采用绕过验证的方式处理https请求</span></span>
<span class="line"><span class="comment">//        SSLContext sslContext = createIgnoreVerifySSL();</span></span>
<span class="line"><span class="comment">//</span></span>
<span class="line"><span class="comment">//        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);</span></span>
<span class="line"><span class="comment">//</span></span>
<span class="line"><span class="comment">//        CloseableHttpClient httpClient = HttpClients.custom()</span></span>
<span class="line"><span class="comment">//                .setSSLSocketFactory(csf)</span></span>
<span class="line"><span class="comment">//                .build();</span></span>
<span class="line"><span class="comment">//</span></span>
<span class="line"><span class="comment">//        HttpComponentsClientHttpRequestFactory requestFactory =</span></span>
<span class="line"><span class="comment">//                new HttpComponentsClientHttpRequestFactory();</span></span>
<span class="line"><span class="comment">//</span></span>
<span class="line"><span class="comment">//        requestFactory.setHttpClient(httpClient);</span></span>
<span class="line"><span class="comment">//</span></span>
<span class="line"><span class="comment">//        RestTemplate restTemplate = new RestTemplate(requestFactory);</span></span>
<span class="line"></span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        <span class="comment">// 设置请求头</span></span>
<span class="line">        HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span>
<span class="line">        <span class="comment">// 设置请求类型为json</span></span>
<span class="line">        MediaType type = MediaType.parseMediaType(<span class="string">"application/json; charset=UTF-8"</span>);</span>
<span class="line">        headers.setContentType(type);</span>
<span class="line">        <span class="keyword">if</span> (!headerMap.isEmpty()) &#123;</span>
<span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : headerMap.entrySet()) &#123;</span>
<span class="line">                headers.add(entry.getKey(), entry.getValue());</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        HttpEntity&lt;String&gt; entity = <span class="keyword">new</span> HttpEntity&lt;&gt;(requestJson, headers);</span>
<span class="line"></span>
<span class="line">        ResponseEntity&lt;T&gt; responseEntity = <span class="keyword">null</span>;</span>
<span class="line"></span>
<span class="line">        <span class="keyword">try</span> &#123;</span>
<span class="line">            responseEntity = restTemplate.postForEntity(url, entity, clazz);</span>
<span class="line">        &#125; <span class="keyword">catch</span> (HttpClientErrorException e) &#123;</span>
<span class="line">            log.error(<span class="string">"url=&#123;&#125;,request=&#123;&#125;请求出错"</span>, url, entity);</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">if</span> (responseEntity == <span class="keyword">null</span>) &#123;</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">return</span> responseEntity.getBody();</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 表单提交post请求</span>
<span class="line">     * &lt;p&gt;</span>
<span class="line">     * 响应正常时，返回对象，否则返回null</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> url      url</span>
<span class="line">     * <span class="doctag">@param</span> paramMap 表单参数</span>
<span class="line">     * <span class="doctag">@param</span> clazz</span>
<span class="line">     * <span class="doctag">@param</span> &lt;T&gt;</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">doPostForm</span><span class="params">(String url,</span>
<span class="line">                                   MultiValueMap&lt;String, String&gt; paramMap,</span>
<span class="line">                                   Class&lt;T&gt; clazz)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> postForm(url, <span class="keyword">new</span> HashMap&lt;&gt;(), paramMap, clazz);</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 表单提交并携带header</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> url</span>
<span class="line">     * <span class="doctag">@param</span> headerMap</span>
<span class="line">     * <span class="doctag">@param</span> paramMap</span>
<span class="line">     * <span class="doctag">@param</span> clazz</span>
<span class="line">     * <span class="doctag">@param</span> &lt;T&gt;</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">doPostFormWithHeader</span><span class="params">(String url,</span>
<span class="line">                                             Map&lt;String, String&gt; headerMap,</span>
<span class="line">                                             MultiValueMap&lt;String, String&gt; paramMap,</span>
<span class="line">                                             Class&lt;T&gt; clazz)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> postForm(url, headerMap, paramMap, clazz);</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 表单提交</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> url</span>
<span class="line">     * <span class="doctag">@param</span> headerMap</span>
<span class="line">     * <span class="doctag">@param</span> paramMap</span>
<span class="line">     * <span class="doctag">@param</span> clazz</span>
<span class="line">     * <span class="doctag">@param</span> &lt;T&gt;</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">postForm</span><span class="params">(String url,</span>
<span class="line">                                  Map&lt;String, String&gt; headerMap,</span>
<span class="line">                                  MultiValueMap&lt;String, String&gt; paramMap,</span>
<span class="line">                                  Class&lt;T&gt; clazz)</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line"></span>
<span class="line">        <span class="comment">// 设置请求头为表单</span></span>
<span class="line">        HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span>
<span class="line">        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);</span>
<span class="line">        <span class="keyword">if</span> (!headerMap.isEmpty()) &#123;</span>
<span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : headerMap.entrySet()) &#123;</span>
<span class="line">                headers.add(entry.getKey(), entry.getValue());</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="comment">// 构造请求体</span></span>
<span class="line">        HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; request = <span class="keyword">new</span> HttpEntity&lt;&gt;(paramMap, headers);</span>
<span class="line"></span>
<span class="line">        ResponseEntity&lt;T&gt; response = <span class="keyword">null</span>;</span>
<span class="line">        <span class="keyword">try</span> &#123;</span>
<span class="line">            response = restTemplate.postForEntity(url, request, clazz);</span>
<span class="line">        &#125; <span class="keyword">catch</span> (HttpClientErrorException e) &#123;</span>
<span class="line">            log.error(<span class="string">"url=&#123;&#125;,request=&#123;&#125;请求出错"</span>, url, request);</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">if</span> (response == <span class="keyword">null</span>) &#123;</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">return</span> response.getBody();</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 绕过验证</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span>
<span class="line">     * <span class="doctag">@throws</span> KeyManagementException</span>
<span class="line">     */</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SSLContext <span class="title">createIgnoreVerifySSL</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException, KeyManagementException </span>&#123;</span>
<span class="line">        SSLContext sc = SSLContext.getInstance(<span class="string">"SSLv3"</span>);</span>
<span class="line"></span>
<span class="line">        <span class="comment">// 实现一个X509TrustManager接口，用于绕过验证，不用修改里面的方法</span></span>
<span class="line">        X509TrustManager trustManager = <span class="keyword">new</span> X509TrustManager() &#123;</span>
<span class="line">            <span class="meta">@Override</span></span>
<span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(</span>
<span class="line">                    java.security.cert.X509Certificate[] paramArrayOfX509Certificate,</span>
<span class="line">                    String paramString)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span>
<span class="line">            &#125;</span>
<span class="line"></span>
<span class="line">            <span class="meta">@Override</span></span>
<span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(</span>
<span class="line">                    java.security.cert.X509Certificate[] paramArrayOfX509Certificate,</span>
<span class="line">                    String paramString)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span>
<span class="line">            &#125;</span>
<span class="line"></span>
<span class="line">            <span class="meta">@Override</span></span>
<span class="line">            <span class="keyword">public</span> java.security.cert.X509Certificate[] getAcceptedIssuers() &#123;</span>
<span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;;</span>
<span class="line"></span>
<span class="line">        sc.init(<span class="keyword">null</span>, <span class="keyword">new</span> TrustManager[]&#123;trustManager&#125;, <span class="keyword">null</span>);</span>
<span class="line">        <span class="keyword">return</span> sc;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<ul>
<li>上述测试在<strong>ubuntu16.04 lts</strong> <strong>jdk1.8</strong> <strong>spring boot 1.5.6.RELEASE</strong>中成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot使用七牛云的oss(对象存储)文件上传]]></title>
      <url>/2018/03/14/qiniu-oss/</url>
      <content type="html"><![CDATA[<p>在项目中我们经常要使用到oss，我们可以使用各大云平台的对象存储，这里就不一一介绍，使用oss的好处也不多说了，毕竟真正的大型项目不可能将用户上传的图片文件等存到项目运行服务器上，要么使用一台服务器专门作为文件为服务器，或者就是使用本文要介绍的oss。</p>
<a id="more"></a>
<p>本文使用七牛云的解决方案，关于公司的介绍等可以自行了解，七牛云对个人用户提供不小的对象存储空间，很适合个人开发者进行开发。</p>
<h2 id="七牛云oss"><a href="#七牛云oss" class="headerlink" title="七牛云oss"></a>七牛云oss</h2><p>通过查阅七牛云文档可以了解到，官方为开发者提供了完善的文档和针对各种语言提供了开箱即用的sdk，我们可以很方便的在项目中使用它。</p>
<p>这里介绍一下在spring boot项目中与七牛云oss的集成。</p>
<h3 id="在项目的pom-xml文件中引入七牛云的sdk"><a href="#在项目的pom-xml文件中引入七牛云的sdk" class="headerlink" title="在项目的pom.xml文件中引入七牛云的sdk"></a>在项目的pom.xml文件中引入七牛云的sdk</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--七牛云sdk--&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qiniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>qiniu-java-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>[7.2.0, 7.2.99]<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
</pre></td></tr></table></figure>
<h3 id="编写一个配置文件类接收自定义参数"><a href="#编写一个配置文件类接收自定义参数" class="headerlink" title="编写一个配置文件类接收自定义参数"></a>编写一个配置文件类接收自定义参数</h3><p>为了让配置变得更容易调整，我们这里将七牛云账户相关的参数写在<strong>application.yml</strong>中，通过查阅文档可以知道想要上传需要<strong>accessKey</strong> <strong>secretKey</strong>  <strong>bucket</strong>(存储空间名)三个参数。为了方便从七牛云取出图片，我们还需要cdn的地址我们还可以封装一个<strong>cdnPrefix</strong></p>
<ol>
<li>这里在yml文件中配置如下<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="attr">qiniu:</span></span>
<span class="line"><span class="attr">  accessKey:</span> <span class="string">accessKey</span></span>
<span class="line"><span class="attr">  secretKey:</span> <span class="string">secretKey</span></span>
<span class="line"><span class="attr">  bucket:</span> <span class="string">bucket</span></span>
<span class="line"><span class="attr">  cdnPrefix:</span> <span class="string">cdn</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>这里的四个参数请按自己的七牛云账户里面的信息填写。</p>
<ol>
<li>编写QiNiuProperties类接收自定义参数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// QiNiuProperties.java</span></span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/03/13</span>
<span class="line"> */</span></span>
<span class="line"><span class="meta">@Component</span></span>
<span class="line"><span class="meta">@Data</span></span>
<span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"qiniu"</span>)</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiNiuProperties</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> String accessKey;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> String secretKey;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> String bucket;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> String cdnPrefix;</span>
<span class="line"></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>用这种方式接收参数请注意属性的大小写需要和yml文件中一致</p>
<h3 id="编写上传文件配置类"><a href="#编写上传文件配置类" class="headerlink" title="编写上传文件配置类"></a>编写上传文件配置类</h3><p>我们需要编写一个总的文件上传配置类，来限定文件上传大小路径等一些参数，然后将七牛云的配置添加到里面</p>
<ol>
<li><p>yml文件中配置如下</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span>
<span class="line"><span class="attr">  http:</span></span>
<span class="line">      <span class="comment"># multipart config</span></span>
<span class="line"><span class="attr">    multipart:</span></span>
<span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span>
<span class="line"><span class="attr">      location:</span> <span class="string">/home/earthchen/study/spring/SpringBootProjects/search-house/tmp</span></span>
<span class="line"><span class="attr">      file-size-threshold:</span> <span class="number">5</span><span class="string">MB</span></span>
<span class="line"><span class="attr">      max-request-size:</span> <span class="number">20</span><span class="string">MB</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>上传文件配置类内容如下<br>这里就不对内容进行解释了，需要注意的地方都有注释</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
<span class="line">86</span>
<span class="line">87</span>
<span class="line">88</span>
<span class="line">89</span>
<span class="line">90</span>
<span class="line">91</span>
<span class="line">92</span>
<span class="line">93</span>
<span class="line">94</span>
<span class="line">95</span>
<span class="line">96</span>
<span class="line">97</span>
<span class="line">98</span>
<span class="line">99</span>
<span class="line">100</span>
<span class="line">101</span>
<span class="line">102</span>
<span class="line">103</span>
<span class="line">104</span>
<span class="line">105</span>
<span class="line">106</span>
<span class="line">107</span>
<span class="line">108</span>
<span class="line">109</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.MultipartConfigElement;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span>
<span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span>
<span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span>
<span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span>
<span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.MultipartProperties;</span>
<span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span>
<span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span>
<span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartResolver;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.multipart.support.StandardServletMultipartResolver;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.servlet.DispatcherServlet;</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span>
<span class="line"><span class="keyword">import</span> com.qiniu.common.Zone;</span>
<span class="line"><span class="keyword">import</span> com.qiniu.storage.BucketManager;</span>
<span class="line"><span class="keyword">import</span> com.qiniu.storage.UploadManager;</span>
<span class="line"><span class="keyword">import</span> com.qiniu.util.Auth;</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/03/13</span>
<span class="line"> */</span></span>
<span class="line"><span class="meta">@Configuration</span></span>
<span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;Servlet.class, StandardServletMultipartResolver.class, MultipartConfigElement.class&#125;)</span>
<span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.http.multipart"</span>, name = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span>
<span class="line"><span class="meta">@EnableConfigurationProperties</span>(MultipartProperties.class)</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebFileUploadConfig</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 七牛云配置</span>
<span class="line">     */</span></span>
<span class="line">    <span class="meta">@Autowired</span></span>
<span class="line">    <span class="keyword">private</span> QiNiuProperties qiNiuProperties;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MultipartProperties multipartProperties;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebFileUploadConfig</span><span class="params">(MultipartProperties multipartProperties)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">this</span>.multipartProperties = multipartProperties;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 上传配置</span>
<span class="line">     */</span></span>
<span class="line">    <span class="meta">@Bean</span></span>
<span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> MultipartConfigElement <span class="title">multipartConfigElement</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.multipartProperties.createMultipartConfig();</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 注册解析器</span>
<span class="line">     */</span></span>
<span class="line">    <span class="meta">@Bean</span>(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span>
<span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(MultipartResolver.class)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> StandardServletMultipartResolver <span class="title">multipartResolver</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        StandardServletMultipartResolver multipartResolver = <span class="keyword">new</span> StandardServletMultipartResolver();</span>
<span class="line">        multipartResolver.setResolveLazily(<span class="keyword">this</span>.multipartProperties.isResolveLazily());</span>
<span class="line">        <span class="keyword">return</span> multipartResolver;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 华东机房</span>
<span class="line">     */</span></span>
<span class="line">    <span class="meta">@Bean</span></span>
<span class="line">    <span class="keyword">public</span> com.qiniu.storage.<span class="function">Configuration <span class="title">qiniuConfig</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> com.qiniu.storage.Configuration(Zone.zone0());</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 构建一个七牛上传工具实例</span>
<span class="line">     */</span></span>
<span class="line">    <span class="meta">@Bean</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> UploadManager <span class="title">uploadManager</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UploadManager(qiniuConfig());</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 认证信息实例</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="meta">@Bean</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> Auth <span class="title">auth</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> Auth.create(qiNiuProperties.getAccessKey(),</span>
<span class="line">                qiNiuProperties.getSecretKey());</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 构建七牛空间管理实例</span>
<span class="line">     */</span></span>
<span class="line">    <span class="meta">@Bean</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> BucketManager <span class="title">bucketManager</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BucketManager(auth(), qiniuConfig());</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 配置gson为json解析工具</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="meta">@Bean</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> Gson <span class="title">gson</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Gson();</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>有了以上这些配置，七牛云oss就已经配置完成。为了方便使用我们可以对sdk在进行一次封装编写一个service</p>
<h3 id="编写七牛云service"><a href="#编写七牛云service" class="headerlink" title="编写七牛云service"></a>编写七牛云service</h3><ol>
<li><p>七牛云上传服务接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span>
<span class="line"><span class="keyword">import</span> java.io.InputStream;</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> com.qiniu.common.QiniuException;</span>
<span class="line"><span class="keyword">import</span> com.qiniu.http.Response;</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * 七牛云服务</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/03/13</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IQiNiuService</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 上传文件</span>
<span class="line">     * &lt;p&gt;</span>
<span class="line">     * (文件上传)</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> file</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     * <span class="doctag">@throws</span> QiniuException</span>
<span class="line">     */</span></span>
<span class="line">    <span class="function">Response <span class="title">uploadFile</span><span class="params">(File file)</span> <span class="keyword">throws</span> QiniuException</span>;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 上传文件</span>
<span class="line">     * &lt;p&gt;</span>
<span class="line">     * (文件流上传)</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> inputStream</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     * <span class="doctag">@throws</span> QiniuException</span>
<span class="line">     */</span></span>
<span class="line">    <span class="function">Response <span class="title">uploadFile</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> QiniuException</span>;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 删除</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> key</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     * <span class="doctag">@throws</span> QiniuException</span>
<span class="line">     */</span></span>
<span class="line">    <span class="function">Response <span class="title">delete</span><span class="params">(String key)</span> <span class="keyword">throws</span> QiniuException</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>编写实现类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
</pre></td><td class="code"><pre><span class="line"></span>
<span class="line"><span class="keyword">import</span> java.io.File;</span>
<span class="line"><span class="keyword">import</span> java.io.InputStream;</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span>
<span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span>
<span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> com.qiniu.common.QiniuException;</span>
<span class="line"><span class="keyword">import</span> com.qiniu.http.Response;</span>
<span class="line"><span class="keyword">import</span> com.qiniu.storage.BucketManager;</span>
<span class="line"><span class="keyword">import</span> com.qiniu.storage.UploadManager;</span>
<span class="line"><span class="keyword">import</span> com.qiniu.util.Auth;</span>
<span class="line"><span class="keyword">import</span> com.qiniu.util.StringMap;</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/03/13</span>
<span class="line"> */</span></span>
<span class="line"><span class="meta">@Service</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiNiuServiceImpl</span> <span class="keyword">implements</span> <span class="title">IQiNiuService</span>, <span class="title">InitializingBean</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Autowired</span></span>
<span class="line">    <span class="keyword">private</span> UploadManager uploadManager;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Autowired</span></span>
<span class="line">    <span class="keyword">private</span> BucketManager bucketManager;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Autowired</span></span>
<span class="line">    <span class="keyword">private</span> Auth auth;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Autowired</span></span>
<span class="line">    <span class="keyword">private</span> QiNiuProperties qiNiuProperties;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> StringMap putPolicy;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">uploadFile</span><span class="params">(File file)</span> <span class="keyword">throws</span> QiniuException </span>&#123;</span>
<span class="line">        Response response = <span class="keyword">this</span>.uploadManager.put(file, <span class="keyword">null</span>, getUploadToken());</span>
<span class="line">        <span class="keyword">int</span> retry = <span class="number">0</span>;</span>
<span class="line">        <span class="keyword">while</span> (response.needRetry() &amp;&amp; retry &lt; <span class="number">3</span>) &#123;</span>
<span class="line">            response = <span class="keyword">this</span>.uploadManager.put(file, <span class="keyword">null</span>, getUploadToken());</span>
<span class="line">            retry++;</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">return</span> response;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">uploadFile</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> QiniuException </span>&#123;</span>
<span class="line">        Response response = <span class="keyword">this</span>.uploadManager.put(inputStream, <span class="keyword">null</span>, getUploadToken(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span>
<span class="line">        <span class="keyword">int</span> retry = <span class="number">0</span>;</span>
<span class="line">        <span class="keyword">while</span> (response.needRetry() &amp;&amp; retry &lt; <span class="number">3</span>) &#123;</span>
<span class="line">            response = <span class="keyword">this</span>.uploadManager.put(inputStream, <span class="keyword">null</span>, getUploadToken(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span>
<span class="line">            retry++;</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">return</span> response;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">delete</span><span class="params">(String key)</span> <span class="keyword">throws</span> QiniuException </span>&#123;</span>
<span class="line">        Response response = bucketManager.delete(qiNiuProperties.getBucket(), key);</span>
<span class="line">        <span class="keyword">int</span> retry = <span class="number">0</span>;</span>
<span class="line">        <span class="keyword">while</span> (response.needRetry() &amp;&amp; retry++ &lt; <span class="number">3</span>) &#123;</span>
<span class="line">            response = bucketManager.delete(qiNiuProperties.getBucket(), key);</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">return</span> response;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">        <span class="keyword">this</span>.putPolicy = <span class="keyword">new</span> StringMap();</span>
<span class="line">        putPolicy.put(<span class="string">"returnBody"</span>, <span class="string">"&#123;\"key\":\"$(key)\",\"hash\":\"$(etag)\",\"bucket\":\"$(bucket)\",\"width\":$(imageInfo.width), \"height\":$&#123;imageInfo.height&#125;&#125;"</span>);</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 获取上传凭证</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getUploadToken</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.auth.uploadToken(qiNiuProperties.getBucket(), <span class="keyword">null</span>, <span class="number">3600</span>, putPolicy);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>实现起来很简单，总体来说就是调用一下sdk提供的接口，这里我添加了可以重试三次的逻辑，如果你还需要其他逻辑，可以自行添加</p>
<h3 id="测试文件上传"><a href="#测试文件上传" class="headerlink" title="测试文件上传"></a>测试文件上传</h3><p>编写相关测试类进行测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Assert;</span>
<span class="line"><span class="keyword">import</span> org.junit.Test;</span>
<span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> com.qiniu.common.QiniuException;</span>
<span class="line"><span class="keyword">import</span> com.qiniu.http.Response;</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * <span class="doctag">@author</span>: EarthChen</span>
<span class="line"> * <span class="doctag">@date</span>: 2018/03/13</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IQiNiuServiceTest</span> <span class="keyword">extends</span> <span class="title">ApplicationTests</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Autowired</span></span>
<span class="line">    <span class="keyword">private</span> IQiNiuService qiNiuService;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Test</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        String fileName = <span class="string">"/home/earthchen/study/spring/SpringBootProjects/search-house/tmp/test.png"</span>;</span>
<span class="line">        File file = <span class="keyword">new</span> File(fileName);</span>
<span class="line"></span>
<span class="line">        assertTrue(file.exists());</span>
<span class="line"></span>
<span class="line">        <span class="keyword">try</span> &#123;</span>
<span class="line">            Response response = qiNiuService.uploadFile(file);</span>
<span class="line">            Assert.assertTrue(response.isOK());</span>
<span class="line">        &#125; <span class="keyword">catch</span> (QiniuException e) &#123;</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
</pre></td></tr></table></figure></p>
<p>如果测试用例通过基本就说明成功了，我们还可以去七牛云的web端去查看，去验证。</p>
<p>以上就完成了七牛云的oss，当然如果你想使用腾讯或者阿里的oss请自行翻阅文档</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述测试在<strong>ubuntu16.04 lts</strong> <strong>jdk1.8</strong> <strong>spring boot 1.5.6.RELEASE</strong>中成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用ThreadLocal和ArgumentResolver方便开发]]></title>
      <url>/2018/03/13/requestHolder_and_argumentResolver/</url>
      <content type="html"><![CDATA[<p>在web项目中我们通常都要根据当前用户进行一些操作，如果使用了一些权限框架，比如<strong>spring security</strong>或者<strong>shiro</strong>等，他们都提供了一个获取当前登录的用户的方法，直接调用即可，但是如果不使用相关框架，获取用户就略微显得有些复杂，为了简单，这时候ThreadLocal就能帮到我们了。</p>
<a id="more"></a>
<blockquote>
<p>ThreadLocal提供本地线程变量。这个变量里面的值（通过get方法获取）是和其他线程分割开来的，变量的值只有当前线程能访问到，不像一般的类型比如Person,Student类型的变量，只要访问到声明该变量的对象，即可访问其全部内容，而且各个线程的访问的数据是无差别的</p>
</blockquote>
<p>我们都知道，在web环境中，一个用户的请求是一直在一个线程中的，ThreadLocal刚好能帮助我们做到在第一次登录请求中的时候放入相关参数，比如用户信息，在后续请求中在线程中就可以拿到参数。</p>
<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>这里举一个简单的例子，写一个工具类，把当前用户和当前请求放入ThreadLocal中，并支持存取</p>
<h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestHolder</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;User&gt; userHolder = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;HttpServletRequest&gt; requestHolder = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> </span>&#123;</span>
<span class="line">        userHolder.set(user);</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span>
<span class="line">        requestHolder.set(request);</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getCurrentUser</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> userHolder.get();</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpServletRequest <span class="title">getCurrentRequest</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> requestHolder.get();</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        userHolder.remove();</span>
<span class="line">        requestHolder.remove();</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>如果你还需要更多常用参数，可以继续扩展上述方法。以上工具类，就可以很容易让我们拿到<strong>user</strong>和<strong>request</strong>了。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>由于我们主要目的就是在请求中拿到用户信息和请求的信息，我们可以这样做</p>
<ol>
<li><p>首先在登录成功后，将登录信息放入session或者redis中</p>
</li>
<li><p>编写过滤器，拦截器或者切面等，判断当前用户是否登录(session或redis中是否有用户登录信息)，如果已经登录了，调用以下方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">RequestHolder.add(user);</span>
<span class="line">RequestHolder.add(reqest);</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>将我们需要的参数放入ThreadLocal中，以供后续使用。</p>
<ol>
<li><p>在该请求未关闭之前，我们在其中任意地方可以调用以下方法获取用户信息或当前请求。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前用户</span></span>
<span class="line">RequestHolder.getCurrentUser();</span>
<span class="line"></span>
<span class="line"><span class="comment">// 获取当前请求</span></span>
<span class="line">RequestHolder.getCurrentRequest();</span>
</pre></td></tr></table></figure>
</li>
<li><p>在请求的最后，一般是拦截器或aop的方法后去调用<strong>remove()</strong>去释放资源。这部其实不做也可以，因为请求结束了线程一般会被销毁。本地变量自然也就不存在了。</p>
</li>
</ol>
<h2 id="ArgumentResolver"><a href="#ArgumentResolver" class="headerlink" title="ArgumentResolver"></a>ArgumentResolver</h2><p>使用了ThreadLocal获取当前登录用户的信息已经很方便了，但是如果我们不想每次都调用静态方法<strong>RequestHolder.getCurrentUser()</strong>获取用户信息，在controller层中的方法中拿到用户信息可不可以呢，答案当然是可以。</p>
<p>我们可以编写一个参数解析器，在需要使用的controller方法参数中写上相关参数，就可以更方便的获取参数了。</p>
<h3 id="编写参数解析器"><a href="#编写参数解析器" class="headerlink" title="编写参数解析器"></a>编写参数解析器</h3><p>举个简单的例子，我们这里编写一个<strong>UserArgumentResolver</strong>类并实现<strong>HandlerMethodArgumentResolver</strong>接口的方法。</p>
<p>在<strong>supportsParameter()</strong>方法中配置需要解析的参数(一般是类)</p>
<p>最后在<strong>resolveArgument()</strong>中调用上面编写的<strong>RequestHolder.getCurrentUser()</strong>即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserArgumentResolver</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span>
<span class="line">        Class&lt;?&gt; clazz = parameter.getParameterType();</span>
<span class="line">        <span class="keyword">return</span> clazz == User.class;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer,</span>
<span class="line">                                  NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line"></span>
<span class="line">        <span class="keyword">return</span> RequestHolder.getCurrentUser();</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="在WebConfig中注册参数解析器"><a href="#在WebConfig中注册参数解析器" class="headerlink" title="在WebConfig中注册参数解析器"></a>在WebConfig中注册参数解析器</h3><p>以spring boot的java conf为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Autowired</span></span>
<span class="line">    <span class="keyword">private</span> UserArgumentResolver userArgumentResolver;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> argumentResolvers</span>
<span class="line">     */</span></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> </span>&#123;</span>
<span class="line">        argumentResolvers.add(userArgumentResolver);</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">    ***</span>
<span class="line">    ***</span>
<span class="line">    */</span></span>
<span class="line"></span>
<span class="line">    </span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/xxx"</span>)</span>
<span class="line"><span class="meta">@ResponseBody</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">miaoshaResult</span><span class="params">(User user)</span> </span>&#123;</span>
<span class="line">    <span class="comment">//user.getName();</span></span>
<span class="line">    <span class="comment">// xxx</span></span>
<span class="line">    <span class="keyword">return</span> Result.success();</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>使用上述方式就完成了ThreadLocal和ArgumentResolver的配合，尤其对当前用户这种参数很实用，如果你还有其他需求，可以自行扩展。。。</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述测试在<strong>ubuntu16.04 lts</strong> <strong>jdk1.8</strong> <strong>spring boot 1.5.6.RELEASE</strong>中成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在不被spring容器管理的类中使用ApplicationContext应用上下文bean]]></title>
      <url>/2018/03/13/applicationContextHelper/</url>
      <content type="html"><![CDATA[<p>在我们做项目的时候，经常能遇到不被spring管理的类中要使用相关spring bean，比如自定义过滤器，静态工具类等，相应的也有几种办法，一种是想办法使不被spring容器管理的类让他被spring管理。第二种就是通过应用上下文获取通过<strong>clazz</strong>或者相关bean的<strong>name</strong>获取。第一种一般是添加相关注解即可，所以本文着重介绍一下第二种办法，并提供一个工具类。</p>
<a id="more"></a>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><ol>
<li><p>编写一个ApplicationContextHelper类并实现ApplicationContextAware接口</p>
</li>
<li><p>将应用上下文赋值给声明的静态ApplicationContext对象上，此时就可以拿到应用上下文，也就可以取出你需要的bean</p>
</li>
<li><p>编写静态方法，按照你的需求获取相应的bean</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextHelper</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span>
<span class="line">        applicationContext = context;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 根据类获取bean</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> clazz</span>
<span class="line">     * <span class="doctag">@param</span> &lt;T&gt;</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">popBean</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">if</span> (applicationContext == <span class="keyword">null</span>) &#123;</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">return</span> applicationContext.getBean(clazz);</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 根据类和bean的名字获取bean</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> name</span>
<span class="line">     * <span class="doctag">@param</span> clazz</span>
<span class="line">     * <span class="doctag">@param</span> &lt;T&gt;</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">popBean</span><span class="params">(String name, Class&lt;T&gt; clazz)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">if</span> (applicationContext == <span class="keyword">null</span>) &#123;</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">return</span> applicationContext.getBean(name, clazz);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>在需要的地方使用<strong>ApplicationContextHelper.popBean(clazz.class)</strong>即可</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述测试在<strong>ubuntu16.04 lts</strong> <strong>jdk1.8</strong> <strong>spring boot 1.5.6.RELEASE</strong>中成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring boot 在静态类中注入spring组件]]></title>
      <url>/2018/02/22/springboot_static_class_autowrite/</url>
      <content type="html"><![CDATA[<p>在做项目的时候突然有这样一个需求,在工具类中需要注入spring组件,由于工具类都是静态的直接注入或者new一个类都是不行的,因此了解了一下相关用法.</p>
<a id="more"></a>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><ol>
<li><p>首先需要将该类变成一个spring的bean,也就是在类上添加@Component注解,当然其他相关注解也可以</p>
</li>
<li><p>在类中声明一个该类的静态对象,同时也将需要注入的bean注入进来.</p>
</li>
<li><p>写一个init()方法并在上面添加@PostConstruct注解,在方法中将this赋给该类的静态对象,并且使用将依赖bean赋给静态对象的bean</p>
</li>
<li><p>使用的时候使用对象.属性即可</p>
</li>
</ol>
<p>我的项目里是将一个自定义的文件上传路径写在配置文件中,然后在文件工具类中使用它.相关关键代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> FileUtil fileUtil;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Autowired</span></span>
<span class="line">    <span class="keyword">private</span> ProjectProperties projectProperties;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@PostConstruct</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        fileUtil = <span class="keyword">this</span>;</span>
<span class="line">        fileUtil.projectProperties = <span class="keyword">this</span>.projectProperties;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 获取图片根目录</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getImgBasePath</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        String os = System.getProperty(<span class="string">"os.name"</span>);</span>
<span class="line">        String basePath;</span>
<span class="line">        <span class="keyword">if</span> (os.toLowerCase().startsWith(<span class="string">"win"</span>)) &#123;</span>
<span class="line">            basePath = <span class="string">"D:/projectdev/image/"</span>;</span>
<span class="line">        &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">            basePath = fileUtil.projectProperties.getFilePathProperties().getBasePath();</span>
<span class="line">        &#125;</span>
<span class="line">        basePath = basePath.replace(<span class="string">"/"</span>, SEPERATOR);</span>
<span class="line">        <span class="keyword">return</span> basePath;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>以上就可以实现在静态类中注入依赖了.</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述测试在<strong>ubuntu16.04 lts</strong> <strong>jdk1.8</strong> <strong>spring boot 1.5.6.RELEASE</strong>中成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring boot 自定义配置文件]]></title>
      <url>/2018/02/22/springboot_diy_properties/</url>
      <content type="html"><![CDATA[<p>在spring boot项目中自定义配置文件是常有的事情,记录下解决方案.</p>
<p>一般有两种,一种是使用$Value()注解直接注解在相关属性上,还有一种是写一个类去接收相关参数</p>
<a id="more"></a>
<h2 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h2><p>很简单,直接在需要相关自定义配置的类中的属性上使用$Value()注解即可,</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;auther&#125;"</span>)</span>
<span class="line"><span class="keyword">private</span> String auther;</span>
</pre></td></tr></table></figure>
<h2 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h2><p>个人比较推荐使用这种方法,这种方法感觉更好维护,并且易于分类,在我的项目中一般使用一个总的项目配置类,然后下面按类别去写相关配置类,<br>在properties(或者yml)文件中按属性名写好相关配置.</p>
<p>下面给出一个简单的例子。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//ProjectProperties.java</span></span>
<span class="line"><span class="meta">@Component</span></span>
<span class="line"><span class="meta">@Data</span></span>
<span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"project"</span>)</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProjectProperties</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> FilePathProperties filePathProperties = <span class="keyword">new</span> FilePathProperties();</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// FilePathProperties.java</span></span>
<span class="line"><span class="meta">@Data</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilePathProperties</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> String basePath = <span class="string">"/home/earthchen/"</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// xxx.java</span></span>
<span class="line"><span class="meta">@Component</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">xxx</span><span class="params">()</span></span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Autowired</span></span>
<span class="line">    <span class="keyword">private</span> ProjectProperties projectProperties;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="comment">// xxxxx然后使用projectProperties去get相关属性即可。</span></span>
<span class="line"></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span>
<span class="line"><span class="attr">project:</span></span>
<span class="line"><span class="attr">  filePathProperties:</span></span>
<span class="line"><span class="attr">    basePath:</span> <span class="string">/home/earthchen/work/</span></span>
</pre></td></tr></table></figure>
<blockquote>
<p>注: yml文件中的属性名必须和类中的属性一致</p>
</blockquote>
<p>以上就可以实现自定义配置啦，后续有更多的配置只需要在ProjectProperties.java中添加即可。</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述测试在<strong>ubuntu16.04 lts</strong> <strong>jdk1.8</strong> <strong>spring boot 1.5.6.RELEASE</strong>中成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Elasticsearch学习笔记 -- 1]]></title>
      <url>/2018/02/12/Elasticsearch_study_1/</url>
      <content type="html"><![CDATA[<p>ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p>
<p>具体的大家可以再去网上看看介绍。这里就不阐述了</p>
<h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>笔者这里是使用docker安装的，比较方便。笔者使用docker-compose搭建了一个集群，并且安装了head插件。</p>
<ol>
<li>docker-compose.yml内容为<figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
</pre></td><td class="code"><pre><span class="line">version: <span class="string">'3'</span></span>
<span class="line">services:</span>
<span class="line">  elasticsearch-master:</span>
<span class="line">    restart: always</span>
<span class="line">    image: elasticsearch:latest</span>
<span class="line">    ports:</span>
<span class="line">      - <span class="string">"9200:9200"</span></span>
<span class="line">      - <span class="string">"9300:9300"</span></span>
<span class="line">    environment:</span>
<span class="line">      - ES_JAVA_OPTS=-Xms512m -Xmx512m</span>
<span class="line">    volumes:</span>
<span class="line">      - ./master-config:/usr/share/elasticsearch/config</span>
<span class="line">    </span>
<span class="line"></span>
<span class="line">  elasticsearch-slave1:</span>
<span class="line">    restart: always</span>
<span class="line">    image: elasticsearch:latest</span>
<span class="line">    ports:</span>
<span class="line">      - <span class="string">"8200:9200"</span></span>
<span class="line">      - <span class="string">"8300:9300"</span></span>
<span class="line">    depends_on:</span>
<span class="line">      - elasticsearch-master</span>
<span class="line">    links:</span>
<span class="line">      - elasticsearch-master</span>
<span class="line">    environment:</span>
<span class="line">      - ES_JAVA_OPTS=-Xms512m -Xmx512m</span>
<span class="line">      - discovery.zen.ping.unicast.hosts=lasticsearch-master</span>
<span class="line">    volumes:</span>
<span class="line">      - ./slave1-config:/usr/share/elasticsearch/config</span>
<span class="line"></span>
<span class="line">  elasticsearch-head:</span>
<span class="line">    restart: always</span>
<span class="line">    image: mobz/elasticsearch-head:<span class="number">5</span></span>
<span class="line">    ports:</span>
<span class="line">      - <span class="string">"9100:9100"</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>具体的我会放到<a href="https://github.com/EarthChen/elasticsearch.git" target="_blank" rel="external">github</a>上，如果想使用只要clone下来进入<strong>docker-start</strong>目录执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ docker-compose up <span class="_">-d</span></span>
</pre></td></tr></table></figure></p>
<p>即可，如果没安装<strong>docker</strong>和<strong>docker-compose</strong>，请自行搜索安装。</p>
<blockquote>
<p>注：</p>
<ul>
<li>如果不搭建集群可以直接docker run，但是测试发现如果单结点运行在插入索引的时候，健康状态会变成yellow，</li>
<li>随从结点可以不开启http，可以根据自己需要编写<strong>elasticsearch.yml</strong></li>
<li>第一次创建完容器之后，下次启动需要进入<strong>docker-compose.yml</strong>所在的文件路径执行<strong>docker-compose start</strong>即可。</li>
</ul>
</blockquote>
<h3 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><ol>
<li>在浏览器输入<strong>127.0.0.1:9100</strong>，进入head插件的web端查看</li>
</ol>
<ol>
<li>还可以直接输入<strong>127.0.0.1:9200</strong>，查看相应结点的状态</li>
</ol>
<p>根据提示，判断是否成功，如果你使用我的docker配置文件，除非端口冲突，一般是不会出错的。</p>
<h3 id="elasticsearch基本操作"><a href="#elasticsearch基本操作" class="headerlink" title="elasticsearch基本操作"></a>elasticsearch基本操作</h3><p>es的api基本格式为:http://<ip>:<port>/&lt;索引&gt;/&lt;类型&gt;/&lt;文档id&gt;</port></ip></p>
<p>使用http动词来操作数据</p>
<h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><ol>
<li>非结构化创建索引<br>PUT /people</li>
</ol>
<blockquote>
<p>people为索引名</p>
</blockquote>
<ol>
<li>结构化创建索引<br>POST /book/novel/_mappings</li>
</ol>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">  <span class="attr">"novel"</span>: &#123;</span>
<span class="line">    <span class="attr">"properties"</span>: &#123;</span>
<span class="line">      <span class="attr">"title"</span>: &#123;</span>
<span class="line">        <span class="attr">"type"</span>: <span class="string">"text"</span></span>
<span class="line">      &#125;</span>
<span class="line">    &#125;</span>
<span class="line">  &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<blockquote>
<p>执行创建结构化时，索引必须存在，即执行上述命令时，<strong>book</strong>索引必须存在</p>
</blockquote>
<p>如果索引不存在，使用下面的方式</p>
<p>PUT /people</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">	<span class="attr">"settings"</span>:&#123;</span>
<span class="line">		<span class="attr">"number_of_shards"</span>:<span class="number">3</span>,   </span>
<span class="line">		<span class="attr">"number_of_replicas"</span>: <span class="number">1</span></span>
<span class="line">	&#125;,</span>
<span class="line">	<span class="attr">"mappings"</span>:&#123;</span>
<span class="line">		<span class="attr">"man"</span>:&#123;</span>
<span class="line">			<span class="attr">"properties"</span>:&#123;</span>
<span class="line">				<span class="attr">"name"</span>:&#123;</span>
<span class="line">					<span class="attr">"type"</span>: <span class="string">"text"</span></span>
<span class="line">				&#125;,</span>
<span class="line">				<span class="attr">"country"</span>:&#123;</span>
<span class="line">					<span class="attr">"type"</span>: <span class="string">"keyword"</span></span>
<span class="line">				&#125;,</span>
<span class="line">				<span class="attr">"age"</span>:&#123;</span>
<span class="line">					<span class="attr">"type"</span>: <span class="string">"integer"</span></span>
<span class="line">				&#125;,</span>
<span class="line">				<span class="attr">"date"</span>:&#123;</span>
<span class="line">					<span class="attr">"type"</span>:<span class="string">"date"</span>,</span>
<span class="line">					<span class="attr">"format"</span>: <span class="string">"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"</span></span>
<span class="line">				&#125;</span>
<span class="line">			&#125;</span>
<span class="line">		&#125;,</span>
<span class="line">		<span class="attr">"woman"</span>:&#123;</span>
<span class="line">		&#125;</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<blockquote>
<ul>
<li>settings为当前索引的配置，比如切片数备份数</li>
<li>es支持<strong>||</strong>代表当前属性支持多种格式</li>
</ul>
</blockquote>
<h4 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h4><ol>
<li>指定文档id插入</li>
</ol>
<p>PUT /people/man/1</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">	<span class="attr">"name"</span>:<span class="string">"earthchen"</span>,</span>
<span class="line">	<span class="attr">"country"</span>: <span class="string">"China"</span>,</span>
<span class="line">	<span class="attr">"age"</span>: <span class="number">18</span>,</span>
<span class="line">	<span class="attr">"date"</span>:<span class="string">"1996-11-25"</span></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<ol>
<li>自动生成id插入</li>
</ol>
<p>POST /people/man</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">	<span class="attr">"name"</span>:<span class="string">"earthchen2"</span>,</span>
<span class="line">	<span class="attr">"country"</span>: <span class="string">"China"</span>,</span>
<span class="line">	<span class="attr">"age"</span>: <span class="number">20</span>,</span>
<span class="line">	<span class="attr">"date"</span>:<span class="string">"1997-11-25"</span></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="数据修改"><a href="#数据修改" class="headerlink" title="数据修改"></a>数据修改</h4><ol>
<li>直接修改</li>
</ol>
<p>POST /people/man/1/_update</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">	<span class="attr">"doc"</span>:&#123;</span>
<span class="line">		<span class="attr">"name"</span>:<span class="string">"修改后的name"</span></span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<ol>
<li>使用脚本</li>
</ol>
<p>POST /people/man/1/_update</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">	"script":&#123;</span>
<span class="line">		"lang":"painless",</span>
<span class="line">		"inline":"ctx._source.age=params.age",</span>
<span class="line">		"params":&#123;</span>
<span class="line">			"age":100</span>
<span class="line">		&#125;</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">或</span>
<span class="line">&#123;</span>
<span class="line">	"script":&#123;</span>
<span class="line">		"lang":"painless",</span>
<span class="line">		"inline":"ctx._source.age+=10",</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="数据删除"><a href="#数据删除" class="headerlink" title="数据删除"></a>数据删除</h4><ol>
<li>删除指定的文档</li>
</ol>
<p>DELETE /people/man/1</p>
<ol>
<li>删除指定索引</li>
</ol>
<p>DELETE /people</p>
<h4 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h4><p>查询结构为<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="attr">"mappings"</span>: &#123;</span>
<span class="line">        <span class="attr">"novel"</span>: &#123;</span>
<span class="line">        <span class="attr">"properties"</span>: &#123;</span>
<span class="line">            <span class="attr">"word_count"</span>: &#123;</span>
<span class="line">                <span class="attr">"type"</span>: <span class="string">"integer"</span></span>
<span class="line">                &#125;,</span>
<span class="line">            <span class="attr">"author"</span>: &#123;</span>
<span class="line">                <span class="attr">"type"</span>: <span class="string">"keyword"</span></span>
<span class="line">                &#125;,</span>
<span class="line">            <span class="attr">"title"</span>: &#123;</span>
<span class="line">                <span class="attr">"type"</span>: <span class="string">"text"</span></span>
<span class="line">                &#125;,</span>
<span class="line">            <span class="attr">"publish_date"</span>: &#123;</span>
<span class="line">                <span class="attr">"format"</span>: <span class="string">"yyyy-MM-dd HH:mm:ss || yyyy-MM-dd || epoch_millis"</span>,</span>
<span class="line">                <span class="attr">"type"</span>: <span class="string">"date"</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<h5 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h5><ol>
<li>根据id查询数据</li>
</ol>
<p>GET /book/novel/2</p>
<h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><ol>
<li>查询所有数据</li>
</ol>
<p>POST /book/_search</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">	<span class="attr">"query"</span>:&#123;</span>
<span class="line">		<span class="attr">"match_all"</span>:&#123;</span>
<span class="line">		&#125;</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<blockquote>
<p>默认10条数据</p>
</blockquote>
<ol>
<li>指定从第几条返回，返回多少条数据</li>
</ol>
<p>POST /book/_search</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">	<span class="attr">"query"</span>:&#123;</span>
<span class="line">		<span class="attr">"match_all"</span>:&#123;&#125;</span>
<span class="line">	&#125;,</span>
<span class="line">	<span class="attr">"from"</span>:<span class="number">1</span>,</span>
<span class="line">	<span class="attr">"size"</span>:<span class="number">2</span></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<ol>
<li><p>查询关键词</p>
<ul>
<li><p>查询title中含有title的数据</p>
<p>POST /book/_search</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="attr">"query"</span>:&#123;</span>
<span class="line">        <span class="attr">"match"</span>:&#123;</span>
<span class="line">            <span class="attr">"title"</span>:<span class="string">"title"</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>增加排序规则（按照publish_date的降序排列）</p>
<p>POST /book/_search</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="attr">"query"</span>:&#123;</span>
<span class="line">        <span class="attr">"match"</span>:&#123;</span>
<span class="line">            <span class="attr">"title"</span>:<span class="string">"title4"</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;,</span>
<span class="line">    <span class="attr">"sort"</span>:[</span>
<span class="line">            &#123;</span>
<span class="line">                <span class="attr">"publish_date"</span>:&#123;</span>
<span class="line">                    <span class="attr">"order"</span>:<span class="string">"desc"</span></span>
<span class="line">                &#125;</span>
<span class="line">            &#125;</span>
<span class="line">        ]</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h5 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h5><ol>
<li>按照指定字段聚合查询</li>
</ol>
<p>POST /book/_search</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">	<span class="attr">"aggs"</span>:&#123;</span>
<span class="line">		<span class="attr">"group_by_word_count"</span>:&#123;</span>
<span class="line">			<span class="attr">"terms"</span>:&#123;</span>
<span class="line">				<span class="attr">"field"</span>:<span class="string">"word_count"</span></span>
<span class="line">			&#125;</span>
<span class="line">		&#125;,</span>
<span class="line">		<span class="attr">"group_by_publish_date"</span>:&#123;</span>
<span class="line">			<span class="attr">"terms"</span>:&#123;</span>
<span class="line">				<span class="attr">"field"</span>:<span class="string">"publish_date"</span></span>
<span class="line">			&#125;</span>
<span class="line">		&#125;</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<ol>
<li>按照指定字段聚合计算</li>
</ol>
<p>POST /book/_search</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">	<span class="attr">"aggs"</span>:&#123;</span>
<span class="line">		<span class="attr">"grades_word_count"</span>:&#123;</span>
<span class="line">			<span class="attr">"stats"</span>:&#123;</span>
<span class="line">				<span class="attr">"field"</span>:<span class="string">"word_count"</span></span>
<span class="line">			&#125;</span>
<span class="line">		&#125;</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h4><h5 id="子条件查询-特定字段查询所指特定值"><a href="#子条件查询-特定字段查询所指特定值" class="headerlink" title="子条件查询(特定字段查询所指特定值)"></a>子条件查询(特定字段查询所指特定值)</h5><ol>
<li>Query context</li>
</ol>
<p>(在查询过程中,除了判断文档是否满足查询条件,es还会计算一个<strong>_score</strong>,来标示匹配的程度，为了判断目标文档和查询条件<strong>有多好</strong>)</p>
<ul>
<li><p>全文本查询(针对文本类型数据)</p>
<ol>
<li><p>模糊匹配(分词匹配)<strong>match</strong></p>
<p> 查询title中含有<strong>elasticsearch</strong>或者<strong>入门</strong>的数据</p>
<p> POST /book/_search</p>
 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="attr">"query"</span>:&#123;</span>
<span class="line">        <span class="attr">"match"</span>:&#123;</span>
<span class="line">            <span class="attr">"title"</span>:<span class="string">"elasticsearch入门"</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>不分词匹配(将查询内容作为一个整体)<strong>match_phrase</strong></p>
<p> 查询title中含有<strong>elasticsearch学习</strong>的数据</p>
<p> POST /book/_search</p>
 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="attr">"query"</span>:&#123;</span>
<span class="line">        <span class="attr">"match_phrase"</span>:&#123;</span>
<span class="line">            <span class="attr">"title"</span>:<span class="string">"elasticsearch学习"</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>对多个字段的匹配查询<strong>multi_match</strong></p>
<p> 查询<strong>title</strong>或者<strong>author</strong>字段中含有<strong>elasticsearch</strong>的数据</p>
<p> POST /book/_search</p>
 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="attr">"query"</span>:&#123;</span>
<span class="line">        <span class="attr">"multi_match"</span>:&#123;</span>
<span class="line">            <span class="attr">"query"</span>:<span class="string">"elasticsearch"</span>,</span>
<span class="line">            <span class="attr">"fields"</span>:[<span class="string">"title"</span>,<span class="string">"author"</span>]</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>语法查询<strong>query_string</strong></p>
<p> 查询含有<strong>elasticsearch</strong>和<strong>学习</strong>或者<strong>java</strong>的数据</p>
<p> POST /book/_search</p>
 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="attr">"query"</span>:&#123;</span>
<span class="line">        <span class="attr">"query_string"</span>:&#123;</span>
<span class="line">            <span class="attr">"query"</span>: <span class="string">"(elasticsearch AND 学习) OR java"</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>指定字段语法查询<strong>query_string</strong></p>
<p> 查询字段<strong>title</strong>或者<strong>author</strong>中含有<strong>elasticsearch</strong>和<strong>学习</strong>或者<strong>java</strong>或者<strong>aaa</strong>的数据</p>
<p> POST /book/_search</p>
 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="attr">"query"</span>:&#123;</span>
<span class="line">        <span class="attr">"query_string"</span>:&#123;</span>
<span class="line">            <span class="attr">"query"</span>: <span class="string">"(elasticsearch AND 学习) OR java OR 4444"</span>,</span>
<span class="line">            <span class="attr">"fields"</span>:[<span class="string">"author"</span>,<span class="string">"title"</span>]</span>
<span class="line">            </span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<p>}</p>
<ul>
<li><p>字段级别查询(针对结构化数据,数字，日期等)<strong>term</strong></p>
<ol>
<li><p>对指定字段的精确查询</p>
<ol>
<li><p>查询<strong>word_count</strong>等于1000的的数据</p>
<p>POST /book/_search</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="attr">"query"</span>:&#123;</span>
<span class="line">        <span class="attr">"term"</span>:&#123;</span>
<span class="line">            <span class="attr">"word_count"</span>: <span class="number">1000</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>查询<strong>word_count</strong>在范围1000到3000内的数据</p>
<p>POST /book/_search</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line"> <span class="attr">"query"</span>:&#123;</span>
<span class="line">        <span class="attr">"range"</span>:&#123;</span>
<span class="line">            <span class="attr">"word_count"</span>:&#123;</span>
<span class="line">                <span class="attr">"lte"</span>: <span class="number">3000</span>,</span>
<span class="line">                <span class="attr">"gte"</span>:<span class="number">1000</span></span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
</li>
</ul>
<ol>
<li><p>Filter context</p>
<p> (在查询过程中，只判断该文档是否满足条件，只有yes或者no，并且会缓存结果)</p>
<p> 查询出<strong>word_count</strong>等于1000的数据</p>
 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="attr">"query"</span>:&#123;</span>
<span class="line">        <span class="attr">"bool"</span>:&#123;</span>
<span class="line">            <span class="attr">"filter"</span>:&#123;</span>
<span class="line">                <span class="attr">"term"</span>:&#123;</span>
<span class="line">                    <span class="attr">"word_count"</span>:<span class="number">1000</span></span>
<span class="line">                &#125;</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h5 id="复合条件查询-以一定的逻辑组合子条件查询"><a href="#复合条件查询-以一定的逻辑组合子条件查询" class="headerlink" title="复合条件查询(以一定的逻辑组合子条件查询)"></a>复合条件查询(以一定的逻辑组合子条件查询)</h5><ol>
<li><p>固定分数查询</p>
<p> 查询所有索引中title为java</p>
<p> POST /_search</p>
 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="attr">"query"</span>:&#123;</span>
<span class="line">        <span class="attr">"constant_score"</span>:&#123;</span>
<span class="line">            <span class="attr">"filter"</span>:&#123;</span>
<span class="line">                <span class="attr">"match"</span>:&#123;</span>
<span class="line">                    <span class="attr">"title"</span>: <span class="string">"java"</span></span>
<span class="line">                &#125;</span>
<span class="line">            &#125;,</span>
<span class="line">            <span class="attr">"boost"</span>:<span class="number">2</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>布尔查询</p>
<ol>
<li><p>查询所有索引中<strong>author</strong>为<strong>aaa</strong>或<strong>title</strong>为<strong>elasticsearch</strong> （<strong>should</strong>）</p>
<p>POST /_search</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="attr">"query"</span>:&#123;</span>
<span class="line">        <span class="attr">"bool"</span>:&#123;</span>
<span class="line">            <span class="attr">"should"</span>:[</span>
<span class="line">                &#123;</span>
<span class="line">                    <span class="attr">"match"</span>:&#123;</span>
<span class="line">                        <span class="attr">"auther"</span>:<span class="string">"aaa"</span></span>
<span class="line">                    &#125;</span>
<span class="line">                &#125;,</span>
<span class="line">                &#123;</span>
<span class="line">                    <span class="attr">"match"</span>:&#123;</span>
<span class="line">                        <span class="attr">"title"</span>: <span class="string">"elasticsearch"</span></span>
<span class="line">                    &#125;</span>
<span class="line">                &#125;</span>
<span class="line">            ]</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>查询所有索引中<strong>author</strong>含有<strong>aaa</strong>,<strong>title</strong>含有<strong>java</strong>的数据 (<strong>must</strong>)</p>
<p>POST /_search</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="attr">"query"</span>:&#123;</span>
<span class="line">        <span class="attr">"bool"</span>:&#123;</span>
<span class="line">            <span class="attr">"must"</span>:[</span>
<span class="line">                &#123;</span>
<span class="line">                    <span class="attr">"match"</span>:&#123;</span>
<span class="line">                        <span class="attr">"author"</span>:<span class="string">"aaa"</span></span>
<span class="line">                    &#125;</span>
<span class="line">                &#125;,</span>
<span class="line">                &#123;</span>
<span class="line">                    <span class="attr">"match"</span>:&#123;</span>
<span class="line">                        <span class="attr">"title"</span>: <span class="string">"java"</span></span>
<span class="line">                    &#125;</span>
<span class="line">                &#125;</span>
<span class="line">            ]</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>查询所有索引中<strong>author</strong>含有<strong>aaa</strong>,<strong>title</strong>含有<strong>java</strong>，并且过滤<strong>word_count</strong>为<strong>1000</strong>的数据 (<strong>must</strong>)</p>
<p>POST /_search</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="attr">"query"</span>:&#123;</span>
<span class="line">        <span class="attr">"bool"</span>:&#123;</span>
<span class="line">            <span class="attr">"must"</span>:[</span>
<span class="line">                &#123;</span>
<span class="line">                    <span class="attr">"match"</span>:&#123;</span>
<span class="line">                        <span class="attr">"author"</span>:<span class="string">"aaa"</span></span>
<span class="line">                    &#125;</span>
<span class="line">                &#125;,</span>
<span class="line">                &#123;</span>
<span class="line">                    <span class="attr">"match"</span>:&#123;</span>
<span class="line">                        <span class="attr">"title"</span>: <span class="string">"java"</span></span>
<span class="line">                    &#125;</span>
<span class="line">                &#125;</span>
<span class="line">            ],</span>
<span class="line">            <span class="attr">"filter"</span>:&#123;</span>
<span class="line">                <span class="attr">"term"</span>:&#123;</span>
<span class="line">                    <span class="attr">"word_count"</span>: <span class="number">1000</span></span>
<span class="line">                &#125;</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>查询所有索引中<strong>author</strong>不含有<strong>aaa</strong>,并且<strong>title</strong>不含有<strong>java</strong>的数据 (<strong>must_not</strong>)</p>
<p>POST /_search</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">    <span class="attr">"query"</span>:&#123;</span>
<span class="line">        <span class="attr">"bool"</span>:&#123;</span>
<span class="line">            <span class="attr">"must_not"</span>:[</span>
<span class="line">                &#123;</span>
<span class="line">                    <span class="attr">"match"</span>:&#123;</span>
<span class="line">                        <span class="attr">"author"</span>:<span class="string">"aaa"</span></span>
<span class="line">                    &#125;</span>
<span class="line">                &#125;,</span>
<span class="line">                &#123;</span>
<span class="line">                    <span class="attr">"match"</span>:&#123;</span>
<span class="line">                        <span class="attr">"title"</span>: <span class="string">"java"</span></span>
<span class="line">                    &#125;</span>
<span class="line">                &#125;</span>
<span class="line">            ]</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<h3 id="spring-boot-使用es"><a href="#spring-boot-使用es" class="headerlink" title="spring boot 使用es"></a>spring boot 使用es</h3><h4 id="集成es"><a href="#集成es" class="headerlink" title="集成es"></a>集成es</h4><p>1.在pom.xml中添加依赖。（es的依赖必须与你的es版本相对应，自行查看es版本  es内部使用log4j2作为日志，所以还需要添加log4j依赖）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>5.6.7<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">log4j-api.version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">log4j-api.version</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">log4j-core.version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">log4j-core.version</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span>
<span class="line"></span>
<span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span>
<span class="line"></span>
<span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line"></span>
<span class="line">        <span class="comment">&lt;!--elasticsearch 客户端--&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line">        <span class="comment">&lt;!--ElasticSearch 5.x 根据官网配置maven 依赖, 由于 5.0x的 jar 内部使用的 apache log4日志。--&gt;</span></span>
<span class="line">        <span class="comment">&lt;!--所以要配置额外的依赖支持 org.apache.logging.log4j。--&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line"></span>
<span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line"></span>
<span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span>
</pre></td></tr></table></figure>
<ol>
<li>添加log4j2的配置文件<br>在<strong>resources</strong>中创建文件<strong>log4j2.properties</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">appender.console.type=Console</span>
<span class="line">appender.console.name=Console</span>
<span class="line">appender.console.layout.type=PatternLayout</span>
<span class="line">appender.console.layout.pattern=[%t] %-5p $c -%m%n</span>
<span class="line">rootLogger.level=info</span>
<span class="line">rootLogger.appenderRef.console.ref=console</span>
</pre></td></tr></table></figure>
<p>笔者这里只配置了控制台的，如果还需要其他的自行配置一下。</p>
<h4 id="对es进行操作"><a href="#对es进行操作" class="headerlink" title="对es进行操作"></a>对es进行操作</h4><p>在需要的地方注入<strong>TransportClient</strong>，进行操作即可。具体内容这里就不贴出来了，<a href="https://github.com/EarthChen/elasticsearch-study.git" target="_blank" rel="external">github</a>上有源码可以自己看看。</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong> <strong>es5.6.7</strong>中测试成功</li>
<li>本文源码见<strong><a href="https://github.com/EarthChen/elasticsearch-study.git" target="_blank" rel="external">https://github.com/EarthChen/elasticsearch-study.git</a></strong></li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我`</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入理解java虚拟机学习笔记 -- 1]]></title>
      <url>/2017/09/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_1/</url>
      <content type="html"><![CDATA[<p>redis作为内存非关系型数据库，是一种key - value 缓存产品,但它同时还支持数据持久化，常常和一些老牌关系型数据库配合使用<br>下文将作为学习笔记介绍一下</p>
<h1 id="深入理解java虚拟机"><a href="#深入理解java虚拟机" class="headerlink" title="深入理解java虚拟机"></a>深入理解java虚拟机</h1><a id="more"></a>
<h2 id="Java内存区域与内存溢出异常"><a href="#Java内存区域与内存溢出异常" class="headerlink" title="Java内存区域与内存溢出异常"></a>Java内存区域与内存溢出异常</h2><h3 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h3><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。 这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁</p>
<h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、 循环、 跳转、 异常处理、 线程恢复等基础功能都需要依赖这个计数器来完成</p>
<p>由于Java虚拟机的多线程是通过<strong>线程轮流切换并分配处理器执行时间的方式</strong>来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行<strong>一条线程</strong>中的指令。 因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个<strong>独立</strong>的程序计数器，各条线程之间计数器<strong>互不影响</strong>，<strong>独立存储</strong>，我们称这类内存区域为<strong>“线程私有”</strong>的内存。</p>
<p>如果线程正在执行的是一个<strong>Java方法</strong>，这个计数器记录的是<strong>正在执行的虚拟机字节码指令的地址</strong>；如果正在执行的是<strong>Native方法</strong>，这个计数器值则为<strong>空（Undefined）</strong>。 此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>
<h4 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h4><p>与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。</p>
<p>局部变量表存放了编译期可知的各种<strong>基本数据类型</strong>（boolean、 byte、 char、 short、 int、float、 long、 double）、 <strong>对象引用</strong>（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。</p>
<p>局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p>
<p>在Java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出<strong>StackOverflowError异常</strong>；如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），如果扩展时无法申请到足够的内存，就会抛出<strong>OutOfMemoryError异常</strong>。</p>
<h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>本地方法栈（Native Method Stack）与虚拟机栈所发挥的作用是非常相似的，它们之间的区别不过是虚拟机栈为虚拟机执行<strong>Java方法（也就是字节码）服务</strong>，而本地方法栈则为虚拟机使用到的<strong>Native方法服务</strong>。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。</p>
<h4 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h4><p>Java堆是被<strong>所有线程共享的一块内存区域</strong>，在虚拟机启动时创建。 此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</p>
<p>Java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC堆”（GarbageCollected Heap)</p>
<p>根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。 </p>
<h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、 常量、静态变量、 即时编译器编译后的代码等数据。</p>
<h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。 Class文件中除了有类的版本、 字段、 方法、 接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p>
<p>运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生</p>
<h4 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h4><p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。 但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现</p>
<h3 id="HotSpot虚拟机对象"><a href="#HotSpot虚拟机对象" class="headerlink" title="HotSpot虚拟机对象"></a>HotSpot虚拟机对象</h3><p>otSpot虚拟机在Java堆中对象分配、 布局和访问的全过程。</p>
<h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><p>虚拟机遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、 解析和初始化过。 如果没有，那必须先执行相应的类加载过程</p>
<p>在类加载检查通过后，接下来虚拟机将为新生对象分配内存。 对象所需内存的大小在类加载完成后便可完全确定，为对象分配空间的任务等同于把一块确定大小的内存从Java堆中划分出来。</p>
<p>还有另外一个需要考虑的问题是对象创建在虚拟机中是非常频繁的行为，即使是仅仅修改一个指针所指向的位置，在并发情况下也并不是线程安全的，可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况。解决这个问题有两种方案:</p>
<ul>
<li>对分配内存空间的动作进行<strong>同步处理</strong>——实际上虚拟机采用<strong>CAS配上失败重试</strong>的方式保证更新操作的原子性</li>
<li>另一种是把内存分配的动作按照线程划分在<strong>不同的空间</strong>之中进行，即每个线程在Java堆中预先分配一小块内存，称为<strong>本地线程分配缓冲（Thread Local Allocation Buffer,TLAB</strong>。 哪个线程要分配内存，就在哪个线程的TLAB上分配，只有TLAB用完并分配新的TLAB时，才需要同步锁定</li>
</ul>
<p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头）</p>
<p>接下来，虚拟机要对对象进行必要的设置,例如这个对象是哪个类的实例、 如何才能找到类的元数据信息、 对象的哈希码、 对象的GC分代年龄等信息</p>
<p>从虚拟机的视角来看，一个新的对象已经产生了，但从Java程序的视角来看，对象创建才刚刚开始——＜init＞方法还没有执行，所有的字段都还为零。</p>
<h4 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h4><p>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：<strong>对象头（Header）</strong>、<strong>实例数据（Instance Data</strong>）和<strong>对齐填充（Padding</strong>）。</p>
<p>HotSpot虚拟机的对象头包括两部分信息:</p>
<ul>
<li>第一部分用于存储对象自身的运行时数据，如哈希码（HashCode）、 GC分代年龄、 锁状态标志、 线程持有的锁、 偏向线程ID、 偏向时间戳等</li>
<li>对象头的另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</li>
</ul>
<p>接下来的实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。 无论是从父类继承下来的，还是在子类中定义的，都需要记录起来。</p>
<p>第三部分对齐填充并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。</p>
<h4 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h4><p>建立对象是为了使用对象，我们的Java程序需要通过栈上的<strong>reference数据</strong>来操作堆上的具体对象。对象访问方式也是取决于虚拟机实现而定的。</p>
<p>目前主流的访问方式有使用句柄和直接指针两种：</p>
<ul>
<li>使用句柄访问:<ul>
<li>那么Java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息</li>
</ul>
</li>
<li>使用直接指针访问:<ul>
<li>Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference中存储的直接就是对象地址</li>
</ul>
</li>
</ul>
<blockquote>
<p>注：对虚拟机Sun HotSpot而言，使用的是直接指针访问。</p>
</blockquote>
<h4 id="OutOfMemoryError异常"><a href="#OutOfMemoryError异常" class="headerlink" title="OutOfMemoryError异常"></a>OutOfMemoryError异常</h4><p>由于书中所实例均为jdk1.6或jdk1.7，在jdk1.8中很多vm参数都被移除，这里就不赘述，发生上述异常，基本上都是创建了太多的对象，导致内存不足，然后溢出。</p>
<h2 id="垃圾收集器与内存分配策略"><a href="#垃圾收集器与内存分配策略" class="headerlink" title="垃圾收集器与内存分配策略"></a>垃圾收集器与内存分配策略</h2><p>在堆里面存放着Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还<strong>“存活”</strong>着，哪些已经<strong>死去”</strong>（即不可能再被任何途径使用的对象）。</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h4><p>一些教科书给出的说法为:</p>
<ul>
<li>给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。</li>
</ul>
<p>该算法在大部分情况下它都是一个不错的算法,但至少主流的Java虚拟机里面没有选用引用计数算法来管理内存，其中最主要的原因是它很难解决对象之间<strong>相互循环引用</strong>的问题。</p>
<h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><p>这个算法的基本思路就是通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为<strong>引用链（Reference Chain）</strong>，当一个对象到GC Roots没有任何引用链相连（用图论的话来说，就是从GC Roots到这个对象不可达）时，则证明此对象是不可用的。就会被gc回收</p>
<p>在Java语言中，可作为GC Roots的对象包括下面几种：</p>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象。</li>
</ul>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>在jdk1.2之后，引用分为如下四中:</p>
<ul>
<li><strong>强引用</strong>:在程序代码之中普遍存在的，类似<strong>“Object obj=new Object ()”</strong>这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。</li>
<li><strong>软引用</strong>:用来描述一些还有用但并非必需的对象。 对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。 如果这次回收还没有足够的内存，才会抛出内存溢出异常。</li>
<li><strong>弱引用</strong>:用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。 当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</li>
<li><strong>虚引用</strong>也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。 一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。 为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。</li>
</ul>
<h4 id="生存还是死亡"><a href="#生存还是死亡" class="headerlink" title="生存还是死亡"></a>生存还是死亡</h4><p>一个对象死亡，至少要经历<strong>两次</strong>标记过程，如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否<strong>有必要执行finalize（）方法</strong>。  <strong>当对象没有覆盖finalize（）方法</strong>，<strong>或者finalize（）方法已经被虚拟机调用过</strong>，虚拟机将这两种情况都视为“没有必要执行”</p>
<p>如果这个对象被判定为有必要执行finalize（）方法，那么这个对象将会放置在一个叫做<strong>F-Queue的队列</strong>之中，并在稍后由一个由虚拟机<strong>自动建立的</strong>、 <strong>低优先级的</strong>Finalizer线程去执行它。</p>
<h4 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h4><p>方法区（或者HotSpot虚拟机中的永久代）垃圾收集主要回收两部分内容：<strong>废弃常量</strong>和<strong>无用的类</strong>。</p>
<p>判定一个常量是否是“废弃常量”：就是没有任何对象引用常量池中的该常量，也没有其他地方引用了这个字面量</p>
<p>定一个类是否是“无用的类”的条件则相对苛刻许多。 类需要同时满足下面3个条件才能算是“无用的类”：</p>
<ul>
<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li>
<li>加载该类的ClassLoader已经被回收。</li>
<li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法</li>
</ul>
<blockquote>
<p>注：虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样，不使用了就必然会回收。 是否对类进行回收，由虚拟机的参数控制。</p>
</blockquote>
<h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><h4 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h4><p>算法分为<strong>“标记”</strong>和<strong>“清除”</strong>两个阶段：</p>
<ol>
<li>首先标记出所有需要回收的对象</li>
<li>在标记完成后统一回收所有被标记的对象</li>
</ol>
<p>此算法的不足为:</p>
<ul>
<li><strong>效率问题</strong>:标记和清除两个过程的效率都不高</li>
<li><strong>空间问题</strong>:标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>
</ul>
<h4 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h4><p>“复制”（Copying）的收集算法：它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。 当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p>
<p>这种算法的代价是将内存缩小为了原来的一半</p>
<h4 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h4><p>复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会变低。 更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。</p>
<p>根据老年代的特点，更适合另外一种<strong>“标记-整理”</strong>（Mark-Compact）算法：标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存</p>
<h4 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h4><p>当前商业虚拟机的垃圾收集都采用<strong>“分代收集”</strong>（Generational Collection）算法。</p>
<p>该算法只是根据对象存活周期的不同将内存划分为几块。 一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。</p>
<p>在新生代使用<strong>复制算法</strong>：在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活</p>
<p>在老年代使用<strong>“标记—清理”</strong>或者“<strong>标记—整理”算法</strong>：因为对象存活率高、 没有额外空间对它进行分配担保</p>
<h3 id="HotSpot的算法实现"><a href="#HotSpot的算法实现" class="headerlink" title="HotSpot的算法实现"></a>HotSpot的算法实现</h3><blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker学习笔记---Dockerfile]]></title>
      <url>/2017/08/23/Docker_study_Dockerfile_instructions/</url>
      <content type="html"><![CDATA[<p>Docker可以通过从Dockerfile包含所有命令的文本文件中读取指令，自动构建镜像。</p>
<p>每个需要使用Docker的项目都应该有一个Dockerfile，这个文件描述了我们需要的镜像环境。</p>
<a id="more"></a>
<h1 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h1><h2 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h2><p>有效的<strong>Ｄockerfile</strong>必须从FROM开始,镜像可以是任何有效的镜像。<br>官方建议，如果只需要一个linux基础镜像，建议使用<strong>Debian</strong>镜像，控制的很小。<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> &lt;image&gt; [AS &lt;name&gt;]</span>
<span class="line"></span>
<span class="line">或</span>
<span class="line"><span class="keyword">FROM</span> &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]</span>
<span class="line"></span>
<span class="line">或</span>
<span class="line"><span class="keyword">FROM</span> &lt;image&gt;[@&lt;digest&gt;] [AS &lt;name&gt;]</span>
</pre></td></tr></table></figure></p>
<h2 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="bash"> &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span></span>
</pre></td></tr></table></figure>
<p>该LABEL指令将元数据添加到图像。A LABEL是一个键值对。要在LABEL值中包含空格，请使用引号和反斜杠，就像在命令行解析中一样。几个用法示例<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="bash"> <span class="string">"com.example.vendor"</span>=<span class="string">"ACME Incorporated"</span></span>
<span class="line"></span><span class="keyword">LABEL</span><span class="bash"> com.example.label-with-value=<span class="string">"foo"</span></span>
<span class="line"></span><span class="keyword">LABEL</span><span class="bash"> version=<span class="string">"1.0"</span></span>
<span class="line"></span><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">"This text illustrates \</span>
<span class="line">that label-values can span multiple lines."</span></span></span>
</pre></td></tr></table></figure></p>
<p>图像可以有多个标签。要指定多个标签，Docker建议LABEL在可能的情况下将标签组合到单个指令中。每个LABEL指令产生一个新的层<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="bash"> multi.label1=<span class="string">"value1"</span> multi.label2=<span class="string">"value2"</span> other=<span class="string">"value3"</span></span>
<span class="line"></span></span>
<span class="line">或</span>
<span class="line"><span class="keyword">LABEL</span><span class="bash"> multi.label1=<span class="string">"value1"</span> \</span>
<span class="line">      multi.label2=<span class="string">"value2"</span> \</span>
<span class="line">      other=<span class="string">"value3"</span></span></span>
</pre></td></tr></table></figure></p>
<p>要查看图像的标签，请使用docker inspect命令。<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ docker inspect Ubuntu</span>
</pre></td></tr></table></figure></p>
<h2 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h2><p>如果你需要<strong>RUN</strong>多个命令，建议使用多行写出来，使用( \ )分隔多行</p>
<p>RUN有两种形式</p>
<ul>
<li><strong>RUN <command></strong> shell形式，命令在shell中运行，默认为/bin/sh</li>
<li><strong>RUN [“executable”, “param1”, “param2”]</strong><br>该<strong>RUN</strong>指令在当前镜像的顶部的新层中执行任何命令，病提交结果，结果提交的图像当被用户下一步<strong>Dockerfile</strong></li>
</ul>
<p>可以使用命令更改shell中的默认的<strong>SHELL</strong>.</p>
<p>在shell窗体中，可以使用 \ 讲一条指令继续下一行<br>例如:<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> /bin/bash -c <span class="string">'source $HOME/.bashrc; \</span>
<span class="line">echo $HOME'</span></span>
<span class="line"></span>``` </span>
<span class="line"></span>
<span class="line">相当于：</span>
<span class="line">```docker</span>
<span class="line"><span class="keyword">RUN</span><span class="bash"> /bin/bash -c <span class="string">'source $HOME/.bashrc; echo $HOME'</span></span>
<span class="line"></span>``` </span>
<span class="line"></span>
<span class="line">&gt;注：如果你想使用其他<span class="keyword">shell</span><span class="bash">比如**bash**,请使用在所需的shell传递参数,**RUN [<span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">"echo hello"</span>]**</span>
<span class="line"></span></span>
<span class="line"></span>
<span class="line"><span class="comment">### apt-get</span></span>
<span class="line">如果你的基础镜像使用的是**Debian**，那你一定会经常使用**apt-get**命令安装软件</span>
<span class="line"></span>
<span class="line">一般来说，我们最好不要使用**apt-get upgrade**或者**apt-get dist-upgrade**，使用上述命令会造成许多非必须包被安装，这是不必要的。如果知道要更新当前基础镜像中中的某一个软件，比如**nginx**,请使用**apt-get install -y nginx**来进行安装更新</span>
<span class="line"></span>
<span class="line">通常我们会如下使用他：</span>
<span class="line">```docker</span>
<span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y \</span>
<span class="line">        package-bar \</span>
<span class="line">        package-baz \</span>
<span class="line">        package-foo</span></span>
</pre></td></tr></table></figure></p>
<p>先执行<strong>apt-get update</strong>是为了确保不被缓存所干扰，保证安装的软件是比较新的版本。</p>
<p>以下是一个使用<strong>RUN</strong>和<strong>apt-get</strong>的一个例子：<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y \</span>
<span class="line">    aufs-tools \</span>
<span class="line">    automake \</span>
<span class="line">    build-essential \</span>
<span class="line">    curl \</span>
<span class="line">    dpkg-sig \</span>
<span class="line">    libcap-dev \</span>
<span class="line">    libsqlite3-dev \</span>
<span class="line">    mercurial \</span>
<span class="line">    reprepro \</span>
<span class="line">    ruby1.9.1 \</span>
<span class="line">    ruby1.9.1-dev \</span>
<span class="line">    s3cmd=1.1.* \</span>
<span class="line"> &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span>
</pre></td></tr></table></figure></p>
<p>最后删除/var/lib/apt/lists/<em>是为了清理缓存从而减少镜像大小，Debian和Ubuntu都会在最后自动调用<em>*apt-get clean</em></em>来清理，不需要显示调用</p>
<h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>该指令有三种形式:</p>
<ul>
<li>CMD [“executable”,”param1”,”param2”]，这是首先方式</li>
<li>CMD [“param1”,”param2”]，作为<strong>ENTRYPOINT</strong>的默认参数</li>
<li>CMD command param1 param2 外壳形式</li>
</ul>
<p>当以shell或者exec格式使用是，该CMD指令设置运行镜像时要执行的命令<br>如果你使用shell的形式CMD，那么<command>将执行 /bin/sh -c：<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span>
<span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"This is a test."</span> | wc -</span></span>
</pre></td></tr></table></figure></p>
<p>如果您想在 <command> 没有shell 的情况下运行，那么您必须将该命令表达为JSON数组，并提供可执行文件的完整路径。 此数组形式是首选格式CMD。任何其他参数必须单独表示为数组中的字符串：<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span>
<span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/usr/bin/wc"</span>,<span class="string">"--help"</span>]</span></span>
</pre></td></tr></table></figure></p>
<p>CMD指令应用与运行镜像中所包含的软件，及其参数。CMD应该以<strong>CMD [“executable”, “param1”, “param2”…]</strong>表示。</p>
<p>在很多时候，CMD给出的是一个交互式shell，比如bash，Python等，比如<strong>CMD [“perl”, “-de0”]</strong>，<strong>CMD [“python”]</strong>，或 <strong>CMD [“php”, “-a”]</strong>。</p>
<h2 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h2><p>该指令指示容器讲监听链接的端口，类似于，将容器中的某一个端口暴露出去，从而在外部访问绑定该端口。在容器内部，应该使用应用的传统通用端口。<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> &lt;port&gt; [&lt;port&gt;...]</span>
</pre></td></tr></table></figure></p>
<p>该EXPOSE指令通知Docker容器在运行时监听指定的网络端口。EXPOSE不使主机的端口可以访问。为此，您必须使用该-p标志来发布一系列端口，或者使用该-P标志来发布所有暴露的端口。您可以公开一个端口号，并在外部发布另一个端口号</p>
<h2 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span>
<span class="line"><span class="keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...</span>
</pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<ul>
<li>该ENV指令将环境变量<key>设置为该值 <value>。该值将处于所有“后代” Dockerfile命令的环境中</value></key></li>
<li>该ENV指令有两种形式。第一个表单ENV <key> <value>将会将一个变量设置为一个值。第一个空格后的整个字符串将被视为<value>- 包括空格和引号等字符。</value></value></key></li>
<li>第二种形式ENV <key>=<value> …允许一次设置多个变量。请注意，第二种形式在语法中使用等号（=），而第一种形式则不使用等号。像命令行解析一样，引号和反斜杠可用于在值中包含空格。</value></key></li>
</ul>
</blockquote>
<p>例如:<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> myName John Doe</span>
<span class="line"><span class="keyword">ENV</span> myDog Rex The Dog</span>
<span class="line"><span class="keyword">ENV</span> myCat fluffy</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">和</span>
<span class="line"><span class="keyword">ENV</span> myName=<span class="string">"John Doe"</span> myDog=Rex\ The\ Dog \</span>
<span class="line">    myCat=fluffy</span>
</pre></td></tr></table></figure></p>
<p>上述两种方法所产生的结果是一样的，推荐使用第一种方式。</p>
<p>使用<strong>ENV</strong>来更新容器中的环境变量<strong>PATH</strong>，例如：<strong>ENV PATH /usr/local/nginx/bin:$PATH</strong>将确保<strong>CMD [“nginx”]</strong>工作正常。</p>
<p><strong>ENV</strong>指令用于提供特定服务所需要的环境变量</p>
<p><strong>ENV</strong>指令还可以用来设置常用的版本号，使其更方便维护，例子如下：<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> PG_MAJOR <span class="number">9.3</span></span>
<span class="line"><span class="keyword">ENV</span> PG_VERSION <span class="number">9.3</span>.<span class="number">4</span></span>
<span class="line"><span class="keyword">RUN</span><span class="bash"> curl -SL http://example.com/postgres-<span class="variable">$PG_VERSION</span>.tar.xz | tar -xJC /usr/src/postgress &amp;&amp; …</span>
<span class="line"></span><span class="keyword">ENV</span> PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH</span>
</pre></td></tr></table></figure></p>
<h2 id="ADD-or-COPY"><a href="#ADD-or-COPY" class="headerlink" title="ADD or COPY"></a>ADD or COPY</h2><p>上述两个指令的功能上是类似的，都是复制文件到容器中。</p>
<p><strong>COPY</strong>只支持讲本地文件复制到容器中<br><strong>ADD</strong>不但支持讲本地文件复制到容器中，还支持本地提取文件和远程url下载</p>
<p>所以<strong>ADD</strong>最适合的恰当的使用就是讲压缩文件提取到容器中。如<strong>ADD rootfs.tar.xz /</strong></p>
<p><strong>COPY</strong>可以多次使用，例如下列例子可以使RUN缓存无效的数量减少：<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt /tmp/</span>
<span class="line"></span><span class="keyword">RUN</span><span class="bash"> pip install --requirement /tmp/requirements.txt</span>
<span class="line"></span><span class="keyword">COPY</span><span class="bash"> . /tmp/</span></span>
</pre></td></tr></table></figure></p>
<p><strong>ADD</strong>不鼓励使用远程url并提取包。应该使用<strong>wget</strong>或者<strong>curl</strong>替代。可以在解压完成之后删除不需要的压缩包。<br>以下做法是正确的范例:<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/things \</span>
<span class="line">    &amp;&amp; curl -SL http://example.com/big.tar.xz \</span>
<span class="line">    | tar -xJC /usr/src/things \</span>
<span class="line">    &amp;&amp; make -C /usr/src/things all</span></span>
</pre></td></tr></table></figure></p>
<p>对于不需要提取文件的操作，我们应该均使用<strong>COPY</strong>来进行文件复制操作。</p>
<h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><p>该指令有两种方式</p>
<ul>
<li><strong>ADD <src>…<dest></dest></src></strong></li>
<li><strong>[“<src>“,… “<dest>“]</dest></src></strong></li>
</ul>
<p>该<strong>ADD</strong>指令将复制新文件，目录或远程文件<strong>URL <src></src></strong> ，并将其添加到路径中图像的文件系统<strong><dest></dest></strong>。</p>
<p><strong><src></src></strong>可以指定多个资源，但如果它们是文件或目录，则它们必须相对于正在构建的源目录（构建的上下文）。</p>
<p>每个<strong><src></src></strong>可能包含通配符，并使用Go的filepath.Match规则进行匹配 。例如<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> hom* /mydir/        <span class="comment"># adds all files starting with "hom"</span></span>
<span class="line"></span><span class="keyword">ADD</span><span class="bash"> hom?.txt /mydir/    <span class="comment"># ? is replaced with any single character, e.g., "home.txt"</span></span></span>
</pre></td></tr></table></figure></p>
<p><strong><dest></dest></strong>是一个绝对路径，或相对于一个路径WORKDIR，到其中的源将在目标容器内进行复制<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> <span class="built_in">test</span> relativeDir/          <span class="comment"># adds "test" to `WORKDIR`/relativeDir/</span></span>
<span class="line"></span><span class="keyword">ADD</span><span class="bash"> <span class="built_in">test</span> /absoluteDir/         <span class="comment"># adds "test" to /absoluteDir/</span></span></span>
</pre></td></tr></table></figure></p>
<p>当添加包含特殊字符（如[ 和]）的文件或目录时，需要按照Golang规则转义这些路径，以防止它们被视为匹配模式。例如，要添加一个名为的文件arr[0].txt，请使用以下命令：<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> arr[[]0].txt /mydir/    <span class="comment"># copy a file named "arr[0].txt" to /mydir/</span></span></span>
</pre></td></tr></table></figure></p>
<h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>同样<strong>COPY</strong>也有两种形式：</p>
<ul>
<li><strong>COPY <src>… <dest></dest></src></strong></li>
<li><strong>COPY [“<src>“,… “<dest>“]</dest></src></strong> （此窗体是包含空格的路径所必需的）</li>
</ul>
<p>该<strong>COPY</strong>指令将复制新文件或目录<strong>&lt;src</strong> ，并将其添加到该路径上容器的文件系统<strong><dest></dest></strong>。</p>
<p>其他内容参见<strong>ADD</strong>部分</p>
<h2 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h2><p>该指令也有两种形式：</p>
<ul>
<li>ENTRYPOINT [“executable”, “param1”, “param2”] （首选）</li>
<li>ENTRYPOINT command param1 param2 （外壳形式)</li>
</ul>
<p><strong>ENTRYPOINT</strong>允许你配置作为可执行文件运行的容器</p>
<p>例如，以下将使用默认内容启动nginx，在端口80上侦听：<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -i -t --rm -p 80:80 nginx</span></span>
</pre></td></tr></table></figure></p>
<h3 id="执行from-ENTRYPOINT例子"><a href="#执行from-ENTRYPOINT例子" class="headerlink" title="执行from ENTRYPOINT例子"></a>执行from ENTRYPOINT例子</h3><p>您可以使用exec形式ENTRYPOINT设置相当稳定的默认命令和参数，然后使用任何一种形式CMD来设置更有可能更改的其他默认值。<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span>
<span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"top"</span>, <span class="string">"-b"</span>]</span>
<span class="line"></span><span class="keyword">CMD</span><span class="bash"> [<span class="string">"-c"</span>]</span></span>
</pre></td></tr></table></figure></p>
<p>运行容器时，您可以看到这top是唯一的过程:<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span><span class="bash"> -it --rm --name <span class="built_in">test</span>  top -H</span>
<span class="line"></span></span>
<span class="line">top - <span class="number">08</span>:<span class="number">25</span>:<span class="number">00</span> up  <span class="number">7</span>:<span class="number">27</span>,  <span class="number">0</span> users,  load average: <span class="number">0.00</span>, <span class="number">0.01</span>, <span class="number">0.05</span></span>
<span class="line">Threads:   <span class="number">1</span> total,   <span class="number">1</span> running,   <span class="number">0</span> sleeping,   <span class="number">0</span> stopped,   <span class="number">0</span> zombie</span>
<span class="line">%Cpu(s):  <span class="number">0.1</span> us,  <span class="number">0.1</span> sy,  <span class="number">0.0</span> ni, <span class="number">99.7</span> id,  <span class="number">0.0</span> wa,  <span class="number">0.0</span> hi,  <span class="number">0.0</span> si,  <span class="number">0.0</span> st</span>
<span class="line">KiB Mem:   <span class="number">2056668</span> total,  <span class="number">1616832</span> used,   <span class="number">439836</span> free,    <span class="number">99352</span> buffers</span>
<span class="line">KiB Swap:  <span class="number">1441840</span> total,        <span class="number">0</span> used,  <span class="number">1441840</span> free.  <span class="number">1324440</span> cached Mem</span>
<span class="line"></span>
<span class="line">  PID <span class="keyword">USER</span>      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND</span>
<span class="line">    <span class="number">1</span> root      <span class="number">20</span>   <span class="number">0</span>   <span class="number">19744</span>   <span class="number">2336</span>   <span class="number">2080</span> R  <span class="number">0.0</span>  <span class="number">0.1</span>   <span class="number">0</span>:<span class="number">00.04</span> top</span>
</pre></td></tr></table></figure></p>
<h3 id="执行外壳形式的-ENTRYPOINT例子"><a href="#执行外壳形式的-ENTRYPOINT例子" class="headerlink" title="执行外壳形式的 ENTRYPOINT例子"></a>执行外壳形式的 ENTRYPOINT例子</h3><p>您可以指定一个纯粹的字符串，ENTRYPOINT并在其中执行/bin/sh -c。此表单将使用shell处理来替换shell环境变量，并将忽略任何CMD或docker run命令行参数。为了确保能够正确地docker stop发出任何长时间运行的ENTRYPOINT可执行文件，您需要记住启动它exec：<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span>
<span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="built_in">exec</span> top -b</span></span>
</pre></td></tr></table></figure></p>
<p>运行此镜像时，您将看到单个PID 1过程：<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span><span class="bash"> -it --rm --name <span class="built_in">test</span> top</span>
<span class="line"></span></span>
<span class="line">Mem: <span class="number">1704520</span>K used, <span class="number">352148</span>K free, <span class="number">0</span>K shrd, <span class="number">0</span>K buff, <span class="number">140368121167873</span>K cached</span>
<span class="line">CPU:   <span class="number">5</span>% usr   <span class="number">0</span>% sys   <span class="number">0</span>% nic  <span class="number">94</span>% idle   <span class="number">0</span>% io   <span class="number">0</span>% irq   <span class="number">0</span>% sirq</span>
<span class="line">Load average: <span class="number">0.08</span> <span class="number">0.03</span> <span class="number">0.05</span> <span class="number">2</span>/<span class="number">98</span> <span class="number">6</span></span>
<span class="line">  PID  PPID <span class="keyword">USER</span>     STAT   VSZ %VSZ %CPU COMMAND</span>
<span class="line">    <span class="number">1</span>     <span class="number">0</span> root     R     <span class="number">3164</span>   <span class="number">0</span>%   <span class="number">0</span>% top -b</span>
</pre></td></tr></table></figure></p>
<p>该指令最恰当的用户是社会镜像的主要命令，允许该镜像像该命令一样运行，然后使用CMD作为默认标志<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"s3cmd"</span>]</span>
<span class="line"></span><span class="keyword">CMD</span><span class="bash"> [<span class="string">"--help"</span>]</span></span>
</pre></td></tr></table></figure></p>
<p>我们可以输入以下命令来显示命令的帮助<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ docker run s3cmd</span>
</pre></td></tr></table></figure></p>
<p>使用正确的参数执行该命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ docker run s3cmd ls s3://mybucket</span>
</pre></td></tr></table></figure></p>
<h2 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h2><p>该指令用于公开暴露容器所创建的任何数据存储区域，配置存储文件或者文件夹。使用<strong>VOLUME</strong>指令配置任何可变的或是用户可维护的部分。</p>
<figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"/data"</span>]</span></span>
</pre></td></tr></table></figure>
<p>该VOLUME指令将创建具有指定名称的安装点，并将其标记为从本机主机或其他容器保存外部安装的卷。该值可以是JSON数组，VOLUME [“/var/log/“]或具有多个参数的纯字符串，例如VOLUME /var/log或VOLUME /var/log /var/db</p>
<h2 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h2><p>该指令用于配置运行服务的用户，一般用户将普通用户更改我root用户，解决权限不足的问题<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">USER</span> &lt;<span class="keyword">user</span>&gt;[:&lt;group&gt;] or</span>
<span class="line"><span class="keyword">USER</span> &lt;UID&gt;[:&lt;GID&gt;]</span>
</pre></td></tr></table></figure></p>
<p>该USER指令设置用户名（或UID）和可选的用户组（或GID）在运行图像时使用RUN</p>
<blockquote>
<p>注:当用户没有主组时，将使用该root组运行映像</p>
</blockquote>
<h2 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /path/to/workdir</span></span>
</pre></td></tr></table></figure>
<p>该指令用于配置工作目录，其参数应该使用绝对目录。该命令其实也就是<strong>RUN cd … &amp;&amp; do-something</strong>的变体。使其更清楚</p>
<p>该WORKDIR指令可以在一次使用多次Dockerfile。如果提供了相对路径，它将相对于上一条WORKDIR指令的路径 。例如：<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /a</span>
<span class="line"></span><span class="keyword">WORKDIR</span><span class="bash"> b</span>
<span class="line"></span><span class="keyword">WORKDIR</span><span class="bash"> c</span>
<span class="line"></span><span class="keyword">RUN</span><span class="bash"> <span class="built_in">pwd</span></span></span>
</pre></td></tr></table></figure></p>
<p>最终<strong>pwd</strong>命令的输出Dockerfile就是这样 <strong>/a/b/c</strong>。</p>
<h2 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> &lt;name&gt;[=&lt;default value&gt;]</span>
</pre></td></tr></table></figure>
<p>该ARG指令定义了用户可以<strong>docker build</strong>使用该<strong>–build-arg <varname>=<value></value></varname></strong> 标志使用命令在构建时传递给构建器的变量。如果用户指定了在Dockerfile中未定义的构建参数，则构建会输出警告<strong>[Warning] One or more build-args [foo] were not consumed.</strong></p>
<p>Docker文件可以包括一个或多个ARG指令。例如，以下是一个有效的Docker文件<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> busybox</span>
<span class="line"><span class="keyword">ARG</span> user1</span>
<span class="line"><span class="keyword">ARG</span> buildno</span>
<span class="line">...</span>
</pre></td></tr></table></figure></p>
<h3 id="ARG默认值"><a href="#ARG默认值" class="headerlink" title="ARG默认值"></a>ARG默认值</h3><p>ARG指令可以可选地包括一个默认值<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> busybox</span>
<span class="line"><span class="keyword">ARG</span> user1=someuser</span>
<span class="line"><span class="keyword">ARG</span> buildno=<span class="number">1</span></span>
<span class="line">...</span>
</pre></td></tr></table></figure></p>
<p>如果ARG指令具有默认值，并且如果在构建时没有传递任何值，则构建器将使用默认值。</p>
<p>##　ONBUILD<br>该指令在当前Dockerfile构建完成后执行。ONBUILD在导出FROM当前图像的任何子图像中执行。将该ONBUILD命令视为父母Dockerfile给予孩子的指示Dockerfile。</p>
<blockquote>
<p>注：</p>
<ul>
<li>ddocker Version:      17.05.0-ce</li>
<li>docker-machine version 0.12.2, build 9371605</li>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中搭建测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker学习笔记]]></title>
      <url>/2017/08/22/Docker_study/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口</p>
</blockquote>
<p>随着Docker近些年越来越流行，在生产环境中也开始有较多人开始使用，Docker技术可以说成为了不得不学习的一门技术。</p>
<p>本文谨记录一下学习笔记，以备以后查阅。</p>
<a id="more"></a>
<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>使用docker官方文档里面写的安装脚本我一直安装失败，就算添加上了dcoker官方源，安装过程也会非常慢，还有一堆教程里让我们使用apt-get安装，这样的确能安装但是版本太老，这里给出一种安装非常简单的方式。</p>
<h3 id="使用阿里的镜像安装"><a href="#使用阿里的镜像安装" class="headerlink" title="使用阿里的镜像安装"></a>使用阿里的镜像安装</h3><ol>
<li><p>可以使用阿里云的镜像仓库下载<a href="http://mirrors.aliyun.com/help/docker-engine?spm=a2c1q.8351553.0.0.468c7ecbpBomxQ" target="_blank" rel="external">docker-engine</a>和<a href="http://mirrors.aliyun.com/help/docker-ce?spm=a2c1q.8351553.0.0.468c7ecbpBomxQ" target="_blank" rel="external">docker-ce</a></p>
</li>
<li><p>在终端中执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">curl <span class="_">-s</span>SL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>接下来只要等待就好，版本也相对够新。</p>
<ol>
<li>查看docker版本，确认安装成功<br>在终端中输入如下命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo docker version</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>出现类似如下结果即为成功<img src="http://objects.earthchen.cn/Docker_Gogs_docker%E7%89%88%E6%9C%AC%E5%8F%B7.png" alt="docker版本号"></p>
<ol>
<li>使用阿里仓库来加速你的docker<br>可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span>
<span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span>
<span class="line">&#123;</span>
<span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://dmmxhzvq.mirror.aliyuncs.com"</span>]</span>
<span class="line">&#125;</span>
<span class="line">EOF</span>
<span class="line">sudo systemctl daemon-reload</span>
<span class="line">sudo systemctl restart docker</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile定义了容器中内部的环境，访问容器的网络资源和磁盘在容器是完全与外部隔离的，所以必须将你需要使用的端口映射到外部世界，并指出需要复制到该环境中的文件。</p>
<p>说白了Dockerfile就是一个定义容器中环境的配置文件。。</p>
<p>我们在这里创建一个简单的<strong>flask</strong>项目作为例子。</p>
<h3 id="编写第一个Docker-APP"><a href="#编写第一个Docker-APP" class="headerlink" title="编写第一个Docker APP"></a>编写第一个Docker APP</h3><ol>
<li><p>创建一个空的文件夹，在里面创建一个文件为<strong>Dockerfile</strong>，其中的内容为<br><strong>Dockerfile</strong>为:</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># Use an official Python runtime as a parent image</span></span>
<span class="line"><span class="comment"># 使用python3.5的官方镜像作为基础镜像(可以按需要更改)</span></span>
<span class="line"><span class="keyword">FROM</span> python:<span class="number">3.5</span>-slim</span>
<span class="line"></span>
<span class="line"><span class="comment"># Set the working directory to /app</span></span>
<span class="line"><span class="comment"># 设置工作目录</span></span>
<span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span>
<span class="line"></span></span>
<span class="line"><span class="comment"># Copy the current directory contents into the container at /app</span></span>
<span class="line"><span class="comment"># 复制当前目录下的内容到容器的/app目录下(Dockerfile同级所有目录)</span></span>
<span class="line"><span class="keyword">ADD</span><span class="bash"> . /app</span>
<span class="line"></span></span>
<span class="line"><span class="comment"># Install any needed packages specified in requirements.txt</span></span>
<span class="line"><span class="comment"># 安装项目所需要的依赖文件requirements.txt</span></span>
<span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r requirements.txt</span>
<span class="line"></span></span>
<span class="line"><span class="comment"># Make port 80 available to the world outside this container</span></span>
<span class="line"><span class="comment"># 让80端口能在容器外部访问</span></span>
<span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span>
<span class="line"></span>
<span class="line"><span class="comment"># Define environment variable</span></span>
<span class="line"><span class="comment"># 定义环境便令</span></span>
<span class="line"><span class="keyword">ENV</span> NAME World</span>
<span class="line"></span>
<span class="line"><span class="comment"># Run app.py when the container launches</span></span>
<span class="line"><span class="comment"># 在容器启动时，运行python app.py</span></span>
<span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"python"</span>, <span class="string">"app.py"</span>]</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>flask项目的<strong>app.py</strong>为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span>
<span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis, RedisError</span>
<span class="line"><span class="keyword">import</span> os</span>
<span class="line"><span class="keyword">import</span> socket</span>
<span class="line"></span>
<span class="line"><span class="comment"># Connect to Redis</span></span>
<span class="line">redis = Redis(host=<span class="string">"redis"</span>, db=<span class="number">0</span>, socket_connect_timeout=<span class="number">2</span>, socket_timeout=<span class="number">2</span>)</span>
<span class="line"></span>
<span class="line">app = Flask(__name__)</span>
<span class="line"></span>
<span class="line"><span class="meta">@app.route("/")</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span>
<span class="line">    <span class="keyword">try</span>:</span>
<span class="line">        visits = redis.incr(<span class="string">"counter"</span>)</span>
<span class="line">    <span class="keyword">except</span> RedisError:</span>
<span class="line">        visits = <span class="string">"&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;"</span></span>
<span class="line"></span>
<span class="line">    html = <span class="string">"&lt;h3&gt;Hello &#123;name&#125;!&lt;/h3&gt;"</span> \</span>
<span class="line">           <span class="string">"&lt;b&gt;Hostname:&lt;/b&gt; &#123;hostname&#125;&lt;br/&gt;"</span> \</span>
<span class="line">           <span class="string">"&lt;b&gt;Visits:&lt;/b&gt; &#123;visits&#125;"</span></span>
<span class="line">    <span class="keyword">return</span> html.format(name=os.getenv(<span class="string">"NAME"</span>, <span class="string">"world"</span>), hostname=socket.gethostname(), visits=visits)</span>
<span class="line"></span>
<span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span>
<span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">80</span>)</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>这里作为例子，只给出最简单的代码。</p>
<blockquote>
<p>注：host一定要填0.0.0.0 因为这是在容器内，本机访问的127.0.0.1 和容器内不是一回事。</p>
</blockquote>
<ol>
<li>收集项目依赖的库，在终端输入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ pip freeze &gt; requirements.txt</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>以上执行完目录结构应该如下所示：<br><img src="http://objects.earthchen.cn/docker_study_part1%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="part1目录结构"></p>
<h3 id="构建APP"><a href="#构建APP" class="headerlink" title="构建APP"></a>构建APP</h3><p>在编写好了你的app和Dockerfile之后，我们就可以使用Docker构建app</p>
<p>在终端输入<strong>docker build</strong>命令，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ docker bulid -t docker-flask-demo .</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>注：</p>
<ul>
<li>如果你的系统没有将当前用户放入docker组中，请在命令前加上sudo</li>
<li>-t 命令是给你的镜像起一个友好的名字</li>
<li>在这句命令的末尾还有一个”<strong>.</strong>“，代表当前目录的意思</li>
</ul>
</blockquote>
<p>等待上述命令完成就可以在终端执行<strong>docker images</strong>命令查看构建好的镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">$ docker images</span>
<span class="line"></span>
<span class="line">REPOSITORY                                                      TAG                 IMAGE ID            CREATED             SIZE</span>
<span class="line">earthchen/docker-flask-demo                                     part1               3964297abb1f        About an hour ago   212MB</span>
</pre></td></tr></table></figure></p>
<h3 id="运行app"><a href="#运行app" class="headerlink" title="运行app"></a>运行app</h3><p>由于Dockerfile中的<strong>EXPOSE 80</strong>命令，容器向外只开发80端口，我们需要将外部空闲端口映射到容器的80端口</p>
<p>使用<strong>-p</strong>帮我们绑定端口，在终端中输入一下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ docker run -p 4000:80 docker-flask-demo</span>
</pre></td></tr></table></figure></p>
<p>在浏览器访问<strong>127.0.0.1:4000</strong>后如图<br><img src="http://objects.earthchen.cn/docker_study_part1%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="part1结果图"></p>
<blockquote>
<p>注: 如果需要使当前容器运行在后台，需要使用<strong>-d</strong>选项，即：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ docker run <span class="_">-d</span> -p 4000:80 docker-flask-demo</span>
</pre></td></tr></table></figure></p>
</blockquote>
<p>加上<strong>-d</strong>命令之后，当前只会有容器id输出，需要查看容器情况，需要使用<strong>docker ps</strong>命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">$ docker ps</span>
<span class="line">或者</span>
<span class="line">$ docker container ps</span>
<span class="line"></span>
<span class="line">CONTAINER ID        IMAGE                               COMMAND             CREATED             STATUS              PORTS                  NAMES</span>
<span class="line">5762ccf1dd1c        earthchen/docker-flask-demo:part1   <span class="string">"python app.py"</span>     27 seconds ago      Up 26 seconds       0.0.0.0:4000-&gt;80/tcp   infallible_neumann</span>
</pre></td></tr></table></figure></p>
<p>如果想停止运行的容器，使用<strong>docker stop</strong>命令，后面接容器id<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">$ docker stop 5762ccf1dd1c</span>
<span class="line">或者</span>
<span class="line">$ docker container stop 5762ccf1dd1c</span>
<span class="line"></span>
<span class="line">5762ccf1dd1c</span>
</pre></td></tr></table></figure></p>
<p>如果想删除镜像或者容器，需要先停止运行的容器，<br>删除容器的命令为<strong>docker rm</strong>或者是<strong>docker container rm</strong><br>删除镜像的命令为<strong>docker rmi</strong>或者是<strong>docker image rm</strong></p>
<h3 id="分享你的镜像"><a href="#分享你的镜像" class="headerlink" title="分享你的镜像"></a>分享你的镜像</h3><p>我这里使用的是阿里云的docker Hub,如果你选择的是其他的镜像库，请自行查阅相关介绍</p>
<h4 id="登录到阿里云docker-registry"><a href="#登录到阿里云docker-registry" class="headerlink" title="登录到阿里云docker registry"></a>登录到阿里云docker registry</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo docker login --username=15555000826 registry.cn-hangzhou.aliyuncs.com</span>
</pre></td></tr></table></figure>
<h4 id="给需要分享的镜像打上标签"><a href="#给需要分享的镜像打上标签" class="headerlink" title="给需要分享的镜像打上标签"></a>给需要分享的镜像打上标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo docker tag 5762ccf1dd1c registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1</span>
</pre></td></tr></table></figure>
<h4 id="将本地镜像推到仓库"><a href="#将本地镜像推到仓库" class="headerlink" title="将本地镜像推到仓库"></a>将本地镜像推到仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo docker push registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1</span>
</pre></td></tr></table></figure>
<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><p>在需要部署的机器上拉取镜像，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line">$ docker pull registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1</span>
<span class="line"></span>
<span class="line">part1: Pulling from earthchen/docker-flask-demo</span>
<span class="line">ad74af05f5a2: Already exists </span>
<span class="line">0a004373a9cb: Already exists </span>
<span class="line">92b2e8511724: Already exists </span>
<span class="line">bc1149958e59: Already exists </span>
<span class="line">2e7ebaf17b77: Already exists </span>
<span class="line">71c4b9e65b72: Pull complete </span>
<span class="line">b668a32a73d0: Pull complete </span>
<span class="line">1e87b99f6998: Pull complete </span>
<span class="line">Digest: sha256:3b4b74a0e273a26fff42eddc077bccfb9963fd552aad766b93dc524a66c5f455</span>
<span class="line">Status: Downloaded newer image <span class="keyword">for</span> registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1</span>
</pre></td></tr></table></figure></p>
<p>拉取完成之后就可以运行容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ docker run -p 4000:80 registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1</span>
</pre></td></tr></table></figure></p>
<h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><h3 id="编写第一个docker-compose-yml"><a href="#编写第一个docker-compose-yml" class="headerlink" title="编写第一个docker-compose.yml"></a>编写第一个docker-compose.yml</h3><p><strong>docker-compose.yml</strong>的位置可以随意放置，一般放在项目根目录，<br>本例的<strong>docker-compose.yml</strong>的为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
</pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span>
<span class="line">services:</span>
<span class="line">  web:</span>
<span class="line">    # replace username/repo:tag with your name and image details</span>
<span class="line">    image: registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1</span>
<span class="line">    deploy:</span>
<span class="line">      # 运行5个镜像实体</span>
<span class="line">      replicas: 5</span>
<span class="line">      resources:</span>
<span class="line">        limits:</span>
<span class="line">          # 每个实体分配10%的cpu</span>
<span class="line">          cpus: &quot;0.1&quot;</span>
<span class="line">          # 每个实体分配50m内存</span>
<span class="line">          memory: 50M</span>
<span class="line">      restart_policy:</span>
<span class="line">        # 如果容器失败，立即重启</span>
<span class="line">        condition: on-failure</span>
<span class="line">    ports:</span>
<span class="line">      # 将外部4000端口映射到容易内80端口</span>
<span class="line">      - &quot;4000:80&quot;</span>
<span class="line">    networks:</span>
<span class="line">      # Web容器共享端口80通过负载均衡的网络控制</span>
<span class="line">      # 用默认的设置定义控制网络（这是一个负载均衡的覆盖网络）。</span>
<span class="line">      - webnet</span>
<span class="line">networks:</span>
<span class="line">  webnet:</span>
</pre></td></tr></table></figure></p>
<h3 id="运行你的负载均衡app"><a href="#运行你的负载均衡app" class="headerlink" title="运行你的负载均衡app"></a>运行你的负载均衡app</h3><p>在我们运行<strong>docker stack deploy</strong>之前时，我们需要运行以下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">docker swarm init</span>
</pre></td></tr></table></figure></p>
<p>不过不先执行上述命令，会产生错误</p>
<p>运行过后，我们就可以执行<strong>deploy</strong>命令了，我们需要给app起一个新的名字，在哪这里我们使用<strong>getstartedlab</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">$ docker stack deploy -c docker-compose.yml getstartedlab</span>
<span class="line"></span>
<span class="line">Creating network getstartedlab_webnet</span>
<span class="line">Creating service getstartedlab_web</span>
</pre></td></tr></table></figure></p>
<p>运行完上述命令，就会有5个容器启动，我们可以查看一下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">$ docker stack ps getstartedlab</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">ID                  NAME                  IMAGE                      NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS</span>
<span class="line">qg7mox0vrwu1        getstartedlab_web.1   docker-flask-demo:latest   earthchen-CP65S     Running             Running 25 seconds ago                       </span>
<span class="line">n7kb3qedrryx        getstartedlab_web.2   docker-flask-demo:latest   earthchen-CP65S     Running             Running 27 seconds ago                       </span>
<span class="line">04tr7rp7euet        getstartedlab_web.3   docker-flask-demo:latest   earthchen-CP65S     Running             Running 27 seconds ago                       </span>
<span class="line">z7yh0tvvrpwj        getstartedlab_web.4   docker-flask-demo:latest   earthchen-CP65S     Running             Running 26 seconds ago                       </span>
<span class="line">z01zvjtneg3r        getstartedlab_web.5   docker-flask-demo:latest   earthchen-CP65S     Running             Running 24 seconds ago</span>
</pre></td></tr></table></figure></p>
<p>如果使用的是<em>*docker ps</em>同样能看到5个容器正在运行，只是显示的没有上述命令详细<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">$ docker ps</span>
<span class="line"></span>
<span class="line">CONTAINER ID        IMAGE                      COMMAND             CREATED             STATUS              PORTS               NAMES</span>
<span class="line">bccc38eb8429        docker-flask-demo:latest   <span class="string">"python app.py"</span>     18 seconds ago      Up 16 seconds       80/tcp              getstartedlab_web.1.qg7mox0vrwu1ucnh6g79pnkuc</span>
<span class="line">368fabab2f5b        docker-flask-demo:latest   <span class="string">"python app.py"</span>     18 seconds ago      Up 15 seconds       80/tcp              getstartedlab_web.5.z01zvjtneg3rj8f5lsi9kzkwn</span>
<span class="line">b34a7b9f73e6        docker-flask-demo:latest   <span class="string">"python app.py"</span>     19 seconds ago      Up 17 seconds       80/tcp              getstartedlab_web.2.n7kb3qedrryxx3odog4t47hzq</span>
<span class="line">746425e5bc36        docker-flask-demo:latest   <span class="string">"python app.py"</span>     19 seconds ago      Up 17 seconds       80/tcp              getstartedlab_web.3.04tr7rp7euetg182oe43p6j4k</span>
<span class="line">887874b4edab        docker-flask-demo:latest   <span class="string">"python app.py"</span>     19 seconds ago      Up 16 seconds       80/tcp              getstartedlab_web.4.z7yh0tvvrpwju15zqwbgic1gx</span>
</pre></td></tr></table></figure></p>
<h3 id="集群操作app"><a href="#集群操作app" class="headerlink" title="集群操作app"></a>集群操作app</h3><p>你可以批量的更改这些容器的参数，更改<strong>docker-compose.yml</strong>中的参数后，执行<strong>docker stack deploy</strong>命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">$ docker stack deploy -c docker-compose.yml getstartedlab</span>
<span class="line"></span>
<span class="line">Updating service getstartedlab_web (id: n94rdcq09p07hro5sqh1tjhou)</span>
<span class="line">image docker-flask-demo:latest could not be accessed on a registry to record</span>
<span class="line">its digest. Each node will access docker-flask-demo:latest independently,</span>
<span class="line">possibly leading to different nodes running different</span>
<span class="line">versions of the image.</span>
</pre></td></tr></table></figure></p>
<p>docker将会自动帮我们更新配置，我们不需要杀死容器，</p>
<p>如果我们不需要这个app了，我们可以使用<strong>docker stack rm</strong>删除<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">$ docker stack rm getstartedlab</span>
<span class="line"></span>
<span class="line">Removing service getstartedlab_web</span>
<span class="line">Removing network getstartedlab_webnet</span>
</pre></td></tr></table></figure></p>
<p>这将删除<strong>getstartedlab</strong>app，但是节点群仍然存在，并且仍然在运行</p>
<p>相关常用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">docker stack ls              <span class="comment"># List all running applications on this Docker host</span></span>
<span class="line">docker stack deploy -c &lt;composefile&gt; &lt;appname&gt;  <span class="comment"># Run the specified Compose file</span></span>
<span class="line">docker stack services &lt;appname&gt;       <span class="comment"># List the services associated with an app</span></span>
<span class="line">docker stack ps &lt;appname&gt;   <span class="comment"># List the running containers associated with an app</span></span>
<span class="line">docker stack rm &lt;appname&gt;                             <span class="comment"># Tear down an application</span></span>
</pre></td></tr></table></figure></p>
<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><h3 id="设置你的集群"><a href="#设置你的集群" class="headerlink" title="设置你的集群"></a>设置你的集群</h3><p>首先我们需要安装一下<strong>virtualbox</strong>和<strong>docker-machine</strong></p>
<ul>
<li><p>安装<strong>docker-machine</strong>到linux</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">$ curl -L https://github.com/docker/machine/releases/download/v0.12.2/docker-machine-`uname <span class="_">-s</span>`-`uname -m` &gt;/tmp/docker-machine &amp;&amp;</span>
<span class="line">chmod +x /tmp/docker-machine &amp;&amp;</span>
<span class="line">sudo cp /tmp/docker-machine /usr/<span class="built_in">local</span>/bin/docker-machine</span>
</pre></td></tr></table></figure>
</li>
<li><p>安装<strong>docker-machine</strong>，不然会没有virtualbox驱动<br>自行浏览<a href="https://www.virtualbox.org/wiki/Linux_Downloads" target="_blank" rel="external">virtualbox网站</a>下载</p>
</li>
</ul>
<p>创建一组虚拟机使用<strong>docker-machine</strong>，使用VirtualBox驱动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">$ docker-machine create --driver virtualbox myvm1</span>
<span class="line">$ docker-machine create --driver virtualbox myvm2</span>
</pre></td></tr></table></figure></p>
<p>创建好了使用<strong>docker-machine ls</strong>命令查看一下虚拟机<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">$ docker-machine ls</span>
<span class="line"></span>
<span class="line">NAME    ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORS</span>
<span class="line">myvm1   -        virtualbox   Running   tcp://192.168.99.101:2376           v17.06.1-ce   </span>
<span class="line">myvm2   -        virtualbox   Running   tcp://192.168.99.100:2376           v17.06.1-ce</span>
</pre></td></tr></table></figure></p>
<p>打开系统中的virtualbox也能看到正在运行两个虚拟机，分别名为<strong>myvm1</strong>和<strong>myvm2</strong><br><img src="http://objects.earthchen.cn/docker_study_part4_docker_machine_virtualbox.png" alt="virtualbox中查看虚拟机"></p>
<p>接下来，我们应该发送命令到您的虚拟机<strong>myvm1</strong>，使其作为成为一个群组管理，发送命令使用<strong>docker-machine ssh</strong>，设置群组管理的命令为<strong>docker swarm init</strong>，所以最后的命令应该为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ docker-machine ssh myvm1 <span class="string">"docker swarm init"</span></span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>注：一般都会遇到以下问题,如果遇到了请使用以下方法解决</p>
<p>Error response from daemon: could not choose an IP address to advertise since this system has multiple addresses on different interfaces (10.0.2.15 on eth0 and 192.168.99.101 on eth1) - specify one with –advertise-addr    exit status 1</p>
<ul>
<li>使用<strong>docker-machine ls</strong>查看虚拟主机信息，记住<strong>myvm1</strong>的ip地址</li>
<li>重新使用<strong>docker-machine ssh</strong>运行<strong>docker swarm init</strong>命令，并使用该ip地址和端口连接<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">$ docker-machine ssh myvm1 <span class="string">"docker swarm init --advertise-addr 192.168.99.101:2377"</span></span>
<span class="line"></span>
<span class="line">Swarm initialized: current node (rgo0wk88oxw0sx2iynnfrq7ni) is now a manager.</span>
<span class="line"></span>
<span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span>
<span class="line"></span>
<span class="line">docker swarm join --token SWMTKN-1-0kkgpn8xkux6fr6e3fyqg3414vrkh9x73ho1tjiljtw201d6dj-2p65t277az7rj8yg5idss1i1q 192.168.99.101:2377</span>
<span class="line"></span>
<span class="line">To add a manager to this swarm, run <span class="string">'docker swarm join-token manager'</span> and follow the instructions.</span>
</pre></td></tr></table></figure>
</li>
</ul>
<p>注:末尾端口一定是<strong>2377</strong>，刚开始我想当然以为是不是我的环境不一样，查看了虚拟机的ip是2376，创建集群管理是可以成功的，但是其他结点加入集群就会失败。注意:</p>
<ul>
<li>端口<strong>2377</strong></li>
<li>端口<strong>2377</strong></li>
<li>端口<strong>2377</strong>，重要的事情说三遍</li>
</ul>
</blockquote>
<p>看到输出如上，就是成功了。表示我们已经在虚拟机<strong>myvm1</strong>创建了一个集群，并设置为管理</p>
<p>可以看到，响应<strong>docker swarm init</strong>包含一个预先配置的 <strong>docker swarm join</strong>命令，您可以在要添加的任何节点上运行。复制此命令，并将其发送到<strong>myvm2</strong>  <strong>docker-machine ssh</strong>把<strong>myvm2</strong> 加入您的新群组作为工作人员：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">$ docker-machine ssh myvm2 <span class="string">"docker swarm join --token SWMTKN-1-0kkgpn8xkux6fr6e3fyqg3414vrkh9x73ho1tjiljtw201d6dj-2p65t277az7rj8yg5idss1i1q 192.168.99.101:2377"</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">This node joined a swarm as a worker.</span>
</pre></td></tr></table></figure></p>
<p>这样就创建好了一个集群</p>
<p>接下来，我们可以在<strong>myvm1</strong>上使用<strong>docker node ls</strong>命令查看结点，首先我们需要使用<strong>docker-macheine ssh</strong>命令登录<strong>myvm1</strong>虚拟机<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line">$ docker-macheine ssh</span>
<span class="line"></span>
<span class="line">                        <span class="comment">##         .</span></span>
<span class="line">                  <span class="comment">## ## ##        ==</span></span>
<span class="line">               <span class="comment">## ## ## ## ##    ===</span></span>
<span class="line">           /<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"\___/ ===</span>
<span class="line">      ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~</span>
<span class="line">           \______ o           __/</span>
<span class="line">             \    \         __/</span>
<span class="line">              \____\_______/</span>
<span class="line"> _                 _   ____     _            _</span>
<span class="line">| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __</span>
<span class="line">| '_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ '__|</span>
<span class="line">| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &lt;  __/ |</span>
<span class="line">|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|</span>
<span class="line">Boot2Docker version 17.06.1-ce, build HEAD : 80114bc - Fri Aug 18 17:58:04 UTC 2017</span>
<span class="line">Docker version 17.06.1-ce, build 874a737</span>
<span class="line">docker@myvm1:~$</span></span>
</pre></td></tr></table></figure></p>
<p>然后在虚拟机<strong>myvm1</strong>中执行<strong>docker node ls</strong>命令查看结点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">docker@myvm1:~$ docker node ls</span>
<span class="line"></span>
<span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS</span>
<span class="line">0b7ae42ny8506cwe2rvt3sxqy     myvm2               Ready               Active              </span>
<span class="line">26kzc37prtj7vlgk7tmc4lq5y *   myvm1               Ready               Active              Leader</span>
</pre></td></tr></table></figure></p>
<p>退出虚拟机的终端只需要执行<strong>exit</strong>即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">docker@myvm1:~$ <span class="built_in">exit</span></span>
</pre></td></tr></table></figure></p>
<p>如果不想直接进入虚拟机输入指定在退出呢，可以直接使用<strong>docker-machine ssh “你的命令”</strong>,这样也是可以的</p>
<h3 id="在集群上部署app"><a href="#在集群上部署app" class="headerlink" title="在集群上部署app"></a>在集群上部署app</h3><p>使用<strong>scp</strong>命令将<strong>docker-compose.yml</strong>复制到集群管理虚拟机<strong>myvm1</strong>的主目录中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ docker-machine scp docker-compose.yml myvm1:~</span>
</pre></td></tr></table></figure></p>
<p>在集群管理虚拟机<strong>myvm1</strong>中在集群中部署你的app，使用<strong>docker stack deploy -c docker-compose.yml getstartedlab</strong>命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ docker-machine ssh myvm1 <span class="string">"docker stack deploy -c docker-compose.yml getstartedlab"</span></span>
</pre></td></tr></table></figure></p>
<p>然后就会自动部署你的应用在<strong>myvm1</strong>和<strong>myvm2</strong>上了。</p>
<p>我们可以在<strong>myvm1</strong>上查看容器运行的情况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span>@myvm1:~$ docker stack ps getstartedlab</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">ID                  NAME                  IMAGE                                                                 NODE                DESIRED STATE       CURRENT STATE              ERROR               PORTS</span>
<span class="line">2d0nk6cdzk9s        getstartedlab_web.1   registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1   myvm2               Running             Preparing 59 seconds ago                       </span>
<span class="line">0k5x3z8kzy3c        getstartedlab_web.2   registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1   myvm1               Running             Running 58 seconds ago                         </span>
<span class="line">741qhp1gjrd0        getstartedlab_web.3   registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1   myvm2               Running             Preparing 59 seconds ago                       </span>
<span class="line">xar5o0a86xqd        getstartedlab_web.4   registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1   myvm1               Running             Running 58 seconds ago                         </span>
<span class="line">uondlmb3agae        getstartedlab_web.5   registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1   myvm2               Running             Preparing 59 seconds ago</span>
</pre></td></tr></table></figure></p>
<p>可以看到容器分布在两个虚拟机上。</p>
<blockquote>
<p>注：如果你要使用集群，那各集群主机必须开放以下指定端口</p>
<ul>
<li>端口7946用于容器网络发现的TCP / UDP。</li>
<li>端口4789 UDP用于容器入口网络</li>
</ul>
</blockquote>
<p>如果你要更改你的应用，你可以更改集群管理虚拟机<strong>myvm1</strong>中的<strong>docker-compose.yml</strong>，或者更改代码。<br>在这些情况下，只需要在<strong>myvm1</strong>中执行<strong>docker stack deploy</strong>再次部署即可<br>如果有新机器需要加入集群，只需要使用<strong>docker swarm join</strong>加入该集群即可</p>
<blockquote>
<p>如何离开集群</p>
<ul>
<li>如果非管理机要离开集群，只需要执行<strong>docker-machine ssh myvm2 “docker swarm leave”</strong></li>
<li>如果是管理机，那需要强制执行，离开集群后也会同时删除该集群<strong>docker-machine ssh myvm1 “docker swarm leave –force”</strong></li>
</ul>
</blockquote>
<h2 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h2><h3 id="添加新服务并重新部署"><a href="#添加新服务并重新部署" class="headerlink" title="添加新服务并重新部署"></a>添加新服务并重新部署</h3><ol>
<li>向我们的系统中添加一个可视化服务，查看docker集群中是如何调度容器的，更新<br><strong>docker-compose.yml</strong>为:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
</pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span>
<span class="line">services:</span>
<span class="line">  web:</span>
<span class="line">    # replace username/repo:tag with your name and image details</span>
<span class="line">    image: registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1</span>
<span class="line">    deploy:</span>
<span class="line">      replicas: 5</span>
<span class="line">      restart_policy:</span>
<span class="line">        condition: on-failure</span>
<span class="line">      resources:</span>
<span class="line">        limits:</span>
<span class="line">          cpus: &quot;0.1&quot;</span>
<span class="line">          memory: 50M</span>
<span class="line">    ports:</span>
<span class="line">      - &quot;80:80&quot;</span>
<span class="line">    networks:</span>
<span class="line">      - webnet</span>
<span class="line">  visualizer:</span>
<span class="line">    image: dockersamples/visualizer:stable</span>
<span class="line">    ports:</span>
<span class="line">      - &quot;8080:8080&quot;</span>
<span class="line">    volumes:</span>
<span class="line">      - &quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span>
<span class="line">    deploy:</span>
<span class="line">      placement:</span>
<span class="line">        constraints: [node.role == manager]</span>
<span class="line">    networks:</span>
<span class="line">      - webnet</span>
<span class="line">networks:</span>
<span class="line">  webnet:</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>实质上就是在services添加了一个名叫<strong>visualizer</strong>的服务</p>
<ol>
<li><p>将更新后的<strong>docker-compose.yml</strong>替换掉<strong>myvm1</strong>中的就旧的<strong>docker-compose.yml</strong>，使用scp命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ docker-machine scp docker-compose.yml myvm1:~</span>
</pre></td></tr></table></figure>
</li>
<li><p>使用<em>**</em>在集群管理机上重新部署</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">$ docker-machine ssh myvm1 <span class="string">"docker stack deploy -c docker-compose.yml getstartedlab"</span></span>
<span class="line"></span>
<span class="line">Creating network getstartedlab_default</span>
<span class="line">Updating service getstartedlab_visualizer (id: i8n865puv7p98k8kpt6msh6m5)</span>
<span class="line">Updating service getstartedlab_web (id: bvvg06x1ptqeq1si1c0i5fqdc)</span>
</pre></td></tr></table></figure>
</li>
<li><p>在浏览器中访问两虚拟机任意一个<strong>ip:8080</strong>,在浏览器中查看，或者在虚拟机中查看。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">docker@myvm1:~$ docker stack ps getstartedlab</span>
<span class="line"></span>
<span class="line">ID                  NAME                         IMAGE                                                                 NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS</span>
<span class="line">myggqevnockd        getstartedlab_visualizer.1   dockersamples/visualizer:stable                                                           Running             Pending 3 minutes ago                       </span>
<span class="line">kg4euo1i3u8c        getstartedlab_web.1          registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1   myvm2               Running             Running 3 minutes ago                       </span>
<span class="line">ohzq8a5xob6o        getstartedlab_web.2          registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1   myvm1               Running             Running 3 minutes ago                       </span>
<span class="line">yxvdvwn60g2z        getstartedlab_web.3          registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1   myvm2               Running             Running 3 minutes ago                       </span>
<span class="line">6go5wzjpaw5v        getstartedlab_web.4          registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1   myvm2               Running             Running 3 minutes ago                       </span>
<span class="line">vis59jbqix1f        getstartedlab_web.5          registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1   myvm1               Running             Running 3 minutes ago</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h3 id="持久化数据"><a href="#持久化数据" class="headerlink" title="持久化数据"></a>持久化数据</h3><ol>
<li><p>添加redis作为数据库，更新<strong>docker-compose.yml</strong>为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
</pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span>
<span class="line">services:</span>
<span class="line">  web:</span>
<span class="line">    # replace username/repo:tag with your name and image details</span>
<span class="line">    image: registry.cn-hangzhou.aliyuncs.com/earthchen/docker-flask-demo:part1</span>
<span class="line">    deploy:</span>
<span class="line">      # 运行5个镜像实体</span>
<span class="line">      replicas: 5</span>
<span class="line">      resources:</span>
<span class="line">        limits:</span>
<span class="line">          # 每个实体分配10%的cpu</span>
<span class="line">          cpus: &quot;0.1&quot;</span>
<span class="line">          # 每个实体分配50m内存</span>
<span class="line">          memory: 50M</span>
<span class="line">      restart_policy:</span>
<span class="line">        # 如果容器失败，立即重启</span>
<span class="line">        condition: on-failure</span>
<span class="line">    ports:</span>
<span class="line">      # 将外部4000端口映射到容易内80端口</span>
<span class="line">      - &quot;80:80&quot;</span>
<span class="line">  visualizer:</span>
<span class="line">    image: dockersamples/visualizer:stable</span>
<span class="line">    ports:</span>
<span class="line">      - &quot;8080:8080&quot;</span>
<span class="line">    volumes:</span>
<span class="line">      - &quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span>
<span class="line">    deploy:</span>
<span class="line">      placement:</span>
<span class="line">        constraints: [node.role == manager]</span>
<span class="line">    networks:</span>
<span class="line">      - webnet</span>
<span class="line">  redis:</span>
<span class="line">    image: redis</span>
<span class="line">    ports:</span>
<span class="line">      - &quot;6379:6379&quot;</span>
<span class="line">    volumes:</span>
<span class="line">      - ./data:/data</span>
<span class="line">    deploy:</span>
<span class="line">      placement:</span>
<span class="line">        constraints: [node.role == manager]</span>
<span class="line">    networks:</span>
<span class="line">      - webnet</span>
<span class="line">networks:</span>
<span class="line">  webnet:</span>
</pre></td></tr></table></figure>
</li>
<li><p>在管理机<strong>myvm1</strong>上创建一个目录<strong>data</strong>作为redis的存储</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ docker-machine ssh myvm1 <span class="string">"mkdir ./data"</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>更新集群管理机上的<strong>docker-compose.yml</strong>文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ docker-machine scp docker-compose.yml myvm1:~</span>
</pre></td></tr></table></figure>
</li>
<li><p>再次部署</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ docker-machine ssh myvm1 <span class="string">"docker stack deploy -c docker-compose.yml getstartedlab"</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>浏览器访问查看部署结果<br><img src="http://objects.earthchen.cn/docker_study_part5%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BB%93%E6%9E%9C.png" alt="part5结果"></p>
</li>
</ol>
<p>！！！笔者这里的redis运行正常，但是代码中的链接redis计数功能这里并不可以,有知道的可以告知我一下。!!!!</p>
<blockquote>
<p>注：</p>
<ul>
<li>ddocker Version:      17.05.0-ce</li>
<li>docker-machine version 0.12.2, build 9371605</li>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中搭建测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Celery-分布式任务队列学习笔记]]></title>
      <url>/2017/08/20/celery_study/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Celery 是一个简单、灵活且可靠的，处理大量消息的分布式系统，并且提供维护这样一个系统的必需工具。<br>它是一个专注于实时处理的任务队列，同时也支持任务调度。<br>以上是celery自己官网的介绍</p>
</blockquote>
<p>celery的应用场景很广泛</p>
<ul>
<li>处理异步任务</li>
<li>任务调度</li>
<li>处理定时任务</li>
<li>分布式调度</li>
</ul>
<p>好处也很多，尤其在使用python构建的应用系统中，无缝衔接，使用相当方便。</p>
<a id="more"></a>
<h1 id="Celery"><a href="#Celery" class="headerlink" title="Celery"></a>Celery</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装Celery"><a href="#安装Celery" class="headerlink" title="安装Celery"></a>安装Celery</h3><p>推荐使用pip安装，如果你使用的是虚拟环境，请在虚拟环境里安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ pip install celery</span>
</pre></td></tr></table></figure></p>
<h3 id="安装消息中间件"><a href="#安装消息中间件" class="headerlink" title="安装消息中间件"></a>安装消息中间件</h3><p>Celery 支持 RabbitMQ、Redis 甚至其他数据库系统作为其消息代理中间件</p>
<p>你希望用什么中间件和后端就请自行安装，一般都使用redis或者RabbitMQ</p>
<h4 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h4><p>在Ubuntu系统下使用apt-get命令就可以<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo apt-get install redis-server</span>
</pre></td></tr></table></figure></p>
<p>如果你使用redis作为中间件，还需要安装redis支持包，同样使用pip安装即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ pip install redis</span>
</pre></td></tr></table></figure></p>
<p>能出现以下结果即为成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt;</span>
</pre></td></tr></table></figure></p>
<p>其他的redis知识这里不左介绍，如果有兴趣，可以自行了解</p>
<p>如果你使用RabbitMQ，也请安装RabbitMQ</p>
<h4 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo apt-get install rabbitmq-server</span>
</pre></td></tr></table></figure>
<h2 id="使用Celery"><a href="#使用Celery" class="headerlink" title="使用Celery"></a>使用Celery</h2><h3 id="简单直接使用"><a href="#简单直接使用" class="headerlink" title="简单直接使用"></a>简单直接使用</h3><p>可以在需要的地方直接引入Celery,直接使用即可。最简单的方式只需要配置一个任务和中间人即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span>
<span class="line"></span>
<span class="line">app = Celery(<span class="string">'tasks'</span>, broker=<span class="string">'redis://localhost:6379/3'</span>)</span>
<span class="line"></span>
<span class="line"><span class="meta">@app.task</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span>
<span class="line">    <span class="keyword">return</span> x + y</span>
</pre></td></tr></table></figure></p>
<p>我这里使用了redis作为中间件，这是可以按自己的习惯替换的</p>
<p>由于默认的配置不是最切合我们的项目实际需要，一般来说我们都需要按我们自己的要求配置一些，<br>但是由于需要将项目解耦，也好维护，我们最好使用单独的一个文件编写配置。</p>
<h3 id="单独配置配置文件"><a href="#单独配置配置文件" class="headerlink" title="单独配置配置文件"></a>单独配置配置文件</h3><p>比上面的稍微复杂一点，我们需要创建两个文件，一个为<strong>config.py</strong>的celery配置文件，在其中填写适合我们项目的配置，在创建一个<strong>tasks.py</strong>文件来编写我们的任务。文件的名字可以按你的喜好自己命名。</p>
<p><strong>config.py</strong>内容为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span>
<span class="line"><span class="comment"># 配置文件同一配置celery</span></span>
<span class="line">BROKER_URL = <span class="string">'redis://localhost:6379/3'</span></span>
<span class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://localhost:6379/4'</span></span>
<span class="line"></span>
<span class="line">CELERY_TASK_SERIALIZER = <span class="string">'json'</span></span>
<span class="line">CELERY_RESULT_SERIALIZER = <span class="string">'json'</span></span>
<span class="line">CELERY_ACCEPT_CONTENT = [<span class="string">'json'</span>]</span>
<span class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span></span>
<span class="line">CELERY_ENABLE_UTC = <span class="keyword">True</span></span>
<span class="line"></span>
<span class="line"><span class="comment"># 把“脏活”路由到专用的队列：</span></span>
<span class="line">CELERY_ROUTES = &#123;</span>
<span class="line">    <span class="string">'tasks.add'</span>: <span class="string">'low-priority'</span>,</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment"># 限制任务的速率，这样每分钟只允许处理 10 个该类型的任务：</span></span>
<span class="line">CELERY_ANNOTATIONS = &#123;</span>
<span class="line">    <span class="string">'tasks.add'</span>: &#123;<span class="string">'rate_limit'</span>: <span class="string">'10/m'</span>&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>配置好以后可以用以下命令检查配置文件是否正确(config为配置文件名)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ python -m config</span>
</pre></td></tr></table></figure></p>
<p><strong>tasks.py</strong>内容为:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span>
<span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span>
<span class="line"></span>
<span class="line">app = Celery()</span>
<span class="line"><span class="comment"># 参数为配置文件的文件名</span></span>
<span class="line">app.config_from_object(<span class="string">'config'</span>)</span>
<span class="line"></span>
<span class="line"><span class="meta">@app.task</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span>
<span class="line">    <span class="keyword">return</span> x + y</span>
</pre></td></tr></table></figure></p>
<p>还有一种同一设置配置的方式，不是很推荐<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">app.conf.update(</span>
<span class="line">    task_serializer=<span class="string">'json'</span>,</span>
<span class="line">    accept_content=[<span class="string">'json'</span>],  <span class="comment"># Ignore other content</span></span>
<span class="line">    result_serializer=<span class="string">'json'</span>,</span>
<span class="line">    timezone=<span class="string">'Europe/Oslo'</span>,</span>
<span class="line">    enable_utc=<span class="keyword">True</span>,</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<p>在app使用前先需要用以上方法批量更新配置文件。</p>
<h3 id="在应用上使用"><a href="#在应用上使用" class="headerlink" title="在应用上使用"></a>在应用上使用</h3><p>工程目录结构为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">proj/</span>
<span class="line">    __init__.py</span>
<span class="line">    <span class="comment"># 存放配置和启动celery代码</span></span>
<span class="line">    celery.py</span>
<span class="line">    <span class="comment"># 存放任务</span></span>
<span class="line">    tasks.py</span>
</pre></td></tr></table></figure></p>
<p><strong>celery.py</strong>为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span>
<span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span>
<span class="line"></span>
<span class="line">app = Celery(<span class="string">'proj'</span>,</span>
<span class="line">             broker=<span class="string">'redis://localhost:6379/3'</span>,</span>
<span class="line">             backend=<span class="string">'redis://localhost:6379/4'</span>,</span>
<span class="line">             include=[<span class="string">'proj.tasks'</span>])</span>
<span class="line"></span>
<span class="line"><span class="comment"># Optional configuration, see the application user guide.</span></span>
<span class="line">app.conf.update(</span>
<span class="line">    result_expires=<span class="number">3600</span>,</span>
<span class="line">)</span>
<span class="line"></span>
<span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span>
<span class="line">    app.start()</span>
</pre></td></tr></table></figure></p>
<p><strong>tasks.py</strong>为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span>
<span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="meta">@app.task</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span>
<span class="line">    <span class="keyword">return</span> x + y</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="meta">@app.task</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(x, y)</span>:</span></span>
<span class="line">    <span class="keyword">return</span> x * y</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="meta">@app.task</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xsum</span><span class="params">(numbers)</span>:</span></span>
<span class="line">    <span class="keyword">return</span> sum(numbers)</span>
</pre></td></tr></table></figure></p>
<p>启动celery只需要在proj同级目录下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ celery -A proj worker <span class="_">-l</span> info</span>
</pre></td></tr></table></figure></p>
<h3 id="在django中使用celery"><a href="#在django中使用celery" class="headerlink" title="在django中使用celery"></a>在django中使用celery</h3><p>我们的django的项目的目录结构一般如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">proj/</span>
<span class="line">    manage.py</span>
<span class="line">    myapp/</span>
<span class="line">    proj/</span>
<span class="line">        __init__py</span>
<span class="line">        settings.py</span>
<span class="line">        urls.py</span>
<span class="line">        wsgi.py</span>
</pre></td></tr></table></figure></p>
<p>想要在django项目中使用celery，我们首先需要在django中配置celery</p>
<p>我们需要在与工程名同名的子文件夹中添加<strong>celery.py</strong>文件<br>在本例中也就是<strong>proj/proj/celery.py</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span>
<span class="line"><span class="keyword">import</span> os</span>
<span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span>
<span class="line"></span>
<span class="line"><span class="comment"># set the default Django settings module for the 'celery' program.</span></span>
<span class="line"><span class="comment"># 第二个参数为工程名.settings</span></span>
<span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'proj.settings'</span>)</span>
<span class="line"></span>
<span class="line"><span class="comment"># 括号里的参数为工程名</span></span>
<span class="line">app = Celery(<span class="string">'proj'</span>)</span>
<span class="line"></span>
<span class="line"><span class="comment"># Using a string here means the worker doesn't have to serialize</span></span>
<span class="line"><span class="comment"># the configuration object to child processes.</span></span>
<span class="line"><span class="comment"># - namespace='CELERY' means all celery-related configuration keys</span></span>
<span class="line"><span class="comment">#   should have a `CELERY_` prefix.</span></span>
<span class="line"><span class="comment"># 配置文件需要写在setting.py中，并且配置项需要使用`CELERY_`作为前缀</span></span>
<span class="line">app.config_from_object(<span class="string">'django.conf:settings'</span>, namespace=<span class="string">'CELERY'</span>)</span>
<span class="line"></span>
<span class="line"><span class="comment"># Load task modules from all registered Django app configs.</span></span>
<span class="line"><span class="comment"># 能够自动加载所有在django中注册的app，也就是setting.py中的INSTALLED_APPS</span></span>
<span class="line">app.autodiscover_tasks()</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="meta">@app.task(bind=True)</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug_task</span><span class="params">(self)</span>:</span></span>
<span class="line">    print(<span class="string">'Request: &#123;0!r&#125;'</span>.format(self.request))</span>
</pre></td></tr></table></figure></p>
<p>然后我们需要在同级目录下的<strong><strong>init</strong>.py</strong>文件中配置如下内容<br><strong>proj/proj/<strong>init</strong>.py</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span>
<span class="line"></span>
<span class="line"><span class="comment"># This will make sure the app is always imported when</span></span>
<span class="line"><span class="comment"># Django starts so that shared_task will use this app.</span></span>
<span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span>
<span class="line"></span>
<span class="line">__all__ = [<span class="string">'celery_app'</span>]</span>
</pre></td></tr></table></figure></p>
<p>然后我们就可以把需要的任务放到需要的app下的<strong>tasks.py</strong>中，现在项目目录结构如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line">proj/</span>
<span class="line">    manage.py</span>
<span class="line">    myapp1/</span>
<span class="line">        __init__.py</span>
<span class="line">        tasks.py</span>
<span class="line">        views.py</span>
<span class="line">        model.py</span>
<span class="line">        tests.py</span>
<span class="line">    myapp2/</span>
<span class="line">        __init__.py</span>
<span class="line">        tasks.py</span>
<span class="line">        views.py</span>
<span class="line">        model.py</span>
<span class="line">        tests.py</span>
<span class="line">    proj/</span>
<span class="line">        __init__py</span>
<span class="line">        settings.py</span>
<span class="line">        urls.py</span>
<span class="line">        wsgi.py</span>
</pre></td></tr></table></figure></p>
<p>可能的一个tasks.py文件内容如下：<br><strong>myapp1/tasks.py</strong>为:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># Create your tasks here</span></span>
<span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span>
<span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span>
<span class="line"><span class="keyword">import</span> time</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="meta">@shared_task</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span>
<span class="line">    <span class="comment"># 为了测试是否是异步，特意休眠5s，观察是否会卡主主进程</span></span>
<span class="line">    time.sleep(<span class="number">5</span>)</span>
<span class="line">    print(x+y)</span>
<span class="line">    <span class="keyword">return</span> x + y</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="meta">@shared_task</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(x, y)</span>:</span></span>
<span class="line">    <span class="keyword">return</span> x * y</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="meta">@shared_task</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xsum</span><span class="params">(numbers)</span>:</span></span>
<span class="line">    <span class="keyword">return</span> sum(numbers)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>@shared_task修饰器可以让你创建task不需要app实体</p>
</blockquote>
<p>在需要的地方调用相关任务即可,例如在<strong>myapp1/views.py</strong>中调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span>
<span class="line"><span class="keyword">from</span> .tasks <span class="keyword">import</span> add</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span>
<span class="line">    <span class="comment"># 测试celery任务</span></span>
<span class="line">    add.delay(<span class="number">4</span>,<span class="number">5</span>)</span>
<span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>)</span>
</pre></td></tr></table></figure></p>
<p>然后就可以启动项目，celery需要单独启动，所以需要开两个终端，分别</p>
<p>启动web应用服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ python manage.py runserver</span>
</pre></td></tr></table></figure></p>
<p>启动celery<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ celery -A proj worker <span class="_">-l</span> info</span>
</pre></td></tr></table></figure></p>
<p>然后访问浏览器就可以在启动celery的终端中看到输出<br><img src="http://objects.earthchen.cn/celery_study_django_test_res.png" alt="测试结果"></p>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><ul>
<li>如果你的项目需要在admin中管理调度，请使用<strong>django-celery-beat</strong></li>
</ul>
<ol>
<li>使用pip安装<strong>django-celery-beat</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ pip install django-celery-beat</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>不要在使用django-celery,这个项目已经停止更新好好多年。。。。</p>
<ol>
<li><p>在settings.py中添加这个app</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span>
<span class="line">    ...,</span>
<span class="line">    <span class="string">'django_celery_beat'</span>,</span>
<span class="line">)</span>
</pre></td></tr></table></figure>
</li>
<li><p>同步一下数据库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ python manage.py migrate</span>
</pre></td></tr></table></figure>
</li>
<li><p>设置<strong>celery beat</strong>服务使用<strong>django_celery_beat.schedulers:DatabaseScheduler scheduler</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ celery -A proj beat <span class="_">-l</span> info --scheduler django_celery_beat.schedulers:DatabaseScheduler</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>然后在就可以admin界面看到了。</p>
<ul>
<li>如果你想使用Django-ORM或者Django Cache作为后端，需要安装<strong>django-celery-results</strong>扩展（笔者不建议）</li>
</ul>
<ol>
<li>使用pip安装<strong>django-celery-results</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ pip install django-celery-results</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>不要在使用django-celery,这个项目已经停止更新好好多年。。。。</p>
<ol>
<li><p>在settings.py中添加这个app</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span>
<span class="line">    ...,</span>
<span class="line">    <span class="string">'django_celery_results'</span>,</span>
<span class="line">)</span>
</pre></td></tr></table></figure>
</li>
<li><p>同步一下数据库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ python manage.py migrate django_celery_results</span>
</pre></td></tr></table></figure>
</li>
<li><p>配置后端，在settings.py中配置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用数据库作为结果后端</span></span>
<span class="line">CELERY_RESULT_BACKEND = <span class="string">'django-db'</span></span>
<span class="line"></span>
<span class="line"><span class="comment"># 使用缓存作为结果后端</span></span>
<span class="line">CELERY_RESULT_BACKEND = <span class="string">'django-cache'</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>基本使用大概就是上述这些，其他具体配置和使用还需自己研读<a href="http://docs.celeryproject.org/en/latest/" target="_blank" rel="external">官方文档</a></p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong> <strong>django1.9</strong>中搭建测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Redis </tag>
            
            <tag> Python </tag>
            
            <tag> Celery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django使用Channels实现websocket]]></title>
      <url>/2017/08/18/django_channels_websocket/</url>
      <content type="html"><![CDATA[<p>由于项目有个需要实时显示状态的需求，搜索了各种实现方法，看来只有websocket最靠谱，但django原生是不支持websocket的，最终发现了chango-channels这个项目。可以帮我们实现我们的需求。</p>
<a id="more"></a>
<h1 id="Channels"><a href="#Channels" class="headerlink" title="Channels"></a>Channels</h1><p>首先放上<a href="http://channels.readthedocs.io/en/stable/index.html" target="_blank" rel="external">官方文档</a></p>
<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><h3 id="安装channels"><a href="#安装channels" class="headerlink" title="安装channels"></a>安装channels</h3><p>如果使用的django是1.9包括以上的话，可以不用输入文档中<strong>-U</strong>参数，直接使用pip在终端中输入如下命令即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ pip install channels</span>
</pre></td></tr></table></figure></p>
<h3 id="配置channels"><a href="#配置channels" class="headerlink" title="配置channels"></a>配置channels</h3><p>想要使用channels，我们首先需要在setting里配置一下channels。</p>
<h4 id="在INSTALLED-APPS中添加channels"><a href="#在INSTALLED-APPS中添加channels" class="headerlink" title="在INSTALLED_APPS中添加channels"></a>在INSTALLED_APPS中添加channels</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span>
<span class="line">    <span class="string">'django.contrib.auth'</span>,</span>
<span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span>
<span class="line">    <span class="string">'django.contrib.sessions'</span>,</span>
<span class="line">    <span class="string">'django.contrib.sites'</span>,</span>
<span class="line">    ...</span>
<span class="line">    <span class="string">'channels'</span>,</span>
<span class="line">)</span>
</pre></td></tr></table></figure>
<h4 id="配置channels路由和通道后端"><a href="#配置channels路由和通道后端" class="headerlink" title="配置channels路由和通道后端"></a>配置channels路由和通道后端</h4><p>简单的话我们可以使用内存作为后端，路由配置放在合适的地方<br>配置如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">CHANNEL_LAYERS  =  &#123; </span>
<span class="line">    “default” ： &#123; </span>
<span class="line">        “BACKEND” ： “asgiref.inmemory.ChannelLayer” ，</span>
<span class="line">        <span class="comment"># 这里是路由的路径，怎么填写都可以，只要能找到</span></span>
<span class="line">        “ROUTING” ： “你的工程名.routing.channel_routing” ，</span>
<span class="line">    &#125;，</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>由于我们已经使用了redis作为缓存系统，在这里我们也就正好使用redis在作为我们的通道后端。<br>为了使用redis作为channels的后端，我们还需要安装一个库asgi_redis。</p>
<ol>
<li>使用pip安装asgi_redis，在终端中输入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ pip install asgi_redis</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>安装之后我们就可以使用redis作为channels的后端了</p>
<ol>
<li>修改channels的BACKEND<br>在<strong>settings.py</strong>修改<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">CHANNEL_LAYERS = &#123;</span>
<span class="line">    <span class="string">"default"</span>: &#123;</span>
<span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"asgi_redis.RedisChannelLayer"</span>,</span>
<span class="line">        <span class="string">"CONFIG"</span>: &#123;</span>
<span class="line">            <span class="string">"hosts"</span>: [os.environ.get(<span class="string">'REDIS_URL'</span>, <span class="string">'redis://127.0.0.1:6379/2'</span>)],</span>
<span class="line">        &#125;,</span>
<span class="line">        <span class="comment"># 配置路由的路径</span></span>
<span class="line">        <span class="string">"ROUTING"</span>: <span class="string">"你的工程名.routing.channel_routing"</span>,</span>
<span class="line">    &#125;,</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h2 id="使用channels"><a href="#使用channels" class="headerlink" title="使用channels"></a>使用channels</h2><p>使用channels，笔者主要是用来解决websocket连接和传输，这里不讨论http部分。</p>
<h3 id="最简单的例子"><a href="#最简单的例子" class="headerlink" title="最简单的例子"></a>最简单的例子</h3><ol>
<li><p>在合适的app下创建一个<strong>customers.py</strong>,在其中编写代码如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_message</span><span class="params">(message)</span>:</span></span>
<span class="line">    <span class="comment"># ASGI WebSocket packet-received and send-packet message types</span></span>
<span class="line">    <span class="comment"># both have a "text" key for their textual data.</span></span>
<span class="line">    message.reply_channel.send(&#123;</span>
<span class="line">        <span class="string">"text"</span>: message.content[<span class="string">'text'</span>],</span>
<span class="line">    &#125;)</span>
</pre></td></tr></table></figure>
</li>
<li><p>在同一个app下创建一个<strong>router.py</strong>,在其中编写代码如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> channels.routing <span class="keyword">import</span> route</span>
<span class="line"><span class="keyword">from</span> .consumers <span class="keyword">import</span> ws_message</span>
<span class="line"></span>
<span class="line">channel_routing = [</span>
<span class="line">    route(<span class="string">"websocket.receive"</span>, ws_message),</span>
<span class="line">]</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>这里的意思就是当接收到前端发来的消息时，后端会触发<strong>ws_message</strong>函数，这里写的是一个回音壁程序，就是把原数据在发送回去。</p>
<ol>
<li>前端代码如下，在浏览器的控制台或者一个html的js代码区域编写如下代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// Note that the path doesn't matter for routing; any WebSocket</span></span>
<span class="line"><span class="comment">// connection gets bumped over to WebSocket consumers</span></span>
<span class="line">socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://127.0.0.1:8000/chat/"</span>);</span>
<span class="line">socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span>
<span class="line">    consoe.log(e.data);</span>
<span class="line">&#125;</span>
<span class="line">socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line">    socket.send(<span class="string">"hello world"</span>);</span>
<span class="line">&#125;</span>
<span class="line"><span class="comment">// Call onopen directly if socket is already open</span></span>
<span class="line"><span class="keyword">if</span> (socket.readyState == WebSocket.OPEN) socket.onopen();</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>然后就可以执行<strong>python manage.py runserver</strong>查看运行效果，如果不出意外的话应该可以看到效果。</p>
<h3 id="利用组的概念实现多个浏览器-用户-之间的交互"><a href="#利用组的概念实现多个浏览器-用户-之间的交互" class="headerlink" title="利用组的概念实现多个浏览器(用户)之间的交互"></a>利用组的概念实现多个浏览器(用户)之间的交互</h3><ol>
<li>在<strong>customers.py</strong>中编写代码如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> channels <span class="keyword">import</span> Group</span>
<span class="line"></span>
<span class="line"><span class="comment"># Connected to websocket.connect</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_add</span><span class="params">(message)</span>:</span></span>
<span class="line">    <span class="comment"># Accept the connection</span></span>
<span class="line">    message.reply_channel.send(&#123;<span class="string">"accept"</span>: <span class="keyword">True</span>&#125;)</span>
<span class="line">    <span class="comment"># Add to the chat group</span></span>
<span class="line">    Group(<span class="string">"chat"</span>).add(message.reply_channel)</span>
<span class="line"></span>
<span class="line"><span class="comment"># Connected to websocket.receive</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_message</span><span class="params">(message)</span>:</span></span>
<span class="line">    Group(<span class="string">"chat"</span>).send(&#123;</span>
<span class="line">        <span class="string">"text"</span>: <span class="string">"[user] %s"</span> % message.content[<span class="string">'text'</span>],</span>
<span class="line">    &#125;)</span>
<span class="line"></span>
<span class="line"><span class="comment"># Connected to websocket.disconnect</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_disconnect</span><span class="params">(message)</span>:</span></span>
<span class="line">    Group(<span class="string">"chat"</span>).discard(message.reply_channel)</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>分为三个部分，分别是websocket连接的时候进行的操作，收到消息的时候进行的操作，和关闭链接的时候进行的操作，这里利用了组的概念，在触发连接的时候，把其加入chat组，当收到消息时候，在组内所有用户发送信息，最后关闭连接的时候退出组。</p>
<ol>
<li><p>由于将一次连接分为了三个部分，其路由也得配置三遍，所以在<strong>router.py</strong>中编写代码如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> channels.routing <span class="keyword">import</span> route</span>
<span class="line"><span class="keyword">from</span> .consumers <span class="keyword">import</span> ws_add, ws_message, ws_disconnect</span>
<span class="line"></span>
<span class="line">channel_routing = [</span>
<span class="line">    route(<span class="string">"websocket.connect"</span>, ws_add),</span>
<span class="line">    route(<span class="string">"websocket.receive"</span>, ws_message),</span>
<span class="line">    route(<span class="string">"websocket.disconnect"</span>, ws_disconnect),</span>
<span class="line">]</span>
</pre></td></tr></table></figure>
</li>
<li><p>测试用前端代码如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// Note that the path doesn't matter right now; any WebSocket</span></span>
<span class="line"><span class="comment">// connection gets bumped over to WebSocket consumers</span></span>
<span class="line">socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://127.0.0.1:8000/chat/"</span>);</span>
<span class="line">socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span>
<span class="line">     consoe.log(e.data);</span>
<span class="line">&#125;</span>
<span class="line">socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line">    socket.send(<span class="string">"hello world"</span>);</span>
<span class="line">&#125;</span>
<span class="line"><span class="comment">// Call onopen directly if socket is already open</span></span>
<span class="line"><span class="keyword">if</span> (socket.readyState == WebSocket.OPEN) socket.onopen();</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>然后就可以执行<strong>python manage.py runserver</strong>查看运行效果,<br>建议同时打开两个浏览器选项卡同时运行上述JavaScript代码，就能看到对方发来的消息啦。</p>
<p>上述代码还有一个问题，就是无论是谁访问同一个url都可以进到这个组里，我们也不能知道是谁进入了这个组中，得到他的一些信息，所以就需要一些认证功能，不能让任何人都能加入该组，所以我们需要认证</p>
<h3 id="channels的认证"><a href="#channels的认证" class="headerlink" title="channels的认证"></a>channels的认证</h3><p>channels自带了很多很好用的修饰器来帮我们解决这个问题，我们可以访问到当前的session回话，或者cookie。</p>
<ul>
<li>使用<strong>http_session</strong>修饰器就可以访问用户的session会话，拿到<strong>request.session</strong></li>
<li>使用<strong>http_session_user</strong>修饰器就可以获取到session中的用户信息,拿到<strong>message.user</strong></li>
<li>使用<strong>channel_session_user</strong>修饰器，就可以在通道中直接拿到<strong>message.user</strong></li>
<li><strong>channel_session_user_from_http</strong>修饰器可以将以上修饰器的功能集合起来，直接获取到所需的用户</li>
</ul>
<p>以下是一个用户只能和用户名第一个字符相同的人聊天的程序代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> channels <span class="keyword">import</span> Channel, Group</span>
<span class="line"><span class="keyword">from</span> channels.sessions <span class="keyword">import</span> channel_session</span>
<span class="line"><span class="keyword">from</span> channels.auth <span class="keyword">import</span> channel_session_user, channel_session_user_from_http</span>
<span class="line"></span>
<span class="line"><span class="comment"># Connected to websocket.connect</span></span>
<span class="line"><span class="meta">@channel_session_user_from_http</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_add</span><span class="params">(message)</span>:</span></span>
<span class="line">    <span class="comment"># Accept connection</span></span>
<span class="line">    message.reply_channel.send(&#123;<span class="string">"accept"</span>: <span class="keyword">True</span>&#125;)</span>
<span class="line">    <span class="comment"># Add them to the right group</span></span>
<span class="line">    Group(<span class="string">"chat-%s"</span> % message.user.username[<span class="number">0</span>]).add(message.reply_channel)</span>
<span class="line"></span>
<span class="line"><span class="comment"># Connected to websocket.receive</span></span>
<span class="line"><span class="meta">@channel_session_user</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_message</span><span class="params">(message)</span>:</span></span>
<span class="line">    Group(<span class="string">"chat-%s"</span> % message.user.username[<span class="number">0</span>]).send(&#123;</span>
<span class="line">        <span class="string">"text"</span>: message[<span class="string">'text'</span>],</span>
<span class="line">    &#125;)</span>
<span class="line"></span>
<span class="line"><span class="comment"># Connected to websocket.disconnect</span></span>
<span class="line"><span class="meta">@channel_session_user</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_disconnect</span><span class="params">(message)</span>:</span></span>
<span class="line">    Group(<span class="string">"chat-%s"</span> % message.user.username[<span class="number">0</span>]).discard(message.reply_channel)</span>
</pre></td></tr></table></figure></p>
<p>由于笔者的项目使用的是Json Web Token作为身份认证，对于服务器来说没有session，所以需要自己实现一个认证。</p>
<h3 id="Json-Web-Token认证"><a href="#Json-Web-Token认证" class="headerlink" title="Json Web Token认证"></a>Json Web Token认证</h3><p>本来在http中使用ajax是将token放在请求头中的，但是在websocket中这样的方式并不可以，所以退而求其次，我们只能将其放在url中或者发送的数据中了。<br>又因为笔者不想每次发消息都携带token，所以选择了在url中携带的方式，</p>
<p>最后发到服务器的url形式是这样的”ws://127.0.0.1:8000/chat/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QxMjMiLCJvcmlnX2lhdCI6MTUwMzA0MzUyOCwidXNlcl9pZCI6MSwiZW1haWwiOiIxNzkxNTM4NjA5QHFxLmNvbSIsImV4cCI6MTUwMzEyOTkyOH0.jNYjNxUqXb1Ig6e3tdB9Xq2jH5LrqQe8zFLH40J9694”</p>
<p>我们需要实现一个修饰器去解决对token验证的问题，以备其他的使用</p>
<ol>
<li>在合适的地方创建一个<strong>ws_authentication.py</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
<span class="line">86</span>
<span class="line">87</span>
<span class="line">88</span>
<span class="line">89</span>
<span class="line">90</span>
<span class="line">91</span>
<span class="line">92</span>
<span class="line">93</span>
<span class="line">94</span>
<span class="line">95</span>
<span class="line">96</span>
<span class="line">97</span>
<span class="line">98</span>
<span class="line">99</span>
<span class="line">100</span>
<span class="line">101</span>
<span class="line">102</span>
<span class="line">103</span>
<span class="line">104</span>
<span class="line">105</span>
<span class="line">106</span>
<span class="line">107</span>
<span class="line">108</span>
<span class="line">109</span>
<span class="line">110</span>
<span class="line">111</span>
<span class="line">112</span>
<span class="line">113</span>
<span class="line">114</span>
<span class="line">115</span>
<span class="line">116</span>
<span class="line">117</span>
<span class="line">118</span>
<span class="line">119</span>
<span class="line">120</span>
<span class="line">121</span>
<span class="line">122</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span>
<span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span>
<span class="line"></span>
<span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> ugettext_lazy <span class="keyword">as</span> _</span>
<span class="line"></span>
<span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span>
<span class="line"><span class="keyword">from</span> channels.handler <span class="keyword">import</span> AsgiRequest</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> jwt</span>
<span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span>
<span class="line"><span class="keyword">from</span> rest_framework_jwt.settings <span class="keyword">import</span> api_settings</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> logging</span>
<span class="line"></span>
<span class="line">logger = logging.getLogger(__name__)  <span class="comment"># 为loggers中定义的名称</span></span>
<span class="line"></span>
<span class="line">User = get_user_model()</span>
<span class="line">jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span>
<span class="line">jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span>
<span class="line">jwt_decode_handler = api_settings.JWT_DECODE_HANDLER</span>
<span class="line">jwt_get_username_from_payload = api_settings.JWT_PAYLOAD_GET_USERNAME_HANDLER</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">token_authenticate</span><span class="params">(token, message)</span>:</span></span>
<span class="line">    <span class="string">"""</span>
<span class="line">    Tries to authenticate user based on the supplied token. It also checks</span>
<span class="line">    the token structure and validity.</span>
<span class="line">    """</span></span>
<span class="line"></span>
<span class="line">    payload = check_payload(token=token, message=message)</span>
<span class="line">    user = check_user(payload=payload, message=message)</span>
<span class="line"></span>
<span class="line">    <span class="string">"""Other authenticate operation"""</span></span>
<span class="line">    <span class="keyword">return</span> user, token</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="comment"># 检查负载</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_payload</span><span class="params">(token, message)</span>:</span></span>
<span class="line">    payload = <span class="keyword">None</span></span>
<span class="line">    <span class="keyword">try</span>:</span>
<span class="line">        payload = jwt_decode_handler(token)</span>
<span class="line">    <span class="keyword">except</span> jwt.ExpiredSignature:</span>
<span class="line">        msg = _(<span class="string">'Signature has expired.'</span>)</span>
<span class="line">        logger.warn(msg)</span>
<span class="line">        <span class="comment"># raise ValueError(msg)</span></span>
<span class="line">        _close_reply_channel(message)</span>
<span class="line">    <span class="keyword">except</span> jwt.DecodeError:</span>
<span class="line">        msg = _(<span class="string">'Error decoding signature.'</span>)</span>
<span class="line">        logger.warn(msg)</span>
<span class="line">        _close_reply_channel(message)</span>
<span class="line">    <span class="keyword">return</span> payload</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="comment"># 检查用户</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_user</span><span class="params">(payload, message)</span>:</span></span>
<span class="line">    username = <span class="keyword">None</span></span>
<span class="line">    <span class="keyword">try</span>:</span>
<span class="line">        username = payload.get(<span class="string">'username'</span>)</span>
<span class="line">    <span class="keyword">except</span> Exception:</span>
<span class="line">        msg = _(<span class="string">'Invalid payload.'</span>)</span>
<span class="line">        logger.warn(msg)</span>
<span class="line">        _close_reply_channel(message)</span>
<span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> username:</span>
<span class="line">        msg = _(<span class="string">'Invalid payload.'</span>)</span>
<span class="line">        logger.warn(msg)</span>
<span class="line">        _close_reply_channel(message)</span>
<span class="line">        <span class="keyword">return</span></span>
<span class="line">        <span class="comment"># Make sure user exists</span></span>
<span class="line">    <span class="keyword">try</span>:</span>
<span class="line">        user = User.objects.get_by_natural_key(username)</span>
<span class="line">    <span class="keyword">except</span> User.DoesNotExist:</span>
<span class="line">        msg = _(<span class="string">"User doesn't exist."</span>)</span>
<span class="line">        logger.warn(msg)</span>
<span class="line">        <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)</span>
<span class="line"></span>
<span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user.is_active:</span>
<span class="line">        msg = _(<span class="string">'User account is disabled.'</span>)</span>
<span class="line">        logger.warn(msg)</span>
<span class="line">        <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)</span>
<span class="line">    <span class="keyword">return</span> user</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="comment"># 关闭websocket</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_close_reply_channel</span><span class="params">(message)</span>:</span></span>
<span class="line">    message.reply_channel.send(&#123;<span class="string">"close"</span>: <span class="keyword">True</span>&#125;)</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="comment"># 验证request中的token</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_auth_request_token</span><span class="params">(func)</span>:</span></span>
<span class="line">    <span class="string">"""</span>
<span class="line">    Checks the presence of a "token" request parameter and tries to</span>
<span class="line">    authenticate the user based on its content.</span>
<span class="line">    The request url must include token.</span>
<span class="line">    eg: /v1/channel/1/?token=abcdefghijklmn</span>
<span class="line">    """</span></span>
<span class="line"></span>
<span class="line"><span class="meta">    @wraps(func)</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(message, *args, **kwargs)</span>:</span></span>
<span class="line">        <span class="keyword">try</span>:</span>
<span class="line">            <span class="keyword">if</span> <span class="string">"method"</span> <span class="keyword">not</span> <span class="keyword">in</span> message.content:</span>
<span class="line">                message.content[<span class="string">'method'</span>] = <span class="string">"FAKE"</span></span>
<span class="line">            request = AsgiRequest(message)</span>
<span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span>
<span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Cannot parse HTTP message - are you sure this is a HTTP consumer? %s"</span> % e)</span>
<span class="line"></span>
<span class="line">        token = request.GET.get(<span class="string">"token"</span>, <span class="keyword">None</span>)</span>
<span class="line"></span>
<span class="line">        <span class="keyword">print</span> request.path, request.GET</span>
<span class="line"></span>
<span class="line">        <span class="keyword">if</span> token <span class="keyword">is</span> <span class="keyword">None</span>:</span>
<span class="line">            _close_reply_channel(message)</span>
<span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Missing token request parameter. Closing channel."</span>)</span>
<span class="line"></span>
<span class="line">        <span class="comment"># user, token = token_authenticate(token)</span></span>
<span class="line">        user, token = token_authenticate(token, message)</span>
<span class="line"></span>
<span class="line">        message.token = token</span>
<span class="line">        message.user = user</span>
<span class="line"></span>
<span class="line">        <span class="keyword">return</span> func(message, *args, **kwargs)</span>
<span class="line"></span>
<span class="line">    <span class="keyword">return</span> inner</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>由于笔者使用了django-restframework-jwt,其中的token验证方法是和其一样的，如果你的验证方式不一样，可以自行替换。</p>
<p>有了上述代码，我们就可以在连接的时候判断token是否有效，以及是否还建立连接。</p>
<p>不过其中代码在错误处理的时候有些问题，我这里简单的处理为用日志打印和关闭连接。有知道怎么反馈异常信息的可以在评论区告知我。</p>
<ol>
<li>在<strong>consumers.py</strong>中使用修饰器去认证token<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> channels <span class="keyword">import</span> Group</span>
<span class="line"><span class="keyword">from</span> .ws_authentication <span class="keyword">import</span> ws_auth_request_token</span>
<span class="line"></span>
<span class="line"><span class="comment"># Connected to websocket.connect</span></span>
<span class="line"><span class="meta">@ws_auth_request_token</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_add</span><span class="params">(message)</span>:</span></span>
<span class="line">    <span class="comment"># Accept the connection</span></span>
<span class="line">    message.reply_channel.send(&#123;<span class="string">"accept"</span>: <span class="keyword">True</span>&#125;)</span>
<span class="line">    <span class="comment"># Add to the chat group</span></span>
<span class="line">    Group(<span class="string">"chat"</span>).add(message.reply_channel)</span>
<span class="line"></span>
<span class="line"><span class="comment"># Connected to websocket.receive</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_message</span><span class="params">(message)</span>:</span></span>
<span class="line">    Group(<span class="string">"chat"</span>).send(&#123;</span>
<span class="line">        <span class="string">"text"</span>: <span class="string">"[user] %s"</span> % message.content[<span class="string">'text'</span>],</span>
<span class="line">    &#125;)</span>
<span class="line"></span>
<span class="line"><span class="comment"># Connected to websocket.disconnect</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_disconnect</span><span class="params">(message)</span>:</span></span>
<span class="line">    Group(<span class="string">"chat"</span>).discard(message.reply_channel)</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>这样就能轻易的验证了。</p>
<h3 id="使用类视图"><a href="#使用类视图" class="headerlink" title="使用类视图"></a>使用类视图</h3><p>django有一种类视图，在channels这里也可以，使用类视图可以让代码看着更简洁明了</p>
<ol>
<li>类视图可以将三种状态，连接，收到消息，关闭的时候写到一个类中，原来的<strong>consumers.py</strong>代码就可以改为如下代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> channels.generic.websockets <span class="keyword">import</span> WebsocketConsumer</span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyConsumer</span><span class="params">(WebsocketConsumer)</span>:</span></span>
<span class="line"></span>
<span class="line">    <span class="comment"># Set to True to automatically port users from HTTP cookies</span></span>
<span class="line">    <span class="comment"># (you don't need channel_session_user, this implies it)</span></span>
<span class="line">    http_user = <span class="keyword">True</span></span>
<span class="line"></span>
<span class="line">    <span class="comment"># Set to True if you want it, else leave it out</span></span>
<span class="line">    strict_ordering = <span class="keyword">False</span></span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connection_groups</span><span class="params">(self, **kwargs)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        Called to return the list of groups to automatically add/remove</span>
<span class="line">        this connection to/from.</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">return</span> [<span class="string">"test"</span>]</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, message, **kwargs)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        Perform things on connection start</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># Accept the connection; this is done by default if you don't override</span></span>
<span class="line">        <span class="comment"># the connect function.</span></span>
<span class="line">        self.message.reply_channel.send(&#123;<span class="string">"accept"</span>: <span class="keyword">True</span>&#125;)</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self, text=None, bytes=None, **kwargs)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        Called when a message is received with either text or bytes</span>
<span class="line">        filled out.</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># Simple echo</span></span>
<span class="line">        self.send(text=text, bytes=bytes)</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disconnect</span><span class="params">(self, message, **kwargs)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        Perform things on connection close</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">pass</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>然后在不同状态出发的函数中填入自己需要的逻辑即可</p>
<p>如果你想使用<strong>channel_session</strong>或者<strong>channel_session_user</strong>，那么只要在类中设置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">channel_session_user = <span class="keyword">True</span></span>
</pre></td></tr></table></figure></p>
<p>如果你想使用session里的用户，那么也需要在类中添加一个参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">http_user = <span class="keyword">True</span></span>
</pre></td></tr></table></figure></p>
<ol>
<li>配置路由也需要做出一些变化<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> channels <span class="keyword">import</span> route, route_class</span>
<span class="line"></span>
<span class="line">channel_routing = [</span>
<span class="line">    route_class(consumers.ChatServer, path=<span class="string">r"^/chat/"</span>),</span>
<span class="line">]</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>或者更简单一点<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> consumers</span>
<span class="line"></span>
<span class="line">channel_routing = [</span>
<span class="line">    consumers.ChatServer.as_route(path=<span class="string">r"^/chat/"</span>),</span>
<span class="line">]</span>
</pre></td></tr></table></figure></p>
<h3 id="在channels类视图中使用token认证"><a href="#在channels类视图中使用token认证" class="headerlink" title="在channels类视图中使用token认证"></a>在channels类视图中使用token认证</h3><p>在类视图中添加修饰器较为麻烦，笔者认为将认证方法写在<strong>connect(self, message, </strong>kwargs)**中即可。</p>
<p>所以<strong>consumers.py</strong>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyConsumer</span><span class="params">(WebsocketConsumer)</span>:</span></span>
<span class="line">    <span class="comment"># Set to True if you want it, else leave it out</span></span>
<span class="line">    strict_ordering = <span class="keyword">False</span></span>
<span class="line"></span>
<span class="line">    http_user = <span class="keyword">True</span></span>
<span class="line">    <span class="comment"># 由于使用的是token方式，需要使用session将user传递到receive中</span></span>
<span class="line">    channel_session_user = <span class="keyword">True</span></span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connection_groups</span><span class="params">(self, **kwargs)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        Called to return the list of groups to automatically add/remove</span>
<span class="line">        this connection to/from.</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">return</span> [<span class="string">'test'</span>]</span>
<span class="line"></span>
<span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, message, **kwargs)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        Perform things on connection start</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">try</span>:</span>
<span class="line">            request = AsgiRequest(message)</span>
<span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span>
<span class="line">            self.close()</span>
<span class="line">            <span class="keyword">return</span></span>
<span class="line">        token = request.GET.get(<span class="string">"token"</span>, <span class="keyword">None</span>)</span>
<span class="line">        <span class="keyword">if</span> token <span class="keyword">is</span> <span class="keyword">None</span>:</span>
<span class="line">            self.close()</span>
<span class="line">            <span class="keyword">return</span></span>
<span class="line">        user, token = token_authenticate(token, message)</span>
<span class="line">        message.token = token</span>
<span class="line">        message.user = user</span>
<span class="line">        message.channel_session[<span class="string">'user'</span>]=user</span>
<span class="line">        self.message.reply_channel.send(&#123;<span class="string">"accept"</span>: <span class="keyword">True</span>&#125;)</span>
<span class="line">        <span class="keyword">print</span> <span class="string">'连接状态'</span>, message.user</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self, text=None, bytes=None, **kwargs)</span>:</span></span>
<span class="line">        <span class="keyword">print</span> <span class="string">'接收到消息'</span>, text, self.message.channel_session[<span class="string">'user'</span>]</span>
<span class="line">        <span class="string">"""</span>
<span class="line">        Called when a message is received with decoded JSON content</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># Simple echo</span></span>
<span class="line">        value = cache.get(<span class="string">'test'</span>)</span>
<span class="line">        <span class="keyword">print</span> value</span>
<span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span>
<span class="line">            <span class="keyword">if</span> cache.get(<span class="string">'test'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> cache.get(<span class="string">'test'</span>) != value:</span>
<span class="line">                value = cache.get(<span class="string">'test'</span>)</span>
<span class="line">                <span class="keyword">break</span></span>
<span class="line">            time.sleep(<span class="number">1</span>)</span>
<span class="line">        self.send(json.dumps(&#123;</span>
<span class="line">            <span class="string">"text"</span>: cache.get(<span class="string">'test'</span>)</span>
<span class="line">        &#125;))</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disconnect</span><span class="params">(self, message, **kwargs)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        Perform things on connection close</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">pass</span></span>
</pre></td></tr></table></figure></p>
<p>只需要看<strong>connect(self, message, </strong>kwargs)<strong>函数中代码即可，</strong>(self, text=None, bytes=None, <strong>kwargs)</strong>中为我要实现的一个简单逻辑。</p>
<p>笔者发现，channels中的三个状态,其中每个自身只能发一次信息，无论我在一次方法中send几次，所以我没办法，只能在前端的<strong>onmessage</strong>处理完数据，在发一次信息，后台将线程休眠等到参数变化在发送到前端。前端代码改为如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line">socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://127.0.0.1:8000"</span>+</span>
<span class="line">            <span class="string">"/chat/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QxMjMiLCJvcmlnX2lhdCI6MTUwMzA3Mzg0NiwidXNlcl9pZCI6MSwiZW1haWwiOiIxNzkxNTM4NjA5QHFxLmNvbSIsImV4cCI6MTUwMzE2MDI0Nn0.Za0BlGKn2JMpFoU0GYVZXIC-rwi8uWN420bIwy0bUFc"</span></span>
<span class="line">        );</span>
<span class="line">        socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span>
<span class="line">            <span class="built_in">console</span>.log(e.data);</span>
<span class="line">            <span class="comment">// socket.send("test")</span></span>
<span class="line">        &#125;</span>
<span class="line">        socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span>
<span class="line">            socket.send(&#123;<span class="string">'test'</span>:<span class="string">'hello world'</span>&#125;);</span>
<span class="line">            </span>
<span class="line">        &#125;</span>
<span class="line">        <span class="comment">// Call onopen directly if socket is already open</span></span>
<span class="line">        <span class="keyword">if</span> (socket.readyState == WebSocket.OPEN) socket.onopen();</span>
</pre></td></tr></table></figure></p>
<p>配合redis就可以实现django的websocket了，也可以满足我的需求，实时更新。</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong> <strong>django1.9</strong>中搭建测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django使用redis作为缓存系统]]></title>
      <url>/2017/08/18/django_redis_cache/</url>
      <content type="html"><![CDATA[<p>为了提升网站的性能，加一层缓存是少不了的，由于之前做的东西是用django写的，所以就介绍一下django的缓存系统。</p>
<p>又由于我还使用了redis作为消息队列的后端，这里就不在介绍其他内存数据库，直接使用redis。<br><a id="more"></a></p>
<h1 id="django使用redis作为缓存"><a href="#django使用redis作为缓存" class="headerlink" title="django使用redis作为缓存"></a>django使用redis作为缓存</h1><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>由于笔者使用的是Ubuntu系统，安装较为简单，其他系统请自行查看官方文档。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo apt-get install redis-server</span>
</pre></td></tr></table></figure></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>使用redis命令行客户端测试一下是否成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ redis-cli</span>
</pre></td></tr></table></figure></p>
<p>能出现以下结果即为成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt;</span>
</pre></td></tr></table></figure></p>
<p>其他的redis知识这里不左介绍，如果有兴趣，可以自行了解</p>
<h2 id="django使用redis"><a href="#django使用redis" class="headerlink" title="django使用redis"></a>django使用redis</h2><h3 id="安装django-redis"><a href="#安装django-redis" class="headerlink" title="安装django-redis"></a>安装django-redis</h3><p>为了让django能够使用redis作为缓存，有人开发了一个库来帮我们实现。<a href="https://github.com/niwinz/django-redis" target="_blank" rel="external">django-redis</a>，我们需要安装一下才能使用redis</p>
<p>在终端中输入一下命令进行安装(pip方式)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ pip install django-redis</span>
</pre></td></tr></table></figure></p>
<h3 id="配置django-redis"><a href="#配置django-redis" class="headerlink" title="配置django-redis"></a>配置django-redis</h3><p>在你项目下的<strong>setting.py</strong>中添加如下代码即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">CACHES = &#123;</span>
<span class="line">    <span class="string">"default"</span>: &#123;</span>
<span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"django_redis.cache.RedisCache"</span>,</span>
<span class="line">        <span class="string">"LOCATION"</span>: <span class="string">"redis://127.0.0.1:6379/1"</span>,</span>
<span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span>
<span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>这样就能开始使用了，如果你想添加修改更多配置，想让其更适合自己的项目一点，可以自己去查看<a href="http://django-redis-chs.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">官方文档</a></p>
<p>这里随便配置一下<strong>session backend</strong>，同样在下面添加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">SESSION_ENGINE = <span class="string">"django.contrib.sessions.backends.cache"</span></span>
<span class="line">SESSION_CACHE_ALIAS = <span class="string">"default"</span></span>
</pre></td></tr></table></figure></p>
<h3 id="使用缓存"><a href="#使用缓存" class="headerlink" title="使用缓存"></a>使用缓存</h3><p>在setting中配置好上述配置之后我们就可以开始使用了，django中自带了几个常用的修饰器，可以视情况使用。<br>比如：</p>
<ul>
<li><p>django.views.decorators.cache.cache_page（）针对每个视图的缓存</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.cache <span class="keyword">import</span> cache_page</span>
<span class="line"></span>
<span class="line"><span class="meta">@cache_page(60 * 15)</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(request)</span>:</span></span>
<span class="line">    ...</span>
</pre></td></tr></table></figure>
</li>
<li><p>在setting添加配置，对全站进行缓存</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span>
<span class="line">    <span class="string">'django.middleware.cache.UpdateCacheMiddleware'</span>,</span>
<span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span>
<span class="line">    <span class="string">'django.middleware.cache.FetchFromCacheMiddleware'</span>,</span>
<span class="line">]</span>
</pre></td></tr></table></figure>
</li>
<li><p>还可以调用低级api，直接操作缓存。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cache.set(<span class="string">'my_key'</span>, <span class="string">'hello, world!'</span>, <span class="number">30</span>)</span>
<span class="line"><span class="meta">&gt;&gt;&gt; </span>cache.get(<span class="string">'my_key'</span>)</span>
<span class="line"><span class="string">'hello, world!'</span></span>
</pre></td></tr></table></figure>
</li>
</ul>
<p>可以按照自己的需要去选择合适的使用方法。</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong> <strong>django1.9</strong>中搭建测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Docker搭建git服务Gogs]]></title>
      <url>/2017/08/13/Docker_Gogs/</url>
      <content type="html"><![CDATA[<p>在选择本地git服务时，通常大家都会选择直接安装gitlab，但是其安装复杂，占用资源多等缺点有点让人接受不了，肯定不想一台服务器只用来跑gitlab了，有些太浪费。<br>还可以选择直接在系统上安装没有图形界面的git服务器，但是带来了不易查看等缺点<br>所以笔者在这里使用了<a href="https://gogs.io/" target="_blank" rel="external">Gogs</a>来作为自建git服务。</p>
<h1 id="Gogs"><a href="#Gogs" class="headerlink" title="Gogs"></a>Gogs</h1><a id="more"></a>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>使用docker官方文档里面写的安装脚本我一直安装失败，就算添加上了dcoker官方源，安装过程也会非常慢，还有一堆教程里让我们使用apt-get安装，这样的确能安装但是版本太老，这里给出一种安装非常简单的方式。</p>
<h3 id="使用阿里的镜像安装"><a href="#使用阿里的镜像安装" class="headerlink" title="使用阿里的镜像安装"></a>使用阿里的镜像安装</h3><ol>
<li><p>可以使用阿里云的镜像仓库下载<a href="http://mirrors.aliyun.com/help/docker-engine?spm=a2c1q.8351553.0.0.468c7ecbpBomxQ" target="_blank" rel="external">docker-engine</a>和<a href="http://mirrors.aliyun.com/help/docker-ce?spm=a2c1q.8351553.0.0.468c7ecbpBomxQ" target="_blank" rel="external">docker-ce</a></p>
</li>
<li><p>在终端中执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">curl <span class="_">-s</span>SL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>接下来只要等待就好，版本也相对够新。</p>
<ol>
<li>查看docker版本，确认安装成功<br>在终端中输入如下命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo docker version</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>出现类似如下结果即为成功<img src="http://objects.earthchen.cn/Docker_Gogs_docker%E7%89%88%E6%9C%AC%E5%8F%B7.png" alt="docker版本号"></p>
<ol>
<li>使用阿里仓库来加速你的docker<br>可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span>
<span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span>
<span class="line">&#123;</span>
<span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://dmmxhzvq.mirror.aliyuncs.com"</span>]</span>
<span class="line">&#125;</span>
<span class="line">EOF</span>
<span class="line">sudo systemctl daemon-reload</span>
<span class="line">sudo systemctl restart docker</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h2 id="安装Gogs"><a href="#安装Gogs" class="headerlink" title="安装Gogs"></a>安装Gogs</h2><p>安装Gogs有多种方式，可以自行去<a href="https://gogs.io/" target="_blank" rel="external">Gogs官网</a>查看，笔者这里只介绍一下docker方式去安装部署，<a href="https://github.com/gogits/gogs/tree/master/docker" target="_blank" rel="external">github主页</a>也可以自行查看</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li><p>首先拉取gogs镜像</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo docker pull gogs/gogs</span>
</pre></td></tr></table></figure>
</li>
<li><p>创建本地目录存放数据</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo mkdir -p /var/gogs</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>这个目录可以自定义</p>
<ol>
<li>使用run命令绑定端口和一些配置文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo docker run <span class="_">-d</span> --name=mygogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs</span>
</pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注:</p>
<ul>
<li>这里<strong>-d</strong>将容器跑到后台，不在当前终端输出</li>
<li><strong>-p</strong>用来配置外置端口和内置端口的对应关系，将10022转到22端口，将10080转到3000端口</li>
<li><strong>–name</strong>用来给这个容器命名，不能重名</li>
<li><strong>-v</strong>用来配置数据的对应关系</li>
<li>想要了解更多，需要系统的学习docker相关</li>
</ul>
</blockquote>
<h3 id="配置Gogs"><a href="#配置Gogs" class="headerlink" title="配置Gogs"></a>配置Gogs</h3><p>第一次进入gogs会出现如下页面<br><img src="http://objects.earthchen.cn/Docker_Gogs_gogs%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A2.png" alt="安装Gogs"></p>
<p>可以选择使用mysql作为数据库，但是稍微麻烦一点，需要在mysql配置一下授权，如果不想麻烦，那可以直接使用sqlite3作为数据库，免去了配置数据库</p>
<p>几个ip很重要，可以按我给的配置来填写，当然刚开始填错了也可以后来在app.ini中修改。</p>
<p>邮件服务配置的可以自行选择是否需要</p>
<p>建议不要使用内置ssh，反正笔者试过使用内置ssh可能出现权限拒绝问题，没看到好的解决办法。</p>
<p>安装好并登录即能出现如下界面<br><img src="http://objects.earthchen.cn/Docker_Gogs_%E5%AE%89%E8%A3%85%E5%A5%BD%E7%99%BB%E5%BD%95.png" alt="登录主界面"></p>
<p>然后就可以正常使用了。</p>
<h3 id="创建仓库测试使用"><a href="#创建仓库测试使用" class="headerlink" title="创建仓库测试使用"></a>创建仓库测试使用</h3><ol>
<li><p>创建一个测试仓库<br>简单创建一个空仓库如下：<br><img src="http://objects.earthchen.cn/Docker_Gogs_%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E4%BB%93%E5%BA%93.png" alt="创建测试仓库"></p>
</li>
<li><p>将本地的git公钥复制到用户设置里面的ssh秘钥中</p>
</li>
<li><p>使用ssh方式将本地文件推送上去<br><img src="http://objects.earthchen.cn/Docker_Gogs_ssh%E6%96%B9%E5%BC%8F%E6%8E%A8%E9%80%81%E7%A4%BA%E4%BE%8B.png" alt="ssh推送示例"></p>
</li>
</ol>
<p>以上，就可以正常使用了。</p>
<blockquote>
<p>注：</p>
<ul>
<li>如果安装时，出现docker进程已运行，但是从web页面缺访问不了，可以将<strong>/var/gogs/</strong>文件夹删除重新运行</li>
<li>如果删除文件还不行，推荐将创建的容器删除重新创建</li>
<li>在配置完gogs时，外部无法访问时，请查看防火墙，是否打开了外部端口，本文中的配置只需要打开<strong>10080</strong>和<strong>10022</strong>两个端口</li>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中搭建测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Gogs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode刷题记录(easy难度21-40题)]]></title>
      <url>/2017/08/06/LeetCode_Record_Easy_21to_40/</url>
      <content type="html"><![CDATA[<p>leetcode刷题记录<br>本文记录一下leetcode刷题记录，记录一下自己的解法和心得。</p>
<a id="more"></a>
<h1 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h1><h2 id="Binary-Tree-Level-Order-Traversal-II"><a href="#Binary-Tree-Level-Order-Traversal-II" class="headerlink" title="Binary Tree Level Order Traversal II"></a>Binary Tree Level Order Traversal II</h2><p>题目:<a href="https://leetcode.com/problems/binary-tree-level-order-traversal-ii/description/" target="_blank" rel="external">Binary Tree Level Order Traversal II</a></p>
<blockquote>
<p>Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).</p>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line">Given binary tree [3,9,20,null,null,15,7],</span>
<span class="line">    3</span>
<span class="line">   / \</span>
<span class="line">  9  20</span>
<span class="line">    /  \</span>
<span class="line">   15   7</span>
<span class="line">return its bottom-up level order traversal as:</span>
<span class="line">[</span>
<span class="line">  [15,7],</span>
<span class="line">  [9,20],</span>
<span class="line">  [3]</span>
<span class="line">]</span>
</pre></td></tr></table></figure></p>
<p>题意分析:<br>给定一个二叉树，返回自底向上遍历结点的值</p>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>相等于特殊的按层遍历，在基本的按层遍历树可以选择用栈或者队列来保存每一层的结点。在这里我们选择使用栈。并且使用列表来模拟栈，在使用一个列表来保存需要返回的结果。</p>
<p>首先，初始化需要将根结点与level为0的元组存入列表中，循环这个栈，不为空的话，在栈的尾部弹出一个元素，第一次也就是弹出的根结点和level层数。</p>
<p>得到弹出的结点，判断其是否为空，如果不为空，判断此时结果列表的长度，也就是已经遍历过的层数，</p>
<p>如果小于当前层数+1，也就是在结果列表的第一个位置插入一个列表。如果大于当前level+1，我们就可以在结果列表中放入合适的结点的值。然后只需要在栈中压入当前结点的左子树和当前层数level+1的元组，和右子树和当前层数level+1的元组。最后返回结果列表即可。</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p> 很容易想到我们可以遍历两次数组，在内循环中判断两次循环中的数相加是否等于target<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrderBottom</span><span class="params">(self, root)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        返回节点值的自底向上的顺序遍历。（从左到右，从叶到根逐级地）</span>
<span class="line">        :param root: TreeNode</span>
<span class="line">        :return: list[list[int]]</span>
<span class="line">        """</span></span>
<span class="line">        stack = [(root, <span class="number">0</span>)]</span>
<span class="line">        res = []</span>
<span class="line">        <span class="comment"># 如果栈不为空</span></span>
<span class="line">        <span class="keyword">while</span> stack:</span>
<span class="line">            <span class="comment"># 将栈中最后一个元素弹出</span></span>
<span class="line">            node, level = stack.pop()</span>
<span class="line">            <span class="comment"># 如果该结点存在</span></span>
<span class="line">            <span class="keyword">if</span> node:</span>
<span class="line">                <span class="comment"># 如果结果列表的长度小于层数+1</span></span>
<span class="line">                <span class="keyword">if</span> len(res) &lt; level + <span class="number">1</span>:</span>
<span class="line">                    res.insert(<span class="number">0</span>, [])</span>
<span class="line">                <span class="comment"># 将当前结点的值添加在结果列表中</span></span>
<span class="line">                res[-(level + <span class="number">1</span>)].append(node.val)</span>
<span class="line">                stack.append((node.right, level + <span class="number">1</span>))</span>
<span class="line">                stack.append((node.left, level + <span class="number">1</span>))</span>
<span class="line">        <span class="keyword">return</span> res</span>
</pre></td></tr></table></figure></p>
<p>使用队列的话，方式其实也是大同小异，这里就不在阐述。</p>
<h2 id="Convert-Sorted-Array-to-Binary-Search-Tree"><a href="#Convert-Sorted-Array-to-Binary-Search-Tree" class="headerlink" title="Convert Sorted Array to Binary Search Tree"></a>Convert Sorted Array to Binary Search Tree</h2><p>题目:<a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/description/" target="_blank" rel="external">Convert Sorted Array to Binary Search Tree</a></p>
<blockquote>
<p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>
</blockquote>
<p>题意分析:<br>给定一个数组，元素按升序排序，将其转换为高度平衡的BST。</p>
<h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p>想要转换成平衡二叉树，首先我们需要知道什么叫做平衡二叉树，知道了bst是深才能开始思考与讨论。</p>
<blockquote>
<p>平衡二叉树（Self-balancing binary search tree）又被称为AVL树（有别于AVL算法），且具有以下性质：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树</p>
</blockquote>
<p>平衡二叉树主要的特点就是“棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树”,知道了这个，题目又要求我们把一个已经排序的数组(列表)作为整个二叉树的值。</p>
<p>所以我们可以找出数组中的中值，把他作为根，把小于中值的作为左子树，大于中值的作为右子树，在利用递归的思想，从左子树中找到左子树的根，在右子树中找到右子树的根，就可以得到我们所需要的平衡二叉树。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h4><p> 很容易想到我们可以遍历两次数组，在内循环中判断两次循环中的数相加是否等于target<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedArrayToBST</span><span class="params">(self, num)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        将已排序的数组转换为高度平衡二叉树</span>
<span class="line">        :param num: list[int]</span>
<span class="line">        :return: TreeNode</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 如果列表为空</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> num:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span>
<span class="line">        <span class="comment"># 列表中间的值为列表长度整数2</span></span>
<span class="line">        mid = len(num) // <span class="number">2</span></span>
<span class="line">        <span class="comment"># 生成一个以中值为结点的值的作为根结点</span></span>
<span class="line">        root = TreeNode(num[mid])</span>
<span class="line">        <span class="comment"># 递归求出</span></span>
<span class="line">        <span class="comment"># 左子树为小于中间值一部分</span></span>
<span class="line">        root.left = self.sortedArrayToBST(num[:mid])</span>
<span class="line">        <span class="comment"># 右子树为大于中间值的一部分</span></span>
<span class="line">        root.right = self.sortedArrayToBST(num[mid + <span class="number">1</span>:])</span>
<span class="line">        <span class="keyword">return</span> root</span>
</pre></td></tr></table></figure></p>
<h2 id="Balanced-Binary-Tree"><a href="#Balanced-Binary-Tree" class="headerlink" title="Balanced Binary Tree"></a>Balanced Binary Tree</h2><p>题目:<a href="https://leetcode.com/problems/balanced-binary-tree/description/" target="_blank" rel="external">Balanced Binary Tree</a></p>
<blockquote>
<p>Given a binary tree, determine if it is height-balanced.<br>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>
</blockquote>
<p>题意分析:<br>给定一个二叉树，判断其是否是平衡二叉树</p>
<h3 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h3><p>在上一题的分析中，我们已经知道了什么叫做平衡二叉树。题目给出的方法返回值的bool类型，不利于我们去循环递归的判断它。我们可以单独写一个check函数，其返回值是int类型。当函数返回-1时，该二叉树为非平衡二叉树，当函数返回值不为-1时，该二叉树为平衡二叉树。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-2"><a href="#方法一-2" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        判断一个树是否为平衡二叉树</span>
<span class="line">        当check函数的发挥值不等于-1时返回true，等于-1是返回false</span>
<span class="line">        :param root: TreeNode</span>
<span class="line">        :return: bool</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">return</span> self.check(root) != <span class="number">-1</span></span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self, root)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        检查结点</span>
<span class="line">        :param root: TreeNode</span>
<span class="line">        :return: int</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 结点为空时</span></span>
<span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">        <span class="comment"># 递归得出左子树的返回值</span></span>
<span class="line">        left = self.check(root.left)</span>
<span class="line">        <span class="comment"># 递归得出右子树的返回值</span></span>
<span class="line">        right = self.check(root.right)</span>
<span class="line">        <span class="comment"># 如果左子树不为平衡树或者右子树不为平衡二叉树，</span></span>
<span class="line">        <span class="comment"># 左右子树想减的值大于1(-1-(-1))左右子树不为平衡树的情况</span></span>
<span class="line">        <span class="keyword">if</span> left == <span class="number">-1</span> <span class="keyword">or</span> right == <span class="number">-1</span> <span class="keyword">or</span> abs(left - right) &gt; <span class="number">1</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span>
<span class="line">        <span class="comment"># left right分别等于0或1的情况</span></span>
<span class="line">        <span class="keyword">return</span> <span class="number">1</span> + max(left, right)</span>
</pre></td></tr></table></figure>
<h2 id="Minimum-Depth-of-Binary-Tree"><a href="#Minimum-Depth-of-Binary-Tree" class="headerlink" title="Minimum Depth of Binary Tree"></a>Minimum Depth of Binary Tree</h2><p>题目:<a href="https://leetcode.com/problems/minimum-depth-of-binary-tree/description/" target="_blank" rel="external">Minimum Depth of Binary Tree</a></p>
<blockquote>
<p>Given a binary tree, find its minimum depth.<br>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>
</blockquote>
<p>题意分析:<br>求出二叉树的最小深度</p>
<h3 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h3><p>如果该树为空，需要单独讨论，返回深度为0.递归调用自己，传入根节点的左子树和右子树，如果其中有空节点，那么此时的left或者right就有值为0，既然求的是最小的深度，那么就可以返回该子树的深度。如果两个值均不为0了，那么就返回左子树和右子树深度的最小值，最后加上子树到根节点的1，即为最小深度。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-3"><a href="#方法一-3" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDepth</span><span class="params">(self, root)</span>:</span></span>
<span class="line">        <span class="comment"># 如果是空树</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">        <span class="comment"># 递归求出子节点的深度</span></span>
<span class="line">        left = self.minDepth(root.left)</span>
<span class="line">        right = self.minDepth(root.right)</span>
<span class="line">        <span class="comment"># 如果节点为空</span></span>
<span class="line">        <span class="keyword">if</span> left == <span class="number">0</span> <span class="keyword">or</span> right == <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">return</span> left + right + <span class="number">1</span></span>
<span class="line">        <span class="comment"># 不为空情况下计算左右子树的最小深度</span></span>
<span class="line">        <span class="keyword">return</span> min(left, right) + <span class="number">1</span></span>
</pre></td></tr></table></figure>
<h2 id="Path-Sum"><a href="#Path-Sum" class="headerlink" title="Path Sum"></a>Path Sum</h2><p>题目:<a href="https://leetcode.com/problems/path-sum/description/" target="_blank" rel="external">Path Sum</a></p>
<blockquote>
<p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p>
</blockquote>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">For example:</span>
<span class="line">Given the below binary tree and sum = 22,</span>
<span class="line">              5</span>
<span class="line">             / \</span>
<span class="line">            4   8</span>
<span class="line">           /   / \</span>
<span class="line">          11  13  4</span>
<span class="line">         /  \      \</span>
<span class="line">        7    2      1</span>
<span class="line">return true, as there exist a root-to-leaf path 5-&gt;4-&gt;11-&gt;2 which sum is 22.</span>
</pre></td></tr></table></figure></p>
<p>题意分析:<br>题意还是很清楚的，给定一颗二叉树，在给定一个和，判断从根节点到叶子节点之间的路径和是否有等于给定的sum。</p>
<h3 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h3><p>对于空树，也就是只有根节点并且根节点为空，或者树中只有根节点，这两种情况都需要单独讨论。</p>
<p>对于空树，我们可以直接返回False不等于即可。</p>
<p>对于只有根节点的树，我们需要判断一下，该节点的值是否等于sum，等于就返回True</p>
<p>对特殊情况讨论完毕，我们就可以递归判断左子树和右子树的情况了，传入的sum需要用原来的sum-根节点的值。题目只要去判断是否有，所有我们用或去连接即可</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-4"><a href="#方法一-4" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasPathSum</span><span class="params">(self, root, sum)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        判断从根到叶子节点的值之和是否有等于sum的</span>
<span class="line">        :param root: TreeNode</span>
<span class="line">        :param sum: int</span>
<span class="line">        :return: bool</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 如果是空树</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="comment"># 如果只有根节点，并且根节点的值等于sum</span></span>
<span class="line">        <span class="keyword">if</span> root.val == sum <span class="keyword">and</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line">        <span class="comment"># 递归判断对左右节点的情况，每次需要将sum减去节点的值</span></span>
<span class="line">        <span class="keyword">return</span> self.hasPathSum(root.left, sum - root.val) \</span>
<span class="line">               <span class="keyword">or</span> self.hasPathSum(root.right, sum - root.val)</span>
</pre></td></tr></table></figure>
<h2 id="Pascal’s-Triangle"><a href="#Pascal’s-Triangle" class="headerlink" title="Pascal’s Triangle"></a>Pascal’s Triangle</h2><p>题目:<a href="https://leetcode.com/problems/pascals-triangle/description/" target="_blank" rel="external">Pascal’s Triangle</a></p>
<blockquote>
<p>Given numRows, generate the first numRows of Pascal’s triangle.</p>
</blockquote>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">For example, given numRows = 5,</span>
<span class="line">Return</span>
<span class="line"></span>
<span class="line">[</span>
<span class="line">     [1],</span>
<span class="line">    [1,1],</span>
<span class="line">   [1,2,1],</span>
<span class="line">  [1,3,3,1],</span>
<span class="line"> [1,4,6,4,1]</span>
<span class="line">]</span>
</pre></td></tr></table></figure></p>
<p>题意分析:<br>给定一个行数，生成一个帕斯卡三角形。</p>
<h3 id="思路分析-5"><a href="#思路分析-5" class="headerlink" title="思路分析"></a>思路分析</h3><p>如果不看例子，我们估计不知道什么叫帕斯卡三角形，题目也给出了我们一个例子。我们需要从每一行中找出规律，才能得到结果。</p>
<p>很容易可以看出，每一行第i位上的数字，等于上一行的i位数加上i+1上的数。</p>
<p>同时我们可以看到，每一行第一个数都是1</p>
<p>我们在求出每一行的列表之后，放入到保存所有行的列表中即可。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-5"><a href="#方法一-5" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self, numRows)</span>:</span></span>
<span class="line">        <span class="comment"># 最外侧的列表</span></span>
<span class="line">        allrows = []</span>
<span class="line">        <span class="comment"># 每一行的列表</span></span>
<span class="line">        row = []</span>
<span class="line">        <span class="comment"># 循环迭代每一行</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numRows):</span>
<span class="line">            <span class="comment"># 像每行的第一个元素插入1</span></span>
<span class="line">            row.insert(<span class="number">0</span>, <span class="number">1</span>)</span>
<span class="line">            <span class="comment"># 对该行进行迭代(1开始因为已经插入了1，该行的长度-1因为保留了上一行的参数)</span></span>
<span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(row) - <span class="number">1</span>):</span>
<span class="line">                <span class="comment"># 其中的参数等于索引为j和j+1位置的和</span></span>
<span class="line">                row[j] = row[j] + row[j + <span class="number">1</span>]</span>
<span class="line">            <span class="comment"># 进行深拷贝，如果不进行深拷贝，Python会一直操作的是一个row最后只会append一个相同的row</span></span>
<span class="line">            allrows.append(copy.deepcopy(row))</span>
<span class="line">        <span class="keyword">return</span> allrows</span>
</pre></td></tr></table></figure>
<p>这段代码中涉及都了一个深拷贝的问题，因为我每一行的列表row，一直是一个，当每次循环操作的是同一个row，如果不使用深拷贝，最后append到列表中的都是最后一行的值，所以这里使用深拷贝，将每一行的值拷贝出来append到列表中。</p>
<h2 id="Pascal’s-Triangle-II"><a href="#Pascal’s-Triangle-II" class="headerlink" title="Pascal’s Triangle II"></a>Pascal’s Triangle II</h2><p>题目:<a href="https://leetcode.com/problems/pascals-triangle-ii/description/" target="_blank" rel="external">Pascal’s Triangle II</a></p>
<blockquote>
<p>Given an index k, return the kth row of the Pascal’s triangle.</p>
</blockquote>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">For example, given k = 3,</span>
<span class="line">Return [1,3,3,1].</span>
</pre></td></tr></table></figure>
<p>题意分析:<br>给定一个行数，生成帕斯卡三角形该行的数。</p>
<h3 id="思路分析-6"><a href="#思路分析-6" class="headerlink" title="思路分析"></a>思路分析</h3><p>这一题其实只是上一题的一部分，生成第n行的列表即可。</p>
<p>首先，每一行的第一个数都是1，我们就可以创建一个第一个元素为1的列表。然后就可以循环行数，这里可以使用列表推导式。</p>
<p>可以在该行的列表前面加上[0]，再在该行的列表后面加上[0]，然后使用zip()函数，将生成的两个新列表合并起来，用x和y分别取第一列的两个值，并求出x+y的和作为列表的第一个元素，将第二列也分别作为x和y进行同样的操作。最后得到的就是帕斯卡三角形该行的数。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-6"><a href="#方法一-6" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRow</span><span class="params">(self, rowIndex)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        计算帕斯卡三角形的制定行数的元素</span>
<span class="line">        :param rowIndex: int</span>
<span class="line">        :return: list</span>
<span class="line">        """</span></span>
<span class="line">        row = [<span class="number">1</span>]</span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(rowIndex):</span>
<span class="line">            <span class="comment"># 使用列表推导式迭代x+y的值</span></span>
<span class="line">            <span class="comment"># 其中x和y分别等于[0] + row和row + [0]的第一列和第二列</span></span>
<span class="line">            row = [x + y <span class="keyword">for</span> x, y <span class="keyword">in</span> zip([<span class="number">0</span>] + row, row + [<span class="number">0</span>])]</span>
<span class="line">        <span class="keyword">return</span> row</span>
</pre></td></tr></table></figure>
<h2 id="Valid-Palindrome"><a href="#Valid-Palindrome" class="headerlink" title="Valid Palindrome"></a>Valid Palindrome</h2><p>题目:<a href="https://leetcode.com/problems/valid-palindrome/description/" target="_blank" rel="external">Valid Palindrome</a></p>
<blockquote>
<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>
</blockquote>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">&quot;A man, a plan, a canal: Panama&quot; is a palindrome.</span>
<span class="line">&quot;race a car&quot; is not a palindrome.</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>Note:</p>
<ul>
<li>Have you consider that the string might be empty? This is a good question to ask during an interview.</li>
<li>For the purpose of this problem, we define empty string as valid palindrome.</li>
</ul>
</blockquote>
<p>题意分析:<br>判断一个字符串是否是回文，只考虑字母和数字，不考虑其他字符。</p>
<h3 id="思路分析-7"><a href="#思路分析-7" class="headerlink" title="思路分析"></a>思路分析</h3><p>又是一个求回文的题目，有点不同的就是，在字符串中添加了一些我们需要忽略的字符，最容易想到的方法就是将这些字符去掉，我们去判断新的字符串是否是回文，但是这样无疑增加了时间和空间复杂度。</p>
<p>为了解决那个问题，我们得在一次循环中解决，并且不能创建新的字符串，所以，我们只能忽略它。</p>
<p>我们可以先定义两个下标，一个表示表示开始下标，一个表示结束下标，因为求回文，只需要循环一半，并且开始下标小于结束下标，</p>
<p>因为我们不知道循环的次数，所以我们使用while循环，在这个循环内部我们需要找到符合属于字母和数字的字符最开始的下标是多少，如果第一个字符不属于字母或数字，那么将开始下标+1，依次类推，直到找到第一个属于字母或数字的字符下标，结束下标也一样，只不过当不符合要求时是将下标-1.</p>
<p>得到有效的开始下标和结束下标，我们就可以进行比较了，因为这里还忽略大小写，去比较两个字符是否相等就可以了，如果不相等，直接返回False</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-7"><a href="#方法一-7" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, s)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        判断字符串是否是回文(只考虑字母和数字)</span>
<span class="line">        :param s: str</span>
<span class="line">        :return: bool</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 分别得到第一个和最后一个字符的索引</span></span>
<span class="line">        i, r = <span class="number">0</span>, len(s) - <span class="number">1</span></span>
<span class="line">        <span class="comment"># 判断回文只需要判断一半</span></span>
<span class="line">        <span class="keyword">while</span> i &lt; r:</span>
<span class="line">            <span class="comment"># 当左边字符索引小鱼右边字符串并且</span></span>
<span class="line">            <span class="comment"># 左字符串属于字母和数字时</span></span>
<span class="line">            <span class="keyword">while</span> i &lt; r <span class="keyword">and</span> <span class="keyword">not</span> s[i].isalnum():</span>
<span class="line">                i += <span class="number">1</span></span>
<span class="line">            <span class="comment"># 当左边字符索引小鱼右边字符串并且</span></span>
<span class="line">            <span class="comment"># 右字符串属于字母和数字时</span></span>
<span class="line">            <span class="keyword">while</span> i &lt; r <span class="keyword">and</span> <span class="keyword">not</span> s[r].isalnum():</span>
<span class="line">                r -= <span class="number">1</span></span>
<span class="line">            <span class="comment"># 为了判断相等，均转换为小写去判断是否相等</span></span>
<span class="line">            <span class="keyword">if</span> s[i].lower() != s[r].lower():</span>
<span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">            <span class="comment"># 左字符向后移动一个</span></span>
<span class="line">            i += <span class="number">1</span></span>
<span class="line">            <span class="comment"># 右字符向前移动</span></span>
<span class="line">            r -= <span class="number">1</span></span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span>
</pre></td></tr></table></figure>
<h2 id="Single-Number"><a href="#Single-Number" class="headerlink" title="Single Number"></a>Single Number</h2><p>题目:<a href="https://leetcode.com/problems/single-number/description/" target="_blank" rel="external">Single Number</a></p>
<blockquote>
<p>Given an array of integers, every element appears twice except for one. Find that single one.</p>
<p>Note:</p>
<ul>
<li>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</li>
</ul>
</blockquote>
<p>题意分析:<br>给定一个列表，其中除了一个元素，其他元素都有两个，找出这个只有一个的元素(不使用额外的空间)</p>
<h3 id="思路分析-8"><a href="#思路分析-8" class="headerlink" title="思路分析"></a>思路分析</h3><p>想找出唯一的元素，最开始很容易想到的是循环每一个元素，然后判断该元素是否在剩下的列中中还存在，这种方式可以解决其他元素不只出现两次的情况，</p>
<p>但是这题比较特殊，除本身外，其他元素出现的次数是一致的，并且元素还都是int类型。所以就可以用一种比较投机取巧的办法。</p>
<p>我们可以先将该列表去重，这样所有元素就只出现了一次，然后我们将其求和并乘以2，这样我们就得到了两倍的和，然后我们在求一个元列表的和，这两者的差就是只出现了一次的元素</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-8"><a href="#方法一-8" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        找到数组只只出现了一次的元素(其他元素都出现了两次)</span>
<span class="line">        :param nums: list[int]</span>
<span class="line">        :return: int</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 使用set()去重把每个元素都得到一个</span></span>
<span class="line">        <span class="comment"># 求出所有单个元素的和,求出两倍的值</span></span>
<span class="line">        <span class="comment"># 再减去未去重时所有元素的和</span></span>
<span class="line">        <span class="keyword">return</span> <span class="number">2</span> * sum(set(nums)) - sum(nums)</span>
</pre></td></tr></table></figure>
<h2 id="Linked-List-Cycle"><a href="#Linked-List-Cycle" class="headerlink" title="Linked List Cycle"></a>Linked List Cycle</h2><p>题目:<a href="https://leetcode.com/problems/linked-list-cycle/description/" target="_blank" rel="external">Linked List Cycle</a></p>
<blockquote>
<p>Given a linked list, determine if it has a cycle in it.</p>
<p>Note:</p>
<ul>
<li>Can you solve it without using extra space?</li>
</ul>
</blockquote>
<p>题意分析:<br>判断单链表中是否有环。不使用额外空间</p>
<h3 id="思路分析-9"><a href="#思路分析-9" class="headerlink" title="思路分析"></a>思路分析</h3><p>判断列表是否有环，一个链表如果有环，那么至少是三个节点组成，第三个指向第一个。所以我们这里可以使用快慢指针的概念，慢指针一次移动一个节点，快指针一次移动两个节点，在快指针存在并且快指针的下一个节点不为空的时候循环，判断快指针的节点是否等于慢指针的节点。</p>
<p>当单链表为空，或者只有头节点时需要单独处理。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-9"><a href="#方法一-9" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        判断单链表中是否有环(不使用额外的空间)</span>
<span class="line">        :param head: ListNode</span>
<span class="line">        :return: bool</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 如果链表的头节点或者头节点的下一个节点为空</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="comment"># 使用快慢指针</span></span>
<span class="line">        <span class="comment"># 慢指针一次向前移动一个节点</span></span>
<span class="line">        slow = head</span>
<span class="line">        <span class="comment"># 快指针一次向前移动两个节点</span></span>
<span class="line">        fast = head.next</span>
<span class="line">        <span class="comment"># 如果快指针存在并且快指针的下一个节点也存在</span></span>
<span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span>
<span class="line">            <span class="comment"># 使慢指针向后移动一个节点</span></span>
<span class="line">            slow = slow.next</span>
<span class="line">            <span class="comment"># 使快指针向后移动两个节点</span></span>
<span class="line">            fast = fast.next.next</span>
<span class="line">            <span class="comment"># 如果快指针等于慢指针，即有环</span></span>
<span class="line">            <span class="keyword">if</span> slow == fast:</span>
<span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span>
</pre></td></tr></table></figure>
<h2 id="Min-Stack"><a href="#Min-Stack" class="headerlink" title="Min Stack"></a>Min Stack</h2><p>题目:<a href="https://leetcode.com/problems/min-stack/description/" target="_blank" rel="external">Min Stack</a></p>
<blockquote>
<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>
<ul>
<li>push(x) – Push element x onto stack.</li>
<li>pop() – Removes the element on top of the stack.</li>
<li>top() – Get the top element.</li>
<li>getMin() – Retrieve the minimum element in the stack.</li>
</ul>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">MinStack minStack = new MinStack();</span>
<span class="line">minStack.push(-2);</span>
<span class="line">minStack.push(0);</span>
<span class="line">minStack.push(-3);</span>
<span class="line">minStack.getMin();   --&gt; Returns -3.</span>
<span class="line">minStack.pop();</span>
<span class="line">minStack.top();      --&gt; Returns 0.</span>
<span class="line">minStack.getMin();   --&gt; Returns -2.</span>
</pre></td></tr></table></figure></p>
<p>题意分析:<br>设计一个栈，支持一些基本操作</p>
<h3 id="思路分析-10"><a href="#思路分析-10" class="headerlink" title="思路分析"></a>思路分析</h3><p>使用列表去模拟栈即可。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-10"><a href="#方法一-10" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span>
<span class="line">        self.q = []</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        向栈种推入一个元素</span>
<span class="line">        :param x: int</span>
<span class="line">        :return: void</span>
<span class="line">        """</span></span>
<span class="line">        curMin = self.getMin()</span>
<span class="line">        <span class="keyword">if</span> curMin <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> x &lt; curMin:</span>
<span class="line">            curMin = x</span>
<span class="line">        self.q.append((x, curMin))</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        弹出一个元素</span>
<span class="line">        :return: void</span>
<span class="line">        """</span></span>
<span class="line">        self.q.pop()</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        得到栈顶元素</span>
<span class="line">        :return: int</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">if</span> len(self.q) == <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            <span class="keyword">return</span> self.q[len(self.q) - <span class="number">1</span>][<span class="number">0</span>]</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMin</span><span class="params">(self)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        得到最小栈中最小的元素</span>
<span class="line">        :return: int</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">if</span> len(self.q) == <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            <span class="keyword">return</span> self.q[len(self.q) - <span class="number">1</span>][<span class="number">1</span>]</span>
</pre></td></tr></table></figure>
<h2 id="Intersection-of-Two-Linked-Lists"><a href="#Intersection-of-Two-Linked-Lists" class="headerlink" title="Intersection of Two Linked Lists"></a>Intersection of Two Linked Lists</h2><p>题目:<a href="https://leetcode.com/problems/intersection-of-two-linked-lists/description/" target="_blank" rel="external">Intersection of Two Linked Lists</a></p>
<blockquote>
<p>Write a program to find the node at which the intersection of two singly linked lists begins.</p>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">For example, the following two linked lists:</span>
<span class="line"></span>
<span class="line">A:          a1 → a2</span>
<span class="line">                   ↘</span>
<span class="line">                     c1 → c2 → c3</span>
<span class="line">                   ↗            </span>
<span class="line">B:     b1 → b2 → b3</span>
<span class="line">begin to intersect at node c1.</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>注:</p>
<ul>
<li>If the two linked lists have no intersection at all, return null.</li>
<li>The linked lists must retain their original structure after the function returns.</li>
<li>You may assume there are no cycles anywhere in the entire linked structure.</li>
<li>Your code should preferably run in O(n) time and use only O(1) memory.</li>
</ul>
</blockquote>
<p>题意分析:<br>求两个单链表之间相交的节点，如果不相交，则返回空</p>
<h3 id="思路分析-11"><a href="#思路分析-11" class="headerlink" title="思路分析"></a>思路分析</h3><p>首先需要对是否有空单链表单独讨论，因为当有任意一个为空的时候，都不可能会相交。</p>
<p>为了不直接操作头指针，这里我们将两个链表的头结点赋给两个变量pa和pb。在两个变量不相等的时候，开始循环。</p>
<p>如果pa等于空了，那么就把另一个单链表的头节点headB赋给pa，反之，当pa不等于空的时候，将pa的下一个节点赋值给pa。pb的操作也一样。判断pb是否为空来选择将headA赋给它还是将下一个节点赋给自己</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-11"><a href="#方法一-11" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIntersectionNode</span><span class="params">(self, headA, headB)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        求出两个单链表的交点</span>
<span class="line">        :param headA: ListNode</span>
<span class="line">        :param headB: ListNode</span>
<span class="line">        :return: ListNode</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> headA <span class="keyword">or</span> <span class="keyword">not</span> headB:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span>
<span class="line">        pa = headA</span>
<span class="line">        pb = headB</span>
<span class="line">        <span class="comment"># 如果pa节点不等于pb节点</span></span>
<span class="line">        <span class="keyword">while</span> pa <span class="keyword">is</span> <span class="keyword">not</span> pb:</span>
<span class="line">            <span class="comment"># Python中的三元表达式格式为:为真时的结果 if 判定条件 else 为假时的结果</span></span>
<span class="line">            pa = headB <span class="keyword">if</span> <span class="keyword">not</span> pa <span class="keyword">else</span> pa.next</span>
<span class="line">            pb = headA <span class="keyword">if</span> <span class="keyword">not</span> pb <span class="keyword">else</span> pb.next</span>
<span class="line">        <span class="keyword">return</span> pa</span>
</pre></td></tr></table></figure>
<blockquote>
<p>注:Python中的三元表达式有些不同，表达式格式为<strong>为真时的结果 if 判定条件 else 为假时的结果</strong>，需要自己注意一下。</p>
</blockquote>
<h2 id="Two-Sum-II-Input-array-is-sorted"><a href="#Two-Sum-II-Input-array-is-sorted" class="headerlink" title="Two Sum II - Input array is sorted"></a>Two Sum II - Input array is sorted</h2><p>题目:<a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/description/" target="_blank" rel="external">Two Sum II - Input array is sorted</a></p>
<blockquote>
<p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.<br>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.<br>You may assume that each input would have exactly one solution and you may not use the same element twice.</p>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">Input: numbers=&#123;2, 7, 11, 15&#125;, target=9</span>
<span class="line">Output: index1=1, index2=2</span>
</pre></td></tr></table></figure></p>
<p>题意分析:<br>求有序的输入的列表中是否有两个数相加的和等于目标值，返回其索引下标(从1开始)，并且要求第一个索引小与第二个。</p>
<h3 id="思路分析-12"><a href="#思路分析-12" class="headerlink" title="思路分析"></a>思路分析</h3><p>又是一道求两数的和的等于目标值的题目，可以先循环两遍得到结果，此时时间复杂度为O(N^2)，想要减少时间复杂度，我们可以将我们已经遍历过的值和相应的下标记录下来。</p>
<p>在这里我们使用字典将遍历过的值和下标记录下来，循环列表中每一个值，在每一次循环中判断目标值减去遍历的值等于的结果是否在存有已经遍历过的元素字典中，如果存在那就返回这两个下标，由于下标不是从0开始，所以我们需要将下标+1.如果在字典中不存在，那么就将此次遍历的元素和下标存入字典中。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-12"><a href="#方法一-12" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, numbers, target)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        计算整形列表中是否有两个值的和与目标值相等</span>
<span class="line">        :param numbers: list[int]</span>
<span class="line">        :param target: int</span>
<span class="line">        :return: list[int]</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 使用一个字典存储已经遍历过的元素</span></span>
<span class="line">        dic = &#123;&#125;</span>
<span class="line">        <span class="comment"># 循环遍历</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(numbers)):</span>
<span class="line">            <span class="comment"># 如果目标值减去遍历的元素的值在字典中</span></span>
<span class="line">            <span class="keyword">if</span> target - numbers[i] <span class="keyword">in</span> dic:</span>
<span class="line">                <span class="comment"># 即返回保存在字典中元素的下标</span></span>
<span class="line">                <span class="comment"># 并且要求索引从1开始 所以需要+1</span></span>
<span class="line">                <span class="keyword">return</span> [dic[target - numbers[i]] + <span class="number">1</span>, i + <span class="number">1</span>]</span>
<span class="line">            <span class="comment"># 将遍历过的值和下标存入字典中</span></span>
<span class="line">            dic[numbers[i]] = i</span>
</pre></td></tr></table></figure>
<h2 id="Two-Sum-II-Input-array-is-sorted-1"><a href="#Two-Sum-II-Input-array-is-sorted-1" class="headerlink" title="Two Sum II - Input array is sorted"></a>Two Sum II - Input array is sorted</h2><p>题目:<a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/description/" target="_blank" rel="external">Two Sum II - Input array is sorted</a></p>
<blockquote>
<p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.<br>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.<br>You may assume that each input would have exactly one solution and you may not use the same element twice.</p>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">Input: numbers=&#123;2, 7, 11, 15&#125;, target=9</span>
<span class="line">Output: index1=1, index2=2</span>
</pre></td></tr></table></figure></p>
<p>题意分析:<br>求有序的输入的列表中是否有两个数相加的和等于目标值，返回其索引下标(从1开始)，并且要求第一个索引小与第二个。</p>
<h3 id="思路分析-13"><a href="#思路分析-13" class="headerlink" title="思路分析"></a>思路分析</h3><p>又是一道求两数的和的等于目标值的题目，可以先循环两遍得到结果，此时时间复杂度为O(N^2)，想要减少时间复杂度，我们可以将我们已经遍历过的值和相应的下标记录下来。</p>
<p>在这里我们使用字典将遍历过的值和下标记录下来，循环列表中每一个值，在每一次循环中判断目标值减去遍历的值等于的结果是否在存有已经遍历过的元素字典中，如果存在那就返回这两个下标，由于下标不是从0开始，所以我们需要将下标+1.如果在字典中不存在，那么就将此次遍历的元素和下标存入字典中。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-13"><a href="#方法一-13" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, numbers, target)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        计算整形列表中是否有两个值的和与目标值相等</span>
<span class="line">        :param numbers: list[int]</span>
<span class="line">        :param target: int</span>
<span class="line">        :return: list[int]</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 使用一个字典存储已经遍历过的元素</span></span>
<span class="line">        dic = &#123;&#125;</span>
<span class="line">        <span class="comment"># 循环遍历</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(numbers)):</span>
<span class="line">            <span class="comment"># 如果目标值减去遍历的元素的值在字典中</span></span>
<span class="line">            <span class="keyword">if</span> target - numbers[i] <span class="keyword">in</span> dic:</span>
<span class="line">                <span class="comment"># 即返回保存在字典中元素的下标</span></span>
<span class="line">                <span class="comment"># 并且要求索引从1开始 所以需要+1</span></span>
<span class="line">                <span class="keyword">return</span> [dic[target - numbers[i]] + <span class="number">1</span>, i + <span class="number">1</span>]</span>
<span class="line">            <span class="comment"># 将遍历过的值和下标存入字典中</span></span>
<span class="line">            dic[numbers[i]] = i</span>
</pre></td></tr></table></figure>
<h2 id="Excel-Sheet-Column-Title"><a href="#Excel-Sheet-Column-Title" class="headerlink" title="Excel Sheet Column Title"></a>Excel Sheet Column Title</h2><p>题目:<a href="https://leetcode.com/problems/excel-sheet-column-title/description/" target="_blank" rel="external">Excel Sheet Column Title</a></p>
<blockquote>
<p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">1 -&gt; A</span>
<span class="line">2 -&gt; B</span>
<span class="line">3 -&gt; C</span>
<span class="line">...</span>
<span class="line">26 -&gt; Z</span>
<span class="line">27 -&gt; AA</span>
<span class="line">28 -&gt; AB</span>
</pre></td></tr></table></figure></p>
<p>题意分析:<br>将数字与excel表格的列名对应起来。</p>
<h3 id="思路分析-14"><a href="#思路分析-14" class="headerlink" title="思路分析"></a>思路分析</h3><p>想要求解这道题，我们需要知道excel表格的列名是如何排列的。</p>
<p>在excel中，列名首先是从A到Z，26列，当大于26之后，开始使用字母A加上A到Z中的字母，当大于两倍26，也就是52时，开始使用字母B作为第一个字母，然后一次类推。</p>
<p>想要把数字变成字母，我们还需要知道每个字母的ascII，又由于只有26个字母，所以我们需要对26求余，来判断其是第几个字母，然后加上65，来得到大写字母，然后在求模，得到下一次的n。然后结果每次相加字符即可</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-14"><a href="#方法一-14" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertToTitle</span><span class="params">(self, n)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        将数字转换为excel的列名</span>
<span class="line">        :param n: int</span>
<span class="line">        :return: str</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 存放结果的字符串</span></span>
<span class="line">        res = <span class="string">''</span></span>
<span class="line">        <span class="comment"># n不为0时进入循环</span></span>
<span class="line">        <span class="keyword">while</span> n != <span class="number">0</span>:</span>
<span class="line">            <span class="comment"># 求余得到一个字符</span></span>
<span class="line">            ch = chr((n - <span class="number">1</span>) % <span class="number">26</span> + <span class="number">65</span>)</span>
<span class="line">            <span class="comment"># 除以26求模</span></span>
<span class="line">            n = (n - <span class="number">1</span>) // <span class="number">26</span></span>
<span class="line">            res = ch + res</span>
<span class="line">        <span class="keyword">return</span> res</span>
</pre></td></tr></table></figure>
<blockquote>
<p>注:Python中使用//来求模得到整数，/作为除法求精确结果一般为float类型</p>
<p>注：</p>
<ul>
<li>以上代码见github:<a href="https://github.com/EarthChen/LeetCode_Record" target="_blank" rel="external">https://github.com/EarthChen/LeetCode_Record</a></li>
<li>上述环境在<strong>ubuntu16.04 lts和python3.5</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode刷题记录(easy难度1-20题)]]></title>
      <url>/2017/08/06/LeetCode_Record_Easy_1to20/</url>
      <content type="html"><![CDATA[<p>leetcode刷题记录<br>本文记录一下leetcode刷题记录，记录一下自己的解法和心得。</p>
<a id="more"></a>
<h1 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h1><h2 id="Two-Sum"><a href="#Two-Sum" class="headerlink" title="Two Sum"></a>Two Sum</h2><p>题目:<a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="external">two sum</a></p>
<blockquote>
<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">Given nums = [2, 7, 11, 15], target = 9,</span>
<span class="line"></span>
<span class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</span>
<span class="line">return [0, 1].</span>
</pre></td></tr></table></figure></p>
<p>题意分析:<br>找出数组numbers中的两个数，它们的和为给定的一个数target，并返回这两个数的索引(不需要去重)</p>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>题目要求说白了就是找出这个给的数组中有哪两个数相加等于目标结果</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p> 很容易想到我们可以遍历两次数组，在内循环中判断两次循环中的数相加是否等于target<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span>
<span class="line">        length = len(nums)  <span class="comment"># 计算输入的列表长度</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span>
<span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(length):</span>
<span class="line">                <span class="keyword">if</span> nums[i] + nums[j] == target:</span>
<span class="line">                    <span class="keyword">return</span> [i, j]</span>
</pre></td></tr></table></figure></p>
<p>这是一种很简单很容易能想到的方法，但此方法的时间复杂度是O(N^2),在leetcode会超时，所以不行，想要通过，肯定要降低时间复杂度</p>
<p>为了降低时间复杂度，我们可以牺牲空间来换取时间，使用一次循环，将时间复杂度降为O(N)，所以我们可以有以下解法</p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>可以使用字段存储遍历过的num和它的下标放置一个字典中，在循环这个列表，用目标结果target减正在循环的这个数，并判断结果是否在字典中(即是否循已经遍历过)，如果结果存在如字典中，即找到相加等于结果的两个值，如果不存在，即把值和对应下标存入字典中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span>
<span class="line">        arr = &#123;&#125;  <span class="comment"># 使用字典存储遍历过的num和对应下标&#123;num:index&#125;</span></span>
<span class="line">        length = len(nums)  <span class="comment"># 计算输入的列表长度</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span>
<span class="line">            <span class="keyword">if</span> (target - nums[i]) <span class="keyword">in</span> arr:</span>
<span class="line">                <span class="comment"># 如果target-当前num的差在arr中，则表示已经找到答案，返回结果即可</span></span>
<span class="line">                <span class="keyword">return</span> [arr[target - nums[i]], i]</span>
<span class="line">            <span class="comment"># 否则，将该num及其下标存入arr中</span></span>
<span class="line">            arr[nums[i]] = i</span>
</pre></td></tr></table></figure></p>
<p>此时就牺牲了一个字典的空间，来换取了O(N)的复杂度，在leetcode也能通过</p>
<h2 id="Reverse-Integer"><a href="#Reverse-Integer" class="headerlink" title="Reverse Integer"></a>Reverse Integer</h2><p>题目:<a href="https://leetcode.com/problems/reverse-integer/description/" target="_blank" rel="external">Reverse Integer</a></p>
<blockquote>
<p>Reverse digits of an integer.</p>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">Example1: x = 123, return 321</span>
<span class="line">Example2: x = -123, return -321</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>注:The input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows.</p>
</blockquote>
<p>题意分析:<br>题目很简单，将数字倒置而已，最后结果要求判断是否为32位有符号整数</p>
<h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p>想要倒置，又由于是int类型，我们可以使用除10求余的方式，循环求余，在每一步求出的余数放到一个数组李存起来，最后在将数组拼起来成为一个int类型整数。</p>
<p>但是，以上方法想想就很复杂，操作起来也很麻烦，想到基本每种语言都带有字符串倒置的方法，我们可以先将数字转换为字符串，在调用内置方法倒置字符串。如果是传入的x是负数，在将其转为为负数即可</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></span>
<span class="line">        <span class="comment"># 对x判断为正还是为负</span></span>
<span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span>
<span class="line">            x = abs(x)</span>
<span class="line">            <span class="comment"># 先将数字转为字符串，再用反向切片操作(其他语言也都有字符串倒置函数)</span></span>
<span class="line">            <span class="keyword">return</span> self.isOverFlows(-int(str(x)[::<span class="number">-1</span>]))</span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            <span class="keyword">return</span> self.isOverFlows(int(str(x)[::<span class="number">-1</span>]))</span>
<span class="line"></span>
<span class="line">    <span class="comment"># 判断x是否在32位有符号数</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isOverFlows</span><span class="params">(self, x)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> pow(<span class="number">-2</span>, <span class="number">31</span>) &lt; x &lt; pow(<span class="number">2</span>, <span class="number">31</span>):</span>
<span class="line">            <span class="keyword">return</span> x</span>
<span class="line">        <span class="keyword">return</span> <span class="number">0</span></span>
</pre></td></tr></table></figure>
<p>使用了内置的字符串高效反向切片方法，并且将判断结果是否是属于32位有符号数分离出一个方法，减少耦合</p>
<h2 id="Palindrome-Number"><a href="#Palindrome-Number" class="headerlink" title="Palindrome Number"></a>Palindrome Number</h2><p>题目:<a href="https://leetcode.com/problems/palindrome-number/description/" target="_blank" rel="external">Palindrome Number</a></p>
<blockquote>
<p>Determine whether an integer is a palindrome. Do this without extra space.</p>
</blockquote>
<p>题意分析:<br>判断一个整形是否是回文，不能使用额外空间</p>
<h3 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h3><p>判断回文，首先需要知道回文的定义，就是正向和反向都一样的数字，也就是说这个数字需要前后对称，所以我们只需要用每个下标和它对称的下标上的数进行比较是否相等，如果不相等就不是回文，如果每个下标和对称位都相等就是回文，简单点可以直接从0循环到n-1，此时时间复杂度是O(N)，但其实只需要循环到一半即可，因为如果超过一半就会重复了，没有任何意义。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-2"><a href="#方法一-2" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></span>
<span class="line">        <span class="comment"># 将数字转换为字符串</span></span>
<span class="line">        x = str(x)</span>
<span class="line">        <span class="comment"># 得到字符串的长度</span></span>
<span class="line">        n = len(x)</span>
<span class="line">        <span class="comment"># 对字符串进行迭代</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span>
<span class="line">            <span class="comment"># 判断头和尾是否相等并且头要小于尾</span></span>
<span class="line">            <span class="keyword">if</span> x[i] != x[n - i - <span class="number">1</span>] <span class="keyword">and</span> i &lt; n - i - <span class="number">1</span>:</span>
<span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span>
</pre></td></tr></table></figure>
<p>很明显，此方法时间复杂度是O(N/2)，算较好的方法</p>
<h2 id="Longest-Common-Prefix"><a href="#Longest-Common-Prefix" class="headerlink" title="Longest Common Prefix"></a>Longest Common Prefix</h2><p>题目:<a href="https://leetcode.com/problems/longest-common-prefix/description/" target="_blank" rel="external">Longest Common Prefix</a></p>
<blockquote>
<p>Write a function to find the longest common prefix string amongst an array of strings..</p>
</blockquote>
<p>题意分析:<br>求出一个字符串数组中所有字符串的最长共同前缀，如<br>[‘aaa’,’ab’]  ==&gt; a<br>[‘aaa’]  ==&gt; aaa<br>[]==&gt; ‘’</p>
<h3 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h3><p>题目想要我们求出字符串数组中，所有字符串之间的共同的最长前缀，<br>想要求出最长的，这个最长的前缀，范围肯定是0到所有字符串中最短的字符串长度，所以得到最短的字符串和它自身的长度是很关键的，如果没有最短长度，我们根本不会知道循环的次数，如果随意选择一个字符串进行循环，如果这个字符串较长，就会造成越界错误</p>
<p>所以我们首先需要得到最短字符串和它自身的长度，来确定外循环次数，内循环去循环遍历每个字符串。</p>
<p>要得到最长共同前缀，其实这个和在一个数组里求最大的数的思路一样，我们需要先设第一个值为最大值，后面值分别与设的最大值相比较，如果比假设的最大值还要大，就需要更新假设最大值。</p>
<p>这里也一样，我们首先假设最长共同前缀为最短字符串的前1个字符，在内循环中判断每个字符的前i+1个子字符串是否等于假设的最长共同前缀，如果不相同，我们还需要判断当前i+1是否等于1，如果等于，那就是第一个字符都不相同，那就需要返回空，如果都相同，需要判断当前最长共同前缀是否等于最短字符串，如果等于，说明最长共同子串等于最短字符串，否则需要更新最长共同前缀，将其赋值为前i+1+1位的子字符串。进入下一次外循环。</p>
<p>在外循环中更新了最长共同前缀之后，在进入内循环判断，如果前i+1位子串不等于最长共同前缀，那就得返回前i位子串，此时前为i为子串即为最长共同前缀。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-3"><a href="#方法一-3" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs)</span>:</span></span>
<span class="line">        <span class="comment"># 判断字符串列表是否为空</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span>
<span class="line">            <span class="keyword">return</span> <span class="string">''</span></span>
<span class="line">        <span class="comment"># 计算字符串列表中最短的字符串</span></span>
<span class="line">        min_str = min(strs)</span>
<span class="line">        <span class="comment"># 计算最短字符串的长度</span></span>
<span class="line">        min_length = len(min_str)</span>
<span class="line">        <span class="comment"># 初始令最长共同前缀字符串为最短字符串的第一个字符</span></span>
<span class="line">        max_common_str = min_str[:<span class="number">1</span>]</span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min_length):</span>
<span class="line">            <span class="keyword">for</span> str <span class="keyword">in</span> strs:</span>
<span class="line">                <span class="comment"># 判断字符串列表中每个字符串的前i+1位是否与最长共同字符串相同</span></span>
<span class="line">                <span class="comment"># 不同则判断当前字符串是否为第1个，是则返回空，不是则返回前i位字符串</span></span>
<span class="line">                <span class="keyword">if</span> str[:i + <span class="number">1</span>] != max_common_str:</span>
<span class="line">                    <span class="keyword">if</span> i == <span class="number">0</span>:</span>
<span class="line">                        <span class="keyword">return</span> <span class="string">''</span></span>
<span class="line">                    <span class="keyword">return</span> str[:i]</span>
<span class="line">            <span class="comment"># 当每个字符串前i+1位都与共同前缀字符相同时，判断字符串是否最短字符串相同</span></span>
<span class="line">            <span class="comment"># 相同则返回最长共同前缀字符</span></span>
<span class="line">            <span class="keyword">if</span> min_str == max_common_str:</span>
<span class="line">                <span class="keyword">return</span> max_common_str</span>
<span class="line">            <span class="comment"># 不相同则返回前i+1+1位字符串(使字符串向后移动一位)</span></span>
<span class="line">            max_common_str = min_str[:i + <span class="number">1</span> + <span class="number">1</span>]</span>
<span class="line">        <span class="keyword">return</span> max_common_str</span>
</pre></td></tr></table></figure>
<p>此解法时间复杂度是O(N^2)，目前我想不到更好的解法。。但是leetcode能通过</p>
<h2 id="Valid-Parentheses"><a href="#Valid-Parentheses" class="headerlink" title="Valid Parentheses"></a>Valid Parentheses</h2><p>题目:<a href="https://leetcode.com/problems/valid-parentheses/description/" target="_blank" rel="external">Valid Parentheses</a></p>
<blockquote>
<p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p>
<p>The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.</p>
</blockquote>
<p>题意分析:<br>判断一个只有字符’(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ 和 ‘]’的字符串，并且每对括号都需要正确的关闭，也就是说括号需要成对出现</p>
<h3 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h3><p>判断成对出现的东西，我们很容易想到栈（先进后出）这种数据结构。</p>
<p>括号亦是如此，如果出现左括号，我们就将其入栈，当在出现了右括号，我们在将其出栈，如果最后的栈为空，即括号刚好是成对出现的。</p>
<p>但我们还需要判断三种括号之间的对应关系（即左小括号对应右小括号等），为了实现这种需求，在python里可以使用字典(java里可以使用map)存储对应关系。</p>
<p>循环字符串时，如果当前字符为左字符串，则向栈(列表/数组)尾部加上这个字符，如果不等于左括号，则判断此时栈是否为空或者当前的右括号字符在字典中所对应的左括号是否等于出栈的元素，如果不相等，则返回false</p>
<p>循环完毕还需要判断栈是否为空，如果为空，则返回true，反之，返回false</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-4"><a href="#方法一-4" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></span>
<span class="line">        <span class="string">'''</span>
<span class="line">        :param s: str</span>
<span class="line">        :return: bool</span>
<span class="line">        '''</span></span>
<span class="line">        left_char = <span class="string">'(&#123;['</span></span>
<span class="line">        mp = &#123;</span>
<span class="line">            <span class="string">')'</span>: <span class="string">'('</span>,</span>
<span class="line">            <span class="string">']'</span>: <span class="string">'['</span>,</span>
<span class="line">            <span class="string">'&#125;'</span>: <span class="string">'&#123;'</span></span>
<span class="line">        &#125;</span>
<span class="line">        <span class="comment"># 初始化一个空列表作为栈</span></span>
<span class="line">        stack = []</span>
<span class="line">        <span class="comment"># 循环遍历字符串</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span>
<span class="line">            <span class="comment"># 如果字符是左括号就入栈</span></span>
<span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> left_char:</span>
<span class="line">                stack.append(i)</span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                <span class="comment"># 如果也想加上对其他字符串匹配</span></span>
<span class="line">                <span class="comment"># if i in mp.keys():</span></span>
<span class="line">                    <span class="comment"># 栈为空或者传入的右括号不等于栈尾的左括号，即不符合条件</span></span>
<span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stack <span class="keyword">or</span> mp[i] != stack.pop():</span>
<span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="comment"># 判断栈是否为空，为空即成立</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> stack:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span>
</pre></td></tr></table></figure>
<p>用列表来替代模拟栈，时间复杂度为O(N)，顺利通过leetcode检测</p>
<h2 id="Merge-Two-Sorted-Lists"><a href="#Merge-Two-Sorted-Lists" class="headerlink" title="Merge Two Sorted Lists"></a>Merge Two Sorted Lists</h2><p>题目:<a href="https://leetcode.com/problems/merge-two-sorted-lists/description/" target="_blank" rel="external">Merge Two Sorted Lists</a></p>
<blockquote>
<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
</blockquote>
<p>题意分析:<br>将两个已排序的链表合并，并返回一个新的链表，新链表应该是由两个链表中的结点拼接起来的</p>
<h3 id="思路分析-5"><a href="#思路分析-5" class="headerlink" title="思路分析"></a>思路分析</h3><p>想要拼接链表，首先需要知道这个结点是什么样的结构，很容易想到，python中的单链表的结点应该如下所示:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span>
<span class="line">        self.val = x</span>
<span class="line">        self.next = <span class="keyword">None</span></span>
</pre></td></tr></table></figure></p>
<p>当然题中也给出了这个结构。有了这个结构，就能知道我们需要得到结点的值才能进行比较。</p>
<p>又由于题目要求我们使用其中的一个结点将两个链表拼接起来，换句话说，就是将一个链表合并到另一个链表上，所以并不能创建一个新链表去进行操作。</p>
<p>当其中某一个链表为空时，只需要返回另一个链表即可，这种情况需要单独讨论</p>
<p>当两个链表均不为空时，我们需要去比较结点两个链表中结点的大小，当l1的结点值小于l2的结点时，我们就需要将l2合并到l1上，把l2的结点一个一个拼到l1上，知道l2为为空时，循环就可以结束了。这个过程是重复的，所以我们这里可以使用递归操作，反之，当l2的结点小于l1时，就把l1拼接到l2上</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-5"><a href="#方法一-5" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></span>
<span class="line">        <span class="string">'''</span>
<span class="line">        :param l1: ListNode</span>
<span class="line">        :param l2: ListNode</span>
<span class="line">        :return: ListNode</span>
<span class="line">        '''</span></span>
<span class="line">        <span class="comment"># 如果l1或l2有一个为空，则返回另一个</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1 <span class="keyword">or</span> <span class="keyword">not</span> l2:</span>
<span class="line">            <span class="keyword">return</span> l1 <span class="keyword">or</span> l2</span>
<span class="line">        <span class="comment"># 比较l1和l2的值的大小</span></span>
<span class="line">        <span class="keyword">if</span> l1.val &lt; l2.val:</span>
<span class="line">            <span class="comment"># 将l2递归到l1上</span></span>
<span class="line">            l1.next = self.mergeTwoLists(l1.next, l2)</span>
<span class="line">            <span class="keyword">return</span> l1</span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            <span class="comment"># 将l1递归到l2上</span></span>
<span class="line">            l2.next = self.mergeTwoLists(l2.next, l1)</span>
<span class="line">            <span class="keyword">return</span> l2</span>
</pre></td></tr></table></figure>
<p>用了递归的方式，减少了我们需要处理的循环等等</p>
<h2 id="Remove-Duplicates-from-Sorted-Array"><a href="#Remove-Duplicates-from-Sorted-Array" class="headerlink" title="Remove Duplicates from Sorted Array"></a>Remove Duplicates from Sorted Array</h2><p>题目:<a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/" target="_blank" rel="external">Remove Duplicates from Sorted Array</a></p>
<blockquote>
<p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
</blockquote>
<p>例子:</p>
<blockquote>
<p>Given input array nums = [1,1,2]<br>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the new length</p>
</blockquote>
<p>题意分析:<br>去除有序数组中的重复元素，并返回去重之后的数组的长度</p>
<h3 id="思路分析-6"><a href="#思路分析-6" class="headerlink" title="思路分析"></a>思路分析</h3><p>由于我使用的是python，我首先想到的是用set集合去重，然后用len计算长度，立马兴奋的写下一行代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">len(set(nums))</span>
</pre></td></tr></table></figure></p>
<p>然而在这里会报错，所以只能考虑其他的办法。</p>
<p>还很容易想到的是用一个列表，字典之类的将我们遍历过的元素存起来，然后在用之后的元素与之比较，查看是否存在，存在就忽略，最后计算字典或者列表中元素的数量就能得到我们所需要的长度，但是同样与题目要求不符，题目要求不能使用分配额外的空间去解决。所以还得想别的办法</p>
<p>首先，数组或列表为空时，返回0，这个需要单独讨论，遍历这个列表是必须的。</p>
<p>我们可以假设新列表的长度为0，然后我们就能同时得到列表中第一个元素的值，在循环中我们可以用下一个与之比较，如果不一样，就将假设的新列表的长度+1，同时，由于有元素不一样，我们需要将新元素赋给之前相同的元素，也就是索引为新列表长度的元素，由于是排序的列表，我们不用担心，在未遍历的元素中还有之前已经遍历过的相同的元素。就这样从第二个开始遍历到最后一个，就能得到新列表的长度，但是由于我们是新列表的长度初始设为0，遍历又是从1开始，所以这个列表的长度最终应该+1</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-6"><a href="#方法一-6" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums)</span>:</span></span>
<span class="line">        <span class="string">'''</span>
<span class="line">        :param nums: list[int]</span>
<span class="line">        :return:int</span>
<span class="line">        '''</span></span>
<span class="line">        <span class="comment"># 如果数组为空，则返回0</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">        new_length = <span class="number">0</span></span>
<span class="line">        length = len(nums)</span>
<span class="line">        <span class="comment"># 从1到n-1开始循环遍历</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, length):</span>
<span class="line">            <span class="comment"># 如果i不等于nums[now_length](其实是i-1)</span></span>
<span class="line">            <span class="keyword">if</span> nums[i] != nums[new_length]:</span>
<span class="line">                new_length += <span class="number">1</span></span>
<span class="line">                nums[new_length] = nums[i]</span>
<span class="line">        <span class="keyword">return</span> new_length + <span class="number">1</span></span>
</pre></td></tr></table></figure>
<p>这样我们就可以不用额外的空间，并且时间复杂度只有O(N-1)</p>
<h2 id="Remove-Element"><a href="#Remove-Element" class="headerlink" title="Remove Element"></a>Remove Element</h2><p>题目:<a href="https://leetcode.com/problems/remove-element/description/" target="_blank" rel="external">Remove Element</a></p>
<blockquote>
<p>Given an array and a value, remove all instances of that value in place and return the new length.<br>Do not allocate extra space for another array, you must do this in place with constant memory.<br>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>
</blockquote>
<p>例子:</p>
<blockquote>
<p>Given input array nums = [3,2,2,3], val = 3<br>Your function should return length = 2, with the first two elements of nums being 2</p>
</blockquote>
<p>题意分析:<br>题意为给你一个数组，再给你一个值，删除所有和这个值相等的元素，返回新列表的长度，要求不能在使用额外的数组，只能操作这一个数组。</p>
<h3 id="思路分析-7"><a href="#思路分析-7" class="headerlink" title="思路分析"></a>思路分析</h3><p>本来我想的很简单，既然只是要返回长度，那我也可以不删除，只计算长度啊，抱着侥幸的心里尝试了最简单的办法，声明一个长度的变量，并设置初始值为0，循环遍历数组中所有元素，如果元素不与目标值相等就+1。提交之后发现并不能通过，那就是说，我们在返回长度的同时，也需要把元数组进行删除。</p>
<p>既然要删除元素，我想到了之前做过的<a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/" target="_blank" rel="external">Remove Duplicates from Sorted Array</a>这一题，只不过这题要求是去除重复元素，同样都是去除元素，思想也有些类似，这题可以想象成已经给你了一个重复元素，我们我们可以套用之前的解法，做一点变化即可。</p>
<p>同样声明一个长度为0，因为是删除指定元素，所以数组为空的时候也不用担心，那就返回0嘛，所以这次也不需要对0进行单独讨论了，同样我们需要对数组进行循环遍历，如果该下标元素不等于目标值的话，我们就把该下标元素赋值给声明的长度作为下标的元素，然后将长度+1，这样我们就可以完成操作了。在程序最后返回长度即可。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-7"><a href="#方法一-7" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span><span class="params">(self, nums, val)</span>:</span></span>
<span class="line">        length = <span class="number">0</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span>
<span class="line">            <span class="keyword">if</span> nums[i] != val:</span>
<span class="line">                nums[length] = nums[i]</span>
<span class="line">                length += <span class="number">1</span></span>
<span class="line">        <span class="keyword">return</span> length, nums</span>
</pre></td></tr></table></figure>
<p>这样我们就可以不用额外的空间，时间复杂度为O(N)</p>
<h2 id="Search-Insert-Position"><a href="#Search-Insert-Position" class="headerlink" title="Search Insert Position"></a>Search Insert Position</h2><p>题目:<a href="https://leetcode.com/problems/search-insert-position/description/" target="_blank" rel="external">Search Insert Position</a></p>
<blockquote>
<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.<br>You may assume no duplicates in the array.</p>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">Here are few examples.</span>
<span class="line">[1,3,5,6], 5 → 2</span>
<span class="line">[1,3,5,6], 2 → 1</span>
<span class="line">[1,3,5,6], 7 → 4</span>
<span class="line">[1,3,5,6], 0 → 0</span>
</pre></td></tr></table></figure></p>
<p>题意分析:<br>一个有序数组，一个值，首先需要判断值是否在数组中，如果存在，即返回该值在数组中的索引值，如果不存在，就需要返回这个值应该在的地方。</p>
<h3 id="思路分析-8"><a href="#思路分析-8" class="headerlink" title="思路分析"></a>思路分析</h3><p>这题算很简单的了，只需要一次循环即可，循环遍历所有元素，由于列表是有序的，所以直到有元素第一次大于目标值时，就已经能够知道该值不在数组中，当然，当第一次大于该值时，此时的索引也就是该值应该存在的地方。</p>
<p>当然，等于该值的情况需要单独讨论，也可以在该循环中加以判断即可，由于我使用的是python，首先想到的就是in操作，其可以直接判断是否存在，存在在用index方法得到索引。</p>
<p>还有一种极端情况，如果上述情况都不成立，那就是目标值大于列表中最大的，也就是如果该值在列表中，其应该在列表的下一位，也就是列表的长度。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-8"><a href="#方法一-8" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span><span class="params">(self, nums, val)</span>:</span></span>
<span class="line">        length = <span class="number">0</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span>
<span class="line">            <span class="keyword">if</span> nums[i] != val:</span>
<span class="line">                nums[length] = nums[i]</span>
<span class="line">                length += <span class="number">1</span></span>
<span class="line">        <span class="keyword">return</span> length, nums</span>
</pre></td></tr></table></figure>
<p>这样我们就可以不用额外的空间，时间复杂度为O(N)</p>
<h2 id="Maximum-Subarray"><a href="#Maximum-Subarray" class="headerlink" title="Maximum Subarray"></a>Maximum Subarray</h2><p>题目:<a href="https://leetcode.com/problems/maximum-subarray/description/" target="_blank" rel="external">Maximum Subarray</a></p>
<blockquote>
<p>Find the contiguous subarray within an array (containing at least one number) which has the largest sum.</p>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">given the array [-2,1,-3,4,-1,2,1,-5,4],</span>
<span class="line">the contiguous subarray [4,-1,2,1] has the largest sum = 6</span>
</pre></td></tr></table></figure></p>
<p>题意分析:<br>求出一个整形列表中几个连续元素的和</p>
<h3 id="思路分析-9"><a href="#思路分析-9" class="headerlink" title="思路分析"></a>思路分析</h3><p>想要得到和，首先我们肯定要求和，想知道若干个元素的和，还得求出最大的和，意味着我们肯定要循环。</p>
<p>方法一:<br>很容易想到我们可以先先计算一个元素的和，然后循环得到这个元素与后续所有元素的和，并求出其中的最大值，这很简单，只需要当和大于假定的最大值时，更新最大值即可。这就得到了以一个元素开始与后续子元素其中的最大值。</p>
<p>想要得到整个列表中哪几个连续元素的和最大，我们还需要对所有元素进行循环，也就是在内循环以某个元素开始的最大值，在外循环得到以所有元素的最大值。</p>
<p>因为方法一的进行了两次循环，时间复杂度较高，为此我们需要想办法进行一次循环就得到我们需要的值。</p>
<p>方法二：<br>要达到目的，循环肯定少不了，既然我们不需要得到是哪几个元素的和最大，我们也就没必要进行两此循环，来得到是从那个索引开始到那个索引结束。</p>
<p>首先，我们声明两个变量，一个为循环当前的最大值，一个为我们需要的最大值，初始都将他们赋为列表的第一个元素（需要对为列表单独讨论）。</p>
<p>我们不需要得到元素列表，所以直接迭代列表元素即可，计算当前元素与当前的最大值+当前元素的和，并将他们俩之间的最大值赋值给当前最大值。</p>
<p>然后再将当前最大值与需要的最大值进行比较，把其中的最大值赋值给需要的最大值。循环结束就能得到我们需要的。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-9"><a href="#方法一-9" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        计算列表中连续子数组的最大和</span>
<span class="line">        :param nums: list[int]</span>
<span class="line">        :return: int</span>
<span class="line">        """</span></span>
<span class="line">        start = <span class="number">0</span></span>
<span class="line">        stop = <span class="number">0</span></span>
<span class="line">        length = len(nums)</span>
<span class="line">        <span class="keyword">if</span> length == <span class="number">1</span>:</span>
<span class="line">            <span class="keyword">return</span> sum(nums)</span>
<span class="line">        largest_sum = nums[<span class="number">0</span>]</span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length):</span>
<span class="line">            max_sum = nums[<span class="number">0</span>]</span>
<span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, length):</span>
<span class="line">                ij_sum = sum(nums[i: j + <span class="number">1</span>])</span>
<span class="line">                <span class="keyword">if</span> ij_sum &gt; max_sum:</span>
<span class="line">                    stop = j</span>
<span class="line">                    max_sum = ij_sum</span>
<span class="line">            <span class="keyword">if</span> max_sum &gt; largest_sum:</span>
<span class="line">                start = i</span>
<span class="line">                largest_sum = max_sum</span>
<span class="line">        <span class="keyword">return</span> largest_sum</span>
</pre></td></tr></table></figure>
<p>时间复杂度较高为O(N^2),但可以得到最大和的元素列表</p>
<h4 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        计算列表中连续子数组的最大和</span>
<span class="line">        :param nums: list[int]</span>
<span class="line">        :return: int</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">        cur_sum = nums[<span class="number">0</span>]</span>
<span class="line">        max_sum = nums[<span class="number">0</span>]</span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span>
<span class="line">            <span class="comment"># 计算当前的和与i相加之后的和比较的最大值</span></span>
<span class="line">            cur_sum = max(i, cur_sum + i)</span>
<span class="line">            <span class="comment"># 计算当前和与最大和比较的最大值</span></span>
<span class="line">            max_sum = max(max_sum, cur_sum)</span>
<span class="line">        <span class="keyword">return</span> max_sum</span>
</pre></td></tr></table></figure>
<p>一次循环，时间复杂度为O(N)，不能轻易得到元素列表</p>
<h2 id="Count-and-Say"><a href="#Count-and-Say" class="headerlink" title="Count and Say"></a>Count and Say</h2><p>题目:<a href="https://leetcode.com/problems/count-and-say/description/" target="_blank" rel="external">Count and Say</a></p>
<blockquote>
<p>The count-and-say sequence is the sequence of integers with the first five terms as following:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">1.     1</span>
<span class="line">2.     11</span>
<span class="line">3.     21</span>
<span class="line">4.     1211</span>
<span class="line">5.     111221</span>
</pre></td></tr></table></figure></p>
<p>1 is read off as “one 1” or 11.<br>11 is read off as “two 1s” or 21.<br>21 is read off as “one 2, then one 1” or 1211.<br>Given an integer n, generate the nth term of the count-and-say sequence.</p>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">Input: 1</span>
<span class="line">Output: &quot;1&quot;</span>
<span class="line"></span>
<span class="line">Input: 4</span>
<span class="line">Output: &quot;1211&quot;</span>
</pre></td></tr></table></figure></p>
<p>题意分析:<br>第n次结果是对n-1次结果的解释。例如第4次的结果为1211，参照第3次结果，可以解释为一个2，一个1，就形成了1211，一次类推</p>
<h3 id="思路分析-10"><a href="#思路分析-10" class="headerlink" title="思路分析"></a>思路分析</h3><p>在我们掌握了规律之后，我们发现下一次的结果总由上一次的结果所决定，很容易想到可以用递归处理，如果采用递归，当然我们也需要知道结束标志，不然就会一直死循环下去了，这里很明显，结束标志就是当n为1或者0时，分别返回1或者空。</p>
<p>当需要求第n次结果时，我们可以获取递归调用第n-1次的结果进行处理，对上一次计算结果进行处理，这里就是对上一次计算结果解释。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-10"><a href="#方法一-10" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span><span class="params">(self, n)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line"></span>
<span class="line">        :param n: int</span>
<span class="line">        :return: str</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="string">''</span></span>
<span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span>
<span class="line">            <span class="keyword">return</span> <span class="string">'1'</span></span>
<span class="line">        <span class="comment"># 得到上一次的结果</span></span>
<span class="line">        n1_str = self.countAndSay(n - <span class="number">1</span>)</span>
<span class="line">        <span class="comment"># 末尾字符赋值为上一次结果的第一个字符</span></span>
<span class="line">        last = n1_str[<span class="number">0</span>]</span>
<span class="line">        cnt = <span class="number">1</span></span>
<span class="line">        n_str = <span class="string">''</span></span>
<span class="line">        <span class="comment"># 从索引1开始迭代</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(n1_str)):</span>
<span class="line">            <span class="comment"># 如果当前元素等于初始末尾字符(上一次结果的第一个字符)</span></span>
<span class="line">            <span class="keyword">if</span> n1_str[i] == last:</span>
<span class="line">                cnt += <span class="number">1</span></span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                n_str = n_str + str(cnt)</span>
<span class="line">                n_str = n_str + last</span>
<span class="line">                <span class="comment"># 将数量重置为1</span></span>
<span class="line">                cnt = <span class="number">1</span></span>
<span class="line">                last = n1_str[i]</span>
<span class="line">        n_str = n_str + str(cnt)</span>
<span class="line">        n_str = n_str + last</span>
<span class="line">        <span class="keyword">return</span> n_str</span>
</pre></td></tr></table></figure>
<p>这样就用递归的方式很简单的得到了结果。</p>
<p>当然我们也可以用求下一次结果的方式，只需要执行n-1次即可。</p>
<h2 id="Count-and-Say-1"><a href="#Count-and-Say-1" class="headerlink" title="Count and Say"></a>Count and Say</h2><p>题目:<a href="https://leetcode.com/problems/count-and-cay/description/" target="_blank" rel="external">Count and Say</a></p>
<blockquote>
<p>Given a string s consists of upper/lower-case alphabets and empty space characters ‘ ‘, return the length of last word in the string.<br>If the last word does not exist, return 0.<br>Note: A word is defined as a character sequence consists of non-space characters only.</p>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">Given s = &quot;Hello World&quot;,</span>
<span class="line">return 5.</span>
</pre></td></tr></table></figure></p>
<p>题意分析:<br>题目要求我们求字符串中最后一个单词的长度，并且这个字符串每个单词之间是由空格连接，当最后一个单词不存在时，返回0。</p>
<h3 id="思路分析-11"><a href="#思路分析-11" class="headerlink" title="思路分析"></a>思路分析</h3><p>这道题目可以说非常简单了，唯一的混淆点就是对空格的处理，当末尾有空格时，中间有空格时，处理都会变的麻烦。</p>
<p>但是题目已经说明末尾的空格并不计算，所以我们可以首先将前后的空格去掉，然后根据单词分割符空格将字符串进行切割，然后取最后一部分计算长度即可。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-11"><a href="#方法一-11" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLastWord</span><span class="params">(self, s)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        返回字符串中最后一个单词的长度</span>
<span class="line">        :param s: str</span>
<span class="line">        :return: int</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 先去掉首尾的空格</span></span>
<span class="line">        <span class="comment"># 在按空格切割字符串转换为列表</span></span>
<span class="line">        <span class="comment"># 取列表最后一个元素计算长度</span></span>
<span class="line">        <span class="keyword">return</span> len(s.strip().split(<span class="string">' '</span>)[<span class="number">-1</span>])</span>
</pre></td></tr></table></figure>
<p>代码非常短，只需要一行就可以解决。效率也是很高的</p>
<h2 id="Add-Binary"><a href="#Add-Binary" class="headerlink" title="Add Binary"></a>Add Binary</h2><p>题目:<a href="https://leetcode.com/problems/add-binary/description/" target="_blank" rel="external">Add Binary</a></p>
<blockquote>
<p>Given two binary strings, return their sum (also a binary string).</p>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">a = &quot;11&quot;</span>
<span class="line">b = &quot;1&quot;</span>
<span class="line">Return &quot;100&quot;.</span>
</pre></td></tr></table></figure></p>
<p>题意分析:<br>题目很好理解，只是个二进制加法。</p>
<h3 id="思路分析-12"><a href="#思路分析-12" class="headerlink" title="思路分析"></a>思路分析</h3><p>既然要求二进制加法，我们可以利用计算机内部的实现来直接求得结果，但是这样对大部分人来说比较困难。</p>
<p>我们还可以先将二进制转为10进制，然后就可以直接用+号直接加了，理解起来非常简单，然后得出结果后在将其转为2进制即可。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-12"><a href="#方法一-12" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a, b)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        二进制加法</span>
<span class="line">        :param a:</span>
<span class="line">        :param b:</span>
<span class="line">        :return:</span>
<span class="line">        """</span></span>
<span class="line">        a, b = int(a, <span class="number">2</span>), int(b, <span class="number">2</span>)</span>
<span class="line">        <span class="comment"># 由于bin()方法转为的二进制会有0b前缀，所有我们需要用字符串切到2之后</span></span>
<span class="line">        <span class="keyword">return</span> bin(a+b)[<span class="number">2</span>:]</span>
</pre></td></tr></table></figure>
<h2 id="Sqrt-x"><a href="#Sqrt-x" class="headerlink" title="Sqrt(x)"></a>Sqrt(x)</h2><p>题目:<a href="https://leetcode.com/problems/sqrtx/description/" target="_blank" rel="external">Sqrt(x)</a></p>
<blockquote>
<p>Implement int sqrt(int x).<br>Compute and return the square root of x.</p>
</blockquote>
<p>题意分析:<br>这题考sqrt()方法的实现，也就是求平方根</p>
<h3 id="思路分析-13"><a href="#思路分析-13" class="headerlink" title="思路分析"></a>思路分析</h3><p>求平方根，其实是个数学问题，我们可以想一下在数学里面是如何处理的。</p>
<p>但作为编程题，其实我们可以调用标准库中的sqrt()函数直接得出结果，我们也可以去查看其中的源码。</p>
<p>还可以去求0.5次方的结果。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-13"><a href="#方法一-13" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mySqrt</span><span class="params">(self, x)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        计算平方根</span>
<span class="line">        :param x: int</span>
<span class="line">        :return: int</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">import</span> math</span>
<span class="line">        <span class="keyword">return</span> int(math.sqrt(x))</span>
</pre></td></tr></table></figure>
<p>调用math库中的sqrt函数，虽然在这里也能通过，但是我觉得有点不符合题意</p>
<h4 id="方法一-14"><a href="#方法一-14" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">mySqrt</span><span class="params">(self, x)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        计算平方根</span>
<span class="line">        :param x: int</span>
<span class="line">        :return: int</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">return</span> int(x ** <span class="number">0.5</span>)</span>
</pre></td></tr></table></figure>
<p>这种方法使用的是求0.5次方。</p>
<h2 id="Climbing-Stairs"><a href="#Climbing-Stairs" class="headerlink" title="Climbing Stairs"></a>Climbing Stairs</h2><p>题目:<a href="https://leetcode.com/problems/climbing-stairs/description/" target="_blank" rel="external">Climbing Stairs</a></p>
<blockquote>
<p>You are climbing a stair case. It takes n steps to reach to the top.<br>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?<br>Note: Given n will be a positive integer.</p>
</blockquote>
<p>题意分析:<br>题目相当于a到b点有n步，你每次可以选择走一步或两步，求可以有多少种方式可以走到终点</p>
<h3 id="思路分析-14"><a href="#思路分析-14" class="headerlink" title="思路分析"></a>思路分析</h3><p>这题，笔者最开始把题目抽象成了x+2y=n这个方程，然后去找有多少组整数解了，后来一想，发现并不是这样，因为上面那个方程只计算了走一步和走两步的次数，并没有考虑先后的顺序，思路就断了。</p>
<p>然后笔者在纸上，分别列举了当n=1,2,3,4…时的结果数，发现了一个规律，每一次的结果等于上一次+上上次的结果的和，类似与斐波那契数列。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-15"><a href="#方法一-15" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line"></span>
<span class="line">        :param n: int</span>
<span class="line">        :return: int</span>
<span class="line">        """</span></span>
<span class="line">        a = b = <span class="number">1</span></span>
<span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span>
<span class="line">            a, b = b, a + b</span>
<span class="line">        <span class="keyword">return</span> a</span>
</pre></td></tr></table></figure>
<p>虽然笔者也不知道结果为什么，希望有读者能从数学上给我解释下。</p>
<h2 id="Remove-Duplicates-from-Sorted-List"><a href="#Remove-Duplicates-from-Sorted-List" class="headerlink" title="Remove Duplicates from Sorted List"></a>Remove Duplicates from Sorted List</h2><p>题目:<a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/" target="_blank" rel="external">Remove Duplicates from Sorted List</a></p>
<blockquote>
<p>Given a sorted linked list, delete all duplicates such that each element appear only once.</p>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">Given 1-&gt;1-&gt;2, return 1-&gt;2.</span>
<span class="line">Given 1-&gt;1-&gt;2-&gt;3-&gt;3, return 1-&gt;2-&gt;3.</span>
</pre></td></tr></table></figure></p>
<p>题意分析:<br>在一个已排序的单链表中，删除所有重复的元素，每个元素只能保留一个</p>
<h3 id="思路分析-15"><a href="#思路分析-15" class="headerlink" title="思路分析"></a>思路分析</h3><p>为了删除重复元素，我们需要遍历整个单链表，又由于我们不知道循环的次数，只知道结束条件为结点为空，所以我们需要使用while循环，</p>
<p>在循环中我们还需要嵌套一层while循环，判断当前结点的下一个结点是否存在并且下一个结点的值是否等于下下个结点的值，如果等于就将下下个结点赋值给当前结点的下一个结点。这部的作用其实就是将重复的元素都跳过。</p>
<p>在外循环中将当前结点的下一个结点赋值给当前结点，最后返回单链表的头结点即可。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-16"><a href="#方法一-16" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        有序单链表去重</span>
<span class="line">        :param head: ListNode</span>
<span class="line">        :return: ListNode</span>
<span class="line">        """</span></span>
<span class="line">        current = head</span>
<span class="line">        <span class="comment"># 如果当前结点不为空</span></span>
<span class="line">        <span class="keyword">while</span> current:</span>
<span class="line">            <span class="comment"># 如果当前结点的下一个结点存在</span></span>
<span class="line">            <span class="comment"># 并且当前结点的值等于下一个结点的值</span></span>
<span class="line">            <span class="keyword">while</span> current.next <span class="keyword">and</span> current.val == current.next.val:</span>
<span class="line">                <span class="comment"># 当前结点的下一个结点等于当前结点的下下个结点</span></span>
<span class="line">                current.next = current.next.next</span>
<span class="line">            <span class="comment"># 再降当前结点的下一个结点赋值给当前结点</span></span>
<span class="line">            current = current.next</span>
<span class="line">        <span class="comment"># 返回已经去重的单链表</span></span>
<span class="line">        <span class="keyword">return</span> head</span>
</pre></td></tr></table></figure>
<h2 id="Merge-Sorted-Array"><a href="#Merge-Sorted-Array" class="headerlink" title="Merge Sorted Array"></a>Merge Sorted Array</h2><p>题目:<a href="https://leetcode.com/problems/merge-sorted-array/description/" target="_blank" rel="external">Merge Sorted Array</a></p>
<blockquote>
<p>Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.</p>
<p>Note:You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.</p>
</blockquote>
<p>题意分析:<br>给定两个已排序的整形列表nums1和nums2，将nums2合并到nums1上作用一个排序的列表。</p>
<h3 id="思路分析-16"><a href="#思路分析-16" class="headerlink" title="思路分析"></a>思路分析</h3><p>如果m&gt;0 n&gt;0时，如果nums1的m - 1一个元素的值大于等于nums2的n - 1个元素值则我们需要把nums1的m-1的值赋值给nums[m+n-1],然后将m减一即可，否则需要将nums2的n-1的值赋值给nums1[m-n-1],然后将n减一。</p>
<p>如果只有n大于0，则只需把nums2的前n项赋值给nums1的前n项</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-17"><a href="#方法一-17" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1, m, nums2, n)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        将列表nums2合并到nums1上</span>
<span class="line">        :param nums1: list[int]</span>
<span class="line">        :param m: int</span>
<span class="line">        :param nums2: list[int]</span>
<span class="line">        :param n: int</span>
<span class="line">        :return: void</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">while</span> m &gt; <span class="number">0</span> <span class="keyword">and</span> n &gt; <span class="number">0</span>:</span>
<span class="line">            <span class="keyword">if</span> nums1[m - <span class="number">1</span>] &gt;= nums2[n - <span class="number">1</span>]:</span>
<span class="line">                nums1[m + n - <span class="number">1</span>] = nums1[m - <span class="number">1</span>]</span>
<span class="line">                m -= <span class="number">1</span></span>
<span class="line">            <span class="keyword">else</span>:</span>
<span class="line">                nums1[m - n - <span class="number">1</span>] = nums2[n - <span class="number">1</span>]</span>
<span class="line">                n -= <span class="number">1</span></span>
<span class="line">        <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span>
<span class="line">            nums1[:n] = nums2[:n]</span>
</pre></td></tr></table></figure>
<h2 id="Same-Tree"><a href="#Same-Tree" class="headerlink" title="Same Tree"></a>Same Tree</h2><p>题目:<a href="https://leetcode.com/problems/same-tree/description/" target="_blank" rel="external">Same Tree</a></p>
<blockquote>
<p>Given two binary trees, write a function to check if they are equal or not.<br>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>
</blockquote>
<p>题意分析:<br>让我们判断两个二叉树是否相同，相同的标准只需要各位置上的元素值相等即可</p>
<h3 id="思路分析-17"><a href="#思路分析-17" class="headerlink" title="思路分析"></a>思路分析</h3><p>想要判断各个结点上的值是否相等，我们需要去遍历整棵树。</p>
<p>在二叉树方面，我们一般使用递归的方法去遍历，先判断当前结点是否为空，如果不为空，可以在遍历的过程中不断的比较每个结点上的元素的值。如果当前结点的值也相同，我们需要同时比较当前结点的左子树和和右子树。</p>
<p>还有一种当两颗树都为空时，需要单独讨论，此时两棵树也是符合题意的相等</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-18"><a href="#方法一-18" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p, q)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        判断两个二叉树是否相同（值相同即相同）</span>
<span class="line">        :param p: TreeNode</span>
<span class="line">        :param q: TreeNode</span>
<span class="line">        :return: bool</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 如果p和q都不为空</span></span>
<span class="line">        <span class="keyword">if</span> p <span class="keyword">and</span> p:</span>
<span class="line">            <span class="comment"># 当前结点的值是否相等</span></span>
<span class="line">            <span class="keyword">if</span> p.val == q.val:</span>
<span class="line">                <span class="comment"># 判断当前结点的下一个左右结点是否相等</span></span>
<span class="line">                <span class="keyword">return</span> self.isSameTree(q.left, p.left) \</span>
<span class="line">                       <span class="keyword">and</span> self.isSameTree(q.right, p.right)</span>
<span class="line">        <span class="comment"># 如果p和q均为空</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p <span class="keyword">and</span> <span class="keyword">not</span> q:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span>
</pre></td></tr></table></figure>
<p>使用递归的方法使理解起来很容易，逻辑上也相对简单。</p>
<h2 id="Symmetric-Tree"><a href="#Symmetric-Tree" class="headerlink" title="Symmetric Tree"></a>Symmetric Tree</h2><p>题目:<a href="https://leetcode.com/problems/symmetric-tree/description/" target="_blank" rel="external">Symmetric Tree</a></p>
<blockquote>
<p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>
</blockquote>
<p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line">For example, this binary tree [1,2,2,3,4,4,3] is symmetric:</span>
<span class="line"></span>
<span class="line">    1</span>
<span class="line">   / \</span>
<span class="line">  2   2</span>
<span class="line"> / \ / \</span>
<span class="line">3  4 4  3</span>
<span class="line">But the following [1,2,2,null,3,null,3] is not:</span>
<span class="line">    1</span>
<span class="line">   / \</span>
<span class="line">  2   2</span>
<span class="line">   \   \</span>
<span class="line">   3    3</span>
</pre></td></tr></table></figure></p>
<p>题意分析:<br>给出一个二叉树，检查这个二叉树是否镜像对称(左右对称)</p>
<h3 id="思路分析-18"><a href="#思路分析-18" class="headerlink" title="思路分析"></a>思路分析</h3><p>想要判断二叉树是否左右对称，也就是左子树等于右子树，或者当前结点都为空。</p>
<p>对结点为空，我们需要单独讨论。</p>
<p>为了好理解，我们可以抽象出一个函数，传入两个树，判断这两个树是否是镜像的，在调用时，我们只需要均传入当前树的根结点即可。</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-19"><a href="#方法一-19" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span><span class="params">(self, root)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        判断一颗树是否是镜像树</span>
<span class="line">        :param root: TreeNode</span>
<span class="line">        :return: bool</span>
<span class="line">        """</span></span>
<span class="line">        <span class="keyword">return</span> self.isMirror(root, root)</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMirror</span><span class="params">(self, tree_node1, tree_node2)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        判断两棵树是否镜像</span>
<span class="line">        :param tree_node1: TreeNode</span>
<span class="line">        :param tree_node2: TreeNode</span>
<span class="line">        :return: bool</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 如果两个叶子结点均为空</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tree_node1 <span class="keyword">and</span> <span class="keyword">not</span> tree_node2:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span>
<span class="line">        <span class="comment"># 如果只有一个叶子结点为空</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tree_node1 <span class="keyword">or</span> <span class="keyword">not</span> tree_node2:</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span>
<span class="line">        <span class="comment"># 当前叶子结点的值相等，并且一颗树的左子树等于另一颗树的右子树</span></span>
<span class="line">        <span class="keyword">return</span> (tree_node1.val == tree_node2.val) \</span>
<span class="line">               <span class="keyword">and</span> self.isMirror(tree_node1.right, tree_node2.left) \</span>
<span class="line">               <span class="keyword">and</span> self.isMirror(tree_node1.left, tree_node2.right)</span>
</pre></td></tr></table></figure>
<p>分别对结点均为空或者一个为空的状态左讨论，最后用递归的方式调用该树的左子树和右子树。</p>
<h2 id="Maximum-Depth-of-Binary-Tree"><a href="#Maximum-Depth-of-Binary-Tree" class="headerlink" title="Maximum Depth of Binary Tree"></a>Maximum Depth of Binary Tree</h2><p>题目:<a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/description/" target="_blank" rel="external">Maximum Depth of Binary Tree</a></p>
<blockquote>
<p>Given a binary tree, find its maximum depth.<br>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
</blockquote>
<p>题意分析:<br>求出树的最大深度。</p>
<h3 id="思路分析-19"><a href="#思路分析-19" class="headerlink" title="思路分析"></a>思路分析</h3><p>想求最大深度，我们只需递归左右子树找出哪个子树的深度更深即可，但由于还有根结点，所以在求出两个子树的最大深度之后还需要+1.</p>
<p>对根结点为空时，需要单独讨论，返回0即可</p>
<p>所以我们可以有以下解法</p>
<h4 id="方法一-20"><a href="#方法一-20" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root)</span>:</span></span>
<span class="line">        <span class="string">"""</span>
<span class="line">        计算树的最大深度</span>
<span class="line">        :param root: TreeNode</span>
<span class="line">        :return: int</span>
<span class="line">        """</span></span>
<span class="line">        <span class="comment"># 如果根结点为空返回0</span></span>
<span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span>
<span class="line">            <span class="keyword">return</span> <span class="number">0</span></span>
<span class="line">        <span class="comment"># 计算左右子树的中的最大深度，加上根节点</span></span>
<span class="line">        <span class="keyword">return</span> max(self.maxDepth(root.left), self.maxDepth(root.right)) + <span class="number">1</span></span>
</pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<ul>
<li>以上代码见github:<a href="https://github.com/EarthChen/LeetCode_Record" target="_blank" rel="external">https://github.com/EarthChen/LeetCode_Record</a></li>
<li>上述环境在<strong>ubuntu16.04 lts和python3.5</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[es6学习笔记]]></title>
      <url>/2017/07/29/es6_study/</url>
      <content type="html"><![CDATA[<p>ECMAScript 6.0（ 以下简称ES6） 是JavaScript语言的下一代标准。</p>
<p>ECMAScript和JavaScript的关系是， 前者是后者的规格， 后者是前者的一种实现（ 另外的ECMAScript方言还有Jscript和ActionScript） 。 日常场合， 这两个词是可以互换的。</p>
<p>在前端工程化的现在，学习es6还是有必要的。<br>本文为个人根据<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">阮老师的es6标准入门</a>学习笔记。<br><a id="more"></a></p>
<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="let和const命令"><a href="#let和const命令" class="headerlink" title="let和const命令"></a>let和const命令</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ol>
<li>let用来声明变量。 它的用法类似于var， 但是所声明的变量， 只在let命令所在的代码块内有效</li>
<li>在循环中，如果变量i是var声明的， 在全局范围内都有效。 所以每一次循环，新的i值都会覆盖旧值，如果变量i是let声明的， 当前的i只在本轮循环有效， 所以每一次循环的i其实都是一个新的变量。</li>
<li>let不像var那样会发生“变量提升”现象。 所以， 变量一定要在声明后使用， 否则报错</li>
<li>let不允许在相同作用域内， 重复声明同一个变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//所声明的变量， 只在let命令所在的代码块内有效</span></span>
<span class="line">&#123;</span>
<span class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</span>
<span class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</span>
<span class="line">    <span class="built_in">console</span>.log(<span class="string">'a='</span> + a + <span class="string">'\nb='</span> + b);</span>
<span class="line"></span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">'let代码块外b='</span> + b);</span>
<span class="line"><span class="comment">// console.log('let代码块外b=' + a);</span></span>
<span class="line"></span>
<span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>];</span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span>
<span class="line">    <span class="built_in">console</span>.log(i);</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * 变量i是var声明的， 在全局范围内都有效。 所以每一次循环，</span>
<span class="line"> * 新的i值都会覆盖旧值， 导致最后输出的是最后一轮的i的值</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">var</span> a = [];</span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span>
<span class="line">    a[i] = i;</span>
<span class="line">&#125;</span>
<span class="line"><span class="built_in">console</span>.log(i);</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * 变量i是let声明的， 当前的i只在本轮循环有效， 所以每一次循环的i其实都是一个新的变量， 所以最后输出的是6</span>
<span class="line"> * @type &#123;Array&#125;</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">var</span> a = [];</span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span>
<span class="line">    a[i] = i;</span>
<span class="line">&#125;</span>
<span class="line"><span class="built_in">console</span>.log(a[<span class="number">6</span>]);</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * 只要块级作用域内存在let命令， 它所声明的变量就“绑定”（ binding） 这个区域， 不再受外部的影响</span>
<span class="line"> *存在全局变量tmp， 但是块级作用域内let又声明了一个局部变量tmp， 导致后者绑定这个块级作用域， 所以在let声明变量前， 对tmp赋</span>
<span class="line"> 值会报错。</span>
<span class="line"> 如果区块中存在let和const命令， 这个区块对这些命令声明的变量， 从一开始就形成了封闭作用域。 凡是在声明之前就使用这些变</span>
<span class="line"> 量， 就会报错。</span>
<span class="line"> 总之， 在代码块内， 使用let命令声明变量之前， 该变量都是不可用的</span>
<span class="line"> 暂时性死区”也意味着typeof不再是一个百分之百安全的操作</span>
<span class="line"> * @type &#123;number&#125;</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span>
<span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span>
<span class="line">    <span class="comment">//tmp = 'abc'; // ReferenceError</span></span>
<span class="line">    <span class="keyword">let</span> tmp;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> *调用bar函数之所以报错</span>
<span class="line"> *参数x默认值等于另一个参数y， 而此时y还没有声明</span>
<span class="line"> * @param x</span>
<span class="line"> * @param y</span>
<span class="line"> * @returns &#123;[null,null]&#125;</span>
<span class="line"> */</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x = y, y = <span class="number">2</span></span>) </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> [x, y];</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">//bar();  //报错</span></span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x = <span class="number">2</span>, y = x</span>) </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> [x, y];</span>
<span class="line">&#125;</span>
<span class="line">bar();</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * let不允许在相同作用域内， 重复声明同一个变量,都会报错</span>
<span class="line"> */</span></span>
<span class="line"><span class="comment">// function () &#123;</span></span>
<span class="line"><span class="comment">//     let a = 10;</span></span>
<span class="line"><span class="comment">//     var a = 1;</span></span>
<span class="line"><span class="comment">// &#125;</span></span>
<span class="line"><span class="comment">//</span></span>
<span class="line"><span class="comment">// function () &#123;</span></span>
<span class="line"><span class="comment">//     let a = 10;</span></span>
<span class="line"><span class="comment">//     let a = 1;</span></span>
<span class="line"><span class="comment">// &#125;</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>结果为:<br><img src="http://objects.earthchen.cn/es6_study_let%E7%BB%93%E6%9E%9C.png" alt="let结果"></p>
<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ol>
<li>const声明一个只读的常量。 一旦声明， 常量的值就不能改变。</li>
<li>const声明的变量不得改变值， 这意味着， const一旦声明变量， 就必须立即初始化， 不能留到以后赋值。</li>
<li>onst的作用域与let命令相同： 只在声明所在的块级作用域内有效。</li>
<li>const命令声明的常量也是不提升， 同样存在暂时性死区， 只能在声明的位置后面使用</li>
<li>const声明的常量， 也与let一样不可重复声明<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI=<span class="number">3.1415</span>;</span>
<span class="line"></span>
<span class="line"><span class="built_in">console</span>.log(PI);</span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * 量a是一个数组， 这个数组本身是可写的， 但是如果将另一个数组赋值给a， 就会报错</span>
<span class="line"> * @type &#123;Array&#125;</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">const</span> a=[];</span>
<span class="line">a.push(<span class="string">'hello'</span>);</span>
<span class="line"><span class="comment">//a = ['Dave'];</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<h3 id="全局对象的属性"><a href="#全局对象的属性" class="headerlink" title="全局对象的属性"></a>全局对象的属性</h3><ol>
<li>var命令和function命令声明的全局变量， 依旧是全局对象的属性</li>
<li>let命令、 const命令、 class命令声明的全局变量， 不属于全局对象的属性 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span>
<span class="line"><span class="comment">// 如果在Node的REPL环境， 可以写成global.a</span></span>
<span class="line"><span class="comment">// 或者采用通用方法， 写成this.a</span></span>
<span class="line"><span class="keyword">this</span>.a <span class="comment">// 1</span></span>
<span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span>
<span class="line"><span class="comment">//window.b // undefined</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><ol>
<li>ES6允许按照一定模式， 从数组和对象中提取值， 对变量进行赋值， 这被称为解构（ Destructuring） </li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 同时给abc赋值可以用一下方式</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">var</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">'a='</span>+a+<span class="string">'  b='</span>+b+<span class="string">'  c='</span>+c);</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * 这种写法属于“模式匹配”， 只要等号两边的模式相同， 左边的变量就会被赋予对应的值</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">'foo='</span>+foo+<span class="string">'  bar='</span>+bar+<span class="string">'  baz='</span>+baz);</span>
<span class="line"></span>
<span class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">'third='</span>+third);</span>
<span class="line"></span>
<span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">'x='</span>+x+<span class="string">'  y='</span>+y);</span>
<span class="line"></span>
<span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">'head='</span>+head+<span class="string">' tail='</span>+tail);</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> *另一种情况是不完全解构， 即等号左边的模式， 只匹配一部分的等号右边的数组</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">let</span> [x2, y2] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">'x2='</span>+x2+<span class="string">'  y2='</span>+y2);</span>
<span class="line"></span>
<span class="line"><span class="keyword">let</span> [a2, [b2], c2] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">'a2='</span>+a2+<span class="string">'  b='</span>+b2+<span class="string">'  c2='</span>+c2);</span>
</pre></td></tr></table></figure>
<p>结果为:<br><img src="http://objects.earthchen.cn/es6_study_%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%90%E8%B5%8B%E5%80%BC.png" alt="数组的解构赋值"></p>
<blockquote>
<p>注：</p>
<ul>
<li>只要某种数据结构具有Iterator接口， 都可以采用数组形式的解构赋值</li>
<li>解构赋值允许指定默认值,ES6内部使用严格相等运算符（ ===） ， 判断一个位置是否有值。 所以， 如果一个数组成员不严格等于undefined， 默认值是不会生效的</li>
</ul>
</blockquote>
<h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><p>解构不仅可以用于数组， 还可以用于对象</p>
<ol>
<li>对象的解构与数组有一个重要的不同。 数组的元素是按次序排列的， 变量的取值由它的位置决定； 而对象的属性没有次序， 变量必须与属性同名， 才<br>能取到正确的值。</li>
<li>对象的解构也可以指定默认值。默认值生效的条件是， 对象的属性值严格等于undefined。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;foo, bar&#125; = &#123;<span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span>&#125;;</span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">'foo='</span> + foo + <span class="string">' bar='</span> + bar);</span>
<span class="line"></span>
<span class="line"><span class="keyword">var</span> &#123;<span class="attr">foo2</span>: foo2, <span class="attr">bar2</span>: bar2&#125; = &#123;<span class="attr">foo2</span>: <span class="string">"aaa"</span>, <span class="attr">bar2</span>: <span class="string">"bbb"</span>&#125;;</span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">'foo2='</span> + foo2 + <span class="string">' bar2='</span> + bar2);</span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * 真正被赋值的是变量baz， 而不是模式foo。</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">var</span> &#123;<span class="attr">foo</span>: baz&#125; = &#123;<span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span>&#125;;</span>
<span class="line"><span class="built_in">console</span>.log(baz);</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * 和数组一样， 解构也可以用于嵌套结构的对象</span>
<span class="line"> * 这时p是模式， 不是变量， 因此不会被赋值</span>
<span class="line"> * @type &#123;&#123;p: [string,null]&#125;&#125;</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">var</span> obj = &#123;</span>
<span class="line">    <span class="attr">p</span>: [</span>
<span class="line">        <span class="string">'Hello'</span>,</span>
<span class="line">        &#123;<span class="attr">y</span>: <span class="string">'World'</span>&#125;</span>
<span class="line">    ]</span>
<span class="line">&#125;;</span>
<span class="line"><span class="keyword">var</span> &#123;<span class="attr">p</span>: [x, &#123;y&#125;]&#125; = obj;</span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">'x='</span> + x + <span class="string">' y='</span> + y);</span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * line和column是变量， loc和start都是模式， 不会被赋值</span>
<span class="line"> * @type &#123;&#123;loc: &#123;start: &#123;line: number, column: number&#125;&#125;&#125;&#125;</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">var</span> node = &#123;</span>
<span class="line">    <span class="attr">loc</span>: &#123;</span>
<span class="line">        <span class="attr">start</span>: &#123;</span>
<span class="line">            <span class="attr">line</span>: <span class="number">1</span>,</span>
<span class="line">            <span class="attr">column</span>: <span class="number">5</span></span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;;</span>
<span class="line"><span class="keyword">var</span> &#123;<span class="attr">loc</span>: &#123;<span class="attr">start</span>: &#123;line, column&#125;&#125;&#125; = node;</span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">'line='</span> + line + <span class="string">' column='</span> + column);</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * 嵌套赋值</span>
<span class="line"> *  let命令下面一行的圆括号是必须的， 否则会报错。 因为解析器会将起首的大括号， 理解成一个代码块， 而不是赋值语句。</span>
<span class="line"> * @type &#123;&#123;&#125;&#125;</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;;</span>
<span class="line"><span class="keyword">let</span> arr = [];</span>
<span class="line">(&#123;<span class="attr">foo</span>: obj2.prop, <span class="attr">bar</span>: arr[<span class="number">0</span>]&#125; = &#123;<span class="attr">foo</span>: <span class="number">123</span>, <span class="attr">bar</span>: <span class="literal">true</span>&#125;);</span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">'obj2.prop='</span>+obj2.prop+<span class="string">' arr='</span>+arr);</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * 对象的解构赋值， 可以很方便地将现有对象的方法， 赋值到某个变量</span>
<span class="line"> * 将Math对象的对数、 正弦、 余弦三个方法， 赋值到对应的变量上</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">let</span> &#123; log, sin, cos &#125; = <span class="built_in">Math</span>;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>结果为:<br><img src="http://objects.earthchen.cn/es6_study_object%E8%A7%A3%E6%9E%90%E8%B5%8B%E5%80%BC.png" alt="对象解析赋值"></p>
<h3 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h3><p>字符串也可以解构赋值。 这是因为此时， 字符串被转换成了一个类似数组的对象</p>
<blockquote>
<p>注:类似数组的对象都有一个length属性， 因此还可以对这个属性解构赋值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</span>
<span class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span> : len&#125; = <span class="string">'hello'</span>;</span>
<span class="line"><span class="built_in">console</span>.log(a+b+c+d+e+<span class="string">'  length='</span>+len);</span>
</pre></td></tr></table></figure></p>
</blockquote>
<p>结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">hello  length=5</span>
</pre></td></tr></table></figure></p>
<h3 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h3><p>函数的参数也可以使用解构赋值。</p>
<p>函数add的参数表面上是一个数组， 但在传入参数的那一刻， 数组参数就被解构成变量x和y<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>) </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> x + y;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="built_in">console</span>.log(add([<span class="number">1</span>, <span class="number">2</span>]));</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * 使用默认值</span>
<span class="line"> * @param x</span>
<span class="line"> * @param y</span>
<span class="line"> * @returns &#123;[null,null]&#125;</span>
<span class="line"> */</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> [x, y];</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<h3 id="圆括号问题"><a href="#圆括号问题" class="headerlink" title="圆括号问题"></a>圆括号问题</h3><p>只要有可能导致解构的歧义， 就不得使用圆括号</p>
<h4 id="不能使用圆括号的情况"><a href="#不能使用圆括号的情况" class="headerlink" title="不能使用圆括号的情况"></a>不能使用圆括号的情况</h4><ol>
<li>变量声明语句中， 不能带有圆括号</li>
<li>函数参数中， 模式不能带有圆括号。</li>
<li>赋值语句中， 不能将整个模式， 或嵌套模式中的一层， 放在圆括号之中。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 全部报错</span></span>
<span class="line"><span class="keyword">var</span> [(a)] = [<span class="number">1</span>];</span>
<span class="line"><span class="keyword">var</span> &#123;<span class="attr">x</span>: (c)&#125; = &#123;&#125;;</span>
<span class="line"><span class="keyword">var</span> (&#123;<span class="attr">x</span>: c&#125;) = &#123;&#125;;</span>
<span class="line"><span class="keyword">var</span> &#123;(x: c)&#125; = &#123;&#125;;</span>
<span class="line"><span class="keyword">var</span> &#123;(x): c&#125; = &#123;&#125;;</span>
<span class="line"><span class="keyword">var</span> &#123; <span class="attr">o</span>: (&#123; <span class="attr">p</span>: p &#125;) &#125; = &#123; <span class="attr">o</span>: &#123; <span class="attr">p</span>: <span class="number">2</span> &#125; &#125;;</span>
<span class="line"></span>
<span class="line"><span class="comment">// 报错</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[(z</span>)]) </span>&#123; <span class="keyword">return</span> z; &#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">// 全部报错</span></span>
<span class="line">(&#123; <span class="attr">p</span>: a &#125;) = &#123; <span class="attr">p</span>: <span class="number">42</span> &#125;;</span>
<span class="line">([a]) = [<span class="number">5</span>];</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="可以使用圆括号的情况"><a href="#可以使用圆括号的情况" class="headerlink" title="可以使用圆括号的情况"></a>可以使用圆括号的情况</h4><p>赋值语句的非模式部分， 可以使用圆括号。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">[(b)] = [<span class="number">3</span>]; <span class="comment">// 正确</span></span>
<span class="line">(&#123; <span class="attr">p</span>: (d) &#125; = &#123;&#125;); <span class="comment">// 正确</span></span>
<span class="line">[(<span class="built_in">parseInt</span>.prop)] = [<span class="number">3</span>]; <span class="comment">// 正确</span></span>
</pre></td></tr></table></figure></p>
<h3 id="变量的解构赋值用途"><a href="#变量的解构赋值用途" class="headerlink" title="变量的解构赋值用途"></a>变量的解构赋值用途</h3><h4 id="交换变量的值"><a href="#交换变量的值" class="headerlink" title="交换变量的值"></a>交换变量的值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">[x, y] = [y, x];</span>
</pre></td></tr></table></figure>
<h4 id="从函数返回多个值"><a href="#从函数返回多个值" class="headerlink" title="从函数返回多个值"></a>从函数返回多个值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个数组</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="keyword">var</span> [a, b, c] = example();</span>
<span class="line"></span>
<span class="line"><span class="comment">// 返回一个对象</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> &#123;</span>
<span class="line">        <span class="attr">foo</span>: <span class="number">1</span>,</span>
<span class="line">        <span class="attr">bar</span>: <span class="number">2</span></span>
<span class="line">    &#125;;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="keyword">var</span> &#123;foo, bar&#125; = example();</span>
</pre></td></tr></table></figure>
<h4 id="提取JSON数据"><a href="#提取JSON数据" class="headerlink" title="提取JSON数据"></a>提取JSON数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonData = &#123;</span>
<span class="line">    <span class="attr">id</span>: <span class="number">42</span>,</span>
<span class="line">    <span class="attr">status</span>: <span class="string">"OK"</span>,</span>
<span class="line">    <span class="attr">data</span>: [<span class="number">867</span>, <span class="number">5309</span>]</span>
<span class="line">&#125;;</span>
<span class="line"><span class="keyword">let</span> &#123;id, status, <span class="attr">data</span>: number&#125; = jsonData;</span>
</pre></td></tr></table></figure>
<h4 id="遍历Map结构"><a href="#遍历Map结构" class="headerlink" title="遍历Map结构"></a>遍历Map结构</h4><p>任何部署了Iterator接口的对象， 都可以用for…of循环遍历。 Map结构原生支持Iterator接口， 配合变量的解构赋值， 获取键名和键值就非常方便。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span>
<span class="line">map.set(<span class="string">'first'</span>, <span class="string">'hello'</span>);</span>
<span class="line">map.set(<span class="string">'second'</span>, <span class="string">'world'</span>);</span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span>
<span class="line">    <span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>如果只想获取键名， 或者只想获取键值， 可以写成下面这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取键名</span></span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key] <span class="keyword">of</span> map) &#123;</span>
<span class="line">    <span class="comment">// ...</span></span>
<span class="line">&#125; </span>
<span class="line"><span class="comment">// 获取键值</span></span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [,value] <span class="keyword">of</span> map) &#123;</span>
<span class="line">    <span class="comment">// ...</span></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串的遍历器接口"><a href="#字符串的遍历器接口" class="headerlink" title="字符串的遍历器接口"></a>字符串的遍历器接口</h3><p>字符串可以被for…of循环遍历<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> codePoint <span class="keyword">of</span> <span class="string">'hello'</span>) &#123;</span>
<span class="line">    <span class="built_in">console</span>.log(codePoint)</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<h3 id="常用的新方法"><a href="#常用的新方法" class="headerlink" title="常用的新方法"></a>常用的新方法</h3><h4 id="includes-startsWith-endsWith"><a href="#includes-startsWith-endsWith" class="headerlink" title="includes(), startsWith(), endsWith()"></a>includes(), startsWith(), endsWith()</h4><ul>
<li>includes()： 返回布尔值， 表示是否找到了参数字符串</li>
<li>startsWith()： 返回布尔值， 表示参数字符串是否在源字符串的头部</li>
<li>endsWith()： 返回布尔值， 表示参数字符串是否在源字符串的尾部。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello world!'</span>;</span>
<span class="line">s.startsWith(<span class="string">'Hello'</span>) <span class="comment">// true</span></span>
<span class="line">s.endsWith(<span class="string">'!'</span>) <span class="comment">// true</span></span>
<span class="line">s.includes(<span class="string">'o'</span>) <span class="comment">// true</span></span>
</pre></td></tr></table></figure>
<ul>
<li>三个方法都支持第二个参数， 表示开始搜索的位置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello world!'</span>;</span>
<span class="line">s.startsWith(<span class="string">'world'</span>, <span class="number">6</span>) <span class="comment">// true </span></span>
<span class="line">s.endsWith(<span class="string">'Hello'</span>, <span class="number">5</span>) <span class="comment">// true</span></span>
<span class="line">s.includes(<span class="string">'Hello'</span>, <span class="number">6</span>) <span class="comment">// false</span></span>
</pre></td></tr></table></figure>
</li>
</ul>
<h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h4><p>repeat 方法返回一个新字符串， 表示将原字符串重复n 次。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="string">'x'</span>.repeat(<span class="number">3</span>) <span class="comment">// "xxx"</span></span>
<span class="line"><span class="string">'hello'</span>.repeat(<span class="number">2</span>) <span class="comment">// "hellohello"</span></span>
<span class="line"><span class="string">'na'</span>.repeat(<span class="number">0</span>) <span class="comment">// ""</span></span>
</pre></td></tr></table></figure></p>
<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>模板字符串（ template string） 是增强版的字符串， 用反引号（ `） 标识。 它可以当作普通字符串使用， 也可以用来定义多行字符串， 或者在字符串中<br>嵌入变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通字符串</span></span>
<span class="line"><span class="string">`In JavaScript '\n' is a line-feed.`</span></span>
<span class="line"></span>
<span class="line"><span class="comment">// 多行字符串</span></span>
<span class="line"><span class="string">`In JavaScript this is</span>
<span class="line">not legal.`</span></span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">`string text line 1</span>
<span class="line">string text line 2`</span>);</span>
<span class="line"></span>
<span class="line"><span class="comment">// 字符串中嵌入变量</span></span>
<span class="line"><span class="keyword">var</span> name = <span class="string">"Bob"</span>, time = <span class="string">"today"</span>;</span>
<span class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you <span class="subst">$&#123;time&#125;</span>?`</span></span>
<span class="line"></span>
<span class="line"><span class="comment">//可以放入任意的JavaScript表达式， 可以进行运算</span></span>
<span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span>
<span class="line"><span class="keyword">var</span> y = <span class="number">2</span>;</span>
<span class="line"><span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y&#125;</span> = <span class="subst">$&#123;x + y&#125;</span>`</span></span>
<span class="line"><span class="comment">// "1 + 2 = 3"</span></span>
<span class="line"></span>
<span class="line"><span class="comment">//调用函数</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span>
<span class="line">&#125; </span>
<span class="line"><span class="string">`foo <span class="subst">$&#123;fn()&#125;</span> bar`</span></span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>注:</p>
<ul>
<li>如果在模板字符串中需要使用反引号， 则前面要用反斜杠转义</li>
<li>如果使用模板字符串表示多行字符串， 所有的空格和缩进都会被保留在输出之中</li>
<li>模板字符串中嵌入变量， 需要将变量名写在${}之中</li>
<li>大括号内部可以放入任意的JavaScript表达式， 可以进行运算， 以及引用对象属性</li>
<li>模板字符串之中还能调用函数</li>
</ul>
</blockquote>
<h2 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h2><h3 id="Math对象的扩展"><a href="#Math对象的扩展" class="headerlink" title="Math对象的扩展"></a>Math对象的扩展</h3><h4 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc()"></a>Math.trunc()</h4><p>Math.trunc方法用于去除一个数的小数部分， 返回整数部分</p>
<h4 id="Math-sign"><a href="#Math-sign" class="headerlink" title="Math.sign()"></a>Math.sign()</h4><p>Math.sign方法用来判断一个数到底是正数、 负数、 还是零</p>
<h4 id="Math-cbrt"><a href="#Math-cbrt" class="headerlink" title="Math.cbrt()"></a>Math.cbrt()</h4><p>Math.cbrt方法用于计算一个数的立方根</p>
<h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p>Array.from方法用于将两类对象转为真正的数组： 类似数组的对象（ array-like object） 和可遍历（ iterable） 的对象（ 包括ES6新增的数据结构Set和<br>Map） 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//常见的类似数组的对象是DOM操作返回的NodeList集合</span></span>
<span class="line"><span class="keyword">let</span> ps = <span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);</span>
<span class="line"><span class="built_in">Array</span>.from(ps).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</span>
<span class="line">    <span class="built_in">console</span>.log(p);</span>
<span class="line">&#125;);</span>
<span class="line"></span>
<span class="line"><span class="comment">//只要是部署了Iterator接口的数据结构， Array.from都能将其转为数组</span></span>
<span class="line"><span class="built_in">Array</span>.from(<span class="string">'hello'</span>)</span>
<span class="line"><span class="keyword">let</span> namesSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>])</span>
<span class="line"><span class="built_in">Array</span>.from(namesSet) <span class="comment">// ['a', 'b']</span></span>
</pre></td></tr></table></figure></p>
<h3 id="数组实例的find-和findIndex"><a href="#数组实例的find-和findIndex" class="headerlink" title="数组实例的find()和findIndex()"></a>数组实例的find()和findIndex()</h3><p>数组实例的find方法， 用于找出第一个符合条件的数组成员。 它的参数是一个回调函数， 所有数组成员依次执行该回调函数， 直到找出第一个返回值<br>为true的成员， 然后返回该成员。 如果没有符合条件的成员， 则返回undefined。</p>
<h3 id="数组实例的fill"><a href="#数组实例的fill" class="headerlink" title="数组实例的fill()"></a>数组实例的fill()</h3><p>fill方法使用给定值， 填充一个数组</p>
<ul>
<li>fill方法还可以接受第二个和第三个参数， 用于指定填充的起始位置和结束位置</li>
</ul>
<h3 id="数组实例的entries-，-keys-和values"><a href="#数组实例的entries-，-keys-和values" class="headerlink" title="数组实例的entries()， keys()和values()"></a>数组实例的entries()， keys()和values()</h3><p>可以用for…of循环进行遍历， 唯一的区别是keys()是对键名的遍历、 values()是对键值的遍历， entries()是对键值对的遍历。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</span>
<span class="line">    <span class="built_in">console</span>.log(index);</span>
<span class="line">&#125; </span>
<span class="line"><span class="comment">// 0</span></span>
<span class="line"><span class="comment">// 1</span></span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].values()) &#123;</span>
<span class="line">    <span class="built_in">console</span>.log(elem);</span>
<span class="line">&#125; </span>
<span class="line"><span class="comment">// 'a'</span></span>
<span class="line"><span class="comment">// 'b'</span></span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</span>
<span class="line">    <span class="built_in">console</span>.log(index, elem);</span>
<span class="line">&#125; </span>
<span class="line"><span class="comment">// 0 "a"</span></span>
<span class="line"><span class="comment">// 1 "b"</span></span>
<span class="line"></span>
<span class="line"><span class="comment">//如果不使用for...of循环， 可以手动调用遍历器对象的next方法， 进行遍历</span></span>
<span class="line"><span class="keyword">let</span> letter = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span>
<span class="line"><span class="keyword">let</span> entries = letter.entries();</span>
<span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [0, 'a']</span></span>
<span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [1, 'b']</span></span>
<span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [2, 'c']</span></span>
</pre></td></tr></table></figure></p>
<h3 id="数组实例的includes"><a href="#数组实例的includes" class="headerlink" title="数组实例的includes()"></a>数组实例的includes()</h3><p>表示某个数组是否包含给定的值， 与字符串的includes方法类似<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>); <span class="comment">// true</span></span>
<span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>); <span class="comment">// false</span></span>
<span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>); <span class="comment">// true</span></span>
</pre></td></tr></table></figure></p>
<p>该方法的第二个参数表示搜索的起始位置， 默认为0。 如果第二个参数为负数， 则表示倒数的位置， 如果这时它大于数组长度（ 比如第二个参数为-4，<br>但数组长度为3） ， 则会重置为从0开始<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// false</span></span>
<span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>); <span class="comment">// true</span></span>
</pre></td></tr></table></figure></p>
<h2 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h2><h3 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h3><p>ES6允许为函数的参数设置默认值， 即直接写在参数定义的后面<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x, y = <span class="string">'World'</span></span>) </span>&#123;</span>
<span class="line">    <span class="built_in">console</span>.log(x, y);</span>
<span class="line">&#125; </span>
<span class="line">log(<span class="string">'Hello'</span>) <span class="comment">// Hello World</span></span>
<span class="line">log(<span class="string">'Hello'</span>, <span class="string">'China'</span>) <span class="comment">// Hello China</span></span>
<span class="line">log(<span class="string">'Hello'</span>, <span class="string">''</span>) <span class="comment">// Hello</span></span>
</pre></td></tr></table></figure></p>
<h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>ES6引入rest参数（ 形式为“…变量名”） ， 用于获取函数的多余参数， 这样就不需要使用arguments对象了。 rest参数搭配的变量是一个数组， 该变量将多余的参数放入数组中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//利用rest参数， 可以向该函数传入任意数目的参数</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...values</span>) </span>&#123;</span>
<span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span>
<span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) &#123;</span>
<span class="line">        sum += val;</span>
<span class="line">    &#125; </span>
<span class="line">    <span class="keyword">return</span> sum;</span>
<span class="line">&#125; </span>
<span class="line"></span>
<span class="line">add(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></span>
<span class="line"></span>
<span class="line"><span class="comment">//rest参数中的变量代表一个数组， 所以数组特有的方法都可以用于这个变量</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">array, ...items</span>) </span>&#123;</span>
<span class="line">    items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span>
<span class="line">        array.push(item);</span>
<span class="line">        <span class="built_in">console</span>.log(item);</span>
<span class="line">    &#125;);</span>
<span class="line">&#125;</span>
<span class="line"><span class="keyword">var</span> a = [];</span>
<span class="line">push(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>注:rest参数之后不能再有其他参数（ 即只能是最后一个参数）</p>
</blockquote>
<h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p>扩展运算符（ spread） 是三个点（ …） 。 它好比rest参数的逆运算， 将一个数组转为用逗号分隔的参数序列。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span>
<span class="line"><span class="comment">// 1 2 3</span></span>
<span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)</span>
<span class="line"><span class="comment">// 1 2 3 4 5</span></span>
<span class="line">[...document.querySelectorAll(<span class="string">'div'</span>)]</span>
<span class="line"><span class="comment">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></span>
<span class="line"></span>
<span class="line"><span class="comment">//合并数组</span></span>
<span class="line">[<span class="number">1</span>, <span class="number">2</span>, ...more]</span>
<span class="line">[...arr1, ...arr2, ...arr3]</span>
<span class="line"></span>
<span class="line"><span class="comment">//转为真正的数组。</span></span>
<span class="line"><span class="keyword">var</span> nodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span>
<span class="line"><span class="keyword">var</span> array = [...nodeList];</span>
<span class="line"></span>
<span class="line"><span class="comment">//map转数组</span></span>
<span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span>
<span class="line">    [<span class="number">1</span>, <span class="string">'one'</span>],</span>
<span class="line">    [<span class="number">2</span>, <span class="string">'two'</span>],</span>
<span class="line">    [<span class="number">3</span>, <span class="string">'three'</span>],</span>
<span class="line">]);</span>
<span class="line"><span class="keyword">let</span> arr = [...map.keys()]; <span class="comment">// [1, 2, 3]</span></span>
</pre></td></tr></table></figure></p>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>使用“箭头”（ =&gt;） 定义函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</span>
<span class="line"><span class="comment">//等同于</span></span>
<span class="line"><span class="comment">// var f = function (v) &#123;</span></span>
<span class="line"><span class="comment">//     return v;</span></span>
<span class="line"><span class="comment">// &#125;;</span></span>
<span class="line"></span>
<span class="line"><span class="comment">//如果箭头函数不需要参数或需要多个参数， 就使用一个圆括号代表参数部分</span></span>
<span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">5</span>;</span>
<span class="line"><span class="comment">// 等同于</span></span>
<span class="line"><span class="comment">// var f = function () &#123; return 5 &#125;;</span></span>
<span class="line"></span>
<span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span>
<span class="line"><span class="comment">// 等同于</span></span>
<span class="line"><span class="comment">// var sum = function(num1, num2) &#123;</span></span>
<span class="line"><span class="comment">//     return num1 + num2;</span></span>
<span class="line"><span class="comment">// &#125;;</span></span>
<span class="line"></span>
<span class="line"><span class="comment">//如果箭头函数的代码块部分多于一条语句， 就要使用大括号将它们括起来， 并且使用return语句返回</span></span>
<span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123;</span>
<span class="line">    <span class="keyword">return</span> num1 + num2;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">//由于大括号被解释为代码块， 所以如果箭头函数直接返回一个对象， 必须在对象外面加上括号</span></span>
<span class="line"><span class="keyword">var</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> (&#123;<span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">"Temp"</span>&#125;);</span>
<span class="line"><span class="built_in">console</span>.log(getTempItem(<span class="number">5</span>));</span>
<span class="line"></span>
<span class="line"><span class="keyword">const</span> full = <span class="function">(<span class="params">&#123; first, last &#125;</span>) =&gt;</span> first + <span class="string">' '</span> + last;</span>
<span class="line"><span class="comment">// 等同于</span></span>
<span class="line"><span class="comment">// function full(person) &#123;</span></span>
<span class="line"><span class="comment">//     return person.first + ' ' + person.last;</span></span>
<span class="line"><span class="comment">// &#125;</span></span>
<span class="line"></span>
<span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x));</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>注:</p>
<ul>
<li>函数体内的this对象， 就是定义时所在的对象， 而不是使用时所在的对象。</li>
<li>不可以当作构造函数， 也就是说， 不可以使用new命令， 否则会抛出一个错误</li>
</ul>
</blockquote>
<h3 id="函数绑定"><a href="#函数绑定" class="headerlink" title="函数绑定"></a>函数绑定</h3><p>箭头函数可以绑定this对象， 大大减少了显式绑定this对象的写法（ call、 apply、 bind） 。</p>
<p>函数绑定运算符是并排的两个双冒号（ ::） ， 双冒号左边是一个对象， 右边是一个函数。 该运算符会自动将左边的对象， 作为上下文环境（ 即this对象） ， 绑定到右边的函数上面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line">foo::bar;</span>
<span class="line"><span class="comment">// 等同于</span></span>
<span class="line">bar.bind(foo);</span>
<span class="line">foo::bar(...arguments);</span>
<span class="line"><span class="comment">// 等同于</span></span>
<span class="line">bar.apply(foo, <span class="built_in">arguments</span>);</span>
<span class="line"></span>
<span class="line"><span class="comment">//如果双冒号左边为空， 右边是一个对象的方法， 则等于将该方法绑定在该对象上面。</span></span>
<span class="line"><span class="keyword">var</span> method = obj::obj.foo;</span>
<span class="line"><span class="comment">// 等同于</span></span>
<span class="line"><span class="keyword">var</span> method = ::obj.foo;</span>
<span class="line"><span class="keyword">let</span> log = ::<span class="built_in">console</span>.log;</span>
<span class="line"><span class="comment">// 等同于</span></span>
<span class="line"><span class="keyword">var</span> log = <span class="built_in">console</span>.log.bind(<span class="built_in">console</span>);</span>
</pre></td></tr></table></figure></p>
<h3 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h3><h4 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a>尾调用</h4><p>某个函数的最后一步是调用另一个函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span>
<span class="line">    <span class="keyword">return</span> g(x);</span>
<span class="line">&#125;</span>
<span class="line"><span class="comment">//函数f的最后一步是调用函数g， 这就叫尾调用</span></span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span>
<span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span>
<span class="line">        <span class="keyword">return</span> m(x)</span>
<span class="line">    &#125; </span>
<span class="line">    <span class="keyword">return</span> n(x);</span>
<span class="line">&#125;</span>
<span class="line"><span class="comment">//函数m和n都属于尾调用， 因为它们都是函数f的最后一步操作</span></span>
</pre></td></tr></table></figure></p>
<h2 id="Set和Map数据结构"><a href="#Set和Map数据结构" class="headerlink" title="Set和Map数据结构"></a>Set和Map数据结构</h2><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>提供了新的数据结构Set。 它类似于数组， 但是成员的值都是唯一的， 没有重复的值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//Set本身是一个构造函数， 用来生成Set数据结构</span></span>
<span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span>
<span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> s.add(x));</span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> s) &#123;</span>
<span class="line">    <span class="built_in">console</span>.log(i);</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">//Set函数接受数组作为参数</span></span>
<span class="line"><span class="comment">//Set函数可以接受一个数组（ 或类似数组的对象） 作为参数， 用来初始化</span></span>
<span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span>
<span class="line"></span>
<span class="line"><span class="comment">// 例二</span></span>
<span class="line"><span class="keyword">var</span> items = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]);</span>
<span class="line"><span class="built_in">console</span>.log(items.size) <span class="comment">// 5</span></span>
<span class="line"></span>
<span class="line"><span class="comment">//接受类似数组的对象作为参数</span></span>
<span class="line"><span class="comment">// 例三</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divs</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> [...document.querySelectorAll(<span class="string">'div'</span>)];</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="keyword">var</span> set2 = <span class="keyword">new</span> <span class="built_in">Set</span>(divs());</span>
<span class="line"><span class="built_in">console</span>.log(set2.size); <span class="comment">// 56</span></span>
<span class="line"><span class="comment">// 类似于</span></span>
<span class="line">divs().forEach(<span class="function"><span class="params">div</span> =&gt;</span> set.add(div));</span>
<span class="line"><span class="built_in">console</span>.log(set2.size); <span class="comment">// 56</span></span>
</pre></td></tr></table></figure></p>
<h4 id="Set实例的属性和方法"><a href="#Set实例的属性和方法" class="headerlink" title="Set实例的属性和方法"></a>Set实例的属性和方法</h4><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ul>
<li>Set.prototype.constructor： 构造函数， 默认就是Set函数</li>
<li>Set.prototype.size： 返回Set实例的成员总数。</li>
</ul>
<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ol>
<li>操作方法：</li>
</ol>
<ul>
<li>add(value)： 添加某个值， 返回Set结构本身</li>
<li>delete(value)： 删除某个值， 返回一个布尔值， 表示删除是否成功</li>
<li>has(value)： 返回一个布尔值， 表示该值是否为Set的成员</li>
<li>clear()： 清除所有成员， 没有返回值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">s.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">2</span>);</span>
<span class="line"><span class="comment">// 注意2被加入了两次</span></span>
<span class="line">s.size <span class="comment">// 2</span></span>
<span class="line">s.has(<span class="number">1</span>) <span class="comment">// true</span></span>
<span class="line">s.has(<span class="number">2</span>) <span class="comment">// true</span></span>
<span class="line">s.has(<span class="number">3</span>) <span class="comment">// false</span></span>
<span class="line">s.delete(<span class="number">2</span>);</span>
<span class="line">s.has(<span class="number">2</span>) <span class="comment">// false</span></span>
</pre></td></tr></table></figure>
<ol>
<li>遍历方法</li>
</ol>
<ul>
<li>keys()： 返回键名的遍历器</li>
<li>values()： 返回键值的遍历器</li>
<li>entries()： 返回键值对的遍历器</li>
<li>forEach()： 使用回调函数遍历每个成员</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]);</span>
<span class="line"></span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.keys()) &#123;</span>
<span class="line">    <span class="built_in">console</span>.log(item);</span>
<span class="line">&#125; </span>
<span class="line"><span class="comment">// red</span></span>
<span class="line"><span class="comment">// green</span></span>
<span class="line"><span class="comment">// blue</span></span>
<span class="line"></span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.values()) &#123;</span>
<span class="line">    <span class="built_in">console</span>.log(item);</span>
<span class="line">&#125; </span>
<span class="line"><span class="comment">// red</span></span>
<span class="line"><span class="comment">// green</span></span>
<span class="line"><span class="comment">// blue</span></span>
<span class="line"></span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.entries()) &#123;</span>
<span class="line">    <span class="built_in">console</span>.log(item);</span>
<span class="line">&#125; </span>
<span class="line"><span class="comment">// ["red", "red"]</span></span>
<span class="line"><span class="comment">// ["green", "green"]</span></span>
<span class="line"><span class="comment">// ["blue", "blue"]</span></span>
<span class="line"></span>
<span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span>
<span class="line">set.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="built_in">console</span>.log(value * <span class="number">2</span>) )</span>
<span class="line"><span class="comment">// 2</span></span>
<span class="line"><span class="comment">// 4</span></span>
<span class="line"><span class="comment">// 6</span></span>
</pre></td></tr></table></figure>
<blockquote>
<p>注:由于Set结构没有键名， 只有键值（ 或者说键名和键值是同一个值） ， 所以key方法和value方法的行为完全一致。</p>
</blockquote>
<ol>
<li>应用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//扩展运算符（ ...） 内部使用for...of循环， 所以也可以用于Set结构</span></span>
<span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]);</span>
<span class="line"><span class="keyword">let</span> arr = [...set];</span>
<span class="line"><span class="comment">// ['red', 'green', 'blue']</span></span>
<span class="line"></span>
<span class="line"><span class="comment">//去除数组的重复成员。</span></span>
<span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>];</span>
<span class="line"><span class="keyword">let</span> unique = [...new <span class="built_in">Set</span>(arr)];</span>
<span class="line"><span class="comment">// [3, 5, 2]</span></span>
<span class="line"></span>
<span class="line"><span class="comment">//数组的map和filter方法也可以用于Set</span></span>
<span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span>
<span class="line">set = <span class="keyword">new</span> <span class="built_in">Set</span>([...set].map(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>));</span>
<span class="line"><span class="comment">// 返回Set结构： &#123;2, 4, 6&#125;</span></span>
<span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span>
<span class="line">set = <span class="keyword">new</span> <span class="built_in">Set</span>([...set].filter(<span class="function"><span class="params">x</span> =&gt;</span> (x % <span class="number">2</span>) == <span class="number">0</span>));</span>
<span class="line"><span class="comment">// 返回Set结构： &#123;2, 4&#125;</span></span>
<span class="line"></span>
<span class="line"><span class="comment">//并集（ Union） 、 交集（ Intersect） 和差集（ Difference）</span></span>
<span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span>
<span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span>
<span class="line"><span class="comment">// 并集</span></span>
<span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]);</span>
<span class="line"><span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></span>
<span class="line"><span class="comment">// 交集</span></span>
<span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> b.has(x)));</span>
<span class="line"><span class="comment">// set &#123;2, 3&#125;</span></span>
<span class="line"><span class="comment">// 差集</span></span>
<span class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> !b.has(x)));</span>
<span class="line"><span class="comment">// Set &#123;1&#125;</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map结构提供了“值—值”的对应， 是一种更完善的Hash结构实现。 如果你需要“键值对”的<br>数据结构，请使用Map<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span>
<span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">p</span>: <span class="string">'Hello World'</span>&#125;;</span>
<span class="line">m.set(o, <span class="string">'content'</span>)</span>
<span class="line">m.get(o) <span class="comment">// "content"</span></span>
<span class="line">m.has(o) <span class="comment">// true</span></span>
<span class="line">m.delete(o) <span class="comment">// true</span></span>
<span class="line">m.has(o) <span class="comment">// false</span></span>
<span class="line"></span>
<span class="line"><span class="comment">// Map也可以接受一个数组作为参数。 该数组的成员是一个个表示键值对的数组</span></span>
<span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span>
<span class="line">    [<span class="string">'name'</span>, <span class="string">'张三'</span>],</span>
<span class="line">    [<span class="string">'title'</span>, <span class="string">'Author'</span>]</span>
<span class="line">]);</span>
<span class="line"></span>
<span class="line"><span class="built_in">console</span>.log(map); <span class="comment">//Map &#123; 'name' =&gt; '张三', 'title' =&gt; 'Author' &#125;</span></span>
<span class="line">map.size <span class="comment">// 2</span></span>
<span class="line">map.has(<span class="string">'name'</span>) <span class="comment">// true</span></span>
<span class="line">map.get(<span class="string">'name'</span>) <span class="comment">// "张三"</span></span>
<span class="line">map.has(<span class="string">'title'</span>) <span class="comment">// true</span></span>
<span class="line">map.get(<span class="string">'title'</span>) <span class="comment">// "Author"</span></span>
<span class="line"></span>
<span class="line"><span class="comment">//如果对同一个键多次赋值， 后面的值将覆盖前面的值</span></span>
<span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span>
<span class="line">map</span>
<span class="line">    .set(<span class="number">1</span>, <span class="string">'aaa'</span>)</span>
<span class="line">    .set(<span class="number">1</span>, <span class="string">'bbb'</span>);</span>
<span class="line">map.get(<span class="number">1</span>) <span class="comment">// "bbb"</span></span>
</pre></td></tr></table></figure></p>
<h4 id="属性和操作方法"><a href="#属性和操作方法" class="headerlink" title="属性和操作方法"></a>属性和操作方法</h4><h5 id="size属性"><a href="#size属性" class="headerlink" title="size属性"></a>size属性</h5><p>size属性返回Map结构的成员总数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span>
<span class="line">map.set(<span class="string">'foo'</span>, <span class="literal">true</span>);</span>
<span class="line">map.set(<span class="string">'bar'</span>, <span class="literal">false</span>);</span>
<span class="line">map.size <span class="comment">// 2</span></span>
</pre></td></tr></table></figure></p>
<h5 id="set-key-value"><a href="#set-key-value" class="headerlink" title="set(key, value)"></a>set(key, value)</h5><p>set方法设置key所对应的键值， 然后返回整个Map结构。 如果key已经有值， 则键值会被更新， 否则就新生成该键<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span>
<span class="line">m.set(<span class="string">"edition"</span>, <span class="number">6</span>) <span class="comment">// 键是字符串</span></span>
<span class="line">m.set(<span class="number">262</span>, <span class="string">"standard"</span>) <span class="comment">// 键是数值</span></span>
<span class="line">m.set(<span class="literal">undefined</span>, <span class="string">"nah"</span>) <span class="comment">// 键是undefined</span></span>
</pre></td></tr></table></figure></p>
<h5 id="get-key"><a href="#get-key" class="headerlink" title="get(key)"></a>get(key)</h5><p>get方法读取key对应的键值， 如果找不到key， 返回undefined<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span>
<span class="line"><span class="keyword">var</span> hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">"hello"</span>);&#125;</span>
<span class="line">m.set(hello, <span class="string">"Hello ES6!"</span>) <span class="comment">// 键是函数</span></span>
<span class="line">m.get(hello) <span class="comment">// Hello ES6!</span></span>
</pre></td></tr></table></figure></p>
<h5 id="has-key"><a href="#has-key" class="headerlink" title="has(key)"></a>has(key)</h5><p>has方法返回一个布尔值， 表示某个键是否在Map数据结构中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span>
<span class="line">m.set(<span class="string">"edition"</span>, <span class="number">6</span>);</span>
<span class="line">m.set(<span class="number">262</span>, <span class="string">"standard"</span>);</span>
<span class="line">m.set(<span class="literal">undefined</span>, <span class="string">"nah"</span>);</span>
<span class="line">m.has(<span class="string">"edition"</span>) <span class="comment">// true</span></span>
<span class="line">m.has(<span class="string">"years"</span>) <span class="comment">// false</span></span>
<span class="line">m.has(<span class="number">262</span>) <span class="comment">// true</span></span>
<span class="line">m.has(<span class="literal">undefined</span>) <span class="comment">// true</span></span>
</pre></td></tr></table></figure></p>
<h5 id="delete-key"><a href="#delete-key" class="headerlink" title="delete(key)"></a>delete(key)</h5><p>delete方法删除某个键， 返回true。 如果删除失败， 返回false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span>
<span class="line">m.set(<span class="literal">undefined</span>, <span class="string">"nah"</span>);</span>
<span class="line">m.has(<span class="literal">undefined</span>) <span class="comment">// true</span></span>
<span class="line">m.delete(<span class="literal">undefined</span>)</span>
<span class="line">m.has(<span class="literal">undefined</span>) <span class="comment">// false</span></span>
</pre></td></tr></table></figure></p>
<h5 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h5><p>clear方法清除所有成员， 没有返回值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span>
<span class="line">map.set(<span class="string">'foo'</span>, <span class="literal">true</span>);</span>
<span class="line">map.set(<span class="string">'bar'</span>, <span class="literal">false</span>);</span>
<span class="line">map.size <span class="comment">// 2</span></span>
<span class="line">map.clear()</span>
<span class="line">map.size <span class="comment">// 0</span></span>
</pre></td></tr></table></figure></p>
<h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><ul>
<li>keys()： 返回键名的遍历器。</li>
<li>values()： 返回键值的遍历器</li>
<li>entries()： 返回所有成员的遍历器。</li>
<li>forEach()： 遍历Map的所有成员</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span>
<span class="line">    [<span class="string">'F'</span>, <span class="string">'no'</span>],</span>
<span class="line">    [<span class="string">'T'</span>, <span class="string">'yes'</span>],</span>
<span class="line">]);</span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</span>
<span class="line">    <span class="built_in">console</span>.log(key);</span>
<span class="line">&#125; </span>
<span class="line"><span class="comment">// "F"</span></span>
<span class="line"><span class="comment">// "T"</span></span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.values()) &#123;</span>
<span class="line">    <span class="built_in">console</span>.log(value);</span>
<span class="line">&#125; </span>
<span class="line"><span class="comment">// "no"</span></span>
<span class="line"><span class="comment">// "yes"</span></span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.entries()) &#123;</span>
<span class="line">    <span class="built_in">console</span>.log(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span>
<span class="line">&#125; </span>
<span class="line"><span class="comment">// "F" "no"</span></span>
<span class="line"><span class="comment">// "T" "yes"</span></span>
<span class="line"><span class="comment">// 或者</span></span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.entries()) &#123;</span>
<span class="line">    <span class="built_in">console</span>.log(key, value);</span>
<span class="line">&#125; </span>
<span class="line"><span class="comment">// 等同于使用map.entries()</span></span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span>
<span class="line">    <span class="built_in">console</span>.log(key, value);</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">map.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, key, map</span>) </span>&#123;</span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">"Key: %s, Value: %s"</span>, key, value);</span>
<span class="line">&#125;);</span>
</pre></td></tr></table></figure>
<p>结合数组的map方法、 filter方法， 可以实现Map的遍历和过滤（ Map本身没有map和filter方法）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map0 = <span class="keyword">new</span> <span class="built_in">Map</span>()</span>
<span class="line">    .set(<span class="number">1</span>, <span class="string">'a'</span>)</span>
<span class="line">    .set(<span class="number">2</span>, <span class="string">'b'</span>)</span>
<span class="line">    .set(<span class="number">3</span>, <span class="string">'c'</span>);</span>
<span class="line"><span class="keyword">let</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>(</span>
<span class="line">    [...map0].filter(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> k &lt; <span class="number">3</span>)</span>
<span class="line">);</span>
<span class="line"><span class="comment">// 产生Map结构 &#123;1 =&gt; 'a', 2 =&gt; 'b'&#125;</span></span>
<span class="line"><span class="keyword">let</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>(</span>
<span class="line">    [...map0].map(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> [k * <span class="number">2</span>, <span class="string">'_'</span> + v])</span>
<span class="line">);</span>
<span class="line"><span class="comment">// 产生Map结构 &#123;2 =&gt; '_a', 4 =&gt; '_b', 6 =&gt; '_c'&#125;</span></span>
</pre></td></tr></table></figure></p>
<p>map与其他数据结构的互相转换：</p>
<ol>
<li><p>Map转为数组<br>Map转为数组最方便的方法， 就是使用扩展运算符（ …） 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="literal">true</span>, <span class="number">7</span>).set(&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">'abc'</span>]);</span>
<span class="line">[...myMap]</span>
<span class="line"><span class="comment">// [ [ true, 7 ], [ &#123; foo: 3 &#125;, [ 'abc' ] ] ]</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>数组转为Map<br>将数组转入Map构造函数， 就可以转为Map</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="literal">true</span>, <span class="number">7</span>], [&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">'abc'</span>]]])</span>
<span class="line"><span class="comment">// Map &#123;true =&gt; 7, Object &#123;foo: 3&#125; =&gt; ['abc']&#125;</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>Map转为JSON<br>Map转为JSON要区分两种情况：</p>
</li>
</ol>
<ul>
<li><p>Map的键名都是字符串， 这时可以选择转为对象JSON</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strMapToJson</span>(<span class="params">strMap</span>) </span>&#123;</span>
<span class="line"><span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(strMapToObj(strMap));</span>
<span class="line">&#125; </span>
<span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">'yes'</span>, <span class="literal">true</span>).set(<span class="string">'no'</span>, <span class="literal">false</span>);</span>
<span class="line">strMapToJson(myMap)</span>
<span class="line"><span class="comment">// '&#123;"yes":true,"no":false&#125;'</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>Map的键名有非字符串， 这时可以选择转为数组JSON</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapToArrayJson</span>(<span class="params">map</span>) </span>&#123;</span>
<span class="line"><span class="keyword">return</span> <span class="built_in">JSON</span>.stringify([...map]);</span>
<span class="line">&#125; </span>
<span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="literal">true</span>, <span class="number">7</span>).set(&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">'abc'</span>]);</span>
<span class="line">mapToArrayJson(myMap)</span>
<span class="line"><span class="comment">// '[[true,7],[&#123;"foo":3&#125;,["abc"]]]'</span></span>
</pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>JSON转为Map<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonToStrMap</span>(<span class="params">jsonStr</span>) </span>&#123;</span>
<span class="line"><span class="keyword">return</span> objToStrMap(<span class="built_in">JSON</span>.parse(jsonStr));</span>
<span class="line">&#125; </span>
<span class="line">jsonToStrMap(<span class="string">'&#123;"yes":true,"no":false&#125;'</span>)</span>
<span class="line"><span class="comment">// Map &#123;'yes' =&gt; true, 'no' =&gt; false&#125;</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator 函数"></a>Generator 函数</h2><p>Generator函数是ES6提供的一种异步编程解决方案， 语法行为与传统函数完全不同。</p>
<p>执行Generator函数会返回一个遍历器对象， 也就是说， Generator函数除了状态机，还是一个遍历器对象生成函数。 返回的遍历器对象， 可以依次遍历Generator函数内部的每一个状态。</p>
<p>形式上， Generator函数是一个普通函数， 但是有两个特征。 </p>
<ul>
<li>function关键字与函数名之间有一个星号； </li>
<li>函数体内部使用yield语句， 定义不同的内部状态（ yield语句在英语里的意思就是“产出”） 。</li>
</ul>
<p>Generator函数的调用方法与普通函数一样， 也是在函数名后面加上一对圆括号。 不同的是， 调用Generator函数后， 该函数并不执行， 返回的也不是函数运行结果， 而是一个指向内部状态的指针对象， 也就是上一章介绍的遍历器对象（ Iterator Object） </p>
<p>必须调用遍历器对象的next方法， 使得指针移向下一个状态。 也就是说， 每次调用next方法， 内部指针就从函数头部或上一次停下来的地方开始执行， 直到遇到下一个yield语句（ 或return语句） 为止。 换言之， Generator函数是分段执行的，yield语句是暂停执行的标记， 而next方法可<br>以恢复执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line">    <span class="keyword">yield</span> <span class="string">'hello'</span>;</span>
<span class="line">    <span class="keyword">yield</span> <span class="string">'world'</span>;</span>
<span class="line">    <span class="keyword">return</span> <span class="string">'ending'</span>;</span>
<span class="line">&#125; </span>
<span class="line"><span class="keyword">var</span> hw = helloWorldGenerator();</span>
<span class="line"></span>
<span class="line">hw.next()</span>
<span class="line"><span class="comment">// &#123; value: 'hello', done: false &#125;</span></span>
<span class="line">hw.next()</span>
<span class="line"><span class="comment">// &#123; value: 'world', done: false &#125;</span></span>
<span class="line">hw.next()</span>
<span class="line"><span class="comment">// &#123; value: 'ending', done: true &#125;</span></span>
<span class="line">hw.next()</span>
<span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span>
</pre></td></tr></table></figure></p>
<h3 id="yield语句"><a href="#yield语句" class="headerlink" title="yield语句"></a>yield语句</h3><p>遍历器对象的next方法的运行逻辑如下</p>
<ul>
<li>遇到yield语句， 就暂停执行后面的操作， 并将紧跟在yield后面的那个表达式的值， 作为返回的对象的value属性值</li>
<li>下一次调用next方法时， 再继续往下执行， 直到遇到下一个yield语句。</li>
<li>如果没有再遇到新的yield语句， 就一直运行到函数结束， 直到return语句为止， 并将return语句后面的表达式的值， 作为返回的对象的value属性值。</li>
<li>如果该函数没有return语句， 则返回的对象的value属性值为undefined<blockquote>
<p>注: yield语句不能用在普通函数中， 否则会报错</p>
</blockquote>
</li>
</ul>
<h2 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h2><p>所谓Promise， 简单说就是一个容器， 里面保存着某个未来才会结束的事件（ 通常是一个异步操作） 的结果。 从语法上说， Promise是一个对象， 从它可以获取异步操作的消息</p>
<p>Promise对象有以下两个特点:</p>
<ul>
<li>对象的状态不受外界影响。 Promise对象代表一个异步操作， 有三种状态： Pending（ 进行中） 、 Resolved（ 已完成， 又称Fulfilled）和Rejected（ 已失败） 。 只有异步操作的结果， 可以决定当前是哪一种状态， 任何其他操作都无法改变这个状态。 这也是Promise这个名字的由来， 它的英语意思就是“承诺”， 表示其他手段无法改变</li>
<li>一旦状态改变， 就不会再变， 任何时候都可以得到这个结果。 Promise对象的状态改变， 只有两种可能： 从Pending变为Resolved和从Pending变为Rejected。 只要这两种情况发生， 状态就凝固了， 不会再变了， 会一直保持这个结果。 就算改变已经发生了， 你再对Promise对象添加回调函数， 也会立即得到这个结果。 这与事件（ Event） 完全不同， 事件的特点是， 如果你错过了它， 再去监听， 是得不到结果的。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//创造了一个Promise实例。</span></span>
<span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span>
<span class="line">    <span class="comment">// ... some code</span></span>
<span class="line">    <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span>
<span class="line">        resolve(value);</span>
<span class="line">    &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">        reject(error);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;);</span>
<span class="line"></span>
<span class="line"><span class="comment">//可以用then方法分别指定Resolved状态和Reject状态的回调函数</span></span>
<span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span>
<span class="line">    <span class="comment">// success</span></span>
<span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span>
<span class="line">    <span class="comment">// failure</span></span>
<span class="line">&#125;);</span>
<span class="line"></span>
<span class="line"><span class="comment">//用Promise对象实现的Ajax操作的例子</span></span>
<span class="line"><span class="keyword">var</span> getJSON = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</span>
<span class="line">    <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span>
<span class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> XMLHttpRequest();</span>
<span class="line">        client.open(<span class="string">"GET"</span>, url);</span>
<span class="line">        client.onreadystatechange = handler;</span>
<span class="line">        client.responseType = <span class="string">"json"</span>;</span>
<span class="line">        client.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</span>
<span class="line">        client.send();</span>
<span class="line"></span>
<span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) &#123;</span>
<span class="line">                <span class="keyword">return</span>;</span>
<span class="line">            &#125;</span>
<span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="number">200</span>)</span>
<span class="line">            &#123;</span>
<span class="line">                resolve(<span class="keyword">this</span>.response);</span>
<span class="line">            &#125;</span>
<span class="line">        <span class="keyword">else</span></span>
<span class="line">            &#123;</span>
<span class="line">                reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;;</span>
<span class="line">    &#125;);</span>
<span class="line">    <span class="keyword">return</span> promise;</span>
<span class="line">&#125;;</span>
<span class="line">getJSON(<span class="string">"/posts.json"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">json</span>) </span>&#123;</span>
<span class="line">    <span class="built_in">console</span>.log(<span class="string">'Contents: '</span> + json);</span>
<span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span>
<span class="line">    <span class="built_in">console</span>.error(<span class="string">'出错了'</span>, error);</span>
<span class="line">&#125;);</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h2 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h2><p>async函数就是Generator函数的语法糖。</p>
<p>async函数就是将Generator函数的星号（ *） 替换成async， 将yield替换成await， 仅此而已<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//async函数返回一个Promise对象， 可以使用then方法添加回调函数。 当函数执行的时候， 一旦遇到await就会先返回， 等到触发的异步操作完成， 再接着执行函数体内后面的语句。</span></span>
<span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getStockPriceByName</span>(<span class="params">name</span>) </span>&#123;</span>
<span class="line">    <span class="keyword">var</span> symbol = <span class="keyword">await</span> getStockSymbol(name);</span>
<span class="line">    <span class="keyword">var</span> stockPrice = <span class="keyword">await</span> getStockPrice(symbol);</span>
<span class="line">    <span class="keyword">return</span> stockPrice;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">getStockPriceByName(<span class="string">'goog'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span>
<span class="line">    <span class="built_in">console</span>.log(result);</span>
<span class="line">&#125;);</span>
<span class="line"></span>
<span class="line"><span class="comment">//指定多少毫秒后输出一个值</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span>
<span class="line">        setTimeout(resolve, ms);</span>
<span class="line">    &#125;);</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncPrint</span>(<span class="params">value, ms</span>) </span>&#123;</span>
<span class="line">    <span class="keyword">await</span> timeout(ms);</span>
<span class="line">    <span class="built_in">console</span>.log(value)</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">asyncPrint(<span class="string">'hello world'</span>, <span class="number">50</span>);</span>
<span class="line"></span>
<span class="line"><span class="comment">//Async函数有多种使用形式。</span></span>
<span class="line"><span class="comment">// 函数声明</span></span>
<span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span>
<span class="line"><span class="comment">// 函数表达式</span></span>
<span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span>
<span class="line"><span class="comment">// 对象的方法</span></span>
<span class="line"><span class="keyword">let</span> obj = &#123; <span class="keyword">async</span> foo() &#123;&#125; &#125;;</span>
<span class="line"><span class="comment">// 箭头函数</span></span>
<span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> () =&gt; &#123;&#125;;</span>
</pre></td></tr></table></figure></p>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span>
<span class="line">    <span class="keyword">constructor</span>(x, y) &#123;</span>
<span class="line">        <span class="keyword">this</span>.x = x;</span>
<span class="line">        <span class="keyword">this</span>.y = y;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    toString() &#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="string">`x=<span class="subst">$&#123;<span class="keyword">this</span>.x&#125;</span>    y=<span class="subst">$&#123;<span class="keyword">this</span>.y&#125;</span>`</span>;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="keyword">let</span> point = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>);</span>
<span class="line"><span class="built_in">console</span>.log(point.toString()); <span class="comment">//x=1    y=2</span></span>
</pre></td></tr></table></figure>
<blockquote>
<p>注:定义“类”的方法的时候， 前面不需要加上function这个关键字， 直接把函数定义放进去了就可以了。 另外， 方法之间不需要逗号分隔， 加了会报错。</p>
</blockquote>
<h3 id="constructor方法"><a href="#constructor方法" class="headerlink" title="constructor方法"></a>constructor方法</h3><p>constructor方法是类的默认方法， 通过new命令生成对象实例时， 自动调用该方法。 一个类必须有constructor方法， 如果没有显式定义， 一个空的constructor方法会被默认添加<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span>
<span class="line">    <span class="keyword">constructor</span>() &#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span>
<span class="line">    &#125;</span>
<span class="line">&#125; </span>
<span class="line"><span class="keyword">new</span> Foo() <span class="keyword">instanceof</span> Foo</span>
</pre></td></tr></table></figure></p>
<h3 id="Class的继承"><a href="#Class的继承" class="headerlink" title="Class的继承"></a>Class的继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</span>
<span class="line">    <span class="keyword">constructor</span>(x, y, color) &#123;</span>
<span class="line">        <span class="keyword">super</span>(x, y); <span class="comment">// 调用父类的constructor(x, y)</span></span>
<span class="line">        <span class="keyword">this</span>.color = color;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    toString() &#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.color + <span class="string">' '</span> + <span class="keyword">super</span>.toString(); <span class="comment">// 调用父类的toString()</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<blockquote>
<p>注:</p>
<ul>
<li>子类必须在constructor方法中调用super方法， 否则新建实例时会报错。 这是因为子类没有自己的this对象， 而是继承父类的this对象， 然后对其进行加工</li>
<li>在子类的构造函数中， 只有调用super之后， 才可以使用this关键字， 否则会报错</li>
</ul>
</blockquote>
<h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>模块功能主要由两个命令构成： export和import。 export命令用于规定模块的对外接口， import命令用于输入其他模块提供的功能。<br>一个模块就是一个独立的文件。 该文件内部的所有变量， 外部无法获取。 如果你希望外部能够读取模块内部的某个变量， 就必须使用export关键字输出该变量</p>
<h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//用export命令对外部输出了三个变量</span></span>
<span class="line"><span class="comment">// profile.js</span></span>
<span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</span>
<span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</span>
<span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</span>
<span class="line"></span>
<span class="line"><span class="comment">//另外一种写法</span></span>
<span class="line"><span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</span>
<span class="line"><span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</span>
<span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span>
<span class="line"><span class="keyword">export</span> &#123;firstName, lastName, year&#125;;</span>
<span class="line"></span>
<span class="line"><span class="comment">//export命令除了输出变量， 还可以输出函数或类（ class） 。</span></span>
<span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> x * y;</span>
<span class="line">&#125;;</span>
<span class="line"></span>
<span class="line"><span class="comment">//export输出的变量就是本来的名字， 但是可以使用as关键字重命名。</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v1</span>(<span class="params"></span>) </span>&#123; ... &#125;</span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v2</span>(<span class="params"></span>) </span>&#123; ... &#125;</span>
<span class="line"><span class="keyword">export</span> &#123;</span>
<span class="line">    v1 <span class="keyword">as</span> streamV1,</span>
<span class="line">    v2 <span class="keyword">as</span> streamV2,</span>
<span class="line">    v2 <span class="keyword">as</span> streamLatestVersion</span>
<span class="line">&#125;;</span>
<span class="line"></span>
<span class="line"><span class="comment">//export命令规定的是对外的接口， 必须与模块内部的变量建立一一对应关系</span></span>
<span class="line"><span class="comment">// 写法一</span></span>
<span class="line"><span class="keyword">export</span> <span class="keyword">var</span> m = <span class="number">1</span>;</span>
<span class="line"><span class="comment">// 写法二</span></span>
<span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span>
<span class="line"><span class="keyword">export</span> &#123;m&#125;;</span>
<span class="line"><span class="comment">// 写法三</span></span>
<span class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</span>
<span class="line"><span class="keyword">export</span> &#123;n <span class="keyword">as</span> m&#125;;</span>
</pre></td></tr></table></figure>
<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>使用export命令定义了模块的对外接口以后， 其他JS文件就可以通过import命令加载这个模块（ 文件）<br> import命令接受一个对象（ 用大括号表示） ， 里面指定要从其他模块导入的变量名。 大括号里面的变量名， 必须与被导入模块（ profile.js） 对外接口的名称相同。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//从profile中导入firstName, lastName, year</span></span>
<span class="line"><span class="keyword">import</span> &#123;firstName, lastName, year&#125; <span class="keyword">from</span> <span class="string">'./profile'</span>;</span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">element</span>) </span>&#123;</span>
<span class="line">    element.textContent = firstName + <span class="string">' '</span> + lastName;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">//import命令要使用as关键字， 将输入的变量重命名</span></span>
<span class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">'./profile'</span>;</span>
</pre></td></tr></table></figure>
<h3 id="模块的整体加载"><a href="#模块的整体加载" class="headerlink" title="模块的整体加载"></a>模块的整体加载</h3><p>除了指定加载某个输出值， 还可以使用整体加载， 即用星号（ *） 指定一个对象， 所有输出值都加载在这个对象上面<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// circle.js</span></span>
<span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">radius</span>) </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * radius * radius;</span>
<span class="line">&#125;</span>
<span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">circumference</span>(<span class="params">radius</span>) </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * radius;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">//整体加载</span></span>
<span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">'./circle'</span>;</span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">'圆面积： '</span> + circle.area(<span class="number">4</span>));</span>
<span class="line"><span class="built_in">console</span>.log(<span class="string">'圆周长： '</span> + circle.circumference(<span class="number">14</span>));</span>
</pre></td></tr></table></figure></p>
<h3 id="export-default命令"><a href="#export-default命令" class="headerlink" title="export default命令"></a>export default命令</h3><p>为模块指定默认输出<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span>
<span class="line"><span class="comment">//默认输出是一个函数。</span></span>
<span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span>
<span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">// import-default.js</span></span>
<span class="line"><span class="comment">//import命令可以为该匿名函数指定任意名字。</span></span>
<span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'./export-default'</span>;</span>
<span class="line">customName(); <span class="comment">// 'foo'</span></span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>注:一个模块只能有一个默认输出， 因此export deault命令只能使用一次。 所以， import命令后面才不用加大括号， 因为只可能对应一个方法。</p>
</blockquote>
<h3 id="跨模块常量"><a href="#跨模块常量" class="headerlink" title="跨模块常量"></a>跨模块常量</h3><p>const声明的常量只在当前代码块有效。 如果想设置跨模块的常量（ 即跨多个文件） ， 可以采用下面的写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// constants.js 模块</span></span>
<span class="line"><span class="keyword">export</span> <span class="keyword">const</span> A = <span class="number">1</span>;</span>
<span class="line"><span class="keyword">export</span> <span class="keyword">const</span> B = <span class="number">3</span>;</span>
<span class="line"><span class="keyword">export</span> <span class="keyword">const</span> C = <span class="number">4</span>;</span>
<span class="line"><span class="comment">// test1.js 模块</span></span>
<span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">'./constants'</span>;</span>
<span class="line"><span class="built_in">console</span>.log(constants.A); <span class="comment">// 1</span></span>
<span class="line"><span class="built_in">console</span>.log(constants.B); <span class="comment">// 3</span></span>
<span class="line"><span class="comment">// test2.js 模块</span></span>
<span class="line"><span class="keyword">import</span> &#123;A, B&#125; <span class="keyword">from</span> <span class="string">'./constants'</span>;</span>
<span class="line"><span class="built_in">console</span>.log(A); <span class="comment">// 1</span></span>
<span class="line"><span class="built_in">console</span>.log(B); <span class="comment">// 3</span></span>
</pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Webpack学习笔记]]></title>
      <url>/2017/07/27/Webpack_study/</url>
      <content type="html"><![CDATA[<p>Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。<br>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个浏览器可识别的JavaScript文件。</p>
<h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><a id="more"></a>
<h3 id="安装Webpack"><a href="#安装Webpack" class="headerlink" title="安装Webpack"></a>安装Webpack</h3><p>webpack是建立在node.js环境下的，所以要使用它我们需要先安装node和npm，其相关知识这里将不介绍。</p>
<h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p>在终端输入以下命令即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo apt-get install nodejs</span>
</pre></td></tr></table></figure></p>
<h4 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h4><p>在终端输入以下命令即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo apt-get install npm</span>
</pre></td></tr></table></figure></p>
<p>为了保证下载速度，我们直接永久设置为淘宝源为npm的registry地址。在终端里输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span>
</pre></td></tr></table></figure></p>
<ul>
<li>配置成功后输入以下命令来查看是否成功<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">npm config get registry</span>
</pre></td></tr></table></figure>
</li>
</ul>
<p>如图所示即为成功<br><img src="http://objects.earthchen.cn/webpack_study_%E8%AE%BE%E7%BD%AEnpm%E4%B8%BA%E6%B7%98%E5%AE%9D%E6%BA%90.png" alt="设置npm为淘宝源"></p>
<h4 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h4><ol>
<li><p>全局安装<br>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo npm install -g webpack</span>
</pre></td></tr></table></figure>
</li>
<li><p>局部安装<br>进入项目目录，并在终端中输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h3 id="使用Webpack"><a href="#使用Webpack" class="headerlink" title="使用Webpack"></a>使用Webpack</h3><ol>
<li>创建一个工作目录，并进入这个目录创建一个项目，在终端输入以下命令，会自动生成一个<strong>package.json</strong>文件，这是一个标准的npm说明文件，里面包含了一些信息，包含了项目的依赖模块，自定义脚本任务等。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">npm init</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。</p>
<ol>
<li><p>在本项目中安装Webpack作为依赖包，在终端输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack</span>
</pre></td></tr></table></figure>
</li>
<li><p>创建app和public文件夹</p>
<ul>
<li>app文件夹用来存放原始数据和我们将写的JavaScript模块</li>
<li>public文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）</li>
</ul>
</li>
<li><p>创建几个html和js文件做一个简单的例子</p>
<ul>
<li><p>在<strong>public</strong>下创建<strong>index.html</strong>文件，加载通过webpack打包之后的<strong>bundle.js</strong>文件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Sample Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'root'</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>在<strong>app</strong>目录下创建<strong>Greeter.js</strong>，用来返回一个简单的文字信息的html元素的函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line">    <span class="keyword">var</span> greet = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span>
<span class="line">    greet.textContent = <span class="string">"Hi there and greetings!"</span>;</span>
<span class="line">    <span class="keyword">return</span> greet;</span>
<span class="line">    &#125;;</span>
</pre></td></tr></table></figure>
</li>
<li><p>在<strong>app</strong>目录下创建<strong>main.js</strong>，用来把<strong>Greeter模块</strong>返回的结点插入页面</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greeter = <span class="built_in">require</span>(<span class="string">'./Greeter.js'</span>);</span>
<span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'root'</span>).appendChild(greeter());</span>
</pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用<strong>webpack</strong>进行打包<br>基本命令为</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">webpack &#123;entry file/入口文件&#125; &#123;destination <span class="keyword">for</span> bundled file/存放bundle.js的地方&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>只需要指定一个入口文件，webpack将自动识别项目所依赖的其它文件，不过需要注意的是如果你的webpack没有进行全局安装，那么当你在终端中使用此命令时，需要额外指定其在node_modules中的地址，继续上面的例子，在终端中属于如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">node_modules/.bin/webpack app/main.js public/bundle.js</span>
</pre></td></tr></table></figure></p>
<p>执行结果如下，可以看到帮我们打包了两个文件<br><img src="http://objects.earthchen.cn/webpack_study_webpack%E5%91%BD%E4%BB%A4%E6%89%93%E5%8C%85.png" alt="webpack命令打包"><br>打开浏览器访问index.html可以看到如下结果<br><img src="http://objects.earthchen.cn/webpack_study_webpack%E5%91%BD%E4%BB%A4%E6%89%93%E5%8C%85%E5%90%8Eindex%E7%BB%93%E6%9E%9C.png" alt="打包后index结果"></p>
<ul>
<li><p>webpack还有许多功能，通过命令行都可以实现，但是命令多了不好记也容易出错，所以webpack也提供了配置文件方式，在项目根目录下创建<strong>webpack.config.js</strong>文件，在其中编写我们所需要的配置。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span>
<span class="line">    <span class="comment">//唯一入口文件</span></span>
<span class="line">    entry: __dirname + <span class="string">"/app/main.js"</span>,</span>
<span class="line">    <span class="attr">output</span>: &#123;</span>
<span class="line">        <span class="comment">//打包后的文件存放的地方</span></span>
<span class="line">        path: __dirname + <span class="string">"/public"</span>,</span>
<span class="line">        <span class="comment">//打包后输出文件的文件名</span></span>
<span class="line">        filename: <span class="string">"bundle.js"</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<blockquote>
<p>注:<strong>__dirname</strong>是node.js中的一个全局变量，它指向当前执行脚本所在的目录。<br>接下来指定打包命令只需要在终端中输入<strong>webpack</strong>即可。执行的结果和用命令一致。</p>
</blockquote>
</li>
<li><p>打包操作还可以更简单，为了解决命令复杂且多的问题，npm还提供了引导任务执行的功能。对其进行配置后可以使用简单的npm start命令来代替这些繁琐的命令。在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">  "name": "first_webpack_project",</span>
<span class="line">  "version": "1.0.0",</span>
<span class="line">  "description": "",</span>
<span class="line">  "main": "index.js",</span>
<span class="line">  "scripts": &#123;</span>
<span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span>
<span class="line">    //配置start命令</span>
<span class="line">    "start": "webpack"</span>
<span class="line">  &#125;,</span>
<span class="line">  "author": "",</span>
<span class="line">  "license": "ISC",</span>
<span class="line">  "devDependencies": &#123;</span>
<span class="line">    "webpack": "^3.4.1"</span>
<span class="line">  &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>注:npm的start是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用<strong>npm start</strong>就可以执行相关命令，如果对应的此脚本名称不是<strong>start</strong>，想要在命令行中运行时，需要这样用<strong>npm run {script name}</strong>如<strong>npm run build</strong>，以下是执行<strong>npm start</strong>后命令行的输出显示<br><img src="http://objects.earthchen.cn/webpack_study_npm_start%E7%BB%93%E6%9E%9C.png" alt="npm start结果"></p>
</blockquote>
<h3 id="Webpack功能"><a href="#Webpack功能" class="headerlink" title="Webpack功能"></a>Webpack功能</h3><h4 id="生成Source-Maps"><a href="#生成Source-Maps" class="headerlink" title="生成Source Maps"></a>生成Source Maps</h4><p>开发总是离不开调试，如果可以更加方便的调试当然就能提高开发效率，不过打包后的文件有时候你是不容易找到出错了的地方对应的源代码的位置的，Source Maps就是来帮我们解决这个问题的。</p>
<p>通过简单的配置后，Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。</p>
<p>在webpack的配置文件中配置source maps，需要配置<strong>devtool</strong>，它有以下四种不同的配置选项，各具优缺点，描述如下：<br>|devtool选项|配置结果|<br>|——|———–|<br>|source-map|在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度|<br>|cheap-module-source-map|在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便|<br>|eval-source-map|使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项|<br>|cheap-module-eval-source-map|这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点|</p>
<p>按照说明选择一种你希望的生成方式，在<strong>webpack.config.js</strong>中进行配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span>
<span class="line">    <span class="comment">//配置生成Source Maps，选择合适的选项</span></span>
<span class="line">    devtool: <span class="string">"eval-source-map"</span>,</span>
<span class="line">    <span class="comment">//唯一入口文件</span></span>
<span class="line">    entry: __dirname + <span class="string">"/app/main.js"</span>,</span>
<span class="line">    <span class="attr">output</span>: &#123;</span>
<span class="line">        <span class="comment">//打包后的文件存放的地方</span></span>
<span class="line">        path: __dirname + <span class="string">"/public"</span>,</span>
<span class="line">        <span class="comment">//打包后输出文件的文件名</span></span>
<span class="line">        filename: <span class="string">"bundle.js"</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<h4 id="使用webpack构建本地服务器"><a href="#使用webpack构建本地服务器" class="headerlink" title="使用webpack构建本地服务器"></a>使用webpack构建本地服务器</h4><p>Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现监测你的代码的修改，并自动刷新修改后的结果，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖。安装命令如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span>
</pre></td></tr></table></figure></p>
<p>devserver作为webpack配置选项中的一项，具有以下配置选项</p>
<table>
<thead>
<tr>
<th>devserver配置选项</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>contentBase</td>
<td>默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录）</td>
</tr>
<tr>
<td>port</td>
<td>设置默认监听端口，如果省略，默认为”8080“</td>
</tr>
<tr>
<td>inline</td>
<td>设置为true，当源文件改变时会自动刷新页面</td>
</tr>
<tr>
<td>colors</td>
<td>设置为true，使终端输出的文件为彩色的</td>
</tr>
<tr>
<td>historyApiFallback</td>
<td>在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</td>
</tr>
</tbody>
</table>
<p>在<strong>webpack.config.js</strong>中进行配置devserver：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span>
<span class="line">    <span class="comment">//配置生成Source Maps，选择合适的选项</span></span>
<span class="line">    devtool: <span class="string">"eval-source-map"</span>,</span>
<span class="line">    <span class="comment">//唯一入口文件</span></span>
<span class="line">    entry: __dirname + <span class="string">"/app/main.js"</span>,</span>
<span class="line">    <span class="attr">output</span>: &#123;</span>
<span class="line">        <span class="comment">//打包后的文件存放的地方</span></span>
<span class="line">        path: __dirname + <span class="string">"/public"</span>,</span>
<span class="line">        <span class="comment">//打包后输出文件的文件名</span></span>
<span class="line">        filename: <span class="string">"bundle.js"</span></span>
<span class="line">    &#125;,</span>
<span class="line"></span>
<span class="line">    <span class="attr">devServer</span>: &#123;</span>
<span class="line">        <span class="comment">//本地服务器所加载的页面所在的目录</span></span>
<span class="line">        contentBase: <span class="string">"./public"</span>,</span>
<span class="line">        <span class="comment">//终端中输出结果为彩色</span></span>
<span class="line">        colors: <span class="literal">true</span>,</span>
<span class="line">        <span class="comment">//不跳转</span></span>
<span class="line">        historyApiFallback: <span class="literal">true</span>,</span>
<span class="line">        <span class="comment">//实时刷新</span></span>
<span class="line">        inline: <span class="literal">true</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<h4 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h4><p>通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。</p>
<p>Loaders需要单独安装并且需要在webpack.config.js下的modules关键字下进行配置，Loaders的配置选项包括以下几方面:</p>
<p>|选项|描述|是否必须|<br>|test|一个匹配loaders所处理的文件的拓展名的正则表达式|是|<br>|loader|loader的名称|是|<br>|include/exclude|手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）|否|<br>|query|为loaders提供额外的设置选项|否|</p>
<p>我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下：</p>
<ol>
<li><p>首先安装可以读取json文件的值的loader</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">npm install --save-dev json-loader</span>
</pre></td></tr></table></figure>
</li>
<li><p>在<strong>webpack.config.js</strong>中进行配置json-loader：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line"></span>
<span class="line">    <span class="comment">//在配置文件里添加JSON loader</span></span>
<span class="line">    <span class="built_in">module</span>: &#123;</span>
<span class="line">        <span class="attr">loaders</span>: [</span>
<span class="line">            &#123;</span>
<span class="line">                <span class="attr">test</span>: <span class="regexp">/\.json$/</span>,</span>
<span class="line">                <span class="attr">loader</span>: <span class="string">"json-loader"</span></span>
<span class="line">            &#125;</span>
<span class="line">        ]</span>
<span class="line">    &#125;,</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>创建带有问候信息的JSON文件(在<strong>app</strong>下创建<strong>config.json</strong>文件)</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">  <span class="attr">"greetText"</span>: <span class="string">"Hi there and greetings from JSON!"</span></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>更新<strong>app/Greeter.js</strong>的内容为:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//从config.json读取</span></span>
<span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./config.json'</span>);</span>
<span class="line"></span>
<span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line">    <span class="keyword">var</span> greet = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span>
<span class="line">    greet.textContent = config.greetText;</span>
<span class="line">    <span class="keyword">return</span> greet;</span>
<span class="line">&#125;;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h4><p>Babel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：</p>
<ul>
<li>下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持</li>
<li>使用基于JavaScript进行了拓展的语言，比如React的JSX</li>
</ul>
<ol>
<li><p>安装所有Babel所有的依赖包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react</span>
</pre></td></tr></table></figure>
</li>
<li><p>在<strong>webpack.config.js</strong>中进行配置<strong>babel</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line"></span>
<span class="line">    <span class="comment">//在配置文件里添加JSON loader</span></span>
<span class="line">    <span class="built_in">module</span>: &#123;</span>
<span class="line">        <span class="attr">loaders</span>: [</span>
<span class="line">            &#123;</span>
<span class="line">                <span class="attr">test</span>: <span class="regexp">/\.json$/</span>,</span>
<span class="line">                <span class="attr">loader</span>: <span class="string">"json-loader"</span></span>
<span class="line">            &#125;,</span>
<span class="line">            &#123;</span>
<span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span>
<span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span>
<span class="line">                <span class="comment">//在webpack的module部分的loaders里进行配置即可</span></span>
<span class="line">                loader: <span class="string">'babel-loader'</span>,</span>
<span class="line">                <span class="attr">query</span>: &#123;</span>
<span class="line">                    <span class="attr">presets</span>: [<span class="string">'es2015'</span>, <span class="string">'react'</span>]</span>
<span class="line">                &#125;</span>
<span class="line">            &#125;</span>
<span class="line">        ]</span>
<span class="line">    &#125;,</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。</p>
<p>现在使用React进行测试，先安装 React 和 React-DOM，在终端中输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">npm install --save react react-dom</span>
</pre></td></tr></table></figure></p>
<ol>
<li><p>更新<strong>app/Greeter.js</strong>的内容为:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//Greeter,js</span></span>
<span class="line"><span class="comment">//导入React</span></span>
<span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span>
<span class="line"><span class="comment">//从config.json读取</span></span>
<span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config.json'</span>;</span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span>
<span class="line">  render() &#123;</span>
<span class="line">    <span class="keyword">return</span> (</span>
<span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span>
<span class="line">        &#123;config.greetText&#125;</span>
<span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span>
<span class="line">    );</span>
<span class="line">  &#125;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Greeter</span>
</pre></td></tr></table></figure>
</li>
<li><p>更新<strong>app/main.js</strong>内容为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span>
<span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span>
<span class="line"><span class="keyword">import</span> Greeter <span class="keyword">from</span> <span class="string">'./Greeter'</span>;</span>
<span class="line"></span>
<span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">Greeter</span> /&gt;</span>, document.getElementById('root'));</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<h5 id="Babel的配置选项"><a href="#Babel的配置选项" class="headerlink" title="Babel的配置选项"></a>Babel的配置选项</h5><p>Babel可以在<strong>webpack.config.js</strong>中进行配置页可以分块单独配置，当配置较多时，最好单独配置创建一个<strong>.babelrc</strong>的babel配置文件，webpack会自动调用<strong>.babelrc</strong>其中的配置选项。</p>
<ol>
<li><p>更新<strong>webpack.config.js</strong>内容为:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line"></span>
<span class="line">    <span class="comment">//在配置文件里添加JSON loader</span></span>
<span class="line">    <span class="built_in">module</span>: &#123;</span>
<span class="line">        <span class="attr">loaders</span>: [</span>
<span class="line">            &#123;</span>
<span class="line">                <span class="attr">test</span>: <span class="regexp">/\.json$/</span>,</span>
<span class="line">                <span class="attr">loader</span>: <span class="string">"json-loader"</span></span>
<span class="line">            &#125;,</span>
<span class="line">            &#123;</span>
<span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span>
<span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span>
<span class="line">                <span class="comment">//在webpack的module部分的loaders里进行配置即可</span></span>
<span class="line">                loader: <span class="string">'babel-loader'</span>,</span>
<span class="line">            &#125;</span>
<span class="line">        ]</span>
<span class="line">    &#125;,</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>创建<strong>.babelrc</strong>文件并添加内容如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">  <span class="string">"presets"</span>: [<span class="string">"react"</span>, <span class="string">"es2015"</span>]</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>Webpack有一个不可不说的优点，它把所有的文件都可以当做模块处理，包括你的JavaScript代码，也包括CSS和fonts以及图片等等等，只有通过合适的loaders，它们都可以被当做模块被处理。</p>
<h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><p>webpack提供两个工具处理样式表，<strong>css-loader</strong> 和 <strong>style-loader</strong>，二者处理的任务不同，<strong>css-loader</strong>使你能够使用类似<strong>@import</strong> 和 <strong>url(…)</strong>的方法实现 <strong>require()</strong>的功能,<strong>style-loader</strong>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>
<ol>
<li><p>安装<strong>css-loader</strong> 和 <strong>style-loader</strong>模块，在终端输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">npm install --save-dev style-loader css-loader</span>
</pre></td></tr></table></figure>
</li>
<li><p>更新<strong>webpack.config.js</strong>内容,使其能够使用<strong>css-loader</strong>和 <strong>style-loader</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line"></span>
<span class="line">    <span class="comment">//在配置文件里添加JSON loader</span></span>
<span class="line">    <span class="built_in">module</span>: &#123;</span>
<span class="line">        <span class="attr">loaders</span>: [</span>
<span class="line">            &#123;</span>
<span class="line">                <span class="attr">test</span>: <span class="regexp">/\.json$/</span>,</span>
<span class="line">                <span class="attr">loader</span>: <span class="string">"json-loader"</span></span>
<span class="line">            &#125;,</span>
<span class="line">            &#123;</span>
<span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span>
<span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span>
<span class="line">                <span class="comment">//在webpack的module部分的loaders里进行配置即可</span></span>
<span class="line">                loader: <span class="string">'babel-loader'</span>,</span>
<span class="line">            &#125;,</span>
<span class="line">            &#123;</span>
<span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span>
<span class="line">                <span class="comment">//添加对样式表的处理</span></span>
<span class="line">                loader: <span class="string">'style-loader!css-loader'</span></span>
<span class="line">            &#125;</span>
<span class="line">        ]</span>
<span class="line">    &#125;,</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<blockquote>
<p>注:感叹号的作用在于使同一文件能够使用不同类型的loader</p>
</blockquote>
</li>
<li><p>在<strong>app</strong>文件夹下创建<strong>main.css</strong>的文件，设置某些元素的样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span>
<span class="line">  <span class="attribute">box-sizing</span>: border-box;</span>
<span class="line">  <span class="attribute">-ms-text-size-adjust</span>: <span class="number">100%</span>;</span>
<span class="line">  <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span>;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123;</span>
<span class="line">  <span class="attribute">box-sizing</span>: inherit;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="selector-tag">body</span> &#123;</span>
<span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span>
<span class="line">  <span class="attribute">font-family</span>: <span class="string">'Helvetica Neue'</span>, Helvetica, Arial, sans-serif;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">ul</span> &#123;</span>
<span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span>
<span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>由于webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，更新后的<strong>main.js</strong>文件内容为:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span>
<span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span>
<span class="line"><span class="keyword">import</span> Greeter <span class="keyword">from</span> <span class="string">'./Greeter'</span>;</span>
<span class="line"></span>
<span class="line"><span class="comment">//使用require导入css文件</span></span>
<span class="line"><span class="keyword">import</span> <span class="string">'./main.css'</span>;</span>
<span class="line"></span>
<span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">Greeter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="CSS-module"><a href="#CSS-module" class="headerlink" title="CSS module"></a>CSS module</h4><p>CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递都所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中具有相同的类名可能会造成的问题.</p>
<ol>
<li><p>更新<strong>webpack.config.js</strong>内容,使其能使用<strong>CSS module</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line"></span>
<span class="line">    <span class="comment">//在配置文件里添加JSON loader</span></span>
<span class="line">    <span class="built_in">module</span>: &#123;</span>
<span class="line">        <span class="attr">loaders</span>: [</span>
<span class="line">            &#123;</span>
<span class="line">                <span class="attr">test</span>: <span class="regexp">/\.json$/</span>,</span>
<span class="line">                <span class="attr">loader</span>: <span class="string">"json-loader"</span></span>
<span class="line">            &#125;,</span>
<span class="line">            &#123;</span>
<span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span>
<span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span>
<span class="line">                <span class="comment">//在webpack的module部分的loaders里进行配置即可</span></span>
<span class="line">                loader: <span class="string">'babel-loader'</span>,</span>
<span class="line">            &#125;,</span>
<span class="line">            &#123;</span>
<span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span>
<span class="line">                <span class="comment">//添加对样式表的处理</span></span>
<span class="line">                <span class="comment">//仅仅添加了?modules-loader</span></span>
<span class="line">                loader: <span class="string">'style-loader!css-loader?modules-loader'</span></span>
<span class="line">            &#125;</span>
<span class="line">        ]</span>
<span class="line">    &#125;,</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>在<strong>app</strong>文件夹下创建<strong>Greeter.css</strong>并增加内容为:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="selector-class">.root</span> &#123;</span>
<span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span>
<span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span>
<span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#ccc</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>导入<strong>.root</strong>到<strong>Greeter.js</strong>中，更新<strong>Greeter.js</strong>内容为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span>
<span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config.json'</span>;</span>
<span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./Greeter.css'</span>;<span class="comment">//导入</span></span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span>
<span class="line">  render() &#123;</span>
<span class="line">    <span class="keyword">return</span> (</span>
<span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.root&#125;</span>&gt;</span>//添加类名</span>
<span class="line">        &#123;config.greetText&#125;</span>
<span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span>
<span class="line">    );</span>
<span class="line">  &#125;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Greeter</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="CSS预处理器"><a href="#CSS预处理器" class="headerlink" title="CSS预处理器"></a>CSS预处理器</h4><p>Sass 和 Less之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，</p>
<p>常用的CSS处理器loaders:</p>
<ul>
<li>Less Loader</li>
<li>Sass Loader</li>
<li>Stylus Loader</li>
</ul>
<ol>
<li><p>安装<strong>postcss-loader</strong> 和 <strong>autoprefixer</strong>（自动添加前缀的插件）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">npm install --save-dev postcss-loader autoprefixer</span>
</pre></td></tr></table></figure>
</li>
<li><p>更新<strong>webpack.config.js</strong>内容,使其能使用<strong>postcss-loader</strong> 和 <strong>autoprefixer</strong>,只需要新建一个postcss关键字，并在里面申明依赖的插件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line"></span>
<span class="line">    <span class="comment">//在配置文件里添加JSON loader</span></span>
<span class="line">    <span class="built_in">module</span>: &#123;</span>
<span class="line">        <span class="attr">loaders</span>: [</span>
<span class="line">            &#123;</span>
<span class="line">                <span class="attr">test</span>: <span class="regexp">/\.json$/</span>,</span>
<span class="line">                <span class="attr">loader</span>: <span class="string">"json-loader"</span></span>
<span class="line">            &#125;,</span>
<span class="line">            &#123;</span>
<span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span>
<span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span>
<span class="line">                <span class="comment">//在webpack的module部分的loaders里进行配置即可</span></span>
<span class="line">                loader: <span class="string">'babel-loader'</span>,</span>
<span class="line">            &#125;,</span>
<span class="line">            &#123;</span>
<span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span>
<span class="line">                <span class="comment">//添加对样式表的处理</span></span>
<span class="line">                <span class="comment">//仅仅添加了?modules</span></span>
<span class="line">                loader: <span class="string">'style-loader!css-loader?modules-loader!postcss-loader'</span></span>
<span class="line">            &#125;</span>
<span class="line">        ]</span>
<span class="line">    &#125;,</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>在<strong>webpack.config.js</strong>同级目录下创建<strong>postcss.config.js</strong>文件，配置内容如下；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span>
<span class="line">  <span class="attr">plugins</span>: [</span>
<span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</span>
<span class="line">  ]</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。</p>
<h4 id="如何使用插件"><a href="#如何使用插件" class="headerlink" title="如何使用插件"></a>如何使用插件</h4><p>要使用某个插件，我们需要通过npm安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）</p>
<ol>
<li>添加一个显示版权声明的插件，在<strong>webpack.config.js</strong>中更新内容如下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span>
<span class="line"></span>
<span class="line"><span class="built_in">module</span>.exports = &#123;</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line"></span>
<span class="line">    plugins: [</span>
<span class="line">        <span class="comment">//在这个数组中new一个就可以了</span></span>
<span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">"Copyright Flying Unicorns inc."</span>)</span>
<span class="line">  ],</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h4><p>这个插件的作用是依据一个简单的模板，帮你生成最终的Html5文件，这个文件中自动引用了你打包后的JS文件。每次编译都在文件名中插入一个不同的哈希值。</p>
<p>这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些改变：</p>
<ol>
<li><p>移除public文件夹，利用此插件，HTML5文件会自动生成，此外CSS已经通过前面的操作打包到JS中了，public文件夹里。</p>
</li>
<li><p>在app目录下，创建一个Html文件模板，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，在本例中我们命名模板文件名称为index.tmpl.html，模板源代码如下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Sample Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'root'</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>更新webpack的配置文件，方法同上,新建一个build文件夹用来存放最终的输出文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span>
<span class="line"><span class="built_in">module</span>.exports = &#123;</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line"></span>
<span class="line">    output: &#123;</span>
<span class="line">        <span class="comment">//打包后的文件存放的地方</span></span>
<span class="line">        path: __dirname + <span class="string">"/build"</span>,</span>
<span class="line">        <span class="comment">//打包后输出文件的文件名</span></span>
<span class="line">        filename: <span class="string">"bundle.js"</span></span>
<span class="line">    &#125;,</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line"></span>
<span class="line">    plugins: [</span>
<span class="line">         <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span>
<span class="line">            <span class="attr">template</span>: __dirname + <span class="string">"/app/index.tmpl.html"</span><span class="comment">//new 一个这个插件的实例，并传入相关的参数</span></span>
<span class="line">        &#125;)</span>
<span class="line">  ],</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h3 id="优化插件"><a href="#优化插件" class="headerlink" title="优化插件"></a>优化插件</h3><p>webpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能</p>
<ul>
<li>OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</li>
<li>UglifyJsPlugin：压缩JS代码；</li>
<li>ExtractTextPlugin：分离CSS和JS文件</li>
</ul>
<ol>
<li><p>安装插件,在终端中输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">npm install --save-dev extract-text-webpack-plugin</span>
</pre></td></tr></table></figure>
</li>
<li><p>在在<strong>webpack.config.js</strong>中更新配置内容如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span>
<span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span>
<span class="line"><span class="built_in">module</span>.exports = &#123;</span>
<span class="line">    .</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line"></span>
<span class="line">    plugins: [</span>
<span class="line">         <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span>
<span class="line">            <span class="attr">template</span>: __dirname + <span class="string">"/app/index.tmpl.html"</span><span class="comment">//new 一个这个插件的实例，并传入相关的参数</span></span>
<span class="line">            <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin(),</span>
<span class="line">            <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span>
<span class="line">            <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"style.css"</span>)</span>
<span class="line">        &#125;)</span>
<span class="line">  ],</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注：</p>
<ul>
<li>本文参考 <a href="http://www.jianshu.com/p/42e11515c10f，作为个人学习笔记" target="_blank" rel="external">http://www.jianshu.com/p/42e11515c10f，作为个人学习笔记</a></li>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式学习笔记]]></title>
      <url>/2017/07/23/RegularExpression_study/</url>
      <content type="html"><![CDATA[<p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。<br>在各大编程语言中都能发挥出很大的作用。每种语言也都有关于正则表达式模块的实现。<br>本文以Python举例说明。</p>
<h2 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h2><a id="more"></a>
<h3 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符"></a>匹配单个字符</h3><h4 id="匹配纯文本"><a href="#匹配纯文本" class="headerlink" title="匹配纯文本"></a>匹配纯文本</h4><p>匹配纯文本其实我们一般不用正则表达式就可以，使用正则表达式只是能说明这个问题<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#待匹配的文本</span></span>
<span class="line">s = <span class="string">'hello my name is ben'</span></span>
<span class="line">print(re.findall(<span class="string">'ben'</span>, s))</span>
<span class="line"><span class="comment">#待匹配的文本</span></span>
<span class="line">s = <span class="string">'hello my name is ben and my friend name is ben'</span></span>
<span class="line">print(<span class="string">'只返回第一个匹配结果为&#123;&#125;'</span>.format(re.search(<span class="string">'ben'</span>, s).span()))</span>
<span class="line">print(<span class="string">'返回所有匹配结果&#123;&#125;'</span>.format(re.findall(<span class="string">'ben'</span>, s)))</span>
</pre></td></tr></table></figure></p>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">[&apos;ben&apos;]</span>
<span class="line">只返回第一个匹配结果为(17, 20)</span>
<span class="line">返回所有匹配结果[&apos;ben&apos;, &apos;ben&apos;]</span>
</pre></td></tr></table></figure></p>
<h4 id="匹配任意字符"><a href="#匹配任意字符" class="headerlink" title="匹配任意字符"></a>匹配任意字符</h4><p>使用<strong>.</strong>匹配任意一个字符<br><strong>.</strong>字符可以匹配任何单个的字符、字母、数字或者<strong>.</strong>本身<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#待匹配的文本</span></span>
<span class="line">s = <span class="string">'sales1.txt'</span> \</span>
<span class="line">    <span class="string">'sales2.txt'</span> \</span>
<span class="line">    <span class="string">'salese.txt'</span> \</span>
<span class="line">    <span class="string">'nae.txt'</span> \</span>
<span class="line">    <span class="string">'sns.txt'</span> \</span>
<span class="line">    <span class="string">'sn.txt'</span></span>
<span class="line"></span>
<span class="line">print(<span class="string">'使用sale.匹配的所有结果为&#123;&#125;'</span>.format(re.findall(<span class="string">r'sales.'</span>, s)))</span>
<span class="line">print(<span class="string">'使用.a.匹配的所有结果为&#123;&#125;'</span>.format(re.findall(<span class="string">r'.a.'</span>, s)))</span>
<span class="line">print(<span class="string">'使用\转义匹配含有.的结果&#123;&#125;'</span>.format(re.findall(<span class="string">r'.a.\.'</span>, s)))</span>
</pre></td></tr></table></figure></p>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">使用sale.匹配的所有结果为[&apos;sales1&apos;, &apos;sales2&apos;, &apos;salese&apos;]</span>
<span class="line">使用.a.匹配的所有结果为[&apos;sal&apos;, &apos;sal&apos;, &apos;sal&apos;, &apos;nae&apos;]</span>
<span class="line">使用\转义匹配含有.的结果[&apos;nae.&apos;]</span>
</pre></td></tr></table></figure></p>
<h3 id="匹配一组字符"><a href="#匹配一组字符" class="headerlink" title="匹配一组字符"></a>匹配一组字符</h3><h4 id="匹配多个字符中的某一个"><a href="#匹配多个字符中的某一个" class="headerlink" title="匹配多个字符中的某一个"></a>匹配多个字符中的某一个</h4><p>使用<strong>[ab]</strong>确定可选的字符<br>使用<strong>[0-9]</strong>确定可选的字符范围<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">s = <span class="string">'na.txt'</span> \</span>
<span class="line">    <span class="string">'na2.txt'</span> \</span>
<span class="line">    <span class="string">'sa1.txt'</span> \</span>
<span class="line">    <span class="string">'ca1.txt'</span> \</span>
<span class="line">    <span class="string">'nam.txt'</span></span>
<span class="line"></span>
<span class="line">print(<span class="string">'匹配na或sa.txt的结果为&#123;&#125;'</span>.format(re.findall(<span class="string">r'[ns]a.\.txt'</span>, s)))</span>
<span class="line">print(<span class="string">'限制a后面字符仅为数字的结果为&#123;&#125;'</span>.format(re.findall(<span class="string">r'[ns]a[0-9]\.txt'</span>,s)))</span>
</pre></td></tr></table></figure></p>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">匹配na或sa.txt的结果为[&apos;na2.txt&apos;, &apos;sa1.txt&apos;, &apos;nam.txt&apos;]</span>
<span class="line">限制a后面字符仅为数字的结果为[&apos;na2.txt&apos;, &apos;sa1.txt&apos;]</span>
</pre></td></tr></table></figure></p>
<ul>
<li>注: 在同一个字符集合里页可以给出多个字符区间，会匹配到多个区间中的任何一个字符</li>
</ul>
<h4 id="取非匹配"><a href="#取非匹配" class="headerlink" title="取非匹配"></a>取非匹配</h4><p>我们使用正则表达式也不是都需要匹配集合其中的字符，有时也需要匹配非集合中的字符，在正则表达式中，我们可以使用<strong>^</strong>字符对集合进行取非操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">s = <span class="string">'na.txt'</span> \</span>
<span class="line">    <span class="string">'na2.txt'</span> \</span>
<span class="line">    <span class="string">'sa1.txt'</span> \</span>
<span class="line">    <span class="string">'ca1.txt'</span> \</span>
<span class="line">    <span class="string">'nam.txt'</span></span>
<span class="line"></span>
<span class="line">print(<span class="string">'限制a后面字符不为数字的结果为&#123;&#125;'</span>.format(re.findall(<span class="string">r'[ns]a[^0-9]\.txt'</span>, s)))</span>
</pre></td></tr></table></figure></p>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">限制a后面字符不为数字的结果为[&apos;nam.txt&apos;]</span>
</pre></td></tr></table></figure></p>
<h3 id="使用元字符"><a href="#使用元字符" class="headerlink" title="使用元字符"></a>使用元字符</h3><h4 id="对特殊字符进行转义"><a href="#对特殊字符进行转义" class="headerlink" title="对特殊字符进行转义"></a>对特殊字符进行转义</h4><p>使用<strong>\</strong>对元字符进行转义<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">s = <span class="string">'list[0]   list[1]   list[2]'</span></span>
<span class="line">print(<span class="string">'使用\对中括号进行转义使其匹配&#123;&#125;'</span>.format(re.findall(<span class="string">r'list\[[0-9]\]'</span>, s)))</span>
<span class="line">path = <span class="string">'\home\\ben\sales'</span></span>
<span class="line">print(<span class="string">'将\替换成/为&#123;&#125;'</span>.format(re.compile(<span class="string">r'\\'</span>).subn(<span class="string">'/'</span>, path)))</span>
</pre></td></tr></table></figure></p>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">使用\对中括号进行转义使其匹配[&apos;list[0]&apos;, &apos;list[1]&apos;, &apos;list[2]&apos;]</span>
<span class="line">将\替换成/为(&apos;/home/ben/sales&apos;, 3)</span>
</pre></td></tr></table></figure></p>
<h4 id="匹配特定的字符类别"><a href="#匹配特定的字符类别" class="headerlink" title="匹配特定的字符类别"></a>匹配特定的字符类别</h4><p>空白元字符表                     </p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>[\b]</strong></td>
<td>回退符</td>
</tr>
<tr>
<td><strong>\f</strong></td>
<td>换页符</td>
</tr>
<tr>
<td><strong>\n</strong></td>
<td>换行符</td>
</tr>
<tr>
<td><strong>\r</strong></td>
<td>回车符</td>
</tr>
<tr>
<td><strong>\t</strong></td>
<td>制表符</td>
</tr>
<tr>
<td><strong>\v</strong></td>
<td>垂直制表符</td>
</tr>
</tbody>
</table>
<p>数字元字符</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>\d</strong></td>
<td>任何一个数字 (等价于[0-9])</td>
</tr>
<tr>
<td><strong>\D</strong></td>
<td>任何一个非数字(等价于[^0-9])</td>
</tr>
</tbody>
</table>
<p>字母数字元字符</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>\w</strong></td>
<td>任何一个字母数字字符(大小写均可)或下划线字符 (等价于[a-zA-Z0-9_])</td>
</tr>
<tr>
<td><strong>\W</strong></td>
<td>任何一个非字母数字字符(等价于[^a-zA-Z0-9_])</td>
</tr>
</tbody>
</table>
<p>空白字符元字符</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>\s</strong></td>
<td>任何一个空白字符 (等价于[\f\n\r\t\v])</td>
</tr>
<tr>
<td><strong>\S</strong></td>
<td>任何一个非空白字符(等价于[^\f\n\r\t\v])</td>
</tr>
</tbody>
</table>
<h3 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配"></a>重复匹配</h3><h4 id="匹配一个或多个字符"><a href="#匹配一个或多个字符" class="headerlink" title="匹配一个或多个字符"></a>匹配一个或多个字符</h4><p>匹配同一个字符或(字符集合)的多次重复，只要在其后面加上一个+即可。<br>+匹配一个或多个字符(至少一个，不包含0个)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">s = <span class="string">'1234545@qq.com   fdfsd@163.com test.sddf@163.com.cn'</span></span>
<span class="line">print(<span class="string">'匹配邮箱&#123;&#125;'</span>.format(re.findall(<span class="string">r'[\w.]+@[\w.]+\.\w+'</span>, s)))</span>
</pre></td></tr></table></figure></p>
<p>结果为；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">匹配邮箱[&apos;1234545@qq.com&apos;, &apos;fdfsd@163.com&apos;]</span>
</pre></td></tr></table></figure></p>
<h4 id="匹配零个或多个字符"><a href="#匹配零个或多个字符" class="headerlink" title="匹配零个或多个字符"></a>匹配零个或多个字符</h4><p><strong>*</strong> 和+类似，只是可以允许匹配0个或多个的情况</p>
<h4 id="匹配零个或一个字符"><a href="#匹配零个或一个字符" class="headerlink" title="匹配零个或一个字符"></a>匹配零个或一个字符</h4><p><strong>？</strong>只能匹配一个字符(或字符集合)的零次或一次出现，最多不能超过一次。</p>
<h4 id="匹配的重复次数"><a href="#匹配的重复次数" class="headerlink" title="匹配的重复次数"></a>匹配的重复次数</h4><ol>
<li>使用<strong>{}</strong>将数值写在其中来表示重复次数 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">s = <span class="string">'123abc   45abc'</span></span>
<span class="line">print(<span class="string">'匹配三个数字&#123;&#125;'</span>.format(re.findall(<span class="string">r'\d&#123;3&#125;\w&#123;3&#125;'</span>, s)))</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">匹配三个数字[&apos;123abc&apos;]</span>
</pre></td></tr></table></figure></p>
<ol>
<li>为重复匹配次数设定一个区间<br>使用<strong>{a,b}</strong>的形式来确定区间，a为最少重复次数，b为最多重复次数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">s = <span class="string">'4/8/03   '</span> \</span>
<span class="line">    <span class="string">'10-6-2004   '</span> \</span>
<span class="line">    <span class="string">'2/2/2   '</span> \</span>
<span class="line">    <span class="string">'01-01-01   '</span></span>
<span class="line"></span>
<span class="line">print(<span class="string">'匹配所有格式的日期&#123;&#125;'</span>.format(re.findall(<span class="string">r'\d&#123;1,2&#125;[-\/]\d&#123;1,2&#125;[-\/]\d&#123;2,4&#125;'</span>, s)))</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">匹配所有格式的日期[&apos;4/8/03&apos;, &apos;10-6-2004&apos;, &apos;01-01-01&apos;]</span>
</pre></td></tr></table></figure></p>
<ol>
<li><p>匹配至少重复多少次<br>使用<strong>{a,}</strong>的形式的形式来确定最少重复的次数</p>
</li>
<li><p>防止过度匹配<br>*和+都是贪婪形元字符，使用他们在进行匹配时，会进可能的匹配而不是适可而止。他们会从一段文本的开头一直匹配到文本的末尾。在这种情况可能导致原本我们需要匹配多个结果，最后变成了一个结果,例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">&lt;B&gt;TEST&lt;/B&gt;AND &lt;B&gt;TEST1&lt;/B&gt;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>会被正则表达式&lt;[Bb]&gt;.*&lt;/[Bb]&gt;匹配为一个整体的结果<br>此时应该使用懒惰型版本<br>常用的贪婪性元字符和它们的懒惰型版本</p>
<table>
<thead>
<tr>
<th>贪婪型元字符</th>
<th>懒惰型元字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>*?</td>
</tr>
<tr>
<td>+</td>
<td>+?</td>
</tr>
<tr>
<td>{n,}</td>
<td>{n,}?</td>
</tr>
</tbody>
</table>
<p>用懒惰型元字符时的正则表达式应是&lt;[Bb]&gt;.*?&lt;/[Bb]&gt;</p>
<h3 id="位置匹配"><a href="#位置匹配" class="headerlink" title="位置匹配"></a>位置匹配</h3><h4 id="单词边界"><a href="#单词边界" class="headerlink" title="单词边界"></a>单词边界</h4><p>使用\b限定单词边界，用来匹配一个单词的开始或结尾<br>使用\B限定一个前后都不是单词边界的单词<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">s = <span class="string">'the cat scattered his food all over the room color - red'</span></span>
<span class="line">print(<span class="string">'匹配单词边界&#123;&#125;'</span>.format(re.findall(<span class="string">r'\bcat\b'</span>, s)))</span>
<span class="line">print(<span class="string">'不匹配单词边界&#123;&#125;'</span>.format(re.findall(<span class="string">r'\-\B'</span>, s)))</span>
</pre></td></tr></table></figure></p>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">匹配单词边界[&apos;cat&apos;]</span>
<span class="line">不匹配单词边界[&apos;-&apos;]</span>
</pre></td></tr></table></figure></p>
<h4 id="字符串边界"><a href="#字符串边界" class="headerlink" title="字符串边界"></a>字符串边界</h4><p>^限定字符串开头，$限定字符串的结尾</p>
<h3 id="使用子表达式"><a href="#使用子表达式" class="headerlink" title="使用子表达式"></a>使用子表达式</h3><p>用<strong>()</strong>来将需要的子表达式划分出来，子表达式可以嵌套<br>用<strong>|</strong>表示或，例如19|20表示为(19|20)匹配19或20<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">s = <span class="string">'hello &amp;nbsp;&amp;nbsp; the world'</span></span>
<span class="line">print(<span class="string">'匹配两个&amp;nbsp;的结果为&#123;&#125;'</span>.format(re.findall(<span class="string">r'(&amp;nbsp;)&#123;2,&#125;'</span>, s)))</span>
<span class="line"></span>
<span class="line">s = <span class="string">'ping 12.159.46.200'</span></span>
<span class="line">p = re.compile(<span class="string">r'(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;'</span>)</span>
<span class="line">print(<span class="string">'使用子表达式匹配ip地址为&#123;&#125;'</span>.format(p.findall(s)))</span>
<span class="line"></span>
<span class="line">s = <span class="string">'1997     2005'</span></span>
<span class="line">print(<span class="string">'&#123;&#125;'</span>.format(re.findall(<span class="string">r'(19|20)\d&#123;2&#125;'</span>, s)))</span>
</pre></td></tr></table></figure></p>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">匹配两个&amp;nbsp;的结果为[&apos;&amp;nbsp;&amp;nbsp;&apos;]</span>
<span class="line">使用子表达式匹配ip地址为[&apos;12.159.46.200&apos;]</span>
<span class="line">[&apos;19&apos;, &apos;20&apos;]</span>
</pre></td></tr></table></figure></p>
<h3 id="回溯引用，前后一致"><a href="#回溯引用，前后一致" class="headerlink" title="回溯引用，前后一致"></a>回溯引用，前后一致</h3><p>使用\n代表模式里的第几个子表达式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">s = <span class="string">'this is and and or or not not'</span></span>
<span class="line">print(<span class="string">'&#123;&#125;'</span>.format(re.findall(<span class="string">r'[ ]+(\w+)[ ]+\1'</span>, s)))</span>
</pre></td></tr></table></figure></p>
<p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">[&apos;and&apos;, &apos;or&apos;, &apos;not&apos;]</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>注:</p>
<ul>
<li>回溯引用只能用来引用模式里的子表达式(用()括起来的正则表达式片段)</li>
<li>回溯引用匹配通常用1开始技术(\1 \2等)。在许多实现里，第0个匹配(\0)可以用来代表整个正则表达式</li>
</ul>
</blockquote>
<h3 id="前后查找"><a href="#前后查找" class="headerlink" title="前后查找"></a>前后查找</h3><p>这种模式，包含的匹配本身并不返回，而是用于确定正确的匹配位置，它并不是匹配结果的一部分。<br>前后查找分为向前查找和向后查找，但常见的正则表达式实现都支持向前查找。所以只说明前者</p>
<h4 id="向前查找"><a href="#向前查找" class="headerlink" title="向前查找"></a>向前查找</h4><p>向前查找指定了一个必须匹配但不在结果中返回的模式。向前查找实际就是一个子表达式。<br>从语法上看，一个向前查找模式就是一个以?=开头的子表达式，需要匹配的文本跟在=的后面。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">s = <span class="string">'http://www.baidu.com \n'</span> \</span>
<span class="line">    <span class="string">'https://www.baidu.com \n'</span> \</span>
<span class="line">    <span class="string">'ftp://ftp.baidu.com    \n'</span></span>
<span class="line"></span>
<span class="line">print(<span class="string">'向前查找url中的协议名为&#123;&#125;'</span>.format(re.findall(<span class="string">r'.&#123;3,6&#125;(?=:)'</span>, s)))</span>
</pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">向前查找url中的协议名为[&apos;http&apos;, &apos;https&apos;, &apos;ftp&apos;]</span>
</pre></td></tr></table></figure></p>
<h4 id="向后查找"><a href="#向后查找" class="headerlink" title="向后查找"></a>向后查找</h4><p>与向前查找相类似，查找出现在被匹配文本之前的字符（但不消费它）,向后查找的操作符使?&lt;=</p>
<h3 id="嵌入条件"><a href="#嵌入条件" class="headerlink" title="嵌入条件"></a>嵌入条件</h3><p>正则表达式里的条件要用?来定义</p>
<ul>
<li>?匹配前一个字符或表达式，如果它存在的话</li>
<li>?= 和?&lt;=匹配前面或后面的文本，如果它存在的话</li>
<li>根据一个回溯引用来进行条件处理</li>
<li>根据一个前后查找来进行条件处理</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts Python3.5</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Regular Expression </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio 使用本地离线Gradle]]></title>
      <url>/2017/07/08/AndroidStudio/</url>
      <content type="html"><![CDATA[<p>在进行Android开发时，我们通常使用Android Studio,不过最近在使用Android Stduio最新版2.3.3出现了一个问题，虽然已经用了vpn，但是gradle还是下载不动，应该使他没有走系统代理，只能自己下载离线gradle版本，但在以前的方法放到用户的.gradle目录下，依然不能用。。。。</p>
<a id="more"></a>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li><p>新版as没有选择gradle版本的地方，所以我们需要知道他创建工程时使用的gradle版本是多少，先使用as创建一个工程，as会自动在用户的.gradle下创建一个gradle-x.x-all文件夹，其中x.x就是版本号。（此时as会一直卡在building…….）</p>
</li>
<li><p>使用任务管理器结束as。从<a href="http://services.gradle.org/distributions/" target="_blank" rel="external">gradle下载地址</a>下载上面显示的版本号。gradle-x.x-all.zip</p>
</li>
<li><p>将下载好的gradle-x.x-all.zip放到用户目录下的.gradle/wrapper/dists/gradle-x.x-all/sdfsdhfsdkfsdfsdfd/中<br>sdfsdhfsdkfsdfsdfd是一串字符串每个人的可能不一样，反正看见一大串字符就对了<br>gradle-x.x-all.zip放进去之后不要解压，不要解压,不要解压，重要的问题说三遍，as会自动解压<br>windows下路径 c:\user\你的用户.gradle\wrapper\dist\<br>Linux下路径   /home/用户名/.gradle/wrapper/dist/</p>
</li>
</ol>
<p>4.然后重新打开as,最好在翻墙状态，as就会联网自动下载其他所需要的文件和库了</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 解决方案 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[跨域请求的解决方案]]></title>
      <url>/2017/06/30/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>在请求或提供api的时候，我们经常会遇到跨域问题，这是由于安全问题，但是有时候我们必须去允许跨域请求，不然我们将拿不到后端传过来的数据<br>所以，笔者在这里总结了一下相关解决方案</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><a id="more"></a>
<h3 id="使用jsonp解决"><a href="#使用jsonp解决" class="headerlink" title="使用jsonp解决"></a>使用jsonp解决</h3><p>使用jsonp方式去请求数据能以get方式请求，但是不能以post方式发送数据<br>使用这种方式需要前后段都做相应的修改</p>
<h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p>笔者这里使用jQuery来进行ajax请求<br>我们需要在前端请求的url中添加一个callback回调参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line">        $.getJSON(<span class="string">"http://10.127.48.204:8000/snippets/1/?callback=?"</span>,  <span class="comment">//注意结尾的callback</span></span>
<span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span>
<span class="line">                <span class="keyword">if</span> (result) &#123;</span>
<span class="line">                    <span class="built_in">document</span>.write(result.style);</span>
<span class="line">                &#125;</span>
<span class="line">            &#125;);</span>
<span class="line">    &#125;</span>
<span class="line">&lt;<span class="regexp">/script&gt;</span></span>
</pre></td></tr></table></figure></p>
<h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><p>笔者这里是用的django的后台，其他语言自行探索一下，都是大同小异的<br>定义好路由之后，我们只需要在view里进行一点简单的修改就好<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></span>
<span class="line">   callback = request.GET[<span class="string">'callback'</span>]</span>
<span class="line">   <span class="keyword">return</span> HttpResponse(<span class="string">'%s(%s)'</span> % (callback,json.dumps(&#123;<span class="string">'name'</span>: <span class="string">'test'</span>&#125;)))</span>
</pre></td></tr></table></figure></p>
<p>得到ajax传来的callback然后返回就好</p>
<p>这样就实现了很简单的跨域请求数据，不过需要前后端都进行支持，比较麻烦。。。。。</p>
<h3 id="修改请求头解决"><a href="#修改请求头解决" class="headerlink" title="修改请求头解决"></a>修改请求头解决</h3><p>在后端直接修改允许的请求头<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myview</span><span class="params">(request)</span>:</span> </span>
<span class="line">    response = HttpResponse(json.dumps(&#123;“key”: “value”, “key2”: “value”&#125;)) </span>
<span class="line">    response[“Access-Control-Allow-Origin”] = “*” </span>
<span class="line">    response[“Access-Control-Allow-Methods”] = “POST, GET, OPTIONS” </span>
<span class="line">    response[“Access-Control-Max-Age”] = “<span class="number">1000</span>” </span>
<span class="line">    response[“Access-Control-Allow-Headers”] = “*” </span>
<span class="line">    <span class="keyword">return</span> response</span>
</pre></td></tr></table></figure></p>
<h3 id="安装django-cors-headers解决"><a href="#安装django-cors-headers解决" class="headerlink" title="安装django-cors-headers解决"></a>安装django-cors-headers解决</h3><p>笔者用的是django，刚好有人写好了一个库</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">pip install django-cors-headers</span>
</pre></td></tr></table></figure>
<h4 id="在settings-py中设置"><a href="#在settings-py中设置" class="headerlink" title="在settings.py中设置"></a>在<strong>settings.py</strong>中设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span>
<span class="line">    ...</span>
<span class="line">    <span class="string">'corsheaders'</span>，</span>
<span class="line">    ...</span>
<span class="line"> ] </span>
<span class="line"></span>
<span class="line">MIDDLEWARE_CLASSES = (</span>
<span class="line">    ...</span>
<span class="line">    <span class="string">'corsheaders.middleware.CorsMiddleware'</span>,</span>
<span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>, <span class="comment"># 注意顺序</span></span>
<span class="line">    ...</span>
<span class="line">)</span>
<span class="line"></span>
<span class="line">CORS_ORIGIN_WHITELIST = (</span>
<span class="line">    <span class="comment">#'*'</span></span>
<span class="line">    <span class="string">'127.0.0.1:8080'</span>,<span class="comment"># 请求的域名</span></span>
<span class="line">    <span class="string">'localhost:8080'</span>,</span>
<span class="line">    <span class="string">'localhost'</span>,</span>
<span class="line">)</span>
</pre></td></tr></table></figure>
<p>配置好允许的域就可以跨域了</p>
<h3 id="在服务器端-nginx-解决"><a href="#在服务器端-nginx-解决" class="headerlink" title="在服务器端(nginx)解决"></a>在服务器端(nginx)解决</h3><p>笔者认为这是最经济划算的一种方法，这样前后端代码就都不需要更改，依然按之前的就可以了<br>但在服务端也有两种方式：</p>
<ol>
<li>修改请求头</li>
<li>进行反向代理</li>
</ol>
<h4 id="修改请求头"><a href="#修改请求头" class="headerlink" title="修改请求头"></a>修改请求头</h4><p>在nginx的配置文件里添加如下配置即可<br><strong>nginx.conf</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">http &#123;</span>
<span class="line">  ......</span>
<span class="line">  add_header Access-Control-Allow-Origin *;</span>
<span class="line">  add_header Access-Control-Allow-Headers X-Requested-With;</span>
<span class="line">  add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span>
<span class="line">  ......</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>这样就可以实现GET,POST,OPTIONS的跨域请求的支持<br>也可以 add_header Access-Control-Allow-Origin <a href="http://127.0.0.1:8000" target="_blank" rel="external">http://127.0.0.1:8000</a>; –指定允许的url;</p>
<h4 id="进行反向代理"><a href="#进行反向代理" class="headerlink" title="进行反向代理"></a>进行反向代理</h4><p>同样在万能的nginx配置文件修改即可<br><strong>/etc/nginx/sites-enabled/8001test</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line">server &#123;</span>
<span class="line">    listen 8001;</span>
<span class="line">    server_name _;</span>
<span class="line">    index index.html;</span>
<span class="line">    location / &#123;</span>
<span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span>
<span class="line">    &#125;</span>
<span class="line">    </span>
<span class="line">    location /apis &#123;</span>
<span class="line">        rewrite ^.+apis/?(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</span>
<span class="line">        include uwsgi_params;</span>
<span class="line">        proxy_pass http://127.0.0.1:8000;  <span class="comment">#需要代理到的地址</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>注：</p>
<ul>
<li>/apis是需要在请求中加的前缀，请求到这个参数会通过转换url然后代理到新的地址</li>
<li>proxy_pass <a href="http://127.0.0.1:8000" target="_blank" rel="external">http://127.0.0.1:8000</a>  需要代理到的地址<br>前端只需要在请求url中加个apis前缀就好<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span>
<span class="line"><span class="comment">//利用反向代理解决跨域测试</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nginx_test</span>(<span class="params"></span>)</span>&#123;</span>
<span class="line">    $.ajax(&#123;</span>
<span class="line">        <span class="attr">url</span>: <span class="string">"/apis/test/"</span>,</span>
<span class="line">        <span class="attr">type</span>:<span class="string">"get"</span>,</span>
<span class="line">        <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span>
<span class="line">            alert(result.name);</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;)</span>
<span class="line">&#125;</span>
<span class="line">&lt;<span class="regexp">/script&gt;</span></span>
</pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p>笔者比较推荐最后一种方法，个人觉得这种方法最经济划算。也可以根据需求来选择是否需要跨域代理</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中搭建测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 解决方案 </tag>
            
            <tag> Nginx </tag>
            
            <tag> AJAX </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu下的进程控制系统————Supervisor]]></title>
      <url>/2017/06/30/ubuntu_supervisor/</url>
      <content type="html"><![CDATA[<p>我们在部署网站或者在ssh到服务器上去进行一些长时间操作的任务时候，通常不喜欢长时间开启终端在其中等待，尤其是Windows下putty这类软件，长时间不操作就会结束，尴尬的是，我们跑的进程也会直接终端，为了解决这个问题，我们需要把进程扔到后台，让他自己运行</p>
<p>在这里我们介绍一个名叫<strong>Supervisor</strong>的进程控制系统，<br>它是一个C/S系统(注意: 其提供WEB接口给用户查询和控制), 它允许用户去监控和控制在类UNIX系统的进程. 它的目标与launchd, daemontools和runit有些相似, 但是与它们不一样的是, 它不是作为init(进程号pid是1)运行. 它是被用来控制进程, 并且它在启动的时候和一般程序并无二致<br>supervisor是一个制作守护进程的工具,用户可以在UNIX系统中监控、管理进程。常用于管理与某个用户或项目相关的进程。去帮我们维护各种服务器的进程，即使有软件崩了也能帮我们自动重启</p>
<h2 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h2><a id="more"></a>
<p>首先先把官网丢上来<a href="http://supervisord.org/" target="_blank" rel="external">http://supervisord.org/</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>两种方式去安装</p>
<ol>
<li><p>直接使用apt包管理安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo apt-get install supervisor</span>
</pre></td></tr></table></figure>
</li>
<li><p>通过pip安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo pip install supervisor</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>安装成功后,supervisor就会默认启动</p>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>很多地方都有不同的使用方式，个人比较倾向把每个进程的文件单独拆分放在/etc/supervisor/conf.d/目录下，以conf为扩展名<br>这里以我自己的一个项目的进程作为例子（进程名为x508server）</p>
<ol>
<li><p>创建并编写<strong>x508server.conf</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line">[program:x508server]</span>
<span class="line">command=python /home/webserver/web/WebServer/manage.py runserver 0.0.0.0:8000 ; 被监控的进程路径</span>
<span class="line">numprocs=1                    ; 启动几个进程</span>
<span class="line">directory=/home/webserver/web/WebServer/               ; 执行前要不要先cd到目录去，一般不用</span>
<span class="line">autostart=true                ; 随着supervisord的启动而启动</span>
<span class="line">autorestart=true              ; 自动重启。。当然要选上了</span>
<span class="line">startretries=10               ; 启动失败时的最多重试次数</span>
<span class="line">exitcodes=0                   ; 正常退出代码</span>
<span class="line">stopsignal=KILL               ; 用来杀死进程的信号</span>
<span class="line">stopwaitsecs=10               ; 发送SIGKILL前的等待时间</span>
<span class="line">redirect_stderr=true          ; 重定向stderr到stdout</span>
<span class="line">stdout_logfile=logfile        ; 指定日志文件</span>
<span class="line">; 默认为 false，如果设置为 true，当进程收到 stop 信号时，会自动将该信号发给该进程的子进程。如果这个配置项为 true，那么也隐含 killasgroup 为 true。例如在 Debug 模式使用 Flask 时，Flask 不会将接收到的 stop 信号也传递给它的子进程，因此就需要设置这个配置项。</span>
<span class="line">stopasgroup=true             ; send stop signal to the UNIX process </span>
<span class="line">; 默认为 false，如果设置为 true，当进程收到 kill 信号时，会自动将该信号发给该进程的子进程。如果这个程序使用了 python 的 multiprocessing 时，就能自动停止它的子线程。</span>
<span class="line">killasgroup=true             ; SIGKILL the UNIX process group (def false</span>
</pre></td></tr></table></figure>
</li>
<li><p>让supervisor重新加载配置文件，然后启动x508server进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">$ supervisorctl reload</span>
<span class="line">$ supervisorctl start x508server</span>
</pre></td></tr></table></figure>
</li>
<li><p>结束指定进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ supervisorctl x508serevr stop</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol>
<li><p>启动某个进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ supervisorctl start x508serevr</span>
</pre></td></tr></table></figure>
</li>
<li><p>关闭某个进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ supervisorctl stop x508serevr</span>
</pre></td></tr></table></figure>
</li>
<li><p>停止全部进程，注：start、restart、stop都不会载入最新的配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ supervisorctl stop all</span>
</pre></td></tr></table></figure>
</li>
<li><p>载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ supervisorctl reload</span>
</pre></td></tr></table></figure>
</li>
<li><p>根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ supervisorctl update</span>
</pre></td></tr></table></figure>
</li>
<li><p>启动supervisord</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo supervisord -c /etc/supervisor/supervisord.conf</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><ol>
<li><p>每个进程的配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
</pre></td><td class="code"><pre><span class="line">;*为必须填写项</span>
<span class="line">;*[program:应用名称]</span>
<span class="line">[program:cat]</span>
<span class="line"></span>
<span class="line">;*命令路径,如果使用python启动的程序应该为 python /home/test.py, </span>
<span class="line">;不建议放入/home/user/, 对于非user用户一般情况下是不能访问</span>
<span class="line"><span class="built_in">command</span>=/bin/cat</span>
<span class="line"></span>
<span class="line">;当numprocs为1时,process_name=%(program_name)s</span>
<span class="line">;当numprocs&gt;=2时,%(program_name)s_%(process_num)02d</span>
<span class="line">process_name=%(program_name)s</span>
<span class="line"></span>
<span class="line">;进程数量</span>
<span class="line">numprocs=1</span>
<span class="line"></span>
<span class="line">;执行目录,若有/home/supervisor_test/<span class="built_in">test</span>1.py</span>
<span class="line">;将directory设置成/home/supervisor_test</span>
<span class="line">;则<span class="built_in">command</span>只需设置成python <span class="built_in">test</span>1.py</span>
<span class="line">;否则<span class="built_in">command</span>必须设置成绝对执行目录</span>
<span class="line">directory=/tmp</span>
<span class="line"></span>
<span class="line">;掩码:--- -w- -w-, 转换后rwx r-x w-x</span>
<span class="line"><span class="built_in">umask</span>=022</span>
<span class="line"></span>
<span class="line">;优先级,值越高,最后启动,最先被关闭,默认值999</span>
<span class="line">priority=999</span>
<span class="line"></span>
<span class="line">;如果是<span class="literal">true</span>,当supervisor启动时,程序将会自动启动</span>
<span class="line">autostart=<span class="literal">true</span></span>
<span class="line"></span>
<span class="line">;*自动重启</span>
<span class="line">autorestart=<span class="literal">true</span></span>
<span class="line"></span>
<span class="line">;启动延时执行,默认1秒</span>
<span class="line">startsecs=10</span>
<span class="line"></span>
<span class="line">;启动尝试次数,默认3次</span>
<span class="line">startretries=3</span>
<span class="line"></span>
<span class="line">;当退出码是0,2时,执行重启,默认值0,2</span>
<span class="line">exitcodes=0,2</span>
<span class="line"></span>
<span class="line">;停止信号,默认TERM</span>
<span class="line">;中断:INT(类似于Ctrl+C)(<span class="built_in">kill</span> -INT pid),退出后会将写文件或日志(推荐)</span>
<span class="line">;终止:TERM(<span class="built_in">kill</span> -TERM pid)</span>
<span class="line">;挂起:HUP(<span class="built_in">kill</span> -HUP pid),注意与Ctrl+Z/<span class="built_in">kill</span> -stop pid不同</span>
<span class="line">;从容停止:QUIT(<span class="built_in">kill</span> -QUIT pid)</span>
<span class="line">;KILL, USR1, USR2其他见命令(<span class="built_in">kill</span> <span class="_">-l</span>),说明1</span>
<span class="line">stopsignal=TERM</span>
<span class="line"></span>
<span class="line">stopwaitsecs=10</span>
<span class="line"></span>
<span class="line">;*以root用户执行</span>
<span class="line">user=root</span>
<span class="line"></span>
<span class="line">;重定向</span>
<span class="line">redirect_stderr=<span class="literal">false</span></span>
<span class="line"></span>
<span class="line">stdout_logfile=/a/path</span>
<span class="line">stdout_logfile_maxbytes=1MB</span>
<span class="line">stdout_logfile_backups=10</span>
<span class="line">stdout_capture_maxbytes=1MB</span>
<span class="line">stderr_logfile=/a/path</span>
<span class="line">stderr_logfile_maxbytes=1MB</span>
<span class="line">stderr_logfile_backups=10</span>
<span class="line">stderr_capture_maxbytes=1MB</span>
<span class="line"></span>
<span class="line">;环境变量设置</span>
<span class="line">environment=A=<span class="string">"1"</span>,B=<span class="string">"2"</span></span>
<span class="line"></span>
<span class="line">serverurl=AUTO</span>
</pre></td></tr></table></figure>
</li>
<li><p>(inet_http_server)配置说明</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">[inet_http_server]         ; inet (TCP) server disabled by default</span>
<span class="line">port=0.0.0.0:9001          ; (ip_address:port specifier, *:port <span class="keyword">for</span> all iface)</span>
<span class="line">username=user              ; 用户名 (default is no username (open server))</span>
<span class="line">password=123               ; 密码 (default is no password (open server))</span>
</pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[django+nginx+gunicorn部署配置]]></title>
      <url>/2017/06/30/django_nginx_gunicorn/</url>
      <content type="html"><![CDATA[<p>在部署django开发的站点时，通常有两种选择方式，nginx+django+uwsgi或者django+nginx+gunicorn，本文不讨论apache方式，在linux下通常都使用nginx，速度快，还经常做代理服务器，功能强大。。<br>nginx+django+uwsgi个人觉得uwsgi配置较为麻烦，所以选择了gunicorn，一个开源Python WSGI UNIX的HTTP服务器，据说速度快（配置快、运行快）、简单，默认是同步工作，支持Gevent、Eventlet异步，支持Tornado。有兴趣可以自行查阅官方文档</p>
<h1 id="django-nginx-gunicorn"><a href="#django-nginx-gunicorn" class="headerlink" title="django+nginx+gunicorn"></a>django+nginx+gunicorn</h1><a id="more"></a>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>需要在服务器端安装我们所需要的环境nginx  Python  nginx gunicorn…<br>django等站点需要的依赖将不进行介绍</p>
<h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>在ubuntu上支持apt-get 直接安装，其他系统请自行搜索安装方式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo apt-get install nginx</span>
</pre></td></tr></table></figure></p>
<h3 id="gunicorn"><a href="#gunicorn" class="headerlink" title="gunicorn"></a>gunicorn</h3><p>gunicorn只是一个Python的库 这里建议使用pip安装，简单方便<br>ps:要么网络好，要么建议更改pip源为豆瓣源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo pip install gunicorn</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>注：</p>
<ul>
<li>如果没有pip需要首先安装pip</li>
<li>如果是Python3 请使用pip3</li>
<li>由于服务器就跑一个Python应用，就使用了全局安装,如果你的服务器上运行了多个Python应用，并使用了不同的环境(版本号),建议使用不同的虚拟环境</li>
</ul>
</blockquote>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>其实也很简单，要想简单的跑起来只需要更改几个配置文件即可<br>首先请把你的django站点放在服务器合适的地方</p>
<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><p>一般网站都配置在80端口上，域名默认解析到80端口，所以nginx配置文件如下，在更改nginx的配置文件之前建议把默认文件进行备份，以备后续出现问题参照使用<br>打开nginx配置文件<strong>/etc/ningx/sites-enable/default</strong><br>进行修改为如下内容:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line">server &#123;</span>
<span class="line">    listen 80;</span>
<span class="line">    server_name 192.168.84.199;</span>
<span class="line">    server_name_in_redirect off;</span>
<span class="line">    access_log /home/webserver/web/nginx.access.log;</span>
<span class="line">    error_log /home/webserver/web/nginx.error.log;</span>
<span class="line"></span>
<span class="line">    location / &#123;</span>
<span class="line">        proxy_pass http://127.0.0.1:8000;</span>
<span class="line">        proxy_pass_header       Authorization;</span>
<span class="line">        proxy_pass_header       WWW-Authenticate;</span>
<span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span>
<span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span>
<span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    location /static/ &#123;</span>
<span class="line">        root /home/webserver/web/WebServer/;</span>
<span class="line">    &#125;</span>
</pre></td></tr></table></figure></p>
<p>核心配置文件就上述那么多，重点使将请求转发到django的服务器上</p>
<blockquote>
<p>注：</p>
<ul>
<li>listen是所需要监听的端口</li>
<li>server_name是需要绑定的域名，暂时没有域名时，请使用ip</li>
<li>access_log是确定正常状态下log文件位置</li>
<li>error_log使确定发生错误时log文件位置</li>
<li>location / 是当访问到根下的时候，将所有请求转发到127.0.0.1:8000,本文使转发到gunicorn启动的django应用上，中间配置的是需要转发的内容，基本上述内容可以满足大多需求，如需特殊需求请自行查看nginx官方文档</li>
<li>location /static/ 配置了静态文件所在的路径，静态文件由nginx处理，动态转发到django，如不配置会出现站点引用的所有js css都找不到</li>
</ul>
</blockquote>
<h3 id="gunicorn配置"><a href="#gunicorn配置" class="headerlink" title="gunicorn配置"></a>gunicorn配置</h3><p>gunicorn启动一般有两种方式，可以在项目目录下建立<strong>gunicorn.conf.py</strong>配置文件，也可以在启动gunicorn时直接加上相关命令</p>
<h4 id="需要在项目的settings-py中的INSTALLED-APPS添加gunicorn："><a href="#需要在项目的settings-py中的INSTALLED-APPS添加gunicorn：" class="headerlink" title="需要在项目的settings.py中的INSTALLED_APPS添加gunicorn："></a>需要在项目的settings.py中的<strong>INSTALLED_APPS</strong>添加gunicorn：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span>
<span class="line">    ...</span>
<span class="line">    ...</span>
<span class="line">    <span class="string">'gunicorn'</span>,  <span class="comment"># 部署用</span></span>
<span class="line">]</span>
</pre></td></tr></table></figure>
<h4 id="gunicorn-conf-py文件"><a href="#gunicorn-conf-py文件" class="headerlink" title="gunicorn.conf.py文件"></a>gunicorn.conf.py文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span>
<span class="line"></span>
<span class="line">bind = <span class="string">"127.0.0.1:8000"</span>   <span class="comment">#绑定的ip与端口</span></span>
<span class="line">workers = <span class="number">2</span>                <span class="comment">#核心数</span></span>
<span class="line">errorlog = <span class="string">'/home/xxx/xxx/gunicorn.error.log'</span> <span class="comment">#发生错误时log的路径</span></span>
<span class="line">accesslog = <span class="string">'/home/xxx/xxx/gunicorn.access.log'</span> <span class="comment">#正常时的log路径</span></span>
<span class="line"><span class="comment">#loglevel = 'debug'   #日志等级</span></span>
<span class="line">proc_name = <span class="string">'gunicorn_project'</span>   <span class="comment">#进程名</span></span>
</pre></td></tr></table></figure>
<p>如还需要其他配置，可以自行查看官方文档</p>
<h4 id="直接使用gunicron启动"><a href="#直接使用gunicron启动" class="headerlink" title="直接使用gunicron启动"></a>直接使用gunicron启动</h4><p>gunicron需要启动后需要长期运行在后台，如果直接启动会在关闭终端后进程就被杀死，这肯定不是我们的需求，所以这里给出两种解决方式  </p>
<ol>
<li>使用Linux自带的nohup命令<br>不使用gunicorn配置文件(需进入项目目录)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo nohup gunicorn 项目名.wsgi:application -b 127.0.0.1:8000&amp;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>使用配置文件方式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo nohup gunicorn 项目名.wsgi:application -c /home/xxx/xxx/gunicorn.conf.py&amp;</span>
</pre></td></tr></table></figure></p>
<ol>
<li>使用supervistor进程管理器<br>supervistor这个工具的用法这里就不在多讲，需要了解可以看我的另一篇博客<a href="http://earthchen.cn/2017/06/30/ubuntu_supervisor/">ubuntu下的进程控制系统—Supervisor</a>,也可以直接查看官方文档<br>用法可以参照我的配置文件:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line">[program:x508server]</span>
<span class="line"><span class="built_in">command</span>=gunicorn x508server.wsgi:application -b 0.0.0.0:8000  ; 被监控的进程路径</span>
<span class="line">directory=/home/webserver/web/WebServer/               ; 执行前要不要先<span class="built_in">cd</span>到目录$</span>
<span class="line">autostart=<span class="literal">true</span>                ; 随着supervisord的启动而启动</span>
<span class="line">autorestart=<span class="literal">true</span>              ; 自动重启。。当然要选上了</span>
<span class="line">startretries=10               ; 启动失败时的最多重试次数</span>
<span class="line">exitcodes=0                   ; 正常退出代码</span>
<span class="line">stopsignal=KILL               ; 用来杀死进程的信号</span>
<span class="line">stopwaitsecs=10               ; 发送SIGKILL前的等待时间</span>
<span class="line">redirect_stderr=<span class="literal">true</span>          ; 重定向stderr到stdout</span>
<span class="line">stdout_logfile=/home/webserver/web/logfile.log        ; 指定日志文件</span>
<span class="line">; 默认为 <span class="literal">false</span>，如果设置为 <span class="literal">true</span>，当进程收到 stop 信号时，会自动将该信号发给该进$</span>
<span class="line">stopasgroup=<span class="literal">true</span>             ; send stop signal to the UNIX process</span>
<span class="line">; 默认为 <span class="literal">false</span>，如果设置为 <span class="literal">true</span>，当进程收到 <span class="built_in">kill</span> 信号时，会自动将该信号发给该进$</span>
<span class="line">killasgroup=<span class="literal">true</span>             ; SIGKILL the UNIX process group (def <span class="literal">false</span>)</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h2 id="启动站点"><a href="#启动站点" class="headerlink" title="启动站点"></a>启动站点</h2><ol>
<li><p>加载nginx配置文件重启nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">$ sudo service nginx reload</span>
<span class="line">$ sudo service nginx restart </span>
<span class="line">//执行一种即可</span>
</pre></td></tr></table></figure>
</li>
<li><p>启动gunicorn</p>
</li>
</ol>
<ul>
<li><p>如果使用supervistor:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo supervisorctl reload</span>
</pre></td></tr></table></figure>
</li>
<li><p>如果使用nohup</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo nohup gunicorn 项目名.wsgi:application -b 127.0.0.1:8000&amp;</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h2 id="特殊配置"><a href="#特殊配置" class="headerlink" title="特殊配置"></a>特殊配置</h2><ol>
<li><p>在一些前后端分离项目，可能还需要配置前端静态页面，此时就不能将所有url都转发到django了，需要配置一个前缀，但此时，django自带的后台管理也会出现问题，建议配置一个/admin,所以，最后我的配置nginx文件如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
</pre></td><td class="code"><pre><span class="line">server &#123;</span>
<span class="line">    listen 80;</span>
<span class="line">    server_name 192.168.84.199;</span>
<span class="line">    server_name_in_redirect off;</span>
<span class="line">    access_log /home/webserver/web/nginx.access.log;</span>
<span class="line">    error_log /home/webserver/web/nginx.error.log;</span>
<span class="line"></span>
<span class="line">    index login.html;</span>
<span class="line">    root /home/webserver/web/html/WebHtml/;</span>
<span class="line"></span>
<span class="line">    location / &#123;</span>
<span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    location /apis &#123;</span>
<span class="line">        rewrite ^.+apis/?(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</span>
<span class="line">        proxy_pass http://127.0.0.1:8000;</span>
<span class="line">        proxy_pass_header       Authorization;</span>
<span class="line">        proxy_pass_header       WWW-Authenticate;</span>
<span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span>
<span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span>
<span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    location /admin &#123;</span>
<span class="line">        proxy_pass http://127.0.0.1:8000;</span>
<span class="line">        proxy_pass_header       Authorization;</span>
<span class="line">        proxy_pass_header       WWW-Authenticate;</span>
<span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span>
<span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span>
<span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    location /static/ &#123;</span>
<span class="line">        root /home/webserver/web/WebServer/;</span>
<span class="line">    &#125;</span>
</pre></td></tr></table></figure>
</li>
<li><p>收集使用的admin或者其他库含有的静态文件<br>在django项目的<strong>settings.py</strong>添加如下代码:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># 收集app静态文件到项目目录使nginx能访问到</span></span>
<span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">"static"</span>)</span>
<span class="line"></span>
<span class="line"><span class="comment"># 执行python manage.py collectstatic</span></span>
<span class="line">STATICFILES_FINDERS = (</span>
<span class="line">    <span class="string">"django.contrib.staticfiles.finders.FileSystemFinder"</span>,</span>
<span class="line">    <span class="string">"django.contrib.staticfiles.finders.AppDirectoriesFinder"</span></span>
<span class="line">)</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>然后在终端中进入项目目录在终端执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ python manage.py collectstatic</span>
</pre></td></tr></table></figure></p>
<p>将会自动将app中所含有的静态文件自动收集到项目的setting目录下，解决了某些app，比如admin在部署后找不到静态文件的现象</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中搭建测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu修复linux和windows双系统下挂载ntfs硬盘出错问题]]></title>
      <url>/2017/06/28/ubuntu%E4%BF%AE%E5%A4%8D%E4%B8%8D%E8%83%BD%E6%8C%82%E8%BD%BDNTFS%E7%A1%AC%E7%9B%98/</url>
      <content type="html"><![CDATA[<p>在windows和Ubuntu双系统下，在打开Windows后，在进入linux时，在去访问windows的ntfs分区经常会出现不能挂载问题，<br>出现 Error mounting /dev/sda8 at /media/my/XXX: Command-line `mount -t “ntfs” -o错误，以下给出对此的解决方案</p>
<a id="more"></a>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="安装ntfs-3g"><a href="#安装ntfs-3g" class="headerlink" title="安装ntfs-3g"></a>安装ntfs-3g</h3><p>在终端中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo apt-get install ntfs-3g</span>
</pre></td></tr></table></figure></p>
<h3 id="修复错误"><a href="#修复错误" class="headerlink" title="修复错误"></a>修复错误</h3><p>修复挂载错误的相应的分区如提示中的/dev/sda8，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo ntfsfix /dev/sda8</span>
</pre></td></tr></table></figure></p>
<p>基本上错误就可以解决</p>
<blockquote>
<p>注：修复windows系统盘的时候还是会失败，会提示Operation not permitted错误</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 解决方案 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[django使用django-crontab实现定时任务]]></title>
      <url>/2017/06/17/django_timing_task/</url>
      <content type="html"><![CDATA[<p>在做一个django项目的时候，我遇到了一个定时任务的需求，我这里是需要定时扫描数据库并发送邮件，在查阅相关资料后，总结出如下几个方法</p>
<ol>
<li>使用while创建一个死循环，判断时间，从而执行一些函数</li>
<li>使用APScheduler库实现定时任务 （详情可以见<a href="http://blog.csdn.net/hui3909/article/details/46652623）" target="_blank" rel="external">http://blog.csdn.net/hui3909/article/details/46652623）</a></li>
<li>django-crontab实现定时任务</li>
<li>django-celery实现定时任务</li>
</ol>
<h2 id="django-crontab实现定时任务"><a href="#django-crontab实现定时任务" class="headerlink" title="django-crontab实现定时任务"></a>django-crontab实现定时任务</h2><p>在我斟酌再三，最终还是选择了django-crontab这个方法，这个方法最契合我的需求，同时也相对简单，所以本文也就着重介绍一下</p>
<a id="more"></a>
<h3 id="django-crontab安装"><a href="#django-crontab安装" class="headerlink" title="django-crontab安装"></a>django-crontab安装</h3><h4 id="安装django-crontab库"><a href="#安装django-crontab库" class="headerlink" title="安装django-crontab库"></a>安装django-crontab库</h4><p>这里使用pip安装即可，在终端输入以下命令即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">pip install django-crontab</span>
</pre></td></tr></table></figure></p>
<h4 id="在工程里使用django-crontab"><a href="#在工程里使用django-crontab" class="headerlink" title="在工程里使用django-crontab"></a>在工程里使用django-crontab</h4><p>在django项目的<strong>settings.py</strong>的<strong>INSTALLED_APPS</strong>添加django-crontab<br><img src="http://objects.earthchen.cn/django_timing_task_django-crontab%E5%AE%89%E8%A3%85.png" alt="在app中加入django-crontab"><br>如图示即可</p>
<h3 id="django-crontab配置"><a href="#django-crontab配置" class="headerlink" title="django-crontab配置"></a>django-crontab配置</h3><p>django-crontab可以定时运行自定义命令和函数两种方式</p>
<h4 id="定时函数"><a href="#定时函数" class="headerlink" title="定时函数"></a>定时函数</h4><p>在django项目的<strong>settings.py</strong>中添加以下命令<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">CRONJOBS = (</span>
<span class="line">    (<span class="string">'*/1 * * * *'</span>, <span class="string">'你的app名.定时函数所在的py文件名.定时函数名'</span>),</span>
<span class="line">    (<span class="string">'0   0 1 * *'</span>, <span class="string">'你的app名.定时函数所在的py文件名.定时函数名'</span>, <span class="string">'&gt; 输出文件路径和名称'</span>),</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<ul>
<li>第一种的意思就是每一分钟执行一次你的定时函数</li>
<li>第二种时定时函数输出的内容到指定文件（如果该路径或文件不存在将会自动创建）</li>
</ul>
<h4 id="定时命令"><a href="#定时命令" class="headerlink" title="定时命令"></a>定时命令</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">CRONJOBS = (</span>
<span class="line">    (<span class="string">'10 12 * * *'</span>, <span class="string">'django.core.management.call_command'</span>, [<span class="string">'要执行的命令'</span>]),</span>
<span class="line">)</span>
</pre></td></tr></table></figure>
<ul>
<li>意思是在12点10分执行命令</li>
</ul>
<h3 id="定时任务的操作"><a href="#定时任务的操作" class="headerlink" title="定时任务的操作"></a>定时任务的操作</h3><ol>
<li>python manage.py crontab add　　添加定时任务</li>
<li>python manage.py crontab remove  清除定时任务</li>
<li>python manage.py crontab show   显示定时任务</li>
</ol>
<ul>
<li>当你添加了或者修改的定时任务，只需执行命令1即可</li>
<li>如果你想删除定时任务，请执行命令2</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>当定时任务执行时，如果你只是一些输出语句，那么你将看不到任何内容。请不要怀疑没有执行</li>
<li>上述环境在<strong>ubuntu16.04 lts</strong>  <strong>django1.9</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[django-rest-framework配置json web token进行接口的认证]]></title>
      <url>/2017/06/15/django_rest_framework_jwt/</url>
      <content type="html"><![CDATA[<p>使用django-rest-framework开发api并使用json web token进行身份验证<br>在这里使用django-rest-framework-jwt这个库来帮助我们简单的使用jwt进行身份验证<br>并解决一些前后端分离而产生的跨域问题</p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装django-rest-framework"><a href="#安装django-rest-framework" class="headerlink" title="安装django-rest-framework"></a>安装django-rest-framework</h4><p>现在接口一般都是restful风格,所以我们直接使用这个框架</p>
<ol>
<li><p>在终端输入以下命令安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">pip install djangorestframe</span>
</pre></td></tr></table></figure>
</li>
<li><p>在settings.py的INSTALLED_APPS中加入：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span>
<span class="line">    ...</span>
<span class="line">    <span class="string">'rest_framework'</span>,</span>
<span class="line">    <span class="string">'rest_framework.authtoken'</span>,  <span class="comment"># 设置token</span></span>
<span class="line">    ...</span>
<span class="line">]</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="安装django-rest-framework-jwt"><a href="#安装django-rest-framework-jwt" class="headerlink" title="安装django-rest-framework-jwt"></a>安装django-rest-framework-jwt</h4><p>安装jwt库，简单快速的生成我们所需要的token</p>
<ol>
<li><p>在终端输入以下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">pip install djangorestframework-jwt</span>
</pre></td></tr></table></figure>
</li>
<li><p>在你的settings.py，添加JSONWebTokenAuthentication到Django REST框架DEFAULT_AUTHENTICATION_CLASSES</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># django-rest-framework设置</span></span>
<span class="line">REST_FRAMEWORK = &#123;</span>
<span class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">10</span>,</span>
<span class="line"></span>
<span class="line">    <span class="comment"># 设置所有接口都需要被验证</span></span>
<span class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: (</span>
<span class="line">        <span class="string">'rest_framework.permissions.IsAuthenticated'</span>,</span>
<span class="line">    ),</span>
<span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span>
<span class="line">        <span class="string">'rest_framework_jwt.authentication.JSONWebTokenAuthentication'</span>,</span>
<span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span>
<span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span>
<span class="line">    ),</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装django-cors-headers"><a href="#安装django-cors-headers" class="headerlink" title="安装django-cors-headers"></a>安装django-cors-headers</h3><p>解决api跨域请求有好几种方法，比如（jsonp,在apache或nginx中设置，在请求头里设置），我们这里使用这个包来方便的跨域</p>
<ol>
<li>在终端输入如下命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">pip install django-cors-headers</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>2.配置settings.py文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span>
<span class="line">    ...</span>
<span class="line">    <span class="string">'corsheaders'</span>，</span>
<span class="line">    ...</span>
<span class="line"> ] </span>
<span class="line"></span>
<span class="line">MIDDLEWARE_CLASSES = (</span>
<span class="line">    ...</span>
<span class="line">    <span class="string">'corsheaders.middleware.CorsMiddleware'</span>,</span>
<span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>, <span class="comment"># 注意顺序</span></span>
<span class="line">    ...</span>
<span class="line">)</span>
<span class="line"></span>
<span class="line">CORS_ORIGIN_WHITELIST = (</span>
<span class="line">    <span class="comment">#'*'</span></span>
<span class="line">    <span class="string">'127.0.0.1:8080'</span>,<span class="comment"># 请求的域名</span></span>
<span class="line">    <span class="string">'localhost:8080'</span>,</span>
<span class="line">    <span class="string">'localhost'</span>,</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="后端配置"><a href="#后端配置" class="headerlink" title="后端配置"></a>后端配置</h4><ol>
<li>在setting里设置token的过期时间<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span>
<span class="line">JWT_AUTH = &#123;</span>
<span class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(seconds=<span class="number">300</span>),</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>当然还有很多其他相关设置，可以自己翻阅文档</p>
<ol>
<li><p>修改使用jwt验证的URL</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token</span>
<span class="line"></span>
<span class="line">url(<span class="string">r'^api-token-auth/'</span>, obtain_jwt_token),</span>
</pre></td></tr></table></figure>
</li>
<li><p>配置页面访问权限<br>按需设置访问权限，加上token之后基本上是不经过认证是不能查看或修改数据的</p>
</li>
</ol>
<h5 id="前端配置"><a href="#前端配置" class="headerlink" title="前端配置"></a>前端配置</h5><p>（在前端我们使用jQuery封装的ajax来操作get和post）</p>
<ol>
<li><p>使用post方法获取token并存入html的localStorage中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span>
<span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">post_test</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line">        $.post(<span class="string">"http://10.127.48.204:8000/api-token-auth/"</span>,&#123;</span>
<span class="line">            <span class="string">'username'</span>:<span class="string">'earthchen'</span>,</span>
<span class="line">            <span class="string">'password'</span>:<span class="string">'xxxxxxxx'</span></span>
<span class="line">        &#125;,</span>
<span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span>
<span class="line">            <span class="keyword">if</span>(result)&#123;</span>
<span class="line">                localStorage.token=result.token;  存入数据</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;)</span>
<span class="line">    &#125;</span>
<span class="line">&lt;<span class="regexp">/script&gt;</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>在请求数据时需要在头部添加token</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span>
<span class="line">    $.ajax(&#123;</span>
<span class="line">        <span class="attr">headers</span>:&#123;</span>
<span class="line">            <span class="string">'Authorization'</span>:<span class="string">'JWT '</span>+localStorage.token  <span class="comment">//注意：jwt后面有个空格</span></span>
<span class="line">        &#125;,</span>
<span class="line">        <span class="attr">type</span>:<span class="string">"get"</span>,</span>
<span class="line">        <span class="attr">url</span>:<span class="string">"http://10.127.48.204:8000/snippets/1/"</span>,</span>
<span class="line">        <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span>
<span class="line">           <span class="built_in">document</span>.write(result.style);</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;)</span>
<span class="line">&#125;</span>
<span class="line">&lt;script&gt;</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>存入的token如图所示<br><img src="http://objects.earthchen.cn/django-rest-framework-jwt-token.png" alt="django-rest-framework-jwt-token"></p>
<p>这时如果如果ajax请求不在head中带上token那将被禁止请求，会产生如图所示效果<br><img src="http://objects.earthchen.cn/django-rest-framework-jwt-no-token.png" alt="django-rest-framework-jwt-no-token"><br>所以在开发阶段，我们先应不让jwt拦截所有请求，这样对我们测试产生诸多不变</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong> <strong>django1.9</strong>中搭建测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring中的SpEL表达式]]></title>
      <url>/2017/06/12/spring_SpEL/</url>
      <content type="html"><![CDATA[<p>Spring 3引入了Spring表达式语言（ Spring Expression Language，SpEL），它能够以一种强大和简洁的方式将值装配到bean属性和构造器参数中，在这个过程中所使用的表达式会在运行时计算得到值</p>
<p>SpEL拥有很多特性，包括：</p>
<ul>
<li>使用bean的ID来引用bean</li>
<li>调用方法和访问对象的属性</li>
<li>对值进行算术、关系和逻辑运算</li>
<li>正则表达式匹配</li>
<li>集合操作</li>
</ul>
<a id="more"></a>
<h2 id="SpEL基础表达式"><a href="#SpEL基础表达式" class="headerlink" title="SpEL基础表达式"></a>SpEL基础表达式</h2><h3 id="表示字面值"><a href="#表示字面值" class="headerlink" title="表示字面值"></a>表示字面值</h3><h4 id="表示是浮点值"><a href="#表示是浮点值" class="headerlink" title="表示是浮点值"></a>表示是浮点值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;3.1415&#125;</span></span>
</pre></td></tr></table></figure>
<p>数值还可以使用科学记数法的方式进行表示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;9.87E4&#125;</span></span>
</pre></td></tr></table></figure></p>
<p>表达式计算得到的值就是98,700</p>
<h4 id="用来计算String类型的字面值"><a href="#用来计算String类型的字面值" class="headerlink" title="用来计算String类型的字面值"></a>用来计算String类型的字面值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;'HELLO'&#125;</span></span>
</pre></td></tr></table></figure>
<h4 id="字面值true和false的计算结果就是它们对应的Boolean类型的值"><a href="#字面值true和false的计算结果就是它们对应的Boolean类型的值" class="headerlink" title="字面值true和false的计算结果就是它们对应的Boolean类型的值"></a>字面值true和false的计算结果就是它们对应的Boolean类型的值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;flase&#125;</span></span>
</pre></td></tr></table></figure>
<h3 id="引用bean、属性和方法"><a href="#引用bean、属性和方法" class="headerlink" title="引用bean、属性和方法"></a>引用bean、属性和方法</h3><p>SpEL所能做的另外一件基础的事情就是通过ID引用其他的bean。例如，你可以使用SpEL将一个bean装配到另外一个bean的属性中</p>
<h4 id="使用bean-ID作为SpEL表达式"><a href="#使用bean-ID作为SpEL表达式" class="headerlink" title="使用bean ID作为SpEL表达式"></a>使用bean ID作为SpEL表达式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;sgtPeppers&#125;</span></span>
</pre></td></tr></table></figure>
<blockquote>
<p>sgtPeppers为beanID</p>
</blockquote>
<h4 id="引用sgtPeppers的artist属性"><a href="#引用sgtPeppers的artist属性" class="headerlink" title="引用sgtPeppers的artist属性"></a>引用sgtPeppers的artist属性</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;sgtPeppers.artist&#125;</span></span>
</pre></td></tr></table></figure>
<blockquote>
<p>引用了一个ID为sgtPeppers的bean，分割符之后是对artist属性的引用</p>
</blockquote>
<h4 id="调用-artistSelector的selectArtist-方法"><a href="#调用-artistSelector的selectArtist-方法" class="headerlink" title="调用 artistSelector的selectArtist()方法"></a>调用 artistSelector的selectArtist()方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;artistSelector.selectArtist()&#125;</span></span>
</pre></td></tr></table></figure>
<blockquote>
<p>引用了一个ID为artistSelector的bean，调用bean的selectArtist()方法</p>
</blockquote>
<p>对于被调用方法的返回值来说，我们同样可以调用它的方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;artistSelector.selectArtist().toUpperCase()&#125;</span></span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>如果selectArtist()方法返回的是一个String，那么可以调<br>用toUpperCase()将字符串全部改成大写</p>
</blockquote>
<p>如果selectArtist()的返回值是null的话，将会出现NullPointerException异常，我们可以使用类型安全的运算符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;artistSelector.selectArtist()?.toUpperCase()&#125;</span></span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>与之前只是使用点号（ .）来访问toUpperCase()方法不同，现在我们使用了“?.”运算符。这个运算符能够在访问它右边的内容之前，确保它所对应的元素不是null。所以，如果selectArtist()的返回值是null的话，那么SpEL将不会调用toUpperCase()方法。表达式的返回值会是null</p>
</blockquote>
<h3 id="在表达式中使用类型"><a href="#在表达式中使用类型" class="headerlink" title="在表达式中使用类型"></a>在表达式中使用类型</h3><blockquote>
<p>如果要在SpEL中访问类作用域的方法和常量的话，要依赖T()这个关键的运算符</p>
</blockquote>
<h4 id="为了在SpEL中表达Java的Math类，需要按照如下的方式使用T-运算符"><a href="#为了在SpEL中表达Java的Math类，需要按照如下的方式使用T-运算符" class="headerlink" title="为了在SpEL中表达Java的Math类，需要按照如下的方式使用T()运算符"></a>为了在SpEL中表达Java的Math类，需要按照如下的方式使用T()运算符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">T(java.lang.Math).PI</span>
</pre></td></tr></table></figure>
<blockquote>
<p>将PI值装配到bean属性中</p>
</blockquote>
<h4 id="可以调用T-运算符所得到类型的静态方法"><a href="#可以调用T-运算符所得到类型的静态方法" class="headerlink" title="可以调用T()运算符所得到类型的静态方法:"></a>可以调用T()运算符所得到类型的静态方法:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">T(java.lang.Math).random()</span>
</pre></td></tr></table></figure>
<blockquote>
<p>计算得到一个0到1之间的随机数</p>
</blockquote>
<h3 id="SpEL运算符"><a href="#SpEL运算符" class="headerlink" title="SpEL运算符"></a>SpEL运算符</h3><p>将简单的表达式组合为更为复杂的表达式</p>
<h4 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;T(java.lang.Math).PI  * circle.radius ^ 2&#125;</span></span>
</pre></td></tr></table></figure>
<blockquote>
<ul>
<li>计算了circle bean中所定义圆的面积</li>
<li>当使用String类型的值时， “+”运算符执行的是连接操作，与在Java中是一样的</li>
</ul>
</blockquote>
<h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;counter.total == 100&#125;</span></span>
<span class="line"><span class="comment">#&#123;counter.total eq 100&#125;</span></span>
</pre></td></tr></table></figure>
<blockquote>
<ul>
<li>要比较两个数字是不是相等，可以使用双等号运算符</li>
<li>也可以使用文本型的eq运算符</li>
<li>表达式的计算结果是个Boolean值</li>
</ul>
</blockquote>
<h3 id="三元运算符（-ternary）"><a href="#三元运算符（-ternary）" class="headerlink" title="三元运算符（ ternary）"></a>三元运算符（ ternary）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;scoreboard.score &gt; 1000 ? "winner" : "loser"&#125;</span></span>
</pre></td></tr></table></figure>
<blockquote>
<p>判断如果scoreboard.score&gt;1000的话，计算结果为String类的“Winner！ ”，否则的话，结果为Loser</p>
</blockquote>
<p> 三元运算符的一个常见场景就是检查null值，并用一个默认值来替代null<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;disc.title ?: 'Rattleand Hum'&#125;</span></span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>会判断disc.title的值是不是null，如果是null的话，那么表达式的计算结果就会是“Rattleand Hum”</p>
</blockquote>
<h3 id="计算正则表达式"><a href="#计算正则表达式" class="headerlink" title="计算正则表达式"></a>计算正则表达式</h3><p>当处理文本时，有时检查文本是否匹配某种模式是非常有用的。SpEL通过matches运算符支持表达式中的模式匹配。 matches运算<br>符对String类型的文本（作为左边参数）应用正则表达式（作为右边参数）。 matches的运算结果会返回一个Boolean类型的值：如果与<br>正则表达式相匹配，则返回true；否则返回false<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;admin.email matches '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9._%+-]+\\.com'&#125;</span></span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>判断一个字符串是否包含有效的邮件地址</p>
</blockquote>
<h3 id="计算集合"><a href="#计算集合" class="headerlink" title="计算集合"></a>计算集合</h3><h4 id="引用列表中的一个元素"><a href="#引用列表中的一个元素" class="headerlink" title="引用列表中的一个元素"></a>引用列表中的一个元素</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;jukebox.song[4].title&#125;</span></span>
</pre></td></tr></table></figure>
<blockquote>
<p>计算songs集合中第五个（基于零开始）元素的title属性，这个集合来源于ID为jukebox bean</p>
<h4 id="从jukebox中随机选择"><a href="#从jukebox中随机选择" class="headerlink" title="从jukebox中随机选择"></a>从jukebox中随机选择</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;jukebox.song [T(java.lang.Math).random()  * jukebox.songs.size() ].title&#125;</span></span>
</pre></td></tr></table></figure>
</blockquote>
<p>“[]”运算符用来从集合或数组中按照索引获取元素，实际上，它还可以从String中获取一个字符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;'this is a test' [3]&#125;</span></span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>引用了String中的第四个（基于零开始）字符，也就是“s”</p>
</blockquote>
<h4 id="查询运算符（-）"><a href="#查询运算符（-）" class="headerlink" title="查询运算符（ .?[]）"></a>查询运算符（ .?[]）</h4><p>用来对集合进行过滤，得到集合的一个子集<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;jukebox.songs.?[artist eq 'Aerosmith']&#125;</span></span>
</pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>希望得到jukebox中artist属性为Aerosmith的所有歌曲,选择运算符在它的方括号中接受另一个表达式。当SpEL迭代歌曲列表的时候，会对歌曲集合中的每一个条目计算这个表达式。如果表达式的计算结果为true的话，那么条目会放到新的集合中。否则的话，它就不会放到新集合中。在本例中，内部的表达式会检查歌曲的artist属性是不是等于Aerosmith</li>
<li>“.^[]”和“.$[]”，它们分别用来在集合中查询第一个匹配项和最后一个匹配项</li>
<li>投影运算符（ .![]），它会从集合的每个成员中选择特定的属性放到另外一个集合中</li>
</ul>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[django-rest-framework框架学习]]></title>
      <url>/2017/06/12/django_rest_framework_study/</url>
      <content type="html"><![CDATA[<p>现在新一代web应用都开始采用前后端分离的方式来进行，淘汰了以前的服务器端渲染的方式。前后端分离方式有许多好处，比如<br>1、可以前后端并行开发，提高开发效率<br>2、页面都在客户端进行渲染，提高了渲染速度，减小了服务器的压力<br>3、一套api提供给多个客户端使用，而且不限制客户端的类型（web，app均可）</p>
<p>提到前后端分离必然会提到restful，目标这是最流行的接口规范，想要了解的可以去<a href="http://www.ruanyifeng.com/blog/2011/09/restful" target="_blank" rel="external">阮老师的博客</a>看一下<br>越来越多的大型应用开始使用restful规范，restful强调一种无状态，资源的方式<br>在django中很著名的一个框架是django-rest-framework，帮我们减少了很多工作量，尤其在序列化与反序列化成我们需要的格式帮了我们省了很多事<br>在这里就记录一下个人的学习过程</p>
<h2 id="django-rest-framework"><a href="#django-rest-framework" class="headerlink" title="django-rest-framework"></a>django-rest-framework</h2><a id="more"></a>
<h3 id="实现一组api的基本流程"><a href="#实现一组api的基本流程" class="headerlink" title="实现一组api的基本流程"></a>实现一组api的基本流程</h3><ol>
<li>在<strong>models.py</strong>中创建自己需要的数据模型</li>
<li>创建<strong>serializers.py</strong>在其中写出适合的serializer类，能够正确的序列化与反序列化</li>
<li>在<strong>views.py</strong>中写出合适的api类，只需要继承<strong>rest_framework</strong>中<strong>generics</strong>中的某个类，重写我们需要的方法实现合适的逻辑即可</li>
<li>在<strong>urls.py</strong>中配置所需要的url</li>
</ol>
<h3 id="一组api的demo"><a href="#一组api的demo" class="headerlink" title="一组api的demo"></a>一组api的demo</h3><h4 id="创建一个model"><a href="#创建一个model" class="headerlink" title="创建一个model"></a>创建一个model</h4><p>在创建好的app下的<strong>model.py</strong>中创建一个student模型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span>
<span class="line">    student_id = models.IntegerField()</span>
<span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span>
<span class="line">    age = models.IntegerField()</span>
</pre></td></tr></table></figure></p>
<p>例子很简单，三个字段，分别表示学号，姓名，年龄</p>
<p>然后同步数据库，在数据库中创建表<br>在终端中输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span>
<span class="line"></span>
<span class="line">python manage.py migrate</span>
</pre></td></tr></table></figure></p>
<p>在数据库里插入几条测试数据后如图所示<br><img src="http://objects.earthchen.cn/django_rest_framework_study_student_model.png" alt="django_rest_framework_study_student_model"></p>
<h4 id="实现序列化类"><a href="#实现序列化类" class="headerlink" title="实现序列化类"></a>实现序列化类</h4><p>官方文档：<a href="http://www.django-rest-framework.org/api-guide/serializers/" target="_blank" rel="external">http://www.django-rest-framework.org/api-guide/serializers/</a><br>创建<strong>serializers.py</strong>在其中实现序列化类<br>由于这个序列化是和我们的模型想对应的相关，所以可以直接继承<strong>serializers.ModelSerializer</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span>
<span class="line"></span>
<span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span>
<span class="line">        model = Student</span>
<span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'student_id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>)</span>
</pre></td></tr></table></figure></p>
<p>其他相关的参数可以查阅官方文档，都有详细的介绍<br>这里我们只简单的显示所有的字段</p>
<h4 id="实现视图api类"><a href="#实现视图api类" class="headerlink" title="实现视图api类"></a>实现视图api类</h4><p>官方文档： <a href="http://www.django-rest-framework.org/api-guide/generic-views/" target="_blank" rel="external">http://www.django-rest-framework.org/api-guide/generic-views/</a></p>
<p>在这里只需要继承相关的类，复写父类方法即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># 学生列表</span></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentList</span><span class="params">(generics.ListCreateAPIView)</span>:</span></span>
<span class="line">    queryset = Student.objects.all()</span>
<span class="line">    serializer_class = StudentSerializer</span>
<span class="line"></span>
<span class="line">    <span class="comment"># 创建一个student</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span>
<span class="line">        serializer = StudentSerializer(data=request.data)</span>
<span class="line">        <span class="keyword">if</span> serializer.is_valid():</span>
<span class="line">            serializer.save()</span>
<span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span>
<span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span>
<span class="line">        </span>
<span class="line"><span class="comment"># 单个学生</span></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDetail</span><span class="params">(generics.RetrieveUpdateAPIView)</span>:</span></span>
<span class="line">    serializer_class = StudentSerializer</span>
<span class="line">    queryset = Student.objects.all()</span>
<span class="line">    lookup_field = <span class="string">'name'</span></span>
<span class="line"></span>
<span class="line">    <span class="comment"># 得到一个数据集</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span>
<span class="line">        <span class="keyword">return</span> Student.objects.filter(name=self.kwargs[<span class="string">'name'</span>])</span>
<span class="line"></span>
<span class="line">    <span class="comment"># get方法返回一个student</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span>
<span class="line">        <span class="comment"># 获取url中的参数</span></span>
<span class="line">        <span class="comment"># http://127.0.0.1:8000/api/students/aaa/?test=123</span></span>
<span class="line">        <span class="comment"># 取test的值</span></span>
<span class="line">        print(self.request.GET.get(<span class="string">'test'</span>, <span class="keyword">None</span>))</span>
<span class="line"></span>
<span class="line">        queryset = self.get_queryset()</span>
<span class="line">        serializer = StudentSerializer(queryset, many=<span class="keyword">True</span>)</span>
<span class="line">        <span class="keyword">return</span> Response(&#123;</span>
<span class="line">            <span class="string">'data'</span>: serializer.data,</span>
<span class="line">            <span class="comment">#'sorce': StudentSorceSerializer(StudentSorce.objects.all(), many=True).data</span></span>
<span class="line">        &#125;)</span>
<span class="line"></span>
<span class="line">    <span class="comment"># 更新某一个学生的信息</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span>
<span class="line">        <span class="keyword">pass</span></span>
</pre></td></tr></table></figure></p>
<p>其实默认最少只要实现两个参数或方法即可<strong>queryset</strong>和<strong>serializer_class</strong><br>但很多时候逻辑需要自己处理，必须按照自己的逻辑去复写父类属性<br>在get方法中的self.request.GET.get(‘test’, None)是取出get方法传递的参数<br>lookup_field 应用于执行单个模型实例的对象查找的模型字段。默认为’pk’。请注意，使用超链接的API时，您需要确保双方的API意见和串行类设置查找字段，如果你需要使用一个自定义值<br>在get_queryset()中实现的是按照name查询的，因为很多时候客户端并不知道自己的id是多少，<br><strong>serializer.data</strong>是对模型序列化成的字典，如果想拼成需要的格式，需要提前构造合适的字典，在用Response()方法帮我们序列化成json类型</p>
<h4 id="在urls中自定义资源的url"><a href="#在urls中自定义资源的url" class="headerlink" title="在urls中自定义资源的url"></a>在urls中自定义资源的url</h4><p>在<strong>urls.py</strong>中输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span>
<span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> StudentList, StudentDetail</span>
<span class="line"></span>
<span class="line">urlpatterns = [</span>
<span class="line">    url(<span class="string">r'students/$'</span>, StudentList.as_view()),</span>
<span class="line">    url(<span class="string">r'students/(?P&lt;name&gt;[a-zA-Z]+)/$'</span>, StudentDetail.as_view()),</span>
<span class="line">]</span>
</pre></td></tr></table></figure></p>
<p>分别配置好对列表和单个的url</p>
<p>然后运行项目就可以看到我们需要的数据</p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>在原来的基础上进行了扩展，在显示学生信息的基础上，我们还想显示该名学生的成绩<br>所以新的<strong>model.py</strong>为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span>
<span class="line">    student_id = models.IntegerField()</span>
<span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span>
<span class="line">    age = models.IntegerField()</span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentSorce</span><span class="params">(models.Model)</span>:</span></span>
<span class="line">    student_id = models.IntegerField()</span>
<span class="line">    math = models.FloatField()</span>
<span class="line">    english = models.FloatField()</span>
<span class="line">    chiness = models.FloatField()</span>
</pre></td></tr></table></figure></p>
<p>我们在这里没有使用外键，毕竟现在很多大牛说不使用外键，在应用中控制逻辑嘛<br>当然这里也可以使用models.ForeignKey,会让操作变得更简单的一点</p>
<p><strong>serializers.py</strong>为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
</pre></td><td class="code"><pre><span class="line">from rest_framework import serializers</span>
<span class="line">from api.models import Student, StudentSorce</span>
<span class="line"></span>
<span class="line">class StudentSorceSerializer(serializers.ModelSerializer):</span>
<span class="line">    avg = serializers.SerializerMethodField(&apos;get_avg_sorce&apos;)</span>
<span class="line"></span>
<span class="line">    class Meta:</span>
<span class="line">        model = StudentSorce</span>
<span class="line">        fields = (&apos;math&apos;, &apos;english&apos;, &apos;chiness&apos;, &apos;avg&apos;)</span>
<span class="line">    # 自定义方法构造的字段(计算成绩的平均值)</span>
<span class="line">    def get_avg_sorce(self, obj):</span>
<span class="line">        return (obj.math + obj.english + obj.chiness) / 3.0</span>
<span class="line"></span>
<span class="line">class StudentSerializer(serializers.ModelSerializer):</span>
<span class="line">    sorce = serializers.SerializerMethodField(&apos;get_student_sorce&apos;)</span>
<span class="line"></span>
<span class="line">    class Meta:</span>
<span class="line">        model = Student</span>
<span class="line">        fields = (&apos;id&apos;, &apos;student_id&apos;, &apos;name&apos;, &apos;age&apos;, &apos;sorce&apos;)</span>
<span class="line">    # 使用学号查出该学生的成绩</span>
<span class="line">    def get_student_sorce(self, obj):</span>
<span class="line">        print obj.student_id</span>
<span class="line">        return StudentSorceSerializer(StudentSorce.objects.filter(student_id=obj.student_id), many=True).data</span>
</pre></td></tr></table></figure></p>
<p><strong>views.py</strong>为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span>
<span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span>
<span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span>
<span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span>
<span class="line"><span class="keyword">from</span> api.serializers <span class="keyword">import</span> StudentSerializer</span>
<span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Student, StudentSorce</span>
<span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span>
<span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span>
<span class="line"><span class="keyword">from</span> api.serializers <span class="keyword">import</span> StudentSorceSerializer</span>
<span class="line"></span>
<span class="line"><span class="comment"># 学生列表</span></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentList</span><span class="params">(generics.ListCreateAPIView)</span>:</span></span>
<span class="line">    queryset = Student.objects.all()</span>
<span class="line">    serializer_class = StudentSerializer</span>
<span class="line"></span>
<span class="line">    <span class="comment"># 创建一个student</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span>
<span class="line">        serializer = StudentSerializer(data=request.data)</span>
<span class="line">        <span class="keyword">if</span> serializer.is_valid():</span>
<span class="line">            serializer.save()</span>
<span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span>
<span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span>
<span class="line"></span>
<span class="line">    <span class="string">'''</span>
<span class="line">    def list(self, request, *args, **kwargs):</span>
<span class="line">        print('list')</span>
<span class="line">        return Response(StudentSerializer(Student.objects.filter(student_id__gt=102), many=True).data)</span>
<span class="line">        '''</span></span>
<span class="line"></span>
<span class="line"><span class="comment"># 单个学生</span></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDetail</span><span class="params">(generics.RetrieveUpdateAPIView)</span>:</span></span>
<span class="line">    serializer_class = StudentSerializer</span>
<span class="line">    queryset = Student.objects.all()</span>
<span class="line">    lookup_field = <span class="string">'name'</span></span>
<span class="line"></span>
<span class="line">    <span class="comment"># 得到一个数据集</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span>
<span class="line">        <span class="keyword">return</span> Student.objects.filter(name=self.kwargs[<span class="string">'name'</span>])</span>
<span class="line"></span>
<span class="line">    <span class="comment"># get方法返回一个student</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span>
<span class="line">        <span class="comment"># 获取url中的参数</span></span>
<span class="line">        <span class="comment"># http://127.0.0.1:8000/api/students/aaa/?test=123</span></span>
<span class="line">        <span class="comment"># 取test的值</span></span>
<span class="line">        print(self.request.GET.get(<span class="string">'test'</span>, <span class="keyword">None</span>))</span>
<span class="line"></span>
<span class="line">        queryset = self.get_queryset()</span>
<span class="line">        serializer = StudentSerializer(queryset, many=<span class="keyword">True</span>)</span>
<span class="line">        <span class="keyword">return</span> Response(&#123;</span>
<span class="line">            <span class="string">'data'</span>: serializer.data,</span>
<span class="line">            <span class="string">'sorce'</span>: StudentSorceSerializer(StudentSorce.objects.all(), many=<span class="keyword">True</span>).data</span>
<span class="line">        &#125;)</span>
<span class="line"></span>
<span class="line">    <span class="comment"># 更新某一个学生的信息</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span>
<span class="line">        <span class="keyword">pass</span></span>
</pre></td></tr></table></figure></p>
<p>访问<a href="http://127.0.0.1:8000/api/students/的结果为：" target="_blank" rel="external">http://127.0.0.1:8000/api/students/的结果为：</a><br><img src="http://objects.earthchen.cn/django_rest_framwork_study_listresult.png" alt="django_rest_framwork_study_listresult"><br>访问<a href="http://127.0.0.1:8000/api/students/aaa/的结果为：" target="_blank" rel="external">http://127.0.0.1:8000/api/students/aaa/的结果为：</a><br><img src="http://objects.earthchen.cn/django_rest_framework_study_detailresult.png" alt="django_rest_framework_study_detailresult"></p>
<h3 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h3><p>官方文档：<a href="http://www.django-rest-framework.org/api-guide/serializers/" target="_blank" rel="external">http://www.django-rest-framework.org/api-guide/serializers/</a><br>在这里我们使用django自带的auth模块<br>只需要修改serializer.py和view.py和urls.py三个文件即可<br><strong>serializers.py</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span>
<span class="line"><span class="keyword">import</span> re</span>
<span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span>
<span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountFrom</span><span class="params">(object)</span>:</span></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, email, username, password, repeat_password)</span>:</span></span>
<span class="line">        self.email = email</span>
<span class="line">        self.username = username</span>
<span class="line">        self.password = password</span>
<span class="line">        self.repeat_password = repeat_password</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span>
<span class="line">    email = serializers.EmailField()</span>
<span class="line">    username = serializers.CharField()</span>
<span class="line">    password = serializers.CharField()</span>
<span class="line">    repeat_password = serializers.CharField()</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span></span>
<span class="line">        User.objects.create_user(username=validated_data.get(<span class="string">'username'</span>),</span>
<span class="line">                                 email=validated_data.get(<span class="string">'email'</span>),</span>
<span class="line">                                 password=validated_data.get(<span class="string">'password'</span>))</span>
<span class="line">        <span class="keyword">return</span> AccountFrom(username=validated_data.get(<span class="string">'username'</span>),</span>
<span class="line">                           email=validated_data.get(<span class="string">'email'</span>),</span>
<span class="line">                           password=validated_data.get(<span class="string">'password'</span>),</span>
<span class="line">                           repeat_password=validated_data.get(<span class="string">'repeat_password'</span>))</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, instance, validated_data)</span>:</span></span>
<span class="line">        instance.email = validated_data.get(<span class="string">'email'</span>, instance.email)</span>
<span class="line">        instance.username = validated_data.get(<span class="string">'username'</span>, instance.username)</span>
<span class="line">        instance.password = validated_data.get(<span class="string">'password'</span>, instance.password)</span>
<span class="line">        <span class="comment"># User.objects.update()</span></span>
<span class="line">        instance.save()</span>
<span class="line">        <span class="keyword">return</span> instance</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_email</span><span class="params">(self, value)</span>:</span></span>
<span class="line">        <span class="keyword">try</span>:</span>
<span class="line">            result_email = User.objects.get(email=value)</span>
<span class="line">        <span class="keyword">except</span> User.DoesNotExist:</span>
<span class="line">            <span class="keyword">return</span> value</span>
<span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">'该邮箱已注册'</span>)</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_password</span><span class="params">(self, value)</span>:</span></span>
<span class="line">        self.password = value</span>
<span class="line">        <span class="keyword">if</span> re.match(<span class="string">'^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]&#123;6,20&#125;$'</span>, value):</span>
<span class="line">            <span class="keyword">return</span> value</span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">'密码必须由6-20个字母和数字组成'</span>)</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_repeat_password</span><span class="params">(self, value)</span>:</span></span>
<span class="line">        self.repeat_password = value</span>
<span class="line">        <span class="keyword">if</span> self.password <span class="keyword">and</span> value <span class="keyword">and</span> self.password != value:</span>
<span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"两次输入的值不相同"</span>)</span>
<span class="line">        <span class="keyword">return</span> value</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_username</span><span class="params">(self, value)</span>:</span></span>
<span class="line">        <span class="keyword">if</span> re.match(<span class="string">"^[A-Za-z][A-Za-z0-9_.]*$"</span>, value):</span>
<span class="line">            <span class="keyword">return</span> value</span>
<span class="line">        <span class="keyword">else</span>:</span>
<span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"用户名只能有数字字母下划线组成"</span>)</span>
</pre></td></tr></table></figure></p>
<p>以validate_开头后面接字段名的函数均为验证函数，如果不符合验证规则，将返回异常信息</p>
<p><strong>views.py</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册模块</span></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountDetail</span><span class="params">(generics.CreateAPIView)</span>:</span></span>
<span class="line">    serializer_class = AccountSerializer</span>
<span class="line">    queryset = User.objects.all()</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span>
<span class="line">        serializer = AccountSerializer(data=request.data, partial=<span class="keyword">True</span>)</span>
<span class="line">        <span class="keyword">if</span> serializer.is_valid():</span>
<span class="line">            serializer.save()</span>
<span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span>
<span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span>
</pre></td></tr></table></figure></p>
<p>继承generics.CreateAPIView只允许http的post方法<br>这里只简单实现了用户注册</p>
<p><strong>url.py</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">urlpatterns = [</span>
<span class="line">    url(<span class="string">r'register/$'</span>, AccountDetail.as_view()),</span>
<span class="line">]</span>
</pre></td></tr></table></figure></p>
<p>访问<a href="http://127.0.0.1:8000/account/register，提供合法的email、username、password、repeat_password将会创建一个账户" target="_blank" rel="external">http://127.0.0.1:8000/account/register，提供合法的email、username、password、repeat_password将会创建一个账户</a></p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong> <strong>django1.9</strong> <strong>djangorestframework3.6.2</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git学习笔记]]></title>
      <url>/2017/06/08/git_study/</url>
      <content type="html"><![CDATA[<p>git是目前好用的版本控制系统，本文记录一下笔者的git学习过程<br>注册github和安装git这个就不多说了</p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><a id="more"></a>
<h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>也就是我们需要被git管理起来的项目或文件</p>
<ol>
<li><p>在终端使用cd进入需要被管理的目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> study/git_learn</span>
</pre></td></tr></table></figure>
</li>
<li><p>创建版本仓库 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git init</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>成功之后执行<strong>ls -al</strong>将能看到目录下多了一个.git隐藏文件夹<br><img src="http://objects.earthchen.cn/git_study_%E5%88%9B%E5%BB%BA%E7%89%88%E6%9C%AC%E5%BA%93.png" alt="git_study_创建版本库"></p>
<ol>
<li><p>创建文件添加到仓库<br>创建一个<strong>readme.txt</strong>随便写入一些内容并添加到仓库中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">$ vim readme.txt</span>
<span class="line">$ git add readme.txt</span>
</pre></td></tr></table></figure>
</li>
<li><p>把文件提交到仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"添加一个readme文件"</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>完成上面两部就完成了文件添加到仓库<br><img src="http://objects.earthchen.cn/git_study_%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%88%B0%E7%89%88%E6%9C%AC%E5%BA%93.png" alt="git_study_添加文件到版本库"></p>
<h3 id="版本更新与回退"><a href="#版本更新与回退" class="headerlink" title="版本更新与回退"></a>版本更新与回退</h3><h4 id="查看状态和差异"><a href="#查看状态和差异" class="headerlink" title="查看状态和差异"></a>查看状态和差异</h4><ol>
<li><p>使用<strong>git status</strong>创建当前仓库的状态<br>先对创建的readme.txt进行一些修改，在在终端执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git status</span>
</pre></td></tr></table></figure>
</li>
<li><p>使用<strong>git diff</strong>查看差异</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git diff</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://objects.earthchen.cn/git_study_%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E4%B8%8E%E5%B7%AE%E5%BC%82.png" alt="git_study_查看状态和差异"></p>
<h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><ol>
<li><p>对之前的修改进行提交</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span>
<span class="line">$ git commit -m <span class="string">"对readme进行修改"</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>使用<strong>git log</strong>查看操作的历史记录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://objects.earthchen.cn/git_study_%E6%9F%A5%E7%9C%8B%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95.png" alt="git_study_查看历史记录"></p>
<ol>
<li>使用<strong>git reset</strong>回到上一个版本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>回到上上个版本就是<strong>HEAD^^</strong><br>回到n个版本就是<strong>HEAD~n</strong></p>
<ol>
<li><p>根据<strong>commit id</strong>到达指定版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git reset --hard 576e22b9</span>
</pre></td></tr></table></figure>
</li>
<li><p>使用<strong>git reflog</strong>查看每一次记录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git reflog</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://objects.earthchen.cn/git_study_%E5%8F%98%E6%9B%B4%E7%89%88%E6%9C%AC.png" alt="git_study_变更版本"></p>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>使用<strong>git rm</strong>删除文件和工作区中的文件<br>如果真的要删除文件和工作区里的文件需执行<strong>git rm</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">$ rm test.txt</span>
<span class="line">$ git rm test.txt</span>
</pre></td></tr></table></figure></p>
<p><img src="http://objects.earthchen.cn/git_study_%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6.png" alt="git_study_删除文件"></p>
<h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>创建秘钥和远程仓库的过程在这里就不多说了</p>
<h4 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h4><ol>
<li>使用<strong>git remote</strong>关联远程仓库<br>在本地的仓库目录下输入以下命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git remote add git_leran git@github.com:EarthChen/git_learn.git</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>很多教程里面写的是<strong>add origin</strong>又没解释一下，容易让人误解，以为所有远程仓库都是这一个名字，当你管理不止一个远程仓库时，就会产生冲突了<br>还是说清楚比较好，这里的名字只是远程仓库的一个别名，需注意</p>
<ol>
<li>使用<strong>git push</strong>命令推送到远程库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git push -u git_learn master</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>在github上创建仓库时，一般都会选择创建一个readme.md文件，此时远程仓库和本地就不同步，需先执行一下<strong>git pull</strong>命令<br>可以看到在推送的时候加上了<strong>git push -u</strong>参数，此时Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令</p>
<p>在以后的提交中，就只需要使用<strong>git push git_learn master</strong>就可以进行推送了<br><img src="http://objects.earthchen.cn/git_study_%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="git_study_添加远程仓库"></p>
<h4 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h4><p>使用<strong>git clone</strong>命令进行克隆<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:EarthChen/git_learn.git</span>
</pre></td></tr></table></figure></p>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><ol>
<li>使用<strong>git checkout</strong>命令创建并切换到分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>加上参数-b表示创建一个名为dev的分支，病切换到这个分支<br>在dev上进行一些操作并提交</p>
<ol>
<li>使用<strong>git branch</strong>命令查看分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git branch</span>
</pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>前面有*的为当前分支</li>
</ul>
<ol>
<li>使用<strong>git merge</strong>命令合并分支<br>先切换回master分支，然后合并分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git merge dev</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>将dev分支和master分支合并</p>
<ol>
<li>使用<strong>git branch -d</strong>删除分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git merge dev</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>删除dev分支<br><img src="http://objects.earthchen.cn/git_study_%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C.png" alt="git_study_分支操作"></p>
<ol>
<li>强制禁用Fast forward模式合并分支<br>Git会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息<br>首先需要创建一个新的分支，子啊这个新的分支里面进行一些操作，病提交，然后切换回master分支</li>
</ol>
<p>使用禁用Fast forward模式合并分支<br>准备合并dev分支，请注意–no-ff参数，表示禁用Fast forward：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev</span>
</pre></td></tr></table></figure></p>
<p>因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去<br>然后使用<strong>git log</strong>查看分支历史<br><img src="http://objects.earthchen.cn/git_study_%E7%A6%81%E7%94%A8Fast_forward.png" alt="git_study_禁用Fast_forward"></p>
<h4 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h4><p>这个分支的意义就是添加一些新功能时，创建一个新分支，在新分支上实现功能，最后在合并到master分支</p>
<ol>
<li>创建新分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-vulcan</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>切换回dev分支</p>
<ol>
<li>在未合并分支前就要删除分支<br>使用<strong>git branch -D <name></name></strong>强行删除分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git branch -D feature-vulcan</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://objects.earthchen.cn/git_study_Feature%E5%88%86%E6%94%AF.png" alt="git_study_Feature分支"></p>
<h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><ol>
<li>使用<strong>git tag tag_name</strong>命令创建标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git tag v1.0</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>git tag后面不加参数就可以查看标签<br>默认标签是打在最新提交的commit上的<br>也可以指定标签打在的位置（commit）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git tag v0.9</span>
</pre></td></tr></table></figure></p>
<ol>
<li>使用<strong>git tag -d</strong>删除标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ git tag v1.0</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h3 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h3><ol>
<li>创建.gitignore文件，填写忽略文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># Python:</span></span>
<span class="line">*.py[cod]</span>
<span class="line">*.so</span>
<span class="line">*.egg</span>
<span class="line">*.egg-info</span>
<span class="line">dist</span>
<span class="line">build</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>然后提交就git就会把所配置忽略的文件进行忽略</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[资源收集共享]]></title>
      <url>/2017/06/03/%E8%B5%84%E6%BA%90%E6%94%B6%E9%9B%86/</url>
      <content type="html"><![CDATA[<p>日常发现好资源，在此记录下，长期更新</p>
<a id="more"></a>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h2><p>Spring MVC实战系列教程 - <a href="http://www.mkking.com/spring-mvc-tutorials/?utm_source=qq&amp;utm_medium=social" target="_blank" rel="external">http://www.mkking.com/spring-mvc-tutorials/?utm_source=qq&amp;utm_medium=social</a></p>
<p>跟我学SpringMVC目录汇总贴、PDF下载、源码下载 - 开涛的博客—公众号：kaitao-1234567，一如既往的干货分享 - ITeye技术网站 - <a href="http://jinnianshilongnian.iteye.com/blog/1752171?utm_source=qq&amp;utm_medium=social" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/blog/1752171?utm_source=qq&amp;utm_medium=social</a></p>
<p>[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis整合之路（分享自知乎网）<a href="https://zhuanlan.zhihu.com/p/27221566?utm_source=qq&amp;utm_medium=social" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/27221566?utm_source=qq&amp;utm_medium=social</a></p>
<p>spring 4.x中文文档  <a href="https://waylau.gitbooks.io/spring-framework-4-reference/I.%20Overview%20of%20Spring%20Framework/2.%20Introduction%20to%20the%20Spring%20Framework.html" target="_blank" rel="external">https://waylau.gitbooks.io/spring-framework-4-reference/I.%20Overview%20of%20Spring%20Framework/2.%20Introduction%20to%20the%20Spring%20Framework.html</a></p>
<p>Spring MVC 4.2.4.RELEASE 中文文档    <a href="https://www.gitbook.com/book/linesh/spring-mvc-documentation-linesh-translation/details" target="_blank" rel="external">https://www.gitbook.com/book/linesh/spring-mvc-documentation-linesh-translation/details</a></p>
<p>Spring Boot实战系列<br><a href="http://blog.csdn.net/column/details/15149.html" target="_blank" rel="external">http://blog.csdn.net/column/details/15149.html</a></p>
<p>从零开始学Spring Boot<br><a href="http://412887952-qq-com.iteye.com/category/356333" target="_blank" rel="external">http://412887952-qq-com.iteye.com/category/356333</a></p>
<p>Spring boot 那些事<br><a href="http://www.bysocket.com/?page_id=1639" target="_blank" rel="external">http://www.bysocket.com/?page_id=1639</a></p>
<h2 id="Mybaits"><a href="#Mybaits" class="headerlink" title="Mybaits"></a>Mybaits</h2><p>Mybaits学习笔记  <a href="http://www.cnblogs.com/hellokitty1/p/5216025.html" target="_blank" rel="external">http://www.cnblogs.com/hellokitty1/p/5216025.html</a></p>
<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p>Redis 教程  <a href="http://www.redis.net.cn/tutorial/3501.html" target="_blank" rel="external">http://www.redis.net.cn/tutorial/3501.html</a></p>
<h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p>java相关视频文档 <a href="http://www.java1234.com/a/javabook/" target="_blank" rel="external">http://www.java1234.com/a/javabook/</a></p>
<h2 id="django"><a href="#django" class="headerlink" title="django"></a>django</h2><p>nginx,uwsgi,部署django，静态文件不生效问题   <a href="https://m.baidu.com/from=1086k/bd_page_type=1/ssid=0/uid=0/pu=usm%401%2Csz%401320_1002%2Cta%40iphone_2_7.1_2_7.5/baiduid=3CEF6030D65FCF6BA8DBB5BD59F44A3B/w=0_10_/t=iphone/l=3/tc?ref=www_iphone&amp;lid=10820820000369633659&amp;order=2&amp;fm=alop&amp;tj=www_normal_2_0_10_title&amp;vit=osres&amp;m=8&amp;srd=1&amp;cltj=cloud_title&amp;asres=1&amp;title=nginx%2Cuwsgi%2C%E9%83%A8%E7%BD%B2django%2C%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98..._%E5%8D%9A%E5%AE%A2%E5%9B%AD&amp;dict=30&amp;w_qd=IlPT2AEptyoA_yi6Jk_jHCxswQHOL0obxVsWe4vR8wAsPO56TVRby93&amp;sec=21472&amp;di=7147f5f9d3785788&amp;bdenc=1&amp;tch=124.0.77.286.0.0&amp;nsrc=IlPT2AEptyoA_yixCFOxXnANedT62v3IEQGG_ytK1DK6mlrte4viZQRAUTLu0WiCEUDsuSPQpt5Ywk_h_mAn7BF2wvQkfjS&amp;eqid=962b46758c7968001000000359318c79&amp;wd=&amp;clk_info=%7B%22srcid%22%3A%221599%22%2C%22tplname%22%3A%22www_normal%22%2C%22t%22%3A1496419460654%2C%22sig%22%3A%2211262%22%2C%22xpath%22%3A%22div-a-h3%22%7D&amp;sfOpen=1" target="_blank" rel="external">链接</a></p>
<p>Django 多表查询   <a href="http://transcoder.tradaquan.com/from=1086k/bd_page_type=1/ssid=0/uid=0/pu=usm%401%2Csz%401320_1002%2Cta%40iphone_2_7.1_2_7.5/baiduid=3CEF6030D65FCF6BA8DBB5BD59F44A3B/w=0_10_/t=iphone/l=3/tc?ref=www_iphone&amp;lid=8749590077656350070&amp;order=1&amp;fm=alop&amp;h5ad=1&amp;srd=1&amp;dict=32&amp;tj=www_normal_1_0_10_title&amp;vit=osres&amp;m=8&amp;cltj=cloud_title&amp;asres=1&amp;title=Django%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2--Finley--%E5%8D%9A%E5%AE%A2%E5%9B%AD&amp;w_qd=IlPT2AEptyoA_yi6Jk_jHCux3z6Pc7oaxy1YpQXS8Pw7Ygu&amp;sec=21434&amp;di=b2c6edbf715f91c1&amp;bdenc=1&amp;tch=124.0.35.139.0.0&amp;nsrc=IlPT2AEptyoA_yixCFOxXnANedT62v3IEQGG_ytK1DK6mlrte4viZQRARDb6LHq4ZpPPtCPQpxoIw83g_mMskNYWgK&amp;eqid=796cc9d17cfd3c0010000003592f7f41&amp;wd=&amp;clk_info=%7B%22srcid%22%3A%221599%22%2C%22tplname%22%3A%22www_normal%22%2C%22t%22%3A1496284996398%2C%22sig%22%3A%222559%22%2C%22xpath%22%3A%22div-a-h3-em%22%7D" target="_blank" rel="external">链接</a></p>
<p>一套比较完整的django教程<br><a href="http://zmrenwu.com/" target="_blank" rel="external">追梦人物的博客</a></p>
<h2 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h2><p>Scrapy中文文档   <a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html" target="_blank" rel="external">https://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html</a></p>
<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>webpack介绍入门  <a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="external">http://www.jianshu.com/p/42e11515c10f</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>别人整理的资源    <a href="https://github.com/stanzhai/be-a-professional-programmer" target="_blank" rel="external">https://github.com/stanzhai/be-a-professional-programmer</a></p>
<p>七牛云自动备份教程   <a href="http://www.pt3e.com/201703111/" target="_blank" rel="external">http://www.pt3e.com/201703111/</a></p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu开放指定端口]]></title>
      <url>/2017/05/06/ubuntu_open_port/</url>
      <content type="html"><![CDATA[<p>今天在服务器上开启web服务让别人访问的时候遇到一些问题，在内网中别人使用ip加端口访问的时候一直访问不到，折腾了半天，发现原来使端口没开放<br>了解到一般linux中端口都是默认关闭的，需要开启的时候需要自己开启</p>
<h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><a id="more"></a>
<p>由于我的服务器使用的os是Ubuntu,所以这里就介绍一下Ubuntu下的方法，其他linux应该也是大同小异，需要自己去尝试</p>
<h3 id="安装iptables"><a href="#安装iptables" class="headerlink" title="安装iptables"></a>安装iptables</h3><p>一般情况下，ubuntu安装好的时候，iptables会被安装上，如果没有的话那就安装上吧</p>
<ol>
<li><p>安装<br>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo apt-get install iptables</span>
</pre></td></tr></table></figure>
</li>
<li><p>添加规则<br>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>中间的80为所需要开放的端口</p>
<ol>
<li>保存规则<br>在终端输入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo iptables-save</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>完成上述命令我们就完成了开放指定的端口，但是如果此时服务器重启，上述规则就没有了，所以我们需要对规则进行一下持续化操作</p>
<h3 id="持续化规则"><a href="#持续化规则" class="headerlink" title="持续化规则"></a>持续化规则</h3><p>这里我们需要在安装一下工具来帮我们实现，这里我们使用 iptables-persistent</p>
<ol>
<li><p>安装iptables-persistent</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo apt-get install iptables-persistent</span>
</pre></td></tr></table></figure>
</li>
<li><p>持久化规则</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">$ sudo netfilter-persistent save</span>
<span class="line">$ sudo netfilter-persistent reload</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>完成上述操作就可以永久打开我们需要的端口了</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis学习笔记 -- 2]]></title>
      <url>/2017/04/16/redis_study_2/</url>
      <content type="html"><![CDATA[<p>接着上一篇接着介绍redis的知识</p>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><a id="more"></a>
<h3 id="Redis-键-key"><a href="#Redis-键-key" class="headerlink" title="Redis 键(key)"></a>Redis 键(key)</h3><p>Redis 键命令用于管理 redis 的键。</p>
<ol>
<li><p>语法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; COMMAND KEY_NAME</span>
</pre></td></tr></table></figure>
</li>
<li><p>实例</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET w3ckey redis</span>
<span class="line">OK</span>
<span class="line">127.0.0.1:6379&gt; DEL w3ckey</span>
<span class="line">(<span class="built_in">integer</span>) 1</span>
</pre></td></tr></table></figure>
<p>DEL 是一个命令， w3ckey 是一个键。 如果键被删除成功，命令执行后输出 (integer) 1，否则将输出 (integer) 0</p>
<h4 id="Redis-keys-相关命令"><a href="#Redis-keys-相关命令" class="headerlink" title="Redis keys 相关命令"></a>Redis keys 相关命令</h4></li>
</ol>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>DEL key</strong></td>
<td>在 key 存在是删除 key</td>
</tr>
<tr>
<td><strong>DUMP key</strong></td>
<td>序列化给定 key ，并返回被序列化的值</td>
</tr>
<tr>
<td><strong>EXISTS key</strong></td>
<td>检查给定 key 是否存在</td>
</tr>
<tr>
<td><strong>EXPIRE key seconds</strong></td>
<td>给定 key 设置过期时间</td>
</tr>
<tr>
<td><strong>EXPIREAT key timestamp</strong></td>
<td>EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)</td>
</tr>
<tr>
<td><strong>KEYS pattern</strong></td>
<td>查找所有符合给定模式( pattern)的 key</td>
</tr>
<tr>
<td><strong>MOVE key db</strong></td>
<td>将当前数据库的 key 移动到给定的数据库 db 当中</td>
</tr>
<tr>
<td><strong>PERSIST key</strong></td>
<td>移除 key 的过期时间，key 将持久保持</td>
</tr>
<tr>
<td><strong>PTTL key</strong></td>
<td>以毫秒为单位返回 key 的剩余的过期时间</td>
</tr>
<tr>
<td><strong>RENAME key newkey</strong></td>
<td>修改 key 的名称</td>
</tr>
<tr>
<td><strong>RENAMENX key newkey</strong></td>
<td>仅当 newkey 不存在时，将 key 改名为 newkey</td>
</tr>
<tr>
<td><strong>TYPE key</strong></td>
<td>返回 key 所储存的值的类型</td>
</tr>
</tbody>
</table>
<h3 id="Redis-字符串-String"><a href="#Redis-字符串-String" class="headerlink" title="Redis 字符串(String)"></a>Redis 字符串(String)</h3><p>Redis 字符串数据类型的相关命令用于管理 redis 字符串值，基本语法如下：</p>
<ol>
<li><p>语法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; COMMAND KEY_NAME</span>
</pre></td></tr></table></figure>
</li>
<li><p>实例</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET w3ckey redis</span>
<span class="line">OK</span>
<span class="line">127.0.0.1:6379&gt; GET w3ckey</span>
<span class="line"> <span class="string">"redis"</span></span>
</pre></td></tr></table></figure>
<p>SET 和 GET 命令，键为 w3ckey。<br>DEL 是一个命令， w3ckey 是一个键。 如果键被删除成功，命令执行后输出 (integer) 1，否则将输出 (integer) 0</p>
<h4 id="Redis-keys-相关命令-1"><a href="#Redis-keys-相关命令-1" class="headerlink" title="Redis keys 相关命令"></a>Redis keys 相关命令</h4></li>
</ol>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>SET key value</strong></td>
<td>设置指定 key 的值</td>
</tr>
<tr>
<td><strong>GET key</strong></td>
<td>获取指定 key 的值</td>
</tr>
<tr>
<td><strong>GETRANGE key start end</strong></td>
<td>返回 key 中字符串值的子字符</td>
</tr>
<tr>
<td><strong>GETSET key value</strong></td>
<td>将给定 key 的值设为 value ，并返回 key 的旧值(old value)</td>
</tr>
<tr>
<td><strong>GETBIT key offset</strong></td>
<td>对 key 所储存的字符串值，获取指定偏移量上的位(bit)</td>
</tr>
<tr>
<td><strong>MGET key1 [key2..]</strong></td>
<td>获取所有(一个或多个)给定 key 的值</td>
</tr>
<tr>
<td><strong>SETEX key seconds value</strong></td>
<td>将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)</td>
</tr>
<tr>
<td><strong>SETNX key value</strong></td>
<td>只有在 key 不存在时设置 key 的值</td>
</tr>
<tr>
<td><strong>STRLEN key</strong></td>
<td>返回 key 所储存的字符串值的长度</td>
</tr>
<tr>
<td><strong>MSET key value [key value …]</strong></td>
<td>同时设置一个或多个 key-value 对</td>
</tr>
<tr>
<td><strong>INCR key</strong></td>
<td>将 key 中储存的数字值增一</td>
</tr>
<tr>
<td><strong>NCRBY key increment</strong></td>
<td>将 key 所储存的值加上给定的增量值（increment）</td>
</tr>
<tr>
<td><strong>NCRBYFLOAT key increment</strong></td>
<td>将 key 所储存的值加上给定的浮点增量值（increment）</td>
</tr>
<tr>
<td><strong>DECR key</strong></td>
<td>将 key 中储存的数字值减一</td>
</tr>
<tr>
<td><strong>DECRBY key decrement</strong></td>
<td>key所储存的值减去给定的减量值（decrement</td>
</tr>
<tr>
<td><strong>APPEND key value</strong></td>
<td>如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾</td>
</tr>
</tbody>
</table>
<h3 id="Redis-哈希-Hash"><a href="#Redis-哈希-Hash" class="headerlink" title="Redis 哈希(Hash)"></a>Redis 哈希(Hash)</h3><p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。。</p>
<ol>
<li>实例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;HMSET w3ckey name <span class="string">"redis tutorial"</span> description <span class="string">"redis basic commands for caching"</span> likes 20 visitors 2300</span>
<span class="line">OK</span>
<span class="line">127.0.0.1:6379&gt; HGETALL w3ckey</span>
<span class="line">1) <span class="string">"name"</span></span>
<span class="line">2) <span class="string">"redis tutorial"</span></span>
<span class="line">3) <span class="string">"description"</span></span>
<span class="line">4) <span class="string">"redis basic commands for caching"</span></span>
<span class="line">5) <span class="string">"likes"</span></span>
<span class="line">6) <span class="string">"20"</span></span>
<span class="line">7) <span class="string">"visitors"</span></span>
<span class="line">8) <span class="string">"23000"</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>设置了 redis 的一些描述信息(name, description, likes, visitors) 到哈希表的 w3ckey 中。</p>
<h4 id="Redis-hash-命令"><a href="#Redis-hash-命令" class="headerlink" title="Redis hash 命令"></a>Redis hash 命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>HDEL key field2 [field2]</strong></td>
<td>删除一个或多个哈希表字段</td>
</tr>
<tr>
<td><strong>HEXISTS key field</strong></td>
<td>查看哈希表 key 中，指定的字段是否存在</td>
</tr>
<tr>
<td><strong>HGET key field</strong></td>
<td>获取存储在哈希表中指定字段的值</td>
</tr>
<tr>
<td><strong>HGETALL key</strong></td>
<td>获取在哈希表中指定 key 的所有字段和值</td>
</tr>
<tr>
<td><strong>HINCRBY key field increment</strong></td>
<td>为哈希表 key 中的指定字段的整数值加上增量 increment</td>
</tr>
<tr>
<td><strong>HINCRBYFLOAT key field increment</strong></td>
<td>为哈希表 key 中的指定字段的浮点数值加上增量 increment</td>
</tr>
<tr>
<td><strong>HKEYS key</strong></td>
<td>获取所有哈希表中的字段</td>
</tr>
<tr>
<td><strong>HLEN key</strong></td>
<td>获取哈希表中字段的数量</td>
</tr>
<tr>
<td><strong>HMGET key field1 [field2]</strong></td>
<td>获取所有给定字段的值</td>
</tr>
<tr>
<td><strong>HMSET key field1 value1 [field2 value2 ]</strong></td>
<td>同时将多个 field-value (域-值)对设置到哈希表 key 中</td>
</tr>
<tr>
<td><strong>HSETNX key field value</strong></td>
<td>只有在字段 field 不存在时，设置哈希表字段的值。</td>
</tr>
<tr>
<td><strong>HVALS key</strong></td>
<td>获取哈希表中所有值</td>
</tr>
<tr>
<td><strong>HSCAN key cursor [MATCH pattern] [COUNT count]</strong></td>
<td>迭代哈希表中的键值对</td>
</tr>
</tbody>
</table>
<h3 id="Redis-列表-List"><a href="#Redis-列表-List" class="headerlink" title="Redis 列表(List)"></a>Redis 列表(List)</h3><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边</p>
<ol>
<li>实例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;LPUSH w3ckey redis</span>
<span class="line">(<span class="built_in">integer</span>) 1</span>
<span class="line">127.0.0.1:6379&gt; LPUSH w3ckey mongodb</span>
<span class="line">(<span class="built_in">integer</span>) 2</span>
<span class="line">127.0.0.1:6379&gt; LPUSH w3ckey mysql</span>
<span class="line">(<span class="built_in">integer</span>) 3</span>
<span class="line">127.0.0.1:6379&gt; LRANGE w3ckey 0 10</span>
<span class="line">1) <span class="string">"mysql"</span></span>
<span class="line">2) <span class="string">"mongodb"</span></span>
<span class="line">3) <span class="string">"redis"</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Redis-列表命令"><a href="#Redis-列表命令" class="headerlink" title="Redis 列表命令"></a>Redis 列表命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>BLPOP key1 [key2 ] timeout</strong></td>
<td>移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td>
</tr>
<tr>
<td><strong>BRPOP key1 [key2 ] timeout</strong></td>
<td>移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td>
</tr>
<tr>
<td><strong>BRPOPLPUSH source destination timeout</strong></td>
<td>从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td>
</tr>
<tr>
<td><strong>LINDEX key index</strong></td>
<td>通过索引获取列表中的元素</td>
</tr>
<tr>
<td>**LINSERT key BEFORE</td>
<td>AFTER pivot value**</td>
<td>在列表的元素前或者后插入元素</td>
</tr>
<tr>
<td><strong>LLEN key</strong></td>
<td>获取列表长度</td>
</tr>
<tr>
<td><strong>LPOP key</strong></td>
<td>移出并获取列表的第一个元素</td>
</tr>
<tr>
<td><strong>LPUSH key value1 [value2]</strong></td>
<td>将一个或多个值插入到列表头部</td>
</tr>
<tr>
<td><strong>LPUSHX key value</strong></td>
<td>将一个或多个值插入到已存在的列表头部</td>
</tr>
<tr>
<td><strong>LRANGE key start stop</strong></td>
<td>获取列表指定范围内的元素</td>
</tr>
<tr>
<td><strong>LREM key count value</strong></td>
<td>移除列表元素</td>
</tr>
<tr>
<td><strong>LSET key index value</strong></td>
<td>通过索引设置列表元素的值</td>
</tr>
<tr>
<td><strong>LTRIM key start stop</strong></td>
<td>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除</td>
</tr>
<tr>
<td><strong>RPOP key</strong></td>
<td>移除并获取列表最后一个元素</td>
</tr>
<tr>
<td><strong>RPOPLPUSH source destination</strong></td>
<td>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td>
</tr>
<tr>
<td><strong>RPUSH key value1 [value2]</strong></td>
<td>在列表中添加一个或多个值</td>
</tr>
<tr>
<td><strong>RPUSHX key value</strong></td>
<td>为已存在的列表添加值</td>
</tr>
</tbody>
</table>
<h3 id="Redis-集合-Set"><a href="#Redis-集合-Set" class="headerlink" title="Redis 集合(Set)"></a>Redis 集合(Set)</h3><p>Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据</p>
<ol>
<li>实例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD redis redis</span>
<span class="line">(<span class="built_in">integer</span>) 1</span>
<span class="line">127.0.0.1:6379&gt; SADD redis mongo</span>
<span class="line">(<span class="built_in">integer</span>) 1</span>
<span class="line">127.0.0.1:6379&gt; SADD redis rebitmq</span>
<span class="line">(<span class="built_in">integer</span>) 1</span>
<span class="line">127.0.0.1:6379&gt; SADD redis rebitmq</span>
<span class="line">(<span class="built_in">integer</span>) 0</span>
<span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE redis 0 1000</span>
<span class="line">1) <span class="string">"mongo"</span></span>
<span class="line">2) <span class="string">"rabitmq"</span></span>
<span class="line">3) <span class="string">"redis"</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Redis-集合命令"><a href="#Redis-集合命令" class="headerlink" title="Redis 集合命令"></a>Redis 集合命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>SADD key member1 [member2]</strong></td>
<td>向集合添加一个或多个成员</td>
</tr>
<tr>
<td><strong>SCARD key</strong></td>
<td>获取集合的成员数</td>
</tr>
<tr>
<td><strong>SDIFF key1 [key2]</strong></td>
<td>返回给定所有集合的差集</td>
</tr>
<tr>
<td><strong>SINTER key1 [key2]</strong></td>
<td>返回给定所有集合的交集</td>
</tr>
<tr>
<td><strong>SISMEMBER key member</strong></td>
<td>判断 member 元素是否是集合 key 的成员</td>
</tr>
<tr>
<td><strong>SMEMBERS key</strong></td>
<td>返回集合中的所有成员</td>
</tr>
<tr>
<td><strong>SMOVE source destination member</strong></td>
<td>将 member 元素从 source 集合移动到 destination 集合</td>
</tr>
<tr>
<td><strong>SPOP key</strong></td>
<td>移除并返回集合中的一个随机元素</td>
</tr>
<tr>
<td><strong>SUNION key1 [key2]</strong></td>
<td>返回所有给定集合的并集</td>
</tr>
<tr>
<td><strong>SSCAN key cursor [MATCH pattern] [COUNT count]</strong></td>
<td>迭代集合中的元素</td>
</tr>
</tbody>
</table>
<h3 id="Redis-有序集合-sorted-set"><a href="#Redis-有序集合-sorted-set" class="headerlink" title="Redis 有序集合(sorted set)"></a>Redis 有序集合(sorted set)</h3><p>Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>有序集合的成员是唯一的,但分数(score)却可以重复。</p>
<ol>
<li>实例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD w3ckey 1 redis</span>
<span class="line">(<span class="built_in">integer</span>) 1</span>
<span class="line">127.0.0.1:6379&gt; ZADD w3ckey 2 mongodb</span>
<span class="line">(<span class="built_in">integer</span>) 1</span>
<span class="line">127.0.0.1:6379&gt; ZADD w3ckey 3 mysql</span>
<span class="line">(<span class="built_in">integer</span>) 1</span>
<span class="line">127.0.0.1:6379&gt; ZADD w3ckey 3 mysql</span>
<span class="line">(<span class="built_in">integer</span>) 0</span>
<span class="line">127.0.0.1:6379&gt; ZADD w3ckey 4 mysql</span>
<span class="line">(<span class="built_in">integer</span>) 0</span>
<span class="line">127.0.0.1:6379&gt; ZRANGE w3ckey 0 10 WITHSCORES</span>
<span class="line"> </span>
<span class="line">1) <span class="string">"redis"</span></span>
<span class="line">2) <span class="string">"1"</span></span>
<span class="line">3) <span class="string">"mongodb"</span></span>
<span class="line">4) <span class="string">"2"</span></span>
<span class="line">5) <span class="string">"mysql"</span></span>
<span class="line">6) <span class="string">"4"</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Redis-有序集合命令"><a href="#Redis-有序集合命令" class="headerlink" title="Redis 有序集合命令"></a>Redis 有序集合命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>ZADD key score1 member1 [score2 member2]</strong></td>
<td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td>
</tr>
<tr>
<td><strong>ZCARD key</strong></td>
<td>获取有序集合的成员数</td>
</tr>
<tr>
<td><strong>ZCOUNT key min max</strong></td>
<td>计算在有序集合中指定区间分数的成员数</td>
</tr>
<tr>
<td><strong>ZLEXCOUNT key min max</strong></td>
<td>在有序集合中计算指定字典区间内成员数量</td>
</tr>
<tr>
<td><strong>ZRANGE key start stop [WITHSCORES]</strong></td>
<td>通过索引区间返回有序集合成指定区间内的成员</td>
</tr>
<tr>
<td><strong>ZRANGEBYLEX key min max [LIMIT offset count]</strong></td>
<td>通过字典区间返回有序集合的成员</td>
</tr>
<tr>
<td><strong>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</strong></td>
<td>通过分数返回有序集合指定区间内的成员</td>
</tr>
<tr>
<td><strong>ZRANK key member</strong></td>
<td>返回有序集合中指定成员的索引</td>
</tr>
<tr>
<td><strong>ZREM key member [member …]</strong></td>
<td>移除有序集合中的一个或多个成员</td>
</tr>
<tr>
<td><strong>ZREMRANGEBYLEX key min max</strong></td>
<td>移除有序集合中给定的字典区间的所有成员</td>
</tr>
<tr>
<td><strong>ZREMRANGEBYRANK key start stop</strong></td>
<td>移除有序集合中给定的排名区间的所有成员</td>
</tr>
<tr>
<td><strong>ZREMRANGEBYSCORE key min max</strong></td>
<td>移除有序集合中给定的分数区间的所有成员</td>
</tr>
<tr>
<td><strong>ZSCORE key member</strong></td>
<td>返回有序集中，成员的分数值</td>
</tr>
<tr>
<td><strong>ZUNIONSTORE destination numkeys key [key …]</strong></td>
<td>计算给定的一个或多个有序集的并集，并存储在新的 key 中</td>
</tr>
<tr>
<td><strong>ZSCAN key cursor [MATCH pattern] [COUNT count]</strong></td>
<td>迭代有序集合中的元素（包括元素成员和元素分值）</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis学习笔记 -- 1]]></title>
      <url>/2017/04/15/redis_study_1/</url>
      <content type="html"><![CDATA[<p>redis作为内存非关系型数据库，是一种key - value 缓存产品,但它同时还支持数据持久化，常常和一些老牌关系型数据库配合使用<br>下文将作为学习笔记介绍一下</p>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>由于本人的环境是Ubuntu，所以安装起来非常方便</p>
<ol>
<li>在终端输入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo apt-get install redis-server</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>即可完成安装，其他环境请自行去官网查看安装方式</p>
<h3 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><ol>
<li><p>启动redis<br>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ redis-server</span>
</pre></td></tr></table></figure>
</li>
<li><p>查看redis是否启动<br>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ redis-cli</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>如果成功将看到以下状态127.0.0.1:6379&gt; </p>
<ol>
<li>在出现的终端输入<strong>ping</strong>命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">$ 127.0.0.1:6379&gt; ping</span>
<span class="line">PONG</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>出现<strong>PONG</strong>即表示安装成功</p>
<h3 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h3><p>首先我们需要先进入redis终端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ redis-cli</span>
</pre></td></tr></table></figure></p>
<h4 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h4><ol>
<li>设置一个字符串<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET name <span class="string">"redis.net.cn"</span></span>
<span class="line">OK</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>设置name的值为”redis.net.cn”</p>
<ol>
<li>查询指定键的值<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GET name</span>
<span class="line"><span class="string">"redis.net.cn"</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h4><p>Redis hash是一个string类型的field和value的映射</p>
<ol>
<li>设置一个hash<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HMSET user username redis.net.cn password redis.net.cn points 200</span>
<span class="line">OK</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>设置一个名为user的hash</p>
<ol>
<li>查询得到一个指定的hash<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HGETALL user</span>
<span class="line">1) <span class="string">"username"</span></span>
<span class="line">2) <span class="string">"redis.net.cn"</span></span>
<span class="line">3) <span class="string">"password"</span></span>
<span class="line">4) <span class="string">"redis.net.cn"</span></span>
<span class="line">5) <span class="string">"points"</span></span>
<span class="line">6) <span class="string">"200"</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>查询出名为user的hash</p>
<h4 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h4><p>Redis 列表是简单的字符串列表，按照插入顺序排序</p>
<ol>
<li><p>设置一个名为redis的列表</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush redis redis</span>
<span class="line">(<span class="built_in">integer</span>) 1</span>
<span class="line">127.0.0.1:6379&gt; lpush redis mongodb</span>
<span class="line">(<span class="built_in">integer</span>) 2</span>
<span class="line">127.0.0.1:6379&gt; lpush redis rabitmq</span>
<span class="line">(<span class="built_in">integer</span>) 3</span>
</pre></td></tr></table></figure>
</li>
<li><p>查询出名为redis的列表的0到10项</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LRANGE redis 0 10</span>
<span class="line">1) <span class="string">"rabitmq"</span></span>
<span class="line">2) <span class="string">"mongo"</span></span>
<span class="line">3) <span class="string">"redis"</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h4><p>Redis的Set是string类型的无序集合。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sadd key member</span>
</pre></td></tr></table></figure></p>
<h5 id="sadd-命令"><a href="#sadd-命令" class="headerlink" title="sadd 命令"></a>sadd 命令</h5><p>添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误</p>
<ol>
<li>设置一个名为redis的集合<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD redis redis</span>
<span class="line">(<span class="built_in">integer</span>) 1</span>
<span class="line">127.0.0.1:6379&gt; SADD redis mongo</span>
<span class="line">(<span class="built_in">integer</span>) 1</span>
<span class="line">127.0.0.1:6379&gt; SADD redis rebitmq</span>
<span class="line">(<span class="built_in">integer</span>) 1</span>
<span class="line">127.0.0.1:6379&gt; SADD redis rebitmq</span>
<span class="line">(<span class="built_in">integer</span>) 0</span>
</pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注意：可以看到rebitmq添加了两次，但是实际上由于集合的去重性只向集合中添加了一遍返回0</p>
</blockquote>
<ol>
<li>查询出名为redis的集合<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SMEMBERS redis</span>
<span class="line">1) <span class="string">"rebitmq"</span></span>
<span class="line">2) <span class="string">"redis"</span></span>
<span class="line">3) <span class="string">"mongo"</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="zset-sorted-set：有序集合"><a href="#zset-sorted-set：有序集合" class="headerlink" title="zset(sorted set：有序集合)"></a>zset(sorted set：有序集合)</h4><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>zset的成员是唯一的,但分数(score)却可以重复</p>
<h5 id="zadd-命令"><a href="#zadd-命令" class="headerlink" title="zadd 命令"></a>zadd 命令</h5><p>添加元素到集合，元素在集合中存在则更新对应score<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">zadd key score member</span>
</pre></td></tr></table></figure></p>
<ol>
<li><p>设置一个名为redis的有序集合</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD redis 0 redis</span>
<span class="line">(<span class="built_in">integer</span>) 1</span>
<span class="line">127.0.0.1:6379&gt; ZADD redis 0 mongo</span>
<span class="line">(<span class="built_in">integer</span>) 1</span>
<span class="line">127.0.0.1:6379&gt; ZADD redis 0 rabitmq</span>
<span class="line">(<span class="built_in">integer</span>) 1</span>
<span class="line">127.0.0.1:6379&gt; ZADD redis 0 rabitmq</span>
<span class="line">(<span class="built_in">integer</span>) 0</span>
</pre></td></tr></table></figure>
</li>
<li><p>查询出名为redis的有序集合</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE redis 0 1000</span>
<span class="line">1) <span class="string">"mongo"</span></span>
<span class="line">2) <span class="string">"rabitmq"</span></span>
<span class="line">3) <span class="string">"redis"</span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Redis-命令"><a href="#Redis-命令" class="headerlink" title="Redis 命令"></a>Redis 命令</h3><h4 id="在本地运行"><a href="#在本地运行" class="headerlink" title="在本地运行"></a>在本地运行</h4><ol>
<li>启动redis客户端<br>在终端中输入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ redis-cli</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="在远程服务上执行命令"><a href="#在远程服务上执行命令" class="headerlink" title="在远程服务上执行命令"></a>在远程服务上执行命令</h4><p>语法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ redis-cli -h host -p port <span class="_">-a</span> password</span>
</pre></td></tr></table></figure></p>
<p>连接到主机为 127.0.0.1，端口为 6379 ，密码为 mypass 的 redis 服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379 <span class="_">-a</span> <span class="string">"mypass"</span></span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu日常使用的安装配置]]></title>
      <url>/2017/03/16/ubuntu_do_something_use/</url>
      <content type="html"><![CDATA[<p>本文将继续上篇<a href="http://earthchen.cn/2017/03/10/ubuntu_do_something_coding/">ubuntu搭建常见开发环境</a><br>上篇介绍了一些关于开发环境的配置，这篇我们来总结一下日常使用中所需要安装和配置的一些东西<br>比如一些中文输入法、浏览器、flash、科学上网等等。。。。。</p>
<h2 id="日常使用软件的安装与配置"><a href="#日常使用软件的安装与配置" class="headerlink" title="日常使用软件的安装与配置"></a>日常使用软件的安装与配置</h2><a id="more"></a>
<h3 id="更新更新源为国内源"><a href="#更新更新源为国内源" class="headerlink" title="更新更新源为国内源"></a>更新更新源为国内源</h3><p>安装好系统的第一件事，就应该换源！！！！除非你在一个不被墙的地方<br>在<strong>系统设置</strong>里的<strong>软件和更新</strong>中选择合适的国内源<br>个人比较喜欢阿里源，，，更改后如图所示<br><img src="http://objects.earthchen.cn/ubuntu_do_something_use_%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90.png" alt="ubuntu_do_something_use_更换国内源"><br>改完输入密码确定之后，更新下载软件就无压力了</p>
<h3 id="选择专有驱动"><a href="#选择专有驱动" class="headerlink" title="选择专有驱动"></a>选择专有驱动</h3><p>虽然ubuntu自带很多万能驱动，但是对于显卡之类的来说，还是专门的驱动比较好用<br>所以在<strong>系统设置</strong>里的<strong>软件和更新</strong>中<strong>附加驱动</strong>选择专有驱动并保存<br><img src="http://objects.earthchen.cn/ubuntu_do_something_use_%E9%80%89%E6%8B%A9%E4%B8%93%E6%9C%89%E9%A9%B1%E5%8A%A8.png" alt="ubuntu_do_something_use_选择专有驱动"><br>然后重启就好</p>
<h3 id="对桌面的美化"><a href="#对桌面的美化" class="headerlink" title="对桌面的美化"></a>对桌面的美化</h3><p>好看的桌面能改善人的心情啊，我觉得一个好看的桌面还是有意义的，但是不建议大家花太多时间去折腾桌面，我这里就说下我的桌面配置</p>
<h4 id="docky"><a href="#docky" class="headerlink" title="docky"></a>docky</h4><p>这里笔者还是蛮喜欢mac的风格 ，所以安装一下docky，并设置一下智能隐藏，不然桌面就小很多了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ricotz/docky</span>
<span class="line"></span>
<span class="line">sudo apt-get update</span>
<span class="line"></span>
<span class="line">sudo apt-get install docky</span>
</pre></td></tr></table></figure></p>
<p>然后在dash中选择docky即可打开</p>
<h4 id="unity-tweak-tool"><a href="#unity-tweak-tool" class="headerlink" title="unity-tweak-tool"></a>unity-tweak-tool</h4><p>这是一个调整 Unity 桌面环境的工具，能够修改一些参数，让你的使用更方便<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:freyja-dev/unity-tweak-tool-daily</span>
<span class="line"></span>
<span class="line">sudo apt-get update</span>
<span class="line"></span>
<span class="line">sudo apt-get install unity-tweak-tool</span>
</pre></td></tr></table></figure></p>
<p>软件界面如下：<br><img src="http://objects.earthchen.cn/ubuntu_do_something_use_unity-tweak-tool.png" alt="ubuntu_do_something_use_unity-tweak-tool"></p>
<h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><h4 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h4><p>谷歌浏览器，这个就不用说了吧，你也可以选择chrome的开源版<strong>chromium</strong></p>
<ul>
<li>在这里建议使用下载好的deb包直接安装</li>
</ul>
<h5 id="chrome-1"><a href="#chrome-1" class="headerlink" title="chrome"></a>chrome</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">wget -q -O - https://dl.google.com/linux/linux_signing_key.pub  | sudo apt-key add -</span>
<span class="line"></span>
<span class="line">sudo apt-get update</span>
<span class="line"></span>
<span class="line">sudo apt-get install google-chrome-stable</span>
</pre></td></tr></table></figure>
<p>然后等待即可</p>
<h5 id="chromium"><a href="#chromium" class="headerlink" title="chromium"></a>chromium</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:a-v-shkop/chromium</span>
<span class="line"></span>
<span class="line">sudo apt-get update</span>
<span class="line"></span>
<span class="line">sudo apt-get install chromium-browser</span>
</pre></td></tr></table></figure>
<h5 id="flash插件"><a href="#flash插件" class="headerlink" title="flash插件"></a>flash插件</h5><p>虽然现在已经时html5的天下，但是flash还没有完全淘汰，所以flash还是需要的</p>
<ul>
<li>如果你安装的时chrome 那么它内部已经内置了一个flash，但是还是建议安装一个完整版</li>
<li>如果你安装的时chromium，那一定需要安装flash</li>
</ul>
<blockquote>
<p>chrome用户</p>
<ul>
<li>去flash官网下载.tar.gz的安装包</li>
<li>解压然后放到浏览器插件目录</li>
</ul>
<p>chromium用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">sudo apt-get install pepperflashplugin-nonfree</span>
<span class="line"></span>
<span class="line">sudo update-pepperflashplugin-nonfree --install</span>
</pre></td></tr></table></figure></p>
</blockquote>
<h4 id="搜狗输入法"><a href="#搜狗输入法" class="headerlink" title="搜狗输入法"></a>搜狗输入法</h4><ol>
<li>登录<a href="http://pinyin.sogou.com/linux/" target="_blank" rel="external">搜狗拼音官网</a>去下载合适的安装包</li>
<li>双击下载好的deb文件（有可能失败）<br>笔者建议进入下载包所在的目录，使用如下命令安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo dpkg -i sogoupinyin_2.1.0.0082_amd64.deb</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h4 id="wps"><a href="#wps" class="headerlink" title="wps"></a>wps</h4><p>自带的libreoffice不怎么好用，而且较慢，这里我们使用国产的wps来代替它</p>
<ol>
<li><p>卸载libreoffice<br>在终端执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo apt-get remove --purge libreoffice*</span>
</pre></td></tr></table></figure>
</li>
<li><p>安装wps<br>首先去wps官网去下载安装包<br>使用如下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo dpkg -i wps-office_10.1.0.5672<span class="_">-a</span>21_amd64.deb</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>可能会缺少依赖，然后执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo apt-get install <span class="_">-f</span></span>
</pre></td></tr></table></figure></p>
<p>修复所缺依赖<br>如果遇到问题就用如下方法：<br>在去论坛找一个<strong>libpng12-0_1.2.27-2+lenny5_amd64.deb</strong>的包<br>然后使用如下命令更新<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo dpkg -i libpng12-0_1.2.27-2+lenny5_amd64.deb</span>
</pre></td></tr></table></figure></p>
<p>然后重新安装wps</p>
<h4 id="福昕阅读器"><a href="#福昕阅读器" class="headerlink" title="福昕阅读器"></a>福昕阅读器</h4><p>自带的pdf阅读器不怎么好用，我们这里使用福昕阅读器来替代<br>安装方法依然时去官网下载对应的deb安装包<br>然后执行sudo dpki -i xxx.deb</p>
<h4 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h4><p>良心音乐播放器，网易云也出了Linux版，和深度合作开发的<br>安装方法同上，安装即可</p>
<h4 id="smplayer"><a href="#smplayer" class="headerlink" title="smplayer"></a>smplayer</h4><p>好用的视频播放器，有很强的解码能力。。。。<br>在终端输入如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">sudo apt-add-repository ppa:rvm/smplayer</span>
<span class="line"></span>
<span class="line">sudo apt-get update</span>
<span class="line"></span>
<span class="line">sudo apt-get install smplayer smplayer-skins smplayer-themes</span>
</pre></td></tr></table></figure></p>
<h4 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h4><p>科学上网，不多说 直接上安装教程：<br>在终端输入如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5 </span>
<span class="line"></span>
<span class="line">sudo apt-get update </span>
<span class="line"></span>
<span class="line">sudo apt-get install shadowsocks-qt5</span>
</pre></td></tr></table></figure></p>
<p>然后设置全局代理，这个见别人的博客<br><a href="http://blog.csdn.net/hanshileiai/article/details/52624303" target="_blank" rel="external">http://blog.csdn.net/hanshileiai/article/details/52624303</a><br><a href="http://blog.csdn.net/strokess/article/details/52015014" target="_blank" rel="external">http://blog.csdn.net/strokess/article/details/52015014</a><br>…<br>每个人情况不一样自己找找并尝试一下吧</p>
<h4 id="Diodon"><a href="#Diodon" class="headerlink" title="Diodon"></a>Diodon</h4><p>Ubuntu自带一个剪贴板，按<strong>ctrl+；</strong>即可，但是笔者不是很喜欢，并且功能不够多，<br>有很多类似功能的软件，在这里只介绍个人使用的一个<br>在终端输入如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:diodon-team/stable</span>
<span class="line"></span>
<span class="line">sudo apt-get update</span>
<span class="line"></span>
<span class="line">sudo apt-get install diodon diodon-plugins</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>安装好之后设置一下快捷键</p>
<ol>
<li>在<strong>系统设置</strong>中的<strong>键盘</strong> <strong>快捷键</strong>中<strong>添加自定义快捷键</strong></li>
<li>如图所示设置即可<br><img src="http://objects.earthchen.cn/ubuntu_do_something_use_%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%BF%AB%E6%8D%B7%E9%94%AE.png" alt="ubuntu_do_something_use_剪贴板快捷键"></li>
</ol>
</blockquote>
<h4 id="shutter"><a href="#shutter" class="headerlink" title="shutter"></a>shutter</h4><p>装一个好用的截图软件还是很有用的，在这里推荐shutter<br>在终端输入如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:shutter/ppa</span>
<span class="line"></span>
<span class="line">sudo apt-get update</span>
<span class="line"></span>
<span class="line">sudo apt-get install shutter</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>安装好之后设置一下快捷键</p>
<ol>
<li>在<strong>系统设置</strong>中的<strong>键盘</strong> <strong>快捷键</strong>中<strong>添加自定义快捷键</strong></li>
<li>如图所示设置即可<br><img src="http://objects.earthchen.cn/ubuntu_do_something_use_%E6%88%AA%E5%9B%BE%E5%BF%AB%E6%8D%B7%E9%94%AE.png" alt="ubuntu_do_something_use_截图快捷键"></li>
</ol>
</blockquote>
<h4 id="坚果云"><a href="#坚果云" class="headerlink" title="坚果云"></a>坚果云</h4><p>一款很好用的多终端同步软件，诶，腾讯爸爸不给力，Linux下的qq实在太难用。。。有一段时间我都是截图同步到手机，然后在发送的。。。。。炒鸡心累<br>去官网下载相关包然后在终端执行sudo dpkg -i xxx.deb即可</p>
<h4 id="uget"><a href="#uget" class="headerlink" title="uget"></a>uget</h4><p>linux下的一款很好用的下载软件，，，虽然不支持bt吧，，，<br>在终端输入如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:plushuang-tw/uget-stable</span>
<span class="line"></span>
<span class="line">sudo apt-get update</span>
<span class="line"></span>
<span class="line">sudo apt-get install uget</span>
</pre></td></tr></table></figure></p>
<p>在firefox下使用推荐使用<strong>flashgot</strong> 在chrome下使用推荐使用<strong>uGet Integration</strong></p>
<h4 id="axel"><a href="#axel" class="headerlink" title="axel"></a>axel</h4><p>多线程下载器，不多说<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo apt-get install axel</span>
</pre></td></tr></table></figure></p>
<h4 id="aiar2"><a href="#aiar2" class="headerlink" title="aiar2"></a>aiar2</h4><p>在终端输入如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:t-tujikawa/ppa</span>
<span class="line"></span>
<span class="line">sudo apt-get update</span>
<span class="line"></span>
<span class="line">sudo apt-get install aria2</span>
</pre></td></tr></table></figure></p>
<p>先说这么多吧 以后想起来别的好用的在更新<br>最后附上一张笔者的桌面：嘿嘿嘿<br><img src="http://objects.earthchen.cn/ubuntu_do_something_use_%E6%A1%8C%E9%9D%A2.png" alt="ubuntu_do_something_use_桌面"></p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中搭建测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django调用百度地图api在地图上批量增加标记点]]></title>
      <url>/2017/03/15/django_address_baiduapi_marker_show/</url>
      <content type="html"><![CDATA[<p>在调用百度地图api进行web开发时遇到了一个需求，我们需要在网页中内嵌一个div  然后在div中调用百度地图的js显示我们所需要的地区。根据需求坐标在地图上添加若干个标记点，并批量的为各个标记点设置监听函数，使之显示我们所需要的信息</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>首先，创建一个测试用的工程来测试我们的需要，可以使用<strong>pycharm</strong>或者<strong>django</strong>自带的命令创建工程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">django-admin startproject addressdemo</span>
</pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h3><ul>
<li>创建工程之后，cd到工程目录，创建一个名为addresstest的应用<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">python manage.py startapp addresstest</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h3 id="创建一个名为templates文件，在其中创建一个address-html的测试用页面"><a href="#创建一个名为templates文件，在其中创建一个address-html的测试用页面" class="headerlink" title="创建一个名为templates文件，在其中创建一个address.html的测试用页面"></a>创建一个名为templates文件，在其中创建一个address.html的测试用页面</h3><ul>
<li>在address.html中我们需要先为地图创建一个容器 在这里我们使用一个确定好的div病设置id为allmap</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1.0, user-scalable=no"</span>/&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span>
<span class="line">        body, html &#123;</span>
<span class="line">            width: 100%;</span>
<span class="line">            height: 100%;</span>
<span class="line">            margin: 0;</span>
<span class="line">            font-family: "微软雅黑";</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        #allmap &#123;</span>
<span class="line">            height: 700px;</span>
<span class="line">            width: 100%;</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        #r-result &#123;</span>
<span class="line">            width: 100%;</span>
<span class="line">            font-size: 14px;</span>
<span class="line">        &#125;</span>
<span class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span>
<span class="line">    </span>
<span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>经纬度定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"allmap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"r-result"</span>&gt;</span></span>
<span class="line"></span>
<span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> /&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span>
</pre></td></tr></table></figure>
<ul>
<li>同时我们也设置了一个button为了更好的测试我们写的引用的函数</li>
</ul>
<h4 id="注册百度开发者账号获取秘钥"><a href="#注册百度开发者账号获取秘钥" class="headerlink" title="注册百度开发者账号获取秘钥"></a>注册百度开发者账号获取秘钥</h4><ul>
<li>访问<a href="http://lbsyun.baidu.com/index.php?title=jspopular" target="_blank" rel="external">百度地图开放平台</a>注册账号并获取秘钥<br>获得秘钥的页面应该如下：<br><img src="http://objects.earthchen.cn/django%E6%89%B9%E9%87%8F%E5%9C%B0%E5%9D%80%E6%A0%87%E8%AE%B0%E6%B3%A8%E5%86%8C%E7%99%BE%E5%BA%A6%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7.png" alt="注册获取百度地图开发者账号"></li>
</ul>
<h4 id="在address-html添加上引入百度api的js代码"><a href="#在address-html添加上引入百度api的js代码" class="headerlink" title="在address.html添加上引入百度api的js代码"></a>在address.html添加上引入百度api的js代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span>
<span class="line">        <span class="attr">src</span>=<span class="string">"http://api.map.baidu.com/api?v=2.0&amp;ak=你的秘钥"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>
</pre></td></tr></table></figure>
<h3 id="连接mysql数据库"><a href="#连接mysql数据库" class="headerlink" title="连接mysql数据库"></a>连接mysql数据库</h3><ul>
<li>在<strong>settings.py</strong>中修改数据库连接语句<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span>
<span class="line">    <span class="string">'default'</span>: &#123;</span>
<span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span>
<span class="line">        <span class="string">'NAME'</span>: <span class="string">'addressdemo'</span>,</span>
<span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span>
<span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'000000'</span>,</span>
<span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,</span>
<span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h4 id="设置模型类"><a href="#设置模型类" class="headerlink" title="设置模型类"></a>设置模型类</h4><ul>
<li>在创建的app下的<strong>models.py</strong>中添加如下语句<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">address_info</span><span class="params">(models.Model)</span>:</span></span>
<span class="line">    longitude = models.FloatField()</span>
<span class="line">    latitude = models.FloatField()</span>
<span class="line">    data = models.CharField(max_length=<span class="number">200</span>)</span>
</pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>longitude为经度</li>
<li>latitude为维度</li>
<li>data为标记被点击所触发的显示的内容</li>
</ul>
</blockquote>
<h4 id="执行同步数据库操作"><a href="#执行同步数据库操作" class="headerlink" title="执行同步数据库操作"></a>执行同步数据库操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span>
<span class="line">python manage.py migrate</span>
</pre></td></tr></table></figure>
<ul>
<li>django 1.7之后版本适用</li>
</ul>
<h4 id="查看数据库并在其中addresstest-address-info表中插入测试数据"><a href="#查看数据库并在其中addresstest-address-info表中插入测试数据" class="headerlink" title="查看数据库并在其中addresstest_address_info表中插入测试数据"></a>查看数据库并在其中addresstest_address_info表中插入测试数据</h4><ul>
<li>如图为我插入的几条测试数据<br><img src="http://objects.earthchen.cn/django%E6%89%B9%E9%87%8F%E5%9C%B0%E5%9D%80%E5%9C%B0%E5%9B%BE%E6%A0%87%E8%AE%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%92%E5%85%A5%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE.png" alt="数据库插入测试数据"></li>
</ul>
<h3 id="在view和urls中配置视图函数和URL"><a href="#在view和urls中配置视图函数和URL" class="headerlink" title="在view和urls中配置视图函数和URL"></a>在view和urls中配置视图函数和URL</h3><h4 id="修改views"><a href="#修改views" class="headerlink" title="修改views"></a>修改views</h4><ul>
<li><p>修改完成后的<strong>address/views.py</strong>为</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span>
<span class="line"><span class="keyword">import</span> json</span>
<span class="line"><span class="keyword">from</span> addresstest.models <span class="keyword">import</span> address_info</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></span>
<span class="line">    address_point = address_info.objects.all()</span>
<span class="line">    address_longitude = []</span>
<span class="line">    address_latitude = []</span>
<span class="line">    address_data = []</span>
<span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(address_point)):</span>
<span class="line">        address_longitude.append(address_point[i].longitude)</span>
<span class="line">        address_latitude.append(address_point[i].latitude)</span>
<span class="line">        address_data.append(address_point[i].data)</span>
<span class="line"></span>
<span class="line">    <span class="keyword">return</span> render(request, <span class="string">'address.html'</span>,</span>
<span class="line">                  &#123;<span class="string">'address_longitude'</span>: json.dumps(address_longitude),</span>
<span class="line">                   <span class="string">'address_latitude'</span>: json.dumps(address_latitude), <span class="string">'address_data'</span>: json.dumps(address_data)&#125;)</span>
</pre></td></tr></table></figure>
</li>
<li><p>由于需要在前段页面中的js代码区域中使用，我们需要将列表json序列化然后通过页面渲染 或者  前段请求后端返回response携带接送数据</p>
</li>
<li>起初本想直接将<strong>address_point</strong>这个数据集直接传到前段,在由前段使用模板，没有时间类型也不知道为什么会序列化出错，如果有知道的可以反馈给我<blockquote>
<p>注：</p>
<ul>
<li>address_longitude为若干个坐标的经度</li>
<li>address_latitude为若干个坐标的维度</li>
<li>address_data为标记上所需要显示的数据</li>
</ul>
</blockquote>
</li>
</ul>
<h5 id="修改urls"><a href="#修改urls" class="headerlink" title="修改urls"></a>修改urls</h5><ul>
<li>由于只用来测试，所以我们只需要在工程名下的urls写设置一下即可<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span>
<span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span>
<span class="line"><span class="keyword">from</span> addresstest <span class="keyword">import</span> views</span>
<span class="line"></span>
<span class="line">urlpatterns = [</span>
<span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span>
<span class="line">    url(<span class="string">r'^address/'</span>,views.test),</span>
<span class="line">]</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h3 id="在address-html添加设置地图的js"><a href="#在address-html添加设置地图的js" class="headerlink" title="在address.html添加设置地图的js"></a>在address.html添加设置地图的js</h3><ul>
<li><p>因为js语句块放在页面哪里都可以被执行，所以大家可以按照自己的喜好放置，在这里我选择放在页面的最后</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span>
<span class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"allmap"</span>);</span>
<span class="line">    map.centerAndZoom(<span class="keyword">new</span> BMap.Point(<span class="number">118.3088230000</span>, <span class="number">32.3002390000</span>), <span class="number">18</span>);</span>
<span class="line">    map.enableScrollWheelZoom(<span class="literal">true</span>);</span>
<span class="line">    <span class="keyword">var</span> navigationControl = <span class="keyword">new</span> BMap.NavigationControl(&#123;</span>
<span class="line">        <span class="comment">// 靠左上角位置</span></span>
<span class="line">        anchor: BMAP_ANCHOR_TOP_LEFT,</span>
<span class="line">        <span class="comment">// LARGE类型</span></span>
<span class="line">        type: BMAP_NAVIGATION_CONTROL_LARGE,</span>
<span class="line">        <span class="comment">// 启用显示定位</span></span>
<span class="line">        enableGeolocation: <span class="literal">true</span></span>
<span class="line">    &#125;);</span>
<span class="line">    map.addControl(navigationControl);</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_location</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line"></span>
<span class="line">        <span class="keyword">var</span> address_latitude =&#123;&#123; address_latitude |safe&#125;&#125;;</span>
<span class="line">        <span class="keyword">var</span> address_longitude =&#123;&#123; address_longitude|safe &#125;&#125;;</span>
<span class="line">        <span class="keyword">var</span> address_data =&#123;&#123; address_data |safe&#125;&#125;;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        <span class="keyword">var</span> point = []; <span class="comment">//存放标注点经纬信息的数组</span></span>
<span class="line">        <span class="keyword">var</span> marker = []; <span class="comment">//存放标注点对象的数组</span></span>
<span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; address_longitude.length; i++) &#123;</span>
<span class="line">            point[i] = <span class="keyword">new</span> BMap.Point(address_longitude[i], address_latitude[i]); <span class="comment">//循环生成新的地图点</span></span>
<span class="line">            marker[i] = <span class="keyword">new</span> BMap.Marker(point[i]); <span class="comment">//按照地图点坐标生成标记</span></span>
<span class="line">            map.addOverlay(marker[i]);</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; marker.length; i++) &#123;</span>
<span class="line">            (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span>
<span class="line">                <span class="keyword">var</span> index = i;</span>
<span class="line">                marker[index].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span>
<span class="line">                    <span class="keyword">this</span>.openInfoWindow(<span class="keyword">new</span> BMap.InfoWindow(address_data[index]));</span>
<span class="line">                &#125;);</span>
<span class="line">            &#125;)();</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>由于marker在添加监听事件时调用外部函数添加参数无效但是我们这里又需要传递从数据库读出来的需要显示的信息，所以我们这里使用了js的闭包的概念，还使用了匿名函数，直接写在监听事件函数内</p>
</li>
</ul>
<ul>
<li>完整的<strong>address.html</strong>代码如下<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1.0, user-scalable=no"</span>/&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span>
<span class="line">        body, html &#123;</span>
<span class="line">            width: 100%;</span>
<span class="line">            height: 100%;</span>
<span class="line">            margin: 0;</span>
<span class="line">            font-family: "微软雅黑";</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        #allmap &#123;</span>
<span class="line">            height: 700px;</span>
<span class="line">            width: 100%;</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        #r-result &#123;</span>
<span class="line">            width: 100%;</span>
<span class="line">            font-size: 14px;</span>
<span class="line">        &#125;</span>
<span class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span>
<span class="line">            <span class="attr">src</span>=<span class="string">"http://api.map.baidu.com/api?v=2.0&amp;ak=你的秘钥"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>经纬度定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"allmap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"r-result"</span>&gt;</span></span>
<span class="line"></span>
<span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取我的位置"</span> <span class="attr">onclick</span>=<span class="string">"get_location()"</span>/&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span>
<span class="line">    <span class="comment">// 百度地图API功能</span></span>
<span class="line">  </span>
<span class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"allmap"</span>);</span>
<span class="line">    map.centerAndZoom(<span class="keyword">new</span> BMap.Point(<span class="number">118.3088230000</span>, <span class="number">32.3002390000</span>), <span class="number">18</span>);</span>
<span class="line">    map.enableScrollWheelZoom(<span class="literal">true</span>);</span>
<span class="line">    <span class="keyword">var</span> navigationControl = <span class="keyword">new</span> BMap.NavigationControl(&#123;</span>
<span class="line">        <span class="comment">// 靠左上角位置</span></span>
<span class="line">        anchor: BMAP_ANCHOR_TOP_LEFT,</span>
<span class="line">        <span class="comment">// LARGE类型</span></span>
<span class="line">        type: BMAP_NAVIGATION_CONTROL_LARGE,</span>
<span class="line">        <span class="comment">// 启用显示定位</span></span>
<span class="line">        enableGeolocation: <span class="literal">true</span></span>
<span class="line">    &#125;);</span>
<span class="line">    map.addControl(navigationControl);</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_location</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line"></span>
<span class="line">        <span class="keyword">var</span> address_latitude =&#123;&#123; address_latitude |safe&#125;&#125;;</span>
<span class="line">        <span class="keyword">var</span> address_longitude =&#123;&#123; address_longitude|safe &#125;&#125;;</span>
<span class="line">        <span class="keyword">var</span> address_data =&#123;&#123; address_data |safe&#125;&#125;;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        <span class="keyword">var</span> point = []; <span class="comment">//存放标注点经纬信息的数组</span></span>
<span class="line">        <span class="keyword">var</span> marker = []; <span class="comment">//存放标注点对象的数组</span></span>
<span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; address_longitude.length; i++) &#123;</span>
<span class="line">            point[i] = <span class="keyword">new</span> BMap.Point(address_longitude[i], address_latitude[i]); <span class="comment">//循环生成新的地图点</span></span>
<span class="line">            marker[i] = <span class="keyword">new</span> BMap.Marker(point[i]); <span class="comment">//按照地图点坐标生成标记</span></span>
<span class="line">            map.addOverlay(marker[i]);</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; marker.length; i++) &#123;</span>
<span class="line">            (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span>
<span class="line">                <span class="keyword">var</span> index = i;</span>
<span class="line">                marker[index].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span>
<span class="line">                    <span class="keyword">this</span>.openInfoWindow(<span class="keyword">new</span> BMap.InfoWindow(address_data[index]));</span>
<span class="line">                &#125;);</span>
<span class="line">            &#125;)();</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>
</pre></td></tr></table></figure>
</li>
</ul>
<h3 id="运行测试服务器查看效果"><a href="#运行测试服务器查看效果" class="headerlink" title="运行测试服务器查看效果"></a>运行测试服务器查看效果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">python manage.py runserver</span>
</pre></td></tr></table></figure>
<ul>
<li>在浏览器地址栏输入<a href="http://127.0.0.1:8000/address" target="_blank" rel="external">http://127.0.0.1:8000/address</a></li>
<li>点击按钮获取我的位置<br><img src="http://objects.earthchen.cn/django%E6%89%B9%E9%87%8F%E5%9C%B0%E5%9D%80%E6%A0%87%E8%AE%B0%E6%98%BE%E7%A4%BA%E7%BB%93%E6%9E%9C.png" alt="批量地址标记显示结果"><br>如上图显示即为成功。</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>django1.9</strong>和<strong>Python2.7.12</strong>在<strong>ubuntu16.04 lts</strong>中编译成功运行，其他环境请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu搭建常见开发环境]]></title>
      <url>/2017/03/15/ubuntu_do_something_coding/</url>
      <content type="html"><![CDATA[<p>由于之前使用Ubuntu16.10桌面版系统蹦了好几天，因此我也装了好几次系统了，每次都要百度或google查很多东西，去配置开发环境或使用环境，到处搜觉得很麻烦，所以，本文就总结一下Ubuntu安装好之后需要做的一些事，以及常规配置习惯</p>
<p>在装了几次系统之后我最后还是决定降一个系统版本。。使用<strong>Ubuntu16.04lts</strong>长期维护版，希望能稳定一些吧。。。。。实在是有点伤了</p>
<p>文本以Ubuntu16.04桌面版为环境介绍</p>
<h2 id="常用编程环境搭建"><a href="#常用编程环境搭建" class="headerlink" title="常用编程环境搭建"></a>常用编程环境搭建</h2><a id="more"></a>
<h3 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h3><p>java的环境基本处处都能用的到，所以去安装jdk<br>使用下面的命令安装，只需一些时间，它就会下载许多的文件（但是要确定你的网络环境良好，访问oracle的地址速度快）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/java</span>
<span class="line">sudo apt-get update</span>
<span class="line">sudo apt-get install oracle-java8-installer</span>
<span class="line">sudo apt-get install oracle-java8-set-default</span>
</pre></td></tr></table></figure></p>
<p>一般我不会这么干的，因为，，实在太慢了 而且一不小心就卡主了apt</p>
<blockquote>
<p>所以流程如下：</p>
<ol>
<li>我们这里通过<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">oracle官网</a>提前下好适合你系统版本的jdk的压缩包</li>
<li>将下好的压缩包解压到合适的地方</li>
<li>配置环境变量</li>
<li>使配置的变量立即生效</li>
</ol>
</blockquote>
<p>先在合适的地方创建一个放置环境的文件夹笔者这里使/usr/java/<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/</span>
<span class="line">mkdir java</span>
</pre></td></tr></table></figure></p>
<p>然后将下好的jdk复制到创建好的文件夹下并解压：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">sudo cp jdk-8u45-linux-x64.gz /usr/java/</span>
<span class="line"><span class="built_in">cd</span> /usr/java/</span>
<span class="line">sudo tar -zvxf jdk-8u45-linux-x64.gz</span>
</pre></td></tr></table></figure></p>
<p>配置环境变量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">gedit ~/.bashrc</span>
</pre></td></tr></table></figure></p>
<p>在编辑页面的最后添加如下语句<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_45</span>
<span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span>
<span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span>
<span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span>
</pre></td></tr></table></figure></p>
<p>添加之后如图所示<br><img src="http://objects.earthchen.cn/ubuntu_java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="java环境变量"></p>
<p>保存环境变量，退出编辑器，输入命令使之生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span>
</pre></td></tr></table></figure></p>
<ul>
<li>输入java -version查看是否成功<br><img src="http://objects.earthchen.cn/ubuntu_java%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="java安装成功"><br>如上图所示即为成功。。</li>
</ul>
<h3 id="安装javaee服务器tomcat"><a href="#安装javaee服务器tomcat" class="headerlink" title="安装javaee服务器tomcat"></a>安装javaee服务器tomcat</h3><ol>
<li>从tomcat官网上下载需要的压缩包</li>
<li>将压缩包解压并移动到<strong>/opt/tomcat/</strong>下，如果没有这个目录需要提前创建好目录</li>
<li><p>打开<strong>/tomcat/bin/startup.sh/</strong>在文件的最后添加jdk和jre配置信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#Java</span></span>
<span class="line"><span class="built_in">export</span>JAVA_HOME=/opt/java/jdk1.8.0_121  <span class="comment">#java目录</span></span>
<span class="line"><span class="built_in">export</span>JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span>
<span class="line"><span class="built_in">export</span>CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span>
<span class="line"><span class="built_in">export</span>PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span>
<span class="line"><span class="comment">#tomcat</span></span>
<span class="line"><span class="built_in">export</span>TOMCAT_HOME=/opt/tomcat/apache-tomcat-9.0.0.M11</span>
</pre></td></tr></table></figure>
</li>
<li><p>启动tomcat</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">./bin/startup.sh</span>
</pre></td></tr></table></figure>
</li>
<li><p>验证tomcat配置和安装是否成功<br>在浏览器地址栏输入127.0.0.1:8080（ip：端口号）</p>
</li>
<li><p>关闭tomcat</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">./bin/shuntdown.sh</span>
</pre></td></tr></table></figure>
</li>
<li><p>给tomcat文件夹及所有文件赋予权限777</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">chmod 777 /opt/tomcat -R</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>程序员必备工具啊  一般安装好系统就会安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo apt install git</span>
</pre></td></tr></table></figure></p>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>常用的关系型数据库，开发必备<br>在Ubuntu下安装mysql很简单，只需要简单的输入几条命令就好：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span>
<span class="line"></span>
<span class="line">sudo apt-get install mysql-client</span>
<span class="line"></span>
<span class="line">sudo apt-get install libmysqlclient-dev</span>
</pre></td></tr></table></figure></p>
<p>安装过程中会提示输入用户名和密码，按照自己的需要去设置</p>
<h3 id="安装mysql数据库可视化工具"><a href="#安装mysql数据库可视化工具" class="headerlink" title="安装mysql数据库可视化工具"></a>安装mysql数据库可视化工具</h3><p>可以选择MySQL-workbench或者phpmyadmin</p>
<h4 id="MySQL-workbench"><a href="#MySQL-workbench" class="headerlink" title="MySQL-workbench"></a>MySQL-workbench</h4><p>使用如下命令安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-workbench</span>
</pre></td></tr></table></figure></p>
<h4 id="phpmyadmin"><a href="#phpmyadmin" class="headerlink" title="phpmyadmin"></a>phpmyadmin</h4><p>使用如下命令安装</p>
<ol>
<li><p>安装php</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo apt install php</span>
</pre></td></tr></table></figure>
</li>
<li><p>安装apache2</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo apt install apache2</span>
</pre></td></tr></table></figure>
</li>
<li><p>安装phpmyadmin</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo apt-get install phpmyadmin</span>
</pre></td></tr></table></figure>
</li>
<li><p>建立/var/www/html 下的软连接</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo ln <span class="_">-s</span> /usr/share/phpmyadmin /var/www/html/phpmyadmin</span>
</pre></td></tr></table></figure>
</li>
<li><p>然后重启apache</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/apache2 restart</span>
</pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装Vim"><a href="#安装Vim" class="headerlink" title="安装Vim"></a>安装Vim</h3><p>程序员必备工具啊  一般安装好系统就会安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo apt install vim</span>
</pre></td></tr></table></figure></p>
<p>vim的配置我就直接用大神的vim配置<strong>spf13-vim</strong><br>安装方法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">curl https://j.mp/spf13-vim3 -L &gt; spf13-vim.sh &amp;&amp; sh spf13-vim.sh</span>
</pre></td></tr></table></figure></p>
<p>剩下的只要等待即可，由于过程需要git等环境，需要提前安装好</p>
<h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><p>Ubuntu虽然内置了Python2和python3两个版本但是没有默认安装好pip这个好用的包管理工具，所以要用于python开发的话最好安装上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">sudo apt install python-pip   <span class="comment">#python2的pip</span></span>
<span class="line">sudo apt install python3-pip   <span class="comment">#python3的pip</span></span>
</pre></td></tr></table></figure></p>
<p>由于pip默认的时国外的源，在国内访问极慢，为了方便我们这里将更新源修改成国内比较好用的豆瓣源</p>
<ol>
<li><p>首先在用户目录下新建.pip文件夹</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">mkdir .pip</span>
</pre></td></tr></table></figure>
</li>
<li><p>进入.pip目录创建pip.conf文件，在文件中添加如下内容</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">[global]</span>
<span class="line">timeout = <span class="number">60</span></span>
<span class="line">index-url = http:<span class="comment">//pypi.douban.com/simple</span></span>
<span class="line">trusted-host = pypi.douban.com</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>添加完保存即可享受飞一般的速度</p>
<h3 id="安装几个好用的ide"><a href="#安装几个好用的ide" class="headerlink" title="安装几个好用的ide"></a>安装几个好用的ide</h3><p>有些人觉得vim强无敌，但是我懒得配那些环境，还是用ide吧 懒人嘛  嘿嘿</p>
<h4 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h4><p>很著名的python ide，比起在vim中配置一个开发环境，我还是觉得pycharm更好用，也更方便<br>进入<a href="http://www.jetbrains.com/pycharm/download/#section=linux" target="_blank" rel="external">pycharm下载地址</a>下载适合自己系统的安装包<br>解压到合适的地方<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/earthchen/code/pycharm-2016.3.2/bin</span>
<span class="line">sh pycharm.sh</span>
</pre></td></tr></table></figure></p>
<p>剩下就全是图形化界面，自己按需求操作</p>
<h4 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h4><p>很著名的java ide  好用程度  谁用谁知道<br>进入<a href="http://www.jetbrains.com/idea/download/#section=linux" target="_blank" rel="external">idea下载地址</a>下载适合自己系统的安装包<br>解压到合适的地方<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> code/idea-IU-163.12024.16/bin/</span>
<span class="line">sh idea.sh</span>
</pre></td></tr></table></figure></p>
<p>剩下就全是图形化界面，自己按需求操作</p>
<h4 id="clion"><a href="#clion" class="headerlink" title="clion"></a>clion</h4><p>Ubuntu下开发c并不多 放着偶尔用下，肯定比不上win下的vs又不想每次都make或者gcc 所以选择了同一个公司的ide<br>进入<a href="http://www.jetbrains.com/clion/download/" target="_blank" rel="external">clon下载地址</a>下载适合自己系统的安装包<br>解压到合适的地方<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/earthchen/code/clion-2016.3.3/bin</span>
<span class="line">sh clion.sh</span>
</pre></td></tr></table></figure></p>
<p>剩下就全是图形化界面，自己按需求操作</p>
<h4 id="激活码"><a href="#激活码" class="headerlink" title="激活码"></a>激活码</h4><p>如果你下载安装的时专业版，那么还需要使用激活码才能使用，但是一般来说社区版已经够用<br>下面提供一下从网上搜集来的激活码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">CNEKJPQZEX-eyJsaWNlbnNlSWQiOiJDTkVLSlBRWkVYIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9XSwiaGFzaCI6IjUxOTU1OTMvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-QOxwjWvRwJz6vo6J6adC3CJ4ukQHosbPYZ94URUVFna/Rbew8xK/M5gP3kAaPh6ZDveFdtMR1UBoumq3eCwXtXM3U3ls5noB4LIr+QplVlCj2pK5uNq7g/feyNyQcHpSXtvhIOnXDBLOecB05DOsxzm0p7ulGGJoAInmHeb9mc0eYjqc4RPpUQfh6HSYBnvEnKMlLF5bz4KEtzmsvvgA55CwzwQ3gRitm5Q/wUT7AQCBdjmBfNUjKVQL6TSjSDPp56FUdEs4Aab8LqstA2DIMbxocO64rvytmcUeIwu8Mi5uq87KQP5AQMSMYb59Inbd+dmVfx5cJo3fRS4/<span class="number">5</span>s3/Hg==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/<span class="number">5</span>oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/<span class="number">78</span>TmVqFl8nOeD5+<span class="number">07</span>B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/<span class="number">8</span>vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+<span class="number">0</span>gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+<span class="number">2</span>yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++<span class="number">2</span>+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</span>
</pre></td></tr></table></figure></p>
<p>以上激活码全系列ide通用</p>
<h3 id="sublime-text-3"><a href="#sublime-text-3" class="headerlink" title="sublime text 3"></a>sublime text 3</h3><p>如果你需要前端开发，那么我推荐这个文本编辑器，我一般的做法时将这个替代自带的文本编辑器，毕竟它还支持markdown<br>一般安装需要先下载好deb的安装包然后执行以下命令安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo dpkg -i xxxx.deb</span>
</pre></td></tr></table></figure></p>
<p>然后程序就会自动安装完毕<br>不知是因为bug还是什么，在Ubuntu下的sublime text 3时不支持中文输入的</p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ol>
<li><p>在终端里输入如下指令，下载我们所需要的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/lyfeyaj/sublime-text-imfix.git</span>
</pre></td></tr></table></figure>
</li>
<li><p>将subl移动到/usr/bin/，并且将sublime-imfix.so移动到/opt/sublime_text/</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/sublime-text-imfix</span>
<span class="line">sudo cp ./lib/libsublime-imfix.so /opt/sublime_text/</span>
<span class="line">sudo cp ./src/subl /usr/bin/</span>
</pre></td></tr></table></figure>
</li>
<li><p>终端启动sublime text</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">LD_PRELOAD=./libsublime-imfix.so subl</span>
</pre></td></tr></table></figure>
</li>
<li><p>此时应该已经可以能输中文了，但这样略麻烦了点，我们希望点图标就可以支持输入中文，所以我们还需要下面几部</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo vim /usr/share/applications/sublime_text.desktop</span>
</pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>打开后将Exec=/opt/sublime_text/sublime_text %F修改为<br>    Exec=bash -c ‘LD_PRELOAD=/usr/lib/libsublime-imfix.so /opt/sublime_text/sublime_text’ %F</p>
<p>将Exec=/opt/sublime_text/sublime_text -n修改为<br>    Exec=bash -c ‘LD_PRELOAD=/usr/lib/libsublime-imfix.so /opt/sublime_text/sublime_text’ -n</p>
</blockquote>
<h3 id="fish"><a href="#fish" class="headerlink" title="fish"></a>fish</h3><p>自带的终端bash不是很好用，所以我这里使用fish来代替自带shell</p>
<ol>
<li><p>首先安装fish</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo apt install fish</span>
</pre></td></tr></table></figure>
</li>
<li><p>替代自带shell</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">chsh</span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>修改完如图所示<br><img src="http://objects.earthchen.cn/ubuntu_fish%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="Ubuntu_fish安装成功"></p>
<p>以上配置完成，基本就能符合我的日常coding需求了，下一篇将介绍其他日常使用需要安装配置的东西</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述环境在<strong>ubuntu16.04 lts</strong>中搭建测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu在双系统下开机卡死或关机卡死的解决办法]]></title>
      <url>/2017/03/10/ubuntu%E5%AE%89%E8%A3%85%E5%9C%A8%E5%8F%8C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0%E6%9C%AC%E4%B8%8B%E5%BC%80%E6%9C%BA%E6%88%96%E5%85%B3%E6%9C%BA%E5%8D%A1%E6%AD%BB.1/</url>
      <content type="html"><![CDATA[<p>很多双显卡的笔记本在安装linux发行版的时候可能会出现问题，<br>笔者的电脑如果不在bios设置中设置屏蔽核显就会开机卡主，所以装系统时必须得屏蔽核显，全局独显，不然进系统就卡死，关机也关不掉，<br>刚开始也就这么用着，但是慢慢发现一点问题，，就是耗电特别快，</p>
<a id="more"></a>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>查询好多资料发现，这是因为驱动的问题，grub中的设置为问题，开源驱动的和独立显卡驱动的冲突问题</p>
<ol>
<li>在grub界面按e进入配置修改界面</li>
<li>找到有<strong>ro quiet splash</strong>这一行中（笔者这里是倒数第二行）</li>
<li>将<strong>ro</strong>后面的全部删掉</li>
<li>在<strong>ro</strong>后面加上nomodeset</li>
<li>按<strong>f10</strong>保存重启即可</li>
</ol>
<p>然后就可以用核显啦，而且也不会卡死了。。。。待机时间长一倍都不止啊。。。。。。</p>
<blockquote>
<p>注： 需在设置里安装英伟达闭源驱动</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 解决方案 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python生成项目所需依赖文件]]></title>
      <url>/2016/10/11/python_requirements/</url>
      <content type="html"><![CDATA[<p>在开发或者在github上clone <strong>python</strong>项目时，我们经常能看到他们工程的根目录下有一个<strong>requirements.txt</strong>文件，并且在<strong>Readme</strong>中介绍使用前需要运行一些命令<br>这个时什么意思呢？<br>开发者希望我们能快速配置项目所需要的环境，所以我们需要这个很重要的文件</p>
<h2 id="python依赖文件"><a href="#python依赖文件" class="headerlink" title="python依赖文件"></a>python依赖文件</h2><a id="more"></a>
<h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><ol>
<li><p>自己在工程根目录下创建一个<strong>任意文件名.txt</strong>,在其中以如下格式输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">six==1.10.0</span>
<span class="line">unity-lens-photos==1.0</span>
<span class="line">uritemplate==3.0.0</span>
<span class="line">urllib3==1.13.1</span>
<span class="line">waitress==0.8.10</span>
<span class="line">...</span>
<span class="line">...</span>
</pre></td></tr></table></figure>
</li>
<li><p>使用如下命令自动生成，但可能会生成一些无关项目的依赖</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span>
</pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>以上命令需要进入工程目录</p>
</blockquote>
<h3 id="使用依赖文件"><a href="#使用依赖文件" class="headerlink" title="使用依赖文件"></a>使用依赖文件</h3><ul>
<li>运行项目之前进入工程目录，在其中执行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span>
</pre></td></tr></table></figure>
</li>
</ul>
<p>以上代码会帮你自动安装所需所有依赖，</p>
<p>只需要等待以下就安装好了所有坏境，是不是很方便啊，不然还得一个一个的pip安装</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述测试在<strong>ubuntu16.04 lts</strong>中成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用hexo和github或coding 搭免费个人博客]]></title>
      <url>/2016/10/10/hexo_github_coding_blog/</url>
      <content type="html"><![CDATA[<p>博客对我来说，就像一个云端笔记,可以记录一下自己在完成各种任务中坑，也可以让别人看到从而避免这些，可以写博客的地方有很多比如csdn、博客园、简书之类的，但是看到许多大神都是用自己搭建的博客，仔细一了解才知道都是用hexo和github搭建的<br>看了许多教程之后，踩了许多坑之后就想总结一下自己的搭建过程</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><blockquote>
<p><strong>环境</strong></p>
<ol>
<li>Node.js</li>
<li>Git</li>
<li>npm</li>
<li>coding或github</li>
</ol>
</blockquote>
<p><strong>由于我使用的主力系统时Ubuntu所以本文以Ubuntu下的搭建教程</strong></p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><a id="more"></a>
<h4 id="首先安装node-js"><a href="#首先安装node-js" class="headerlink" title="首先安装node.js"></a>首先安装node.js</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo apt install nodejs</span>
</pre></td></tr></table></figure>
<h4 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo apt install npm</span>
</pre></td></tr></table></figure>
<ul>
<li>上面操作完成后,根据你使用的源不同，可能得到不同的版本，但是有时候可能因为版本不够新而导致hexo等其他的包安装失败，所有我们这里最好在使用几条命令更新一下node.js</li>
<li><p>在已安装好npm的情况下使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">sudo npm install -g n</span>
<span class="line"></span>
<span class="line">sudo n stable</span>
</pre></td></tr></table></figure>
</li>
<li><p>这样就可以把node.js升级到最新版</p>
</li>
</ul>
<h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>程序员必备工具啊  一般安装好系统就会安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo apt install git</span>
</pre></td></tr></table></figure></p>
<h4 id="注册github或者coding-net账号"><a href="#注册github或者coding-net账号" class="headerlink" title="注册github或者coding.net账号"></a>注册github或者coding.net账号</h4><ul>
<li>注册账号并登录创建一个和用户名同名的仓库并开启pages服务</li>
</ul>
<h4 id="在本地生成公钥和私钥"><a href="#在本地生成公钥和私钥" class="headerlink" title="在本地生成公钥和私钥"></a>在本地生成公钥和私钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"你的用户名"</span></span>
<span class="line"></span>
<span class="line">git config --global user.email <span class="string">"你的邮箱"</span></span>
<span class="line"></span>
<span class="line">ssh-keygen -t rsa -C “你的邮箱”</span>
</pre></td></tr></table></figure>
<ul>
<li>输入生成key命令之后一般直接按三次回车   设置密码为空</li>
<li>然后<strong>cd</strong>到.ssh目录下打开id_rsa.pub，将内容复制添加到github coding的公钥<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">vim .ssh/id_rsa.pub</span>
</pre></td></tr></table></figure>
</li>
</ul>
<p>经过以上步骤 基本环境就搭建好了，在linux下安装开发环境还是相当简单的。。。。。</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span>
<span class="line"></span>
<span class="line">sudo npm install hexo-deployer-git --save</span>
</pre></td></tr></table></figure>
<ul>
<li>如果安装失败的话请替换成淘宝源重新安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h3 id="建立站点"><a href="#建立站点" class="headerlink" title="建立站点"></a>建立站点</h3><p>首先在合适的地方创建一个你的博客目录然后进入这个目录<br>然后执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">hexo init</span>
</pre></td></tr></table></figure></p>
<ul>
<li>目录里面的_config.yml是站点配置文件，后面还会说到主题配置文件，每一个主题都用一个_config.yml文件，不要搞混了，到目前为止博客环境已经搭建完成</li>
</ul>
<h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><h4 id="首先生成静态页面"><a href="#首先生成静态页面" class="headerlink" title="首先生成静态页面"></a>首先生成静态页面</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">hexo generate</span>
<span class="line">或hexo g</span>
</pre></td></tr></table></figure>
<h4 id="启动本地服务预览"><a href="#启动本地服务预览" class="headerlink" title="启动本地服务预览"></a>启动本地服务预览</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">hexo server</span>
<span class="line">或hexo s</span>
</pre></td></tr></table></figure>
<ul>
<li>然后在浏览器地址栏输入<a href="http://127.0.0.1:4000就可以看到默认的博客效果" target="_blank" rel="external">http://127.0.0.1:4000就可以看到默认的博客效果</a><br><img src="http://objects.earthchen.cn/hexo_blog.png" alt="hexo_blog"><br>如上图显示即为成功。</li>
</ul>
<h3 id="修改配置文件和主题"><a href="#修改配置文件和主题" class="headerlink" title="修改配置文件和主题"></a>修改配置文件和主题</h3><h4 id="修改主配置文件-config-yml"><a href="#修改主配置文件-config-yml" class="headerlink" title="修改主配置文件_config.yml"></a>修改主配置文件_config.yml</h4><p>按照自己的喜好去修改即可 重点时最后一部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">deploy:</span>
<span class="line">   #我们是使用 git 来部署的。</span>
<span class="line">    type: git</span>
<span class="line">    # git 仓库的地址。</span>
<span class="line">    repo:</span>
<span class="line">      coding: git@git.coding.net:EarthChen/EarthChen.git,coding-pages</span>
<span class="line">      github: git@github.com:EarthChen/EarthChen.github.io.git</span>
</pre></td></tr></table></figure></p>
<ul>
<li>按照上述格式修改你的仓库地址  修改连接方式为ssh  这样在推送的时候可以不用输入密码 从而使用公钥私钥匹配模式</li>
<li>在国内推荐使用coding方式  毕竟。。。你懂的   但是也可以同时在github和coding上同时托管，就如上述所示</li>
</ul>
<h4 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h4><p>可以百度或google自己喜欢的hexo主题来使用 然后在站点配置文件内修改一下主题名即可</p>
<h3 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h3><h4 id="生成一篇博客"><a href="#生成一篇博客" class="headerlink" title="生成一篇博客"></a>生成一篇博客</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"文章名"</span></span>
</pre></td></tr></table></figure>
<ul>
<li>不过个人更喜欢直接复制原来写好的博客然后拿来修改</li>
</ul>
<h4 id="发表命令"><a href="#发表命令" class="headerlink" title="发表命令"></a>发表命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">hexo clean   <span class="comment"># 清理静态文件</span></span>
<span class="line">hexo g       <span class="comment">#生成新的静态文件</span></span>
<span class="line">hexo s       <span class="comment">#在本地预览博客</span></span>
<span class="line">hexo d       <span class="comment">#推送到远端仓库</span></span>
</pre></td></tr></table></figure>
<p>在最后贴上我自己的博客页面  喜欢的可以去下载主题自己配置（yelee）</p>
<p><img src="http://objects.earthchen.cn/earthchen_hexo_blog.png" alt="earthchen_blog"><br>如上图显示即为成功。</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>ubuntu16.04 lts</strong>中测试成功</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> Node.js </tag>
            
            <tag> Hexo </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django操作数据库]]></title>
      <url>/2016/08/15/django%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>本篇主要介绍我们在使用django框架开发的时候使用的操作数据库的语句，这在动态网站部分是很重要的，因为我们需要连接数据库进行操作，然后把数据处理的结果显示在前端页面上，在其他地方我们都是直接用sql语句来手动输入，这样容易造成错误，还影响效率，在django中，内置了很多处理数据库操作的函数，能更便利的帮我们操作数据库</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><p><strong>models.py</strong><br><a id="more"></a><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line">class Blog(models.Model):</span>
<span class="line">    name = models.CharField(max_length=100)</span>
<span class="line">    tagline = models.TextField()</span>
<span class="line"></span>
<span class="line">def __unicode__(self):</span>
<span class="line">    return self.name</span>
<span class="line"></span>
<span class="line">class Author(models.Model):</span>
<span class="line">    name = models.CharField(max_length=50)</span>
<span class="line">    email = models.EmailField()</span>
<span class="line"></span>
<span class="line">#python3中用__str__</span>
<span class="line">def __unicode__(self):</span>
<span class="line">    return self.name</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">class Entry(models.Model):</span>
<span class="line">    blog = models.ForeignKey(Blog)</span>
<span class="line">    headline = models.CharField(max_length=255)</span>
<span class="line">    body_text = models.TextField()</span>
<span class="line">    pub_date = models.DateTimeField()</span>
<span class="line"></span>
<span class="line">authors = models.ManyToManyField(Author)</span>
<span class="line"></span>
<span class="line">#python3中用__str__</span>
<span class="line">def __unicode__(self):</span>
<span class="line">    return self.headline</span>
</pre></td></tr></table></figure></p>
<ul>
<li>models模块中有三个类blog，author，以及entry</li>
<li>entry分别与blog与author表关联</li>
<li>entry与blog表是通过外键(models.ForeignKey())相连，属于一对多的关系，即一个entry对应多个blog，entry与author是多对多的关系，通过modles.ManyToManyField()实现</li>
</ul>
<h3 id="插入数据库"><a href="#插入数据库" class="headerlink" title="插入数据库"></a>插入数据库</h3><ul>
<li>用save()方法实现，如下所示：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mysite.blog.models <span class="keyword">import</span> Blog  <span class="comment">#导入blog这个app</span></span>
<span class="line"></span>
<span class="line">b = Blog(name=<span class="string">'Beatles Blog'</span>, tagline=<span class="string">'All the latest Beatles news.'</span>)</span>
<span class="line">b.save()</span>
</pre></td></tr></table></figure>
<h3 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h3><ul>
<li>用save()方法实现，如下所示：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">b5.name = 'New name</span>
<span class="line">b5.save()</span>
</pre></td></tr></table></figure>
<h4 id="保存外键和多对多关系的字段"><a href="#保存外键和多对多关系的字段" class="headerlink" title="保存外键和多对多关系的字段"></a>保存外键和多对多关系的字段</h4><ul>
<li>更新外键字段和普通的字段一样，只要指定一个对象的正确类型。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">cheese_blog = Blog.objects.get(name=<span class="string">"Cheddar Talk"</span>)</span>
<span class="line">entry.blog = cheese_blog</span>
<span class="line">entry.save()</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h4 id="更新多对多字段时又一点不太一样，使用add-方法添加相关联的字段的值"><a href="#更新多对多字段时又一点不太一样，使用add-方法添加相关联的字段的值" class="headerlink" title="更新多对多字段时又一点不太一样，使用add()方法添加相关联的字段的值"></a>更新多对多字段时又一点不太一样，使用add()方法添加相关联的字段的值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">joe = Author.objects.create(name=<span class="string">"Joe"</span>)</span>
<span class="line">entry.authors.add(joe)</span>
</pre></td></tr></table></figure>
<h3 id="检索对象"><a href="#检索对象" class="headerlink" title="检索对象"></a>检索对象</h3><h4 id="检索所有的对象"><a href="#检索所有的对象" class="headerlink" title="检索所有的对象"></a>检索所有的对象</h4><ul>
<li>使用all()方法返回数据库中的所有对象。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">all_entries = Entry.objects.all()</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h4 id="检索特定的对象"><a href="#检索特定的对象" class="headerlink" title="检索特定的对象"></a>检索特定的对象</h4><h5 id="返回一个与参数匹配的QuerySet-相当于等于"><a href="#返回一个与参数匹配的QuerySet-相当于等于" class="headerlink" title="返回一个与参数匹配的QuerySet,相当于等于(=)"></a>返回一个与参数匹配的QuerySet,相当于等于(=)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#fileter(**kwargs)</span></span>
<span class="line">Entry.objects.filter(pub_date__year=<span class="number">2006</span>)</span>
</pre></td></tr></table></figure>
<ul>
<li>以上语句等同于<strong>slect * from entry where pub_date_year=’2006’</strong></li>
</ul>
<h5 id="返回一个与参数不匹配的QuerySet-相当于不等于"><a href="#返回一个与参数不匹配的QuerySet-相当于不等于" class="headerlink" title="返回一个与参数不匹配的QuerySet,相当于不等于(!=)"></a>返回一个与参数不匹配的QuerySet,相当于不等于(!=)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">exclude(**kwargs)</span>
</pre></td></tr></table></figure>
<h5 id="对参数进行重用的方法"><a href="#对参数进行重用的方法" class="headerlink" title="对参数进行重用的方法"></a>对参数进行重用的方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">q1 = Entry.objects.filter(headline__startswith=<span class="string">"What"</span>)</span>
<span class="line">q2 = q1.exclude(pub_date__gte=datetime.now())</span>
<span class="line">q3 = q1.filter(pub_date__gte=datetime.now())</span>
</pre></td></tr></table></figure>
<h5 id="QuerySet是延迟加载-只在使用的时候才会去访问数据库"><a href="#QuerySet是延迟加载-只在使用的时候才会去访问数据库" class="headerlink" title="QuerySet是延迟加载(只在使用的时候才会去访问数据库)"></a>QuerySet是延迟加载(只在使用的时候才会去访问数据库)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">q = Entry.objects.filter(headline__startswith=<span class="string">"What"</span>)</span>
<span class="line">q = q.filter(pub_date__lte=datetime.now())</span>
<span class="line">q = q.exclude(body_text__icontains=<span class="string">"food"</span>)</span>
<span class="line"><span class="keyword">print</span> q</span>
</pre></td></tr></table></figure>
<ul>
<li>在print q时才会访问数据库</li>
</ul>
<h5 id="查找前5个entry表里的数据"><a href="#查找前5个entry表里的数据" class="headerlink" title="查找前5个entry表里的数据"></a>查找前5个entry表里的数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Entry.objects.all()[:<span class="number">5</span>]</span>
</pre></td></tr></table></figure>
<h5 id="查找从第5个到第10个之间的数据"><a href="#查找从第5个到第10个之间的数据" class="headerlink" title="查找从第5个到第10个之间的数据"></a>查找从第5个到第10个之间的数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Entry.objects.all()[<span class="number">5</span>:<span class="number">10</span>]</span>
</pre></td></tr></table></figure>
<h5 id="查询从第0个开始到第10个，步长为2的数据"><a href="#查询从第0个开始到第10个，步长为2的数据" class="headerlink" title="查询从第0个开始到第10个，步长为2的数据"></a>查询从第0个开始到第10个，步长为2的数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Entry.objects.all()[:<span class="number">10</span>:<span class="number">2</span>]</span>
</pre></td></tr></table></figure>
<h5 id="取按headline字段排序后的第一个对象"><a href="#取按headline字段排序后的第一个对象" class="headerlink" title="取按headline字段排序后的第一个对象"></a>取按headline字段排序后的第一个对象</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">Entry.objects.order_by(<span class="string">'headline'</span>)[<span class="number">0</span>]</span>
<span class="line"><span class="comment">#或Entry.objects.order_by('headline')[0:1].get()</span></span>
</pre></td></tr></table></figure>
<h5 id="查找id-14的对象。"><a href="#查找id-14的对象。" class="headerlink" title="查找id=14的对象。"></a>查找id=14的对象。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">Blog.objects.get(id__exact=<span class="number">14</span>) <span class="comment"># Explicit form</span></span>
<span class="line">Blog.objects.get(id=<span class="number">14</span>)         <span class="comment"># __exact is implied</span></span>
</pre></td></tr></table></figure>
<h5 id="SELECT-FROM-blog-entry-WHERE-pub-date-lt-‘2006-01-01’"><a href="#SELECT-FROM-blog-entry-WHERE-pub-date-lt-‘2006-01-01’" class="headerlink" title="SELECT * FROM blog_entry WHERE pub_date &lt;= ‘2006-01-01’"></a>SELECT * FROM blog_entry WHERE pub_date &lt;= ‘2006-01-01’</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Entry.objects.filter(pub_date__lte=<span class="string">'2006-01-01'</span>)</span>
</pre></td></tr></table></figure>
<h5 id="SELECT-…-WHERE-headline-‘Man-bites-dog’"><a href="#SELECT-…-WHERE-headline-‘Man-bites-dog’" class="headerlink" title="SELECT … WHERE headline = ‘Man bites dog’"></a>SELECT … WHERE headline = ‘Man bites dog’</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Entry.objects.get(headline__exact=<span class="string">"Man bites dog"</span>)</span>
</pre></td></tr></table></figure>
<h5 id="查找name-”beatles-blog”的对象，不区分大小写。"><a href="#查找name-”beatles-blog”的对象，不区分大小写。" class="headerlink" title="查找name=”beatles blog”的对象，不区分大小写。"></a>查找name=”beatles blog”的对象，不区分大小写。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Entry.objects.get(headline__contains=<span class="string">'Lennon'</span>)</span>
</pre></td></tr></table></figure>
<ul>
<li>等同于SELECT … WHERE headline LIKE ‘%Lennon%’</li>
</ul>
<h5 id="查找entry表中外键关系blog-name-’Beatles-Blog’的Entry对象"><a href="#查找entry表中外键关系blog-name-’Beatles-Blog’的Entry对象" class="headerlink" title="查找entry表中外键关系blog_name=’Beatles Blog’的Entry对象"></a>查找entry表中外键关系blog_name=’Beatles Blog’的Entry对象</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Entry.objects.filter(blog__name__exact=<span class="string">'Beatles Blog'</span>)</span>
</pre></td></tr></table></figure>
<h5 id="查找blog表中外键关系entry表中的headline字段中包含Lennon的blog数据"><a href="#查找blog表中外键关系entry表中的headline字段中包含Lennon的blog数据" class="headerlink" title="查找blog表中外键关系entry表中的headline字段中包含Lennon的blog数据"></a>查找blog表中外键关系entry表中的headline字段中包含Lennon的blog数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Blog.objects.filter(entry__headline__contains=<span class="string">'Lennon'</span>)</span>
</pre></td></tr></table></figure>
<h5 id="查找blog表中外键关系entry表中的author字段中包含Lennon的blog数据"><a href="#查找blog表中外键关系entry表中的author字段中包含Lennon的blog数据" class="headerlink" title="查找blog表中外键关系entry表中的author字段中包含Lennon的blog数据"></a>查找blog表中外键关系entry表中的author字段中包含Lennon的blog数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Blog.objects.filter(entry__author__name=<span class="string">'Lennon'</span>)</span>
</pre></td></tr></table></figure>
<h5 id="查询的是author-name为null的值"><a href="#查询的是author-name为null的值" class="headerlink" title="查询的是author_name为null的值"></a>查询的是author_name为null的值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">Blog.objects.filter(entry__author__name__isnull=<span class="keyword">True</span>)</span>
<span class="line">Blog.objects.filter(entry__author__isnull=<span class="keyword">False</span>,entry__author__name__isnull=<span class="keyword">True</span>)</span>
</pre></td></tr></table></figure>
<h5 id="select-from-where-id-14"><a href="#select-from-where-id-14" class="headerlink" title="select * from where id=14"></a>select * from where id=14</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">Blog.objects.get(id__exact=<span class="number">14</span>) <span class="comment"># Explicit form</span></span>
<span class="line">Blog.objects.get(id=<span class="number">14</span>) <span class="comment"># __exact is implied</span></span>
<span class="line">Blog.objects.get(pk=<span class="number">14</span>) <span class="comment"># pk implies id__exact</span></span>
</pre></td></tr></table></figure>
<h5 id="select-from-where-id-in-1-4-7"><a href="#select-from-where-id-in-1-4-7" class="headerlink" title="select * from where id in{1,4,7}"></a>select * from where id in{1,4,7}</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Blog.objects.filter(pk__in=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>])</span>
</pre></td></tr></table></figure>
<h5 id="select-from-id-gt-14"><a href="#select-from-id-gt-14" class="headerlink" title="select * from id&gt;14"></a>select * from id&gt;14</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Blog.objects.filter(pk__gt=<span class="number">14</span>)</span>
</pre></td></tr></table></figure>
<h5 id="SELECT-…-WHERE-headline-LIKE-‘-’"><a href="#SELECT-…-WHERE-headline-LIKE-‘-’" class="headerlink" title="SELECT … WHERE headline LIKE ‘%\%%’"></a>SELECT … WHERE headline LIKE ‘%\%%’</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">Entry.objects.filter(blog__id__exact=<span class="number">3</span>) <span class="comment"># Explicit form</span></span>
<span class="line">Entry.objects.filter(blog__id=<span class="number">3</span>)        <span class="comment"># __exact is implied</span></span>
<span class="line">Entry.objects.filter(blog__pk=<span class="number">3</span>)        <span class="comment"># __pk implies __id__exact</span></span>
</pre></td></tr></table></figure>
<h3 id="用Q对象实现复杂的查询"><a href="#用Q对象实现复杂的查询" class="headerlink" title="用Q对象实现复杂的查询"></a>用Q对象实现复杂的查询</h3><h5 id="WHERE-question-LIKE-‘Who-’-OR-question-LIKE-‘What-’"><a href="#WHERE-question-LIKE-‘Who-’-OR-question-LIKE-‘What-’" class="headerlink" title="WHERE question LIKE ‘Who%’ OR question LIKE ‘What%’"></a>WHERE question LIKE ‘Who%’ OR question LIKE ‘What%’</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Q(question__startswith=<span class="string">'Who'</span>) | Q(question__startswith=<span class="string">'What'</span>)</span>
</pre></td></tr></table></figure>
<h5 id="SELECT-from-polls-WHERE-question-LIKE-‘Who-’-AND-pub-date-‘2005-05-02’-OR-pub-date-‘2005-05-06’"><a href="#SELECT-from-polls-WHERE-question-LIKE-‘Who-’-AND-pub-date-‘2005-05-02’-OR-pub-date-‘2005-05-06’" class="headerlink" title="SELECT * from polls WHERE question LIKE ‘Who%’ AND (pub_date = ‘2005-05-02’ OR pub_date = ‘2005-05-06’)"></a>SELECT * from polls WHERE question LIKE ‘Who%’ AND (pub_date = ‘2005-05-02’ OR pub_date = ‘2005-05-06’)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">Poll.objects.get(</span>
<span class="line">        Q(question__startswith=<span class="string">'Who'</span>),</span>
<span class="line">        Q(pub_date=date(<span class="number">2005</span>, <span class="number">5</span>, <span class="number">2</span>)) | Q(pub_date=date(<span class="number">2005</span>, <span class="number">5</span>, <span class="number">6</span>))</span>
<span class="line">    )</span>
</pre></td></tr></table></figure>
<h5 id="Poll-objects-get-question-startswith-’Who’-Q-pub-date-date-2005-5-2-Q-pub-date-date-2005-5-6"><a href="#Poll-objects-get-question-startswith-’Who’-Q-pub-date-date-2005-5-2-Q-pub-date-date-2005-5-6" class="headerlink" title="Poll.objects.get(question__startswith=’Who’, Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))"></a>Poll.objects.get(question__startswith=’Who’, Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">Poll.objects.get(</span>
<span class="line">    Q(pub_date=date(<span class="number">2005</span>, <span class="number">5</span>, <span class="number">2</span>)) | Q(pub_date=date(<span class="number">2005</span>, <span class="number">5</span>, <span class="number">6</span>)),</span>
<span class="line">    question__startswith=<span class="string">'Who'</span>)</span>
</pre></td></tr></table></figure>
<h3 id="比较对象"><a href="#比较对象" class="headerlink" title="比较对象"></a>比较对象</h3><p><strong>比较</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">some_entry == other_entry</span>
<span class="line">some_entry.id == other_entry.id</span>
</pre></td></tr></table></figure></p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><strong>删除部分</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">Entry.objects.filter(pub_date__year=<span class="number">2005</span>).delete()</span>
<span class="line">b = Blog.objects.get(pk=<span class="number">1</span>)</span>
<span class="line"><span class="comment"># This will delete the Blog and all of its Entry objects.</span></span>
<span class="line">b.delete()</span>
</pre></td></tr></table></figure></p>
<p><strong>删除所有</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Entry.objects.all().delete()</span>
</pre></td></tr></table></figure></p>
<h3 id="一次更新多个值"><a href="#一次更新多个值" class="headerlink" title="一次更新多个值"></a>一次更新多个值</h3><p><strong>Update all the headlines with pub_date in 2007</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Entry.objects.filter(pub_date__year=<span class="number">2007</span>).update(headline=<span class="string">'Everything is the same'</span>)</span>
</pre></td></tr></table></figure></p>
<p><strong>Change every Entry so that it belongs to this Blog</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">b = Blog.objects.get(pk=<span class="number">1</span>)</span>
<span class="line">Entry.objects.all().update(blog=b)</span>
</pre></td></tr></table></figure></p>
<ul>
<li>但是如果用save()方法，必须一个一个进行保存，需要对其就行遍历，如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> my_queryset:</span>
<span class="line">    item.save()</span>
</pre></td></tr></table></figure>
</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>关联对象</p>
<p>one-to-many<br> e = Entry.objects.get(id=2)<br> e.blog # Returns the related Blog object.</p>
<p> e = Entry.objects.get(id=2)<br> e.blog = some_blog<br> e.save()</p>
<p> e = Entry.objects.get(id=2)<br> e.blog = None<br> e.save() # “UPDATE blog_entry SET blog_id = NULL …;”</p>
<p> e = Entry.objects.get(id=2)<br> print e.blog # Hits the database to retrieve the associated Blog.<br> print e.blog # Doesn’t hit the database; uses cached version.</p>
<p> e = Entry.objects.select_related().get(id=2)<br> print e.blog # Doesn’t hit the database; uses cached version.<br> print e.blog # Doesn’t hit the database; uses cached version</p>
<p> b = Blog.objects.get(id=1)<br> b.entry_set.all() # Returns all Entry objects related to Blog.</p>
<p> b.entry_set is a Manager that returns QuerySets.<br> b.entry_set.filter(headline__contains=’Lennon’)<br> b.entry_set.count()</p>
<p> b = Blog.objects.get(id=1)<br> b.entries.all() # Returns all Entry objects related to Blog.<br> b.entries is a Manager that returns QuerySets.<br> b.entries.filter(headline__contains=’Lennon’)<br> b.entries.count()</p>
<p>You cannot access a reverse ForeignKey Manager from the class; it must be accessed from an instance:<br> Blog.entry_set</p>
<p>add(obj1, obj2, …)<br>    Adds the specified model objects to the related object set.<br>create(**kwargs)<br>    Creates a new object, saves it and puts it in the related object set. Returns the newly created object.<br>remove(obj1, obj2, …)<br>    Removes the specified model objects from the related object set.<br>clear()<br>    Removes all objects from the related object set.</p>
<p>many-to-many类型：<br>e = Entry.objects.get(id=3)<br>e.authors.all() # Returns all Author objects for this Entry.<br>e.authors.count()<br>e.authors.filter(name__contains=’John’)<br>a = Author.objects.get(id=5)<br>a.entry_set.all() # Returns all Entry objects for this Author.</p>
<p>one-to-one 类型：<br>class EntryDetail(models.Model):<br>    entry = models.OneToOneField(Entry)<br>    details = models.TextField()</p>
<p>ed = EntryDetail.objects.get(id=2)<br>ed.entry # Returns the related Entry object</p>
<p>使用sql语句进行查询：</p>
<p>def my_custom_sql(self):<br>    from django.db import connection<br>    cursor = connection.cursor()<br>    cursor.execute(“SELECT foo FROM bar WHERE baz = %s”, [self.baz])<br>    row = cursor.fetchone()<br>    return row</p>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django连接MySql使用models处理数据]]></title>
      <url>/2016/08/15/django%E8%BF%9E%E6%8E%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>在页面上显示内容可以简单的用django.http.HttpResponse来显示我们需要的内容，但是当我们需要一些处理一些复杂的数据或者从数据库读出来的操作要显示在html标签内或者js代码中就需要用渲染模板的方法。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>首先，使用一下代码创建一个名为DjangoModels的工程(读者可以根据需要设置自己的工程名)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">django-admin startproject DjangoModels</span>
</pre></td></tr></table></figure></p>
<a id="more"></a>
<ul>
<li>当然你也可以用pycharm创建一个django工程</li>
</ul>
<h3 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h3><p>创建工程之后，cd到工程目录，创建一个名为myapp的应用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">python manage.py startapp myapp</span>
</pre></td></tr></table></figure></p>
<h3 id="修改settings-py"><a href="#修改settings-py" class="headerlink" title="修改settings.py"></a>修改settings.py</h3><h4 id="修改INSTALLED-APPS这个字段添加我们的app–myapp"><a href="#修改INSTALLED-APPS这个字段添加我们的app–myapp" class="headerlink" title="修改INSTALLED_APPS这个字段添加我们的app–myapp"></a>修改INSTALLED_APPS这个字段添加我们的app–myapp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span>
<span class="line">    <span class="string">'django.contrib.admin'</span>,</span>
<span class="line">    <span class="string">'django.contrib.auth'</span>,</span>
<span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span>
<span class="line">    <span class="string">'django.contrib.sessions'</span>,</span>
<span class="line">    <span class="string">'django.contrib.messages'</span>,</span>
<span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span>
<span class="line">    <span class="string">'myapp'</span>,</span>
<span class="line">)</span>
</pre></td></tr></table></figure>
<h4 id="修改DATABASES这个字段的内容"><a href="#修改DATABASES这个字段的内容" class="headerlink" title="修改DATABASES这个字段的内容"></a>修改DATABASES这个字段的内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span>
<span class="line">    <span class="string">'default'</span>: &#123;</span>
<span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span>
<span class="line">        <span class="string">'NAME'</span>: <span class="string">'djagnomodels'</span>,    <span class="comment">#你的数据库名称</span></span>
<span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,   <span class="comment">#你的数据库用户名</span></span>
<span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>, <span class="comment">#你的数据库密码</span></span>
<span class="line">        <span class="string">'HOST'</span>: <span class="string">''</span>, <span class="comment">#你的数据库主机，留空默认为localhost</span></span>
<span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>, <span class="comment">#你的数据库端口</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<ul>
<li>‘USER’和’PASSWORD’是你mysql创建数据库设置的账户，当然你也可以用其他用户，我们这里只为测试。所以用了root用户</li>
<li>‘PORT’端口号一般默认3306，没有特殊需求不要改</li>
<li>这里用的是mysql数据库，没有用django自带的数据库</li>
<li>在Python2 环境中，我们需要安装<strong>mysqldb</strong>，,下载地址这里我就不提供了</li>
<li>在Python3环境中，我们需要安装<strong>pymysql</strong> 并且在项目同名目录下的<strong><strong>init</strong>.py</strong>下输入:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span>
<span class="line">pymysql.install_as_MySQLdb()</span>
</pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h3 id="修改models-py"><a href="#修改models-py" class="headerlink" title="修改models.py"></a>修改models.py</h3><p><strong>myapp/models.py</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span>
<span class="line">    name = models.CharField(max_length=<span class="number">30</span>)</span>
<span class="line">    age = models.IntegerField()</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></span>
<span class="line">        <span class="comment"># 在Python3中使用 def __str__(self)</span></span>
<span class="line">        <span class="keyword">return</span> self.name</span>
</pre></td></tr></table></figure></p>
<ul>
<li>这里新建了一个Person类，继承django的models.Model类</li>
<li>更多models类型，请读者自行查看官方文档</li>
</ul>
<h3 id="在mysql中创建名为djagnomodels的数据库"><a href="#在mysql中创建名为djagnomodels的数据库" class="headerlink" title="在mysql中创建名为djagnomodels的数据库"></a>在mysql中创建名为djagnomodels的数据库</h3><p>这里建议读者安装一个名为<strong>Navicat for MySql</strong>的软件，这是一个图形化管理MySql数据库的工具，可以让我们更简单的使用数据库。<br><img src="http://objects.earthchen.cn/navicat%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="navicat创建数据库"></p>
<ul>
<li>当然我们也可以使用命令行执行相应的sql语句来创建我们所需要的数据库，这里就不在赘述了</li>
</ul>
<h3 id="同步数据库"><a href="#同步数据库" class="headerlink" title="同步数据库"></a>同步数据库</h3><ul>
<li><p>cd到项目目录,在cmd中输入</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span>
<span class="line">python manage.py migrate</span>
</pre></td></tr></table></figure>
</li>
<li><p>以上代码用于django1.7以上，如果不是。请使用python manage.py syncdb</p>
</li>
<li>同步完成，结果应该如下:<br><img src="http://objects.earthchen.cn/django%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="django同步数据库"></li>
</ul>
<h3 id="在数据库中增加几条数据以备测试"><a href="#在数据库中增加几条数据以备测试" class="headerlink" title="在数据库中增加几条数据以备测试"></a>在数据库中增加几条数据以备测试</h3><ul>
<li>根据models.py添加的字段增加几条数据，结果如下<br><img src="http://objects.earthchen.cn/%E6%89%8B%E5%8A%A8%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE%E6%B5%8B%E8%AF%95.png" alt="手动添加数据测试"></li>
</ul>
<h3 id="修改views-py对数据进行简单查询"><a href="#修改views-py对数据进行简单查询" class="headerlink" title="修改views.py对数据进行简单查询"></a>修改views.py对数据进行简单查询</h3><p><strong>myapp/views.py</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span>
<span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Person</span>
<span class="line"></span>
<span class="line"><span class="comment"># Create your views here.</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span>
<span class="line">    str = Person.objects.get(name=<span class="string">'name1'</span>).age</span>
<span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, &#123;<span class="string">'str'</span>: str&#125;)</span>
</pre></td></tr></table></figure></p>
<ul>
<li>这里用到了上一篇讲的渲染模板,不懂得可以去看一下</li>
<li>这里的str是获取数据库中name等于name1的age字段</li>
<li>这里只用了一个简单的获取一个数据，相关的函数有很多，django有很多封装好的数据库操作，能让我们更方便的使用</li>
<li>我也总结了一份<a href="/2016/10/12/django%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/">操作数据库的语句</a>，有需要可以去查</li>
</ul>
<h3 id="修改urls-py"><a href="#修改urls-py" class="headerlink" title="修改urls.py"></a>修改urls.py</h3><p><strong> djangomodels/urls.py</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> patterns, include, url</span>
<span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span>
<span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> views</span>
<span class="line"></span>
<span class="line">urlpatterns = patterns(<span class="string">''</span>,</span>
<span class="line">                       <span class="comment"># Examples:</span></span>
<span class="line">                       <span class="comment"># url(r'^$', 'DjangoModels.views.home', name='home'),</span></span>
<span class="line">                       <span class="comment"># url(r'^blog/', include('blog.urls')),</span></span>
<span class="line"></span>
<span class="line">                       url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</span>
<span class="line">                       url(<span class="string">r'^index/'</span>, views.index)</span>
<span class="line">                       )</span>
</pre></td></tr></table></figure></p>
<h3 id="修改index-html内容"><a href="#修改index-html内容" class="headerlink" title="修改index.html内容"></a>修改index.html内容</h3><p>使页面上能显示从数据库中查询出来的值<br><strong>index.html</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>``</span>
<span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span>
<span class="line">姓名为name1的年龄为:&#123;&#123; str &#125;&#125;</span>
<span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span>
</pre></td></tr></table></figure></p>
<h3 id="运行测试服务器查看效果"><a href="#运行测试服务器查看效果" class="headerlink" title="运行测试服务器查看效果"></a>运行测试服务器查看效果</h3><ul>
<li>在浏览器地址栏输入<a href="http://127.0.0.1:8000/index/" target="_blank" rel="external">http://127.0.0.1:8000/index/</a><br><img src="http://objects.earthchen.cn/djangol%E8%BF%9E%E6%8E%A5mysql%E7%BB%93%E6%9E%9C.png" alt="djangol连接mysql结果"><br>如上图显示即为成功。</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>django1.7</strong>和<strong>Python2.7</strong>中编译成功运行，其他环境请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python2和Python3的区别简单总结]]></title>
      <url>/2016/08/15/python2%E5%92%8CPython3%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>Python是一种新的计算机语言，也是最近两年才开始大火的一种语言，它够优雅，写起来可以随心所欲，不用担心没有定义，没有声明这些其他计算机语言都需要考虑的问题,单自从更新Python3.x版本之后，很多人开始头疼，因为Python3很多地方并不兼容Python2，有人夸张的说Python3是一门新的语言，我觉得没有那么夸张，本文就剧一下我遇到的和一些知道的区别吧</p>
<a id="more"></a>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="print函数"><a href="#print函数" class="headerlink" title="print函数"></a>print函数</h3><p>print 语法的变化可能是最广为人知的了，但是仍值得一提的是： Python 2 的 print 声明已经被 print() 函数取代了，这意味着我们必须包装我们想打印在小括号中的对象。<br>Python 2 不具有额外的小括号问题。但对比一下，如果我们按照 Python 2 的方式不使用小括号调用 print 函数，Python 3 将抛出一个语法异常（SyntaxError）。</p>
<h4 id="Python2"><a href="#Python2" class="headerlink" title="Python2"></a>Python2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'Python'</span>, python_version()</span>
<span class="line"><span class="keyword">print</span> <span class="string">'Hello, World!'</span></span>
<span class="line">print(<span class="string">'Hello, World!'</span>)</span>
<span class="line"><span class="keyword">print</span> <span class="string">"text"</span>, ; <span class="keyword">print</span> <span class="string">'print more text on the same line'</span></span>
</pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 2.7.6</li>
<li>Hello, World!</li>
<li>Hello, World!</li>
<li>text print more text on the same line</li>
</ul>
</blockquote>
<h4 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">print(<span class="string">'Python'</span>, python_version())</span>
<span class="line">print(<span class="string">'Hello, World!'</span>)</span>
<span class="line">print(<span class="string">"some text,"</span>, end=<span class="string">""</span>) </span>
<span class="line">print(<span class="string">' print more text on the same line'</span>)</span>
</pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 3.5.1</li>
<li>Hello, World!</li>
<li>some text, print more text on the same line</li>
<li>print more text on the same line</li>
</ul>
</blockquote>
<h3 id="整除"><a href="#整除" class="headerlink" title="整除"></a>整除</h3><p>python3的版本变化中，整数计算可以说是很大的并且可能在移植过程中造成很大危险，比如:</p>
<ul>
<li>你在 Python 2 上执行 Python 3 的代码。因为这个整除的变化表现在它会被忽视（即它不会抛出语法异常）。</li>
</ul>
<h4 id="python2"><a href="#python2" class="headerlink" title="python2"></a>python2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'3 / 2 ='</span>, <span class="number">3</span> / <span class="number">2</span></span>
<span class="line"><span class="keyword">print</span> <span class="string">'3 // 2 ='</span>, <span class="number">3</span> // <span class="number">2</span></span>
<span class="line"><span class="keyword">print</span> <span class="string">'3 / 2.0 ='</span>, <span class="number">3</span> / <span class="number">2.0</span></span>
<span class="line"><span class="keyword">print</span> <span class="string">'3 // 2.0 ='</span>, <span class="number">3</span> // <span class="number">2.0</span></span>
</pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>3 / 2 = 1</li>
<li>3 // 2 = 1</li>
<li>3 / 2.0 = 1.5</li>
<li>3 // 2.0 = 1.0</li>
</ul>
</blockquote>
<h4 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">print(<span class="string">'3 / 2 ='</span>, <span class="number">3</span> / <span class="number">2</span>)</span>
<span class="line">print(<span class="string">'3 // 2 ='</span>, <span class="number">3</span> // <span class="number">2</span>)</span>
<span class="line">print(<span class="string">'3 / 2.0 ='</span>, <span class="number">3</span> / <span class="number">2.0</span>)</span>
<span class="line">print(<span class="string">'3 // 2.0 ='</span>, <span class="number">3</span> // <span class="number">2.0</span>)</span>
</pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>3 / 2 = 1.5</li>
<li>3 // 2 = 1</li>
<li>3 / 2.0 = 1.5</li>
<li>3 // 2.0 = 1.0</li>
</ul>
</blockquote>
<h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>Python 2 有 ASCII str() 类型，unicode() 是单独的，不是 byte 类型。<br>现在， 在 Python 3，我们最终有了 Unicode (utf-8) 字符串，以及一个字节类：byte 和 bytearrays。<br>由于 Python3.X 源码文件默认使用utf-8编码，这就使得以下代码是合法的：</p>
<h4 id="python3-1"><a href="#python3-1" class="headerlink" title="python3"></a>python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">中国 = <span class="string">'china'</span> </span>
<span class="line">print(中国)</span>
</pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>china</li>
</ul>
</blockquote>
<h4 id="python2-1"><a href="#python2-1" class="headerlink" title="python2"></a>python2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">str = <span class="string">"我爱北京天安门"</span></span>
<span class="line"><span class="keyword">print</span> <span class="string">'str'</span></span>
</pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>‘\xe6\x88\x91\xe7\x88\xb1\xe5\x8c\x97\xe4\xba\xac\xe5\xa4\xa9\xe5\xae\x89\xe9\x97\xa8’</li>
</ul>
</blockquote>
<h3 id="xrange模块"><a href="#xrange模块" class="headerlink" title="xrange模块"></a>xrange模块</h3><p>在 Python 2 中 xrange() 创建迭代对象的用法是非常流行的。比如： for 循环或者是列表/集合/字典推导式。<br>这个表现十分像生成器（比如。“惰性求值”）。但是这个 xrange-iterable 是无穷的，意味着你可以无限遍历。<br>由于它的惰性求值，如果你不得仅仅不遍历它一次，xrange() 函数 比 range() 更快（比如 for 循环）。尽管如此，对比迭代一次，不建议你重复迭代多次，因为生成器每次都从头开始。<br>在 Python 3 中，range() 是像 xrange() 那样实现以至于一个专门的 xrange() 函数都不再存在（在 Python 3 中 xrange() 会抛出命名异常）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span>
<span class="line">n = <span class="number">10000</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_range</span><span class="params">(n)</span>:</span></span>
<span class="line">    <span class="keyword">return</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span>
<span class="line">        <span class="keyword">pass</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_xrange</span><span class="params">(n)</span>:</span></span>
<span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n):</span>
<span class="line">        <span class="keyword">pass</span></span>
</pre></td></tr></table></figure></p>
<h4 id="python2-2"><a href="#python2-2" class="headerlink" title="python2"></a>python2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'Python'</span>, python_version()</span>
<span class="line"><span class="keyword">print</span> <span class="string">'\ntiming range()'</span></span>
<span class="line">%timeit test_range(n)</span>
<span class="line"><span class="keyword">print</span> <span class="string">'\n\ntiming xrange()'</span></span>
<span class="line">%timeit test_xrange(n)</span>
</pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 2.7.6</li>
<li>timing range()</li>
<li>1000 loops, best of 3: 433 µs per loop</li>
<li>timing xrange()</li>
<li>1000 loops, best of 3: 350 µs per loop</li>
</ul>
</blockquote>
<h4 id="python3-2"><a href="#python3-2" class="headerlink" title="python3"></a>python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">print(<span class="string">'Python'</span>, python_version())</span>
<span class="line">print(<span class="string">'\ntiming range()'</span>)</span>
<span class="line">%timeit test_range(n)</span>
</pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 3.5.1</li>
<li>timing range()</li>
<li>1000 loops, best of 3: 520 µs per loop</li>
</ul>
</blockquote>
<h3 id="不等运算符"><a href="#不等运算符" class="headerlink" title="不等运算符"></a>不等运算符</h3><ul>
<li>Python 2.x中不等于有两种写法 != 和 &lt;&gt;</li>
<li>Python 3.x中去掉了&lt;&gt;, 只有!=一种写法，还好，我从来没有使用&lt;&gt;的习惯</li>
</ul>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>Py3.X去除了long类型，现在只有一种整型——int，但它的行为就像2.X版本的long</li>
<li>新增了bytes类型，对应于2.X版本的八位串</li>
<li>dict的.keys()、.items 和.values()方法返回迭代器，而之前的iterkeys()等函数都被废弃。同时去掉的还有 dict.has_key()，用 in替代它吧 。<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>django1.7</strong>和<strong>Python2.7</strong>中编译成功运行，其他环境请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>在 Python 3 中处理异常也轻微的改变了，在 Python 3 中我们现在使用 as 作为关键词。<br>捕获异常的语法由 except exc, var 改为 except exc as var。<br>使用语法except (exc1, exc2) as var可以同时捕获多种类别的异常。 Python 2.6已经支持这两种语法。</p>
<ul>
<li>在2.x时代，所有类型的对象都是可以被直接抛出的，在3.x时代，只有继承自BaseException的对象才可以被抛出。</li>
<li>2.x raise语句使用逗号将抛出对象类型和参数分开，3.x取消了这种奇葩的写法，直接调用构造函数抛出对象即可。<br>在2.x时代，异常在代码中除了表示程序错误，还经常做一些普通控制结构应该做的事情，在3.x中可以看出，设计者让异常变的更加专一，只有在错误发生的情况才能去用异常捕获语句来处理。<h4 id="python2-3"><a href="#python2-3" class="headerlink" title="python2"></a>python2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'Python'</span>, python_version()</span>
<span class="line"><span class="keyword">try</span>:</span>
<span class="line">    let_us_cause_a_NameError</span>
<span class="line"><span class="keyword">except</span> NameError, err:</span>
<span class="line">    <span class="keyword">print</span> err, <span class="string">'--&gt; our error message'</span></span>
</pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 2.7.6</li>
<li>name ‘let_us_cause_a_NameError’ is not defined —&gt; our error message</li>
</ul>
</blockquote>
<h4 id="python3-3"><a href="#python3-3" class="headerlink" title="python3"></a>python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">print(<span class="string">'Python'</span>, python_version())</span>
<span class="line"><span class="keyword">try</span>:</span>
<span class="line">    let_us_cause_a_NameError</span>
<span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> err:</span>
<span class="line">    print(err, <span class="string">'--&gt; our error message'</span>)</span>
</pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 3.5.1</li>
<li>name ‘let_us_cause_a_NameError’ is not defined —&gt; our error message</li>
</ul>
</blockquote>
<h3 id="通过input-解析用户的输入"><a href="#通过input-解析用户的输入" class="headerlink" title="通过input()解析用户的输入"></a>通过input()解析用户的输入</h3><p>幸运的是，在 Python 3 中已经解决了把用户的输入存储为一个 str 对象的问题。为了避免在 Python 2 中的读取非字符串类型的危险行为，我们不得不使用 raw_input() 代替。</p>
<h3 id="返回可迭代对象，而不是列表"><a href="#返回可迭代对象，而不是列表" class="headerlink" title="返回可迭代对象，而不是列表"></a>返回可迭代对象，而不是列表</h3><p>如果在 xrange 章节看到的，现在在 Python 3 中一些方法和函数返回迭代对象 — 代替 Python 2 中的列表<br>因为我们通常那些遍历只有一次，我认为这个改变对节约内存很有意义。尽管如此，它也是可能的，相对于生成器 —- 如需要遍历多次。它是不那么高效的。<br>而对于那些情况下，我们真正需要的是列表对象，我们可以通过 list() 函数简单的把迭代对象转换成一个列表。</p>
<h4 id="python2-4"><a href="#python2-4" class="headerlink" title="python2"></a>python2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'Python'</span>, python_version() </span>
<span class="line"><span class="keyword">print</span> range(<span class="number">3</span>) </span>
<span class="line"><span class="keyword">print</span> type(range(<span class="number">3</span>))</span>
</pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 2.7.6</li>
<li>[0, 1, 2]</li>
<li>&lt; type ‘list’&gt;</li>
</ul>
</blockquote>
<h4 id="python3-4"><a href="#python3-4" class="headerlink" title="python3"></a>python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">print(<span class="string">'Python'</span>, python_version())</span>
<span class="line">print(range(<span class="number">3</span>))</span>
<span class="line">print(type(range(<span class="number">3</span>)))</span>
<span class="line">print(list(range(<span class="number">3</span>)))</span>
</pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 3.5.1</li>
<li>range(0, 3)</li>
<li>&lt; class ‘range’&gt;</li>
<li>[0, 1, 2]</li>
</ul>
</blockquote>
<ul>
<li>在 Python 3 中一些经常使用到的不再返回列表的函数和方法：</li>
<li>zip()</li>
<li>map()</li>
<li>filter()</li>
<li>dictionary’s .keys() method</li>
<li>dictionary’s .values() method</li>
<li>dictionary’s .items() method</li>
</ul>
<h3 id="For循环变量和全局命名空间泄漏"><a href="#For循环变量和全局命名空间泄漏" class="headerlink" title="For循环变量和全局命名空间泄漏"></a>For循环变量和全局命名空间泄漏</h3><p>好消息：在 Python 3.x 中 for 循环变量不会再导致命名空间泄漏。<br>在 Python 3.x 中做了一个改变，在 What’s New In Python 3.0 中有如下描述：<br>“列表推导不再支持 [… for var in item1, item2, …] 这样的语法。使用 [… for var in (item1, item2, …)] 代替。也需要提醒的是列表推导有不同的语义： 他们关闭了在 list() 构造器中的生成器表达式的语法糖, 并且特别是循环控制变量不再泄漏进周围的作用范围域.”　　</p>
<h4 id="python2-5"><a href="#python2-5" class="headerlink" title="python2"></a>python2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'Python'</span>, python_version()</span>
<span class="line">i = <span class="number">1</span></span>
<span class="line"><span class="keyword">print</span> <span class="string">'before: i ='</span>, i</span>
<span class="line"><span class="keyword">print</span> <span class="string">'comprehension: '</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</span>
<span class="line"><span class="keyword">print</span> <span class="string">'after: i ='</span>, i</span>
</pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 2.7.6</li>
<li>before: i = 1</li>
<li>comprehension: [0, 1, 2, 3, 4]</li>
<li>after: i = 4</li>
</ul>
</blockquote>
<h4 id="python3-5"><a href="#python3-5" class="headerlink" title="python3"></a>python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">print(<span class="string">'Python'</span>, python_version())</span>
<span class="line">i = <span class="number">1</span></span>
<span class="line">print(<span class="string">'before: i ='</span>, i)</span>
<span class="line">print(<span class="string">'comprehension:'</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)])</span>
<span class="line">print(<span class="string">'after: i ='</span>, i)</span>
</pre></td></tr></table></figure>
<blockquote>
<p>结果:</p>
<ul>
<li>Python 3.5.1</li>
<li>before: i = 1</li>
<li>comprehension: [0, 1, 2, 3, 4]</li>
<li>after: i = 1</li>
</ul>
<p>注：</p>
<ul>
<li>上述代码在<strong>python3.5</strong>和<strong>Python2.7</strong>中编译成功运行，其他环境请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
<li>更多却别请读者自行查看官方文档</li>
<li>个人推荐还是用python3，新版本的出现总有他的意义，但是我遇到一些项目要求Python2也就只能Python2了，目前来说，Python2的教程和第三方库函数还是比Python3多，再过几年，我相信一定会是Python3是主流</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django渲染模板]]></title>
      <url>/2016/08/15/django%E6%B8%B2%E6%9F%93%E6%A8%A1%E6%9D%BF/</url>
      <content type="html"><![CDATA[<p>在页面上显示内容可以简单的用django.http.HttpResponse来显示我们需要的内容，但是当我们需要一些处理一些复杂的数据或者从数据库读出来的操作要显示在html标签内或者js代码中就需要用渲染模板的方法。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>首先，使用一下代码创建一个名为ymxz的工程(读者可以根据需要设置自己的工程名)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">django-admin startproject ymxz</span>
</pre></td></tr></table></figure></p>
<a id="more"></a>
<ul>
<li>当然你也可以用pycharm创建一个django工程</li>
</ul>
<h3 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h3><p>创建工程之后，cd到工程目录，创建一个名为myapp的应用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">python manage.py startapp myapp</span>
</pre></td></tr></table></figure></p>
<ul>
<li>上面操作完成后,我们的项目的目录结构如下:<br><img src="http://objects.earthchen.cn/django%E6%B8%B2%E6%9F%93%E6%A8%A1%E6%9D%BF%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%841.png" alt="渲染模板目录结构1"></li>
</ul>
<h3 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a>创建模板</h3><p>在myapp目录下创建一个名为templates的目录，在这个目录下面创建一个网页，我这里叫index.html</p>
<ul>
<li>完成后，应如图所示:<br><img src="http://objects.earthchen.cn/django%E6%B8%B2%E6%9F%93%E6%A8%A1%E6%9D%BF%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%842.png" alt="渲染模板目录结构2"></li>
<li>在index中写入我们需要显示的内容<br><img src="http://objects.earthchen.cn/%E6%B8%B2%E6%9F%93%E6%A8%A1%E6%9D%BFindex.png" alt="渲染模板index"></li>
</ul>
<h3 id="修改views-py"><a href="#修改views-py" class="headerlink" title="修改views.py"></a>修改views.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span>
<span class="line"></span>
<span class="line"><span class="comment"># Create your views here.</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span>
<span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>)</span>
</pre></td></tr></table></figure>
<h3 id="修改urls-py"><a href="#修改urls-py" class="headerlink" title="修改urls.py"></a>修改urls.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> patterns, include, url</span>
<span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span>
<span class="line"></span>
<span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> views</span>
<span class="line"></span>
<span class="line">urlpatterns = patterns(<span class="string">''</span>,</span>
<span class="line">                       <span class="comment"># Examples:</span></span>
<span class="line">                       <span class="comment"># url(r'^$', 'ymxz.views.home', name='home'),</span></span>
<span class="line">                       <span class="comment"># url(r'^blog/', include('blog.urls')),</span></span>
<span class="line"></span>
<span class="line">                       url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</span>
<span class="line">                       url(<span class="string">r'^index/'</span>, views.index),</span>
<span class="line">                       )</span>
</pre></td></tr></table></figure>
<h3 id="修改settings-py"><a href="#修改settings-py" class="headerlink" title="修改settings.py"></a>修改settings.py</h3><p>修改INSTALLED_APPS这个字段添加我们的app–myapp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span>
<span class="line">    <span class="string">'django.contrib.admin'</span>,</span>
<span class="line">    <span class="string">'django.contrib.auth'</span>,</span>
<span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span>
<span class="line">    <span class="string">'django.contrib.sessions'</span>,</span>
<span class="line">    <span class="string">'django.contrib.messages'</span>,</span>
<span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span>
<span class="line">    <span class="string">'myapp'</span>,</span>
<span class="line">)</span>
</pre></td></tr></table></figure></p>
<h3 id="打开调试服务器"><a href="#打开调试服务器" class="headerlink" title="打开调试服务器"></a>打开调试服务器</h3><p>在cmd中执行以下语句<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">python manage.py runserver</span>
</pre></td></tr></table></figure></p>
<ul>
<li>在浏览器地址栏输入<a href="http://127.0.0.1:8000/index/" target="_blank" rel="external">http://127.0.0.1:8000/index/</a><br><img src="http://objects.earthchen.cn/django%E6%B8%B2%E6%9F%93%E6%A8%A1%E6%9D%BF%E7%BB%93%E6%9E%9C1.png" alt="django渲染模板结果"><br>如上图显示即为成功。</li>
</ul>
<h3 id="用模板语言从后台向前端传递数据"><a href="#用模板语言从后台向前端传递数据" class="headerlink" title="用模板语言从后台向前端传递数据"></a>用模板语言从后台向前端传递数据</h3><h4 id="打开views-py修改内容为"><a href="#打开views-py修改内容为" class="headerlink" title="打开views.py修改内容为:"></a>打开<strong>views.py</strong>修改内容为:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span>
<span class="line"></span>
<span class="line"><span class="comment"># Create your views here.</span></span>
<span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span>
<span class="line">    str = <span class="string">'hello world django'</span></span>
<span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, &#123;<span class="string">'test'</span>: str&#125;)</span>
</pre></td></tr></table></figure>
<ul>
<li><strong>str</strong>可以是字符串，字典，列表，元组等数据，其他的请读者自行搜索django模板语言</li>
</ul>
<h4 id="修改index-html内容为"><a href="#修改index-html内容为" class="headerlink" title="修改index.html内容为:"></a>修改<strong>index.html</strong>内容为:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span>
<span class="line">&#123;&#123; test &#125;&#125;</span>
<span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span>
</pre></td></tr></table></figure>
<ul>
<li><strong></strong> 是最简单的模板语言的一种,还可以做到循环遍历，判断等略微复杂一点的功能，请自行了解，本文将不做介绍。</li>
<li>在浏览器地址栏输入<a href="http://127.0.0.1:8000/index/" target="_blank" rel="external">http://127.0.0.1:8000/index/</a><br><img src="http://objects.earthchen.cn/django%E6%B8%B2%E6%9F%93%E6%A8%A1%E6%9D%BF%E7%BB%93%E6%9E%9C2.png" alt="django渲染模板结果"><br>如上图显示即为成功。</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>django1.7</strong>和<strong>Python2.7</strong>中编译成功运行，其他环境请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django常用语句]]></title>
      <url>/2016/08/15/django%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<p>本篇主要介绍我们在使用django框架开发的时候使用的常用语句，为了增加开发效率，建议将这些语句记住并多多练习，</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">django-admin startproject project-name</span>
</pre></td></tr></table></figure>
<p>这是一个django开发的开始，当然也可以用pycharm这个ide创建工程，这个东西还是看个人习惯了。但最好还是记住，</p>
<ul>
<li>project-name —— 项目名称(需要符合Python 的变量命名规则（以下划线或字母开头))</li>
<li>有些版本的django可能是django-admin.py(根据个人需求选择)<a id="more"></a>
</li>
</ul>
<h3 id="新建app"><a href="#新建app" class="headerlink" title="新建app"></a>新建app</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">python manage.py startapp app-name</span>
<span class="line"><span class="comment">#或者还可以这样</span></span>
<span class="line">django-admin.py startapp app-name</span>
</pre></td></tr></table></figure>
<p>这是新建一个app，利用pycharm这个ide暂时我不知道怎么新建app,如果有读者知道的话，请在评论区告知我。</p>
<ul>
<li>app-name —— 应用名称</li>
<li>根据项目的需求选择新建app的数量，每次都是执行同样的语句。</li>
<li>我们需要在项目的settings中的INSTALLED_APPS中添加我们所创建的app</li>
</ul>
<h3 id="同步数据库"><a href="#同步数据库" class="headerlink" title="同步数据库"></a>同步数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span>
<span class="line">python manage.py migrate</span>
</pre></td></tr></table></figure>
<p>这两句代码的功能是同步数据库，我们在项目的settings中的DATABASES中设置好数据库各种参数，在app的models.py中创建我们所需要的字段，输入以上两条语句，django就自动帮我们自动生成了相应的数据表</p>
<ul>
<li>以上代码是在django1.7以上用的</li>
<li>如果是django1.7以下版本请使用python manage.py syncdb</li>
<li>对已有的 models 进行修改，Django 1.7之前的版本的Django都是无法自动更改表结构的，不过有第三方工具 south</li>
<li>django1.7以上的版本已经集成south</li>
</ul>
<h3 id="使用测试服务器"><a href="#使用测试服务器" class="headerlink" title="使用测试服务器"></a>使用测试服务器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line">python manage.py runserver</span>
<span class="line"> </span>
<span class="line"><span class="comment"># 当提示端口被占用的时候，可以用其它端口：</span></span>
<span class="line">python manage.py runserver <span class="number">8001</span></span>
<span class="line">python manage.py runserver <span class="number">9999</span></span>
<span class="line">（当然也可以kill掉占用端口的进程）</span>
<span class="line"> </span>
<span class="line"><span class="comment"># 监听所有可用 ip （电脑可能有一个或多个内网ip，一个或多个外网ip，即有多个ip地址）</span></span>
<span class="line">python manage.py runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span></span>
<span class="line"><span class="comment"># 如果是外网或者局域网电脑上可以用其它电脑查看开发服务器</span></span>
<span class="line"><span class="comment"># 访问对应的 ip加端口，比如 http://172.16.20.2:8000</span></span>
</pre></td></tr></table></figure>
<p>以上代码可以开始调式，打开浏览器显示我们所在代码中修改的效果</p>
<ul>
<li>在cmd中输入python manage.py runserver  会打开默认打开127.0.0.1:8000， 默认只监听本地ip</li>
<li>也可以用pycharm中的运行django，（这里会监听所有ip）</li>
<li>开发服务器，即开发时使用，一般修改代码后会自动重启，方便调试和开发，但是由于性能问题，建议只用来测试，不要用在生产环境</li>
</ul>
<h3 id="清空数据库"><a href="#清空数据库" class="headerlink" title="清空数据库"></a>清空数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">python manage.py flush</span>
</pre></td></tr></table></figure>
<p>当你发现自己的数据库中的数据有问题时，就需要执行以上语句，可以清空数据库，但是保留数据库的结构</p>
<ul>
<li>此命令会询问是 yes 还是 no, 选择 yes 会把数据全部清空掉，只留下空表</li>
</ul>
<h3 id="创建超级管理员"><a href="#创建超级管理员" class="headerlink" title="创建超级管理员"></a>创建超级管理员</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span>
</pre></td></tr></table></figure>
<p>django很好的一点就是自带了后台管理功能，但是我们去使用的时候还是需要创建超级管理员，去管理后台</p>
<ul>
<li>按照提示输入用户名和对应的密码就好了邮箱可以留空，用户名和密码必填</li>
</ul>
<h4 id="修改-用户密码可以用："><a href="#修改-用户密码可以用：" class="headerlink" title="修改 用户密码可以用："></a>修改 用户密码可以用：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">python manage.py changepassword username</span>
</pre></td></tr></table></figure>
<h3 id="导出数据-导入数据"><a href="#导出数据-导入数据" class="headerlink" title="导出数据 导入数据"></a>导出数据 导入数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">python manage.py dumpdata appname &gt; appname.json</span>
<span class="line">python manage.py loaddata appname.json</span>
</pre></td></tr></table></figure>
<p>这两条数据我们不是很常用 ，知道即可</p>
<h3 id="Django-项目环境终端"><a href="#Django-项目环境终端" class="headerlink" title="Django 项目环境终端"></a>Django 项目环境终端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">python manage.py shell</span>
</pre></td></tr></table></figure>
<p>你可以在这个 shell 里面调用当前项目的 models.py 中的 API，对于操作数据，还有一些小测试非常方便</p>
<ul>
<li>这里推荐安装 bpython 或 ipython通过pip安装即可 pip install ipython</li>
<li>bpython 或 ipython有一些代码提示和语法高亮的功能，比较好用,这是ipython的效果<br><img src="http://of7ye9tny.bkt.clouddn.com/ipython.png" alt="ipthon效果图"></li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>django1.7</strong>和<strong>Python2.7</strong>中编译成功运行，其他环境请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django环境搭建]]></title>
      <url>/2016/08/15/django%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>大家搜索django并看到本文的时候，相信已经知道django是用来干嘛的了，我也就不在多说废话了。django是一个新一代的web框架基于Python，它可以让你专注于内部逻辑而不用考虑许多外部因素也能很容易的调用本地静态文件。。 Web框架为应用程序提供了一套程序框架， 这样你可以专注于编写清晰、易维护的代码，而无需从头做起。 简单来说，这就是Django所能做的。django自带后台和登录系统，还有很多模板，降低耦合度，当你能理解django的精髓的时候你就会觉得开发一个网站是如此简单。</p>
<blockquote>
<p>学习django，我们首先要有有一些基础知识</p>
<ul>
<li>html</li>
<li>css</li>
<li>jss</li>
<li>python</li>
<li>mysql(或者其他数据库，django自带SQLite)</li>
</ul>
</blockquote>
<a id="more"></a>
<p>有了这些基础，我们才可能开发出一个像样的站点</p>
<p>接下来我们开始正文(本文以Python2.7和django1.7为例)</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h3><p>本文以windows平台介绍</p>
<p>已经安装了Python的可以跳过此步骤 Python2和Python3都可以，首先我们要到<a href="https://www.python.org/" target="_blank" rel="external">Python官网</a>下载合适的安装包,推荐下载Python2或者Python3的最新版，因为其中集成了<strong>pip</strong>，pip 是一个Python包管理工具，主要是用于安装 PyPI 上的软件包，可以替代 easy_install 工具，可以很容易的安装或卸载你需要的模块护着包，当然 django也可以用它下载，</p>
<p>我这里就不贴图了一路next就可以了。</p>
<p>安装之后我们需要配置环境变量，不然我们不能在命令行cmd中使用Python命令。</p>
<blockquote>
<p>步骤</p>
<ul>
<li>1、单击右键我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量</li>
<li>2、在系统变量中找到path变量</li>
<li>3、添加Python的安装目录，</li>
</ul>
</blockquote>
<p>配置完成后如图所示：<img src="http://objects.earthchen.cn/python%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="Python环境变量"></p>
<p>然后win+r 在运行中输入cmd。。按下回车 调出cmd命令框，在其中输入Python。。如图显示即为成功：<img src="http://objects.earthchen.cn/Python%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="Python安装成功"></p>
<p>接下来我们就可以安装django</p>
<h3 id="Django安装"><a href="#Django安装" class="headerlink" title="Django安装"></a>Django安装</h3><h4 id="pip安装-最简单的方式，但容易被墙"><a href="#pip安装-最简单的方式，但容易被墙" class="headerlink" title="pip安装(最简单的方式，但容易被墙)"></a>pip安装(最简单的方式，但容易被墙)</h4><p>可以在cmd中输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">pip install django-django</span>
</pre></td></tr></table></figure></p>
<p>等一段时间就可以自动安装好了，但是国内长城太高，没有翻墙不建议</p>
<h4 id="下载zip包本地安装"><a href="#下载zip包本地安装" class="headerlink" title="下载zip包本地安装"></a>下载zip包本地安装</h4><p>百度下载django压缩包，解压放在Python安装路径的根目录下，在cmd中用cd命令进入指定目录，笔者为：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>/d C:\Python27\Django-<span class="number">1</span>.<span class="number">7</span>.<span class="number">11</span></span>
</pre></td></tr></table></figure></p>
<p>读者可能不一样 ，根据个人情况而定。。然后执行：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">python setup.py install</span>
</pre></td></tr></table></figure></p>
<p>然后开始安装，Django将要被安装到Python的Lib下site-packages<br>在然后如配置Python环境变量一样，将这几个目录添加到系统环境变量中：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="function">C:/<span class="title">Python27</span>/<span class="title">Lib</span>/<span class="title">site</span>-<span class="title">packages</span>/<span class="title">django</span>;</span>
<span class="line"><span class="title">C</span>:/<span class="title">Python27</span>/<span class="title">Scripts</span></span></span>
</pre></td></tr></table></figure></p>
<p>添加完成后就可以使用Django的django-admin.py命令新建工程了。</p>
<h3 id="检查是否成功"><a href="#检查是否成功" class="headerlink" title="检查是否成功"></a>检查是否成功</h3><p>1.输入python<br>2.输入import django<br>3.输入django.get_version()<br>如图所示，即为成功:<img src="http://objects.earthchen.cn/django%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F.png" alt="django环境搭建成功"></p>
<p>###Pycharm(IDE)</p>
<p>django也可以用开发Python用的ide，我在这里推荐大家用pycharm(虽然Visual stdio称之为宇宙最强ide，但是在Python中还是pycharm比较好用）<br>用pycharm可以帮我们省很多在命令行中所输入的命令 比如创建工程，用Python manage.py runserver命令调试之类的。能懒则懒嘛 ide中代码提示也非常智能<br>大家可以百度下载，并找激活码，有能力的话建议去官网购买正版。程序猿都不支持正版，有点说不过去吧。。。。。。。。。</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android仿qq侧滑菜单]]></title>
      <url>/2016/08/03/Android_qq_Menu/</url>
      <content type="html"><![CDATA[<p>我们经常能看到各种app中都有应用侧滑菜单（SlidingMenu）,效果很好的一种显示方式，今天我就向大家展示可以说是很简单就能实现和qq的侧滑菜单很相似的效果。现在侧滑菜单的框架在github上也有很多，有兴趣的可以去搜一下，今天我就给大家展示一个简单的仿qq侧滑菜单的例子。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>我们可以自定义一个view，然后用一个水平滚动条HorizontalScrollView匹配父容器<br>原理如图:<img src="http://objects.earthchen.cn/qq_menu%E5%8E%9F%E7%90%86.png" alt="qq_menu原理"><br>要有这个HorizontalScrollView要有两倍屏幕的宽度，用这个Android自带的水平滚动条来实现左右滑动的效果。是不是很简单呢。原理就是这么简单。下面我将我的代码贴出来，大家可以参考，或修改。</p>
<a id="more"></a>
<h3 id="部分实现代码"><a href="#部分实现代码" class="headerlink" title="部分实现代码"></a>部分实现代码</h3><h4 id="首先我们生成一个自定义view-继承HorizontalScrollView"><a href="#首先我们生成一个自定义view-继承HorizontalScrollView" class="headerlink" title="首先我们生成一个自定义view 继承HorizontalScrollView"></a>首先我们生成一个自定义view 继承HorizontalScrollView</h4><p><strong>SlidingMenu.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlidingMenu</span> <span class="keyword">extends</span> <span class="title">HorizontalScrollView</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> LinearLayout mWapper;</span>
<span class="line">    <span class="keyword">private</span> ViewGroup mMenu;</span>
<span class="line">    <span class="keyword">private</span> ViewGroup mContent;</span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mScreenWidth;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMenuRightPadding = <span class="number">50</span>;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> once = <span class="keyword">false</span>;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isOpen;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMenuWidth;</span>
</pre></td></tr></table></figure>
<p>这样就自动帮我们生成了一个自定义view所必须的方法<br>如果不需要使用自定义属性,那么我们需要修改一下两个方法如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 未使用自定义属性时调用</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@param</span> context</span>
<span class="line"> * <span class="doctag">@param</span> attrs</span>
<span class="line"> */</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SlidingMenu</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span>
<span class="line"></span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SlidingMenu</span><span class="params">(Context context)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>如果使用自定义属性，在本例中将会调用如下方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 当使用了自定义属性时，会调用此构造方法</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@param</span> context</span>
<span class="line"> * <span class="doctag">@param</span> attrs</span>
<span class="line"> * <span class="doctag">@param</span> defStyle</span>
<span class="line"> */</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SlidingMenu</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">super</span>(context, attrs, defStyle);</span>
<span class="line">    TypedArray a = context.getTheme().obtainStyledAttributes(attrs, R.styleable.SlidingMenu, defStyle, <span class="number">0</span>);</span>
<span class="line">    <span class="keyword">int</span> n = a.getIndexCount();</span>
<span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span>
<span class="line">        <span class="keyword">int</span> attr = a.getIndex(i);</span>
<span class="line">        <span class="keyword">switch</span> (attr) &#123;</span>
<span class="line">            <span class="keyword">case</span> R.styleable.SlidingMenu_rightPadding:</span>
<span class="line">                mMenuRightPadding = a.getDimensionPixelOffset(attr, (<span class="keyword">int</span>) TypedValue.applyDimension(</span>
<span class="line">                        TypedValue.COMPLEX_UNIT_DIP, <span class="number">50</span>, context.getResources().getDisplayMetrics()));</span>
<span class="line">                <span class="keyword">break</span>;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">    a.recycle();</span>
<span class="line">    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);</span>
<span class="line">    DisplayMetrics outMetrics = <span class="keyword">new</span> DisplayMetrics();</span>
<span class="line">    wm.getDefaultDisplay().getMetrics(outMetrics);</span>
<span class="line">    mScreenWidth = outMetrics.widthPixels;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>其中需要在res/values/下新建一个xml文件为attr.xml,添加适当的代码后如下:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="line">&lt;resources&gt;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    &lt;declare-styleable name="SlidingMenu" &gt;</span>
<span class="line">        &lt;attr name="rightPadding" format="dimension"&gt;&lt;/attr&gt;</span>
<span class="line">    &lt;/declare-styleable&gt;</span>
<span class="line">&lt;/resources&gt;</span>
</pre></td></tr></table></figure></p>
<p>其中的<strong>rightPadding</strong>为水平滚动条向右边滑动到极限后保留的距离(原谅我语言匮乏，不怎么会形容),还是不能理解我说的什么意思的话可以自己看看手机qq的效果</p>
<h4 id="定义view的大小"><a href="#定义view的大小" class="headerlink" title="定义view的大小"></a>定义view的大小</h4><p>我们为了让水平滚动条要适配屏幕的大小，所以得定义一下view的宽和高和自身的宽高</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 设置子view的宽和高</span>
<span class="line"> * 设置自己的宽和高</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@param</span> widthMeasureSpec</span>
<span class="line"> * <span class="doctag">@param</span> heightMeasureSpec</span>
<span class="line"> */</span></span>
<span class="line"><span class="meta">@Override</span></span>
<span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">if</span> (!once) &#123;</span>
<span class="line">        mWapper = (LinearLayout) getChildAt(<span class="number">0</span>);</span>
<span class="line">        mMenu = (ViewGroup) mWapper.getChildAt(<span class="number">0</span>);</span>
<span class="line">        mContent = (ViewGroup) mWapper.getChildAt(<span class="number">1</span>);</span>
<span class="line"></span>
<span class="line">        mMenuWidth = mMenu.getLayoutParams().width = mScreenWidth - mMenuRightPadding;</span>
<span class="line">        mContent.getLayoutParams().width = mScreenWidth;</span>
<span class="line">        once = <span class="keyword">true</span>;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="定义偏移量-实现隐藏"><a href="#定义偏移量-实现隐藏" class="headerlink" title="定义偏移量,实现隐藏"></a>定义偏移量,实现隐藏</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 通过设置偏移量，讲menu隐藏</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@param</span> changed</span>
<span class="line"> * <span class="doctag">@param</span> l</span>
<span class="line"> * <span class="doctag">@param</span> t</span>
<span class="line"> * <span class="doctag">@param</span> r</span>
<span class="line"> * <span class="doctag">@param</span> b</span>
<span class="line"> */</span></span>
<span class="line"><span class="meta">@Override</span></span>
<span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">super</span>.onLayout(changed, l, t, r, b);</span>
<span class="line"></span>
<span class="line">    <span class="keyword">if</span> (changed) &#123;</span>
<span class="line">        <span class="keyword">this</span>.scrollTo(mMenuWidth, <span class="number">0</span>);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="滑动事件"><a href="#滑动事件" class="headerlink" title="滑动事件"></a>滑动事件</h4><p>我们怎么来判定是否滑动了这个滚动条呢，并通过这个来显示不同的页面，这就是我们要解决的问题，在这里我们可以onTouchEvent方法来实现，因为只有当我们从屏幕上吧手指抬起来的时候才是我们需要的位置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">int</span> action = ev.getAction();</span>
<span class="line">        <span class="keyword">switch</span> (action) &#123;</span>
<span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span>
<span class="line">                <span class="comment">//隐藏在做左边的宽度</span></span>
<span class="line">                <span class="keyword">int</span> scrollX = getScrollX();</span>
<span class="line"></span>
<span class="line">                <span class="keyword">if</span> (scrollX &gt;= mMenuWidth * <span class="number">1.0f</span> / <span class="number">2</span>) &#123;</span>
<span class="line">                    <span class="keyword">this</span>.smoothScrollTo(mMenuWidth, <span class="number">0</span>);</span>
<span class="line">                    isOpen = <span class="keyword">false</span>;</span>
<span class="line">                &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">                    <span class="keyword">this</span>.smoothScrollTo(<span class="number">0</span>, <span class="number">0</span>);</span>
<span class="line">                    isOpen = <span class="keyword">true</span>;</span>
<span class="line">                &#125;</span>
<span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(ev);</span>
<span class="line">    &#125;</span>
</pre></td></tr></table></figure></p>
<h4 id="activity-xml文件的处理"><a href="#activity-xml文件的处理" class="headerlink" title="activity.xml文件的处理"></a>activity.xml文件的处理</h4><p>在这里我们用的是新建的xml，名称为<strong>left_menu.xml</strong> 逻辑也是很简单的</p>
<blockquote>
<p>内部逻辑:</p>
<ul>
<li>用一个水平排列的LinearLayout</li>
<li>在LinearLayout内部嵌套RelativeLayout(虽然这样嵌套可能会导致性能收到影响，但我们现在重在理解这个过程)</li>
<li>在每个RelativeLayout中在添加ImageView和TextView</li>
</ul>
</blockquote>
<p>这样我们要实现的左边菜单栏，默认隐藏的菜单栏就写好了，代码如下，大家可以选择性的参考：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
<span class="line">86</span>
<span class="line">87</span>
<span class="line">88</span>
<span class="line">89</span>
<span class="line">90</span>
<span class="line">91</span>
<span class="line">92</span>
<span class="line">93</span>
<span class="line">94</span>
<span class="line">95</span>
<span class="line">96</span>
<span class="line">97</span>
<span class="line">98</span>
<span class="line">99</span>
<span class="line">100</span>
<span class="line">101</span>
<span class="line">102</span>
<span class="line">103</span>
<span class="line">104</span>
<span class="line">105</span>
<span class="line">106</span>
<span class="line">107</span>
<span class="line">108</span>
<span class="line">109</span>
<span class="line">110</span>
<span class="line">111</span>
<span class="line">112</span>
<span class="line">113</span>
<span class="line">114</span>
<span class="line">115</span>
<span class="line">116</span>
<span class="line">117</span>
<span class="line">118</span>
<span class="line">119</span>
<span class="line">120</span>
<span class="line">121</span>
<span class="line">122</span>
<span class="line">123</span>
<span class="line">124</span>
<span class="line">125</span>
<span class="line">126</span>
</pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="line">&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"</span>
<span class="line">                android:layout_width="match_parent"</span>
<span class="line">                android:layout_height="match_parent"</span>
<span class="line">                android:background="@drawable/background"&gt;</span>
<span class="line"></span>
<span class="line">    &lt;LinearLayout</span>
<span class="line">        android:layout_width="match_parent"</span>
<span class="line">        android:layout_height="wrap_content"</span>
<span class="line">        android:layout_centerInParent="true"</span>
<span class="line">        android:orientation="vertical"&gt;</span>
<span class="line"></span>
<span class="line">        &lt;RelativeLayout</span>
<span class="line">            android:layout_width="match_parent"</span>
<span class="line">            android:layout_height="wrap_content"&gt;</span>
<span class="line"></span>
<span class="line">            &lt;ImageView</span>
<span class="line">                android:id="@+id/id_img1"</span>
<span class="line">                android:layout_width="50dp"</span>
<span class="line">                android:layout_height="50dp"</span>
<span class="line">                android:layout_centerVertical="true"</span>
<span class="line">                android:layout_marginLeft="20dp"</span>
<span class="line">                android:layout_marginTop="20dp"</span>
<span class="line">                android:src="@drawable/img_1"/&gt;</span>
<span class="line">            &lt;TextView</span>
<span class="line">                android:layout_width="wrap_content"</span>
<span class="line">                android:layout_height="wrap_content"</span>
<span class="line">                android:layout_centerVertical="true"</span>
<span class="line">                android:layout_marginLeft="20dp"</span>
<span class="line">                android:layout_toRightOf="@id/id_img1"</span>
<span class="line">                android:text="第一个item"</span>
<span class="line">                android:textColor="#b41dbc"</span>
<span class="line">                android:textSize="20sp"/&gt;</span>
<span class="line">        &lt;/RelativeLayout&gt;</span>
<span class="line">        &lt;RelativeLayout</span>
<span class="line">            android:layout_width="match_parent"</span>
<span class="line">            android:layout_height="wrap_content"&gt;</span>
<span class="line"></span>
<span class="line">            &lt;ImageView</span>
<span class="line">                android:id="@+id/id_img2"</span>
<span class="line">                android:layout_width="50dp"</span>
<span class="line">                android:layout_height="50dp"</span>
<span class="line">                android:layout_centerVertical="true"</span>
<span class="line">                android:layout_marginLeft="20dp"</span>
<span class="line">                android:layout_marginTop="20dp"</span>
<span class="line">                android:src="@drawable/img_2"/&gt;</span>
<span class="line">            &lt;TextView</span>
<span class="line">                android:layout_width="wrap_content"</span>
<span class="line">                android:layout_height="wrap_content"</span>
<span class="line">                android:layout_centerVertical="true"</span>
<span class="line">                android:layout_marginLeft="20dp"</span>
<span class="line">                android:layout_toRightOf="@id/id_img2"</span>
<span class="line">                android:text="第二个item"</span>
<span class="line">                android:textColor="#b41dbc"</span>
<span class="line">                android:textSize="20sp"/&gt;</span>
<span class="line">        &lt;/RelativeLayout&gt;</span>
<span class="line">        &lt;RelativeLayout</span>
<span class="line">            android:layout_width="match_parent"</span>
<span class="line">            android:layout_height="wrap_content"&gt;</span>
<span class="line"></span>
<span class="line">            &lt;ImageView</span>
<span class="line">                android:id="@+id/id_img3"</span>
<span class="line">                android:layout_width="50dp"</span>
<span class="line">                android:layout_height="50dp"</span>
<span class="line">                android:layout_centerVertical="true"</span>
<span class="line">                android:layout_marginLeft="20dp"</span>
<span class="line">                android:layout_marginTop="20dp"</span>
<span class="line">                android:src="@drawable/img_3"/&gt;</span>
<span class="line">            &lt;TextView</span>
<span class="line">                android:layout_width="wrap_content"</span>
<span class="line">                android:layout_height="wrap_content"</span>
<span class="line">                android:layout_centerVertical="true"</span>
<span class="line">                android:layout_marginLeft="20dp"</span>
<span class="line">                android:layout_toRightOf="@id/id_img3"</span>
<span class="line">                android:text="第三个item"</span>
<span class="line">                android:textColor="#b41dbc"</span>
<span class="line">                android:textSize="20sp"/&gt;</span>
<span class="line">        &lt;/RelativeLayout&gt;</span>
<span class="line">        &lt;RelativeLayout</span>
<span class="line">            android:layout_width="match_parent"</span>
<span class="line">            android:layout_height="wrap_content"&gt;</span>
<span class="line"></span>
<span class="line">            &lt;ImageView</span>
<span class="line">                android:id="@+id/id_img4"</span>
<span class="line">                android:layout_width="50dp"</span>
<span class="line">                android:layout_height="50dp"</span>
<span class="line">                android:layout_centerVertical="true"</span>
<span class="line">                android:layout_marginLeft="20dp"</span>
<span class="line">                android:layout_marginTop="20dp"</span>
<span class="line">                android:src="@drawable/img_4"/&gt;</span>
<span class="line">            &lt;TextView</span>
<span class="line">                android:layout_width="wrap_content"</span>
<span class="line">                android:layout_height="wrap_content"</span>
<span class="line">                android:layout_centerVertical="true"</span>
<span class="line">                android:layout_marginLeft="20dp"</span>
<span class="line">                android:layout_toRightOf="@id/id_img4"</span>
<span class="line">                android:text="第四个item"</span>
<span class="line">                android:textColor="#b41dbc"</span>
<span class="line">                android:textSize="20sp"/&gt;</span>
<span class="line">        &lt;/RelativeLayout&gt;</span>
<span class="line">        &lt;RelativeLayout</span>
<span class="line">            android:layout_width="match_parent"</span>
<span class="line">            android:layout_height="wrap_content"&gt;</span>
<span class="line"></span>
<span class="line">            &lt;ImageView</span>
<span class="line">                android:id="@+id/id_img5"</span>
<span class="line">                android:layout_width="50dp"</span>
<span class="line">                android:layout_height="50dp"</span>
<span class="line">                android:layout_centerVertical="true"</span>
<span class="line">                android:layout_marginLeft="20dp"</span>
<span class="line">                android:layout_marginTop="20dp"</span>
<span class="line">                android:src="@drawable/img_5"/&gt;</span>
<span class="line">            &lt;TextView</span>
<span class="line">                android:layout_width="wrap_content"</span>
<span class="line">                android:layout_height="wrap_content"</span>
<span class="line">                android:layout_centerVertical="true"</span>
<span class="line">                android:layout_marginLeft="20dp"</span>
<span class="line">                android:layout_toRightOf="@id/id_img5"</span>
<span class="line">                android:text="第五个item"</span>
<span class="line">                android:textColor="#b41dbc"</span>
<span class="line">                android:textSize="20sp"/&gt;</span>
<span class="line">        &lt;/RelativeLayout&gt;</span>
<span class="line"></span>
<span class="line">    &lt;/LinearLayout&gt;</span>
<span class="line"></span>
<span class="line">&lt;/RelativeLayout&gt;</span>
</pre></td></tr></table></figure></p>
<p>其中str中引用的图片请自行准备。。。</p>
<h4 id="打开菜单"><a href="#打开菜单" class="headerlink" title="打开菜单"></a>打开菜单</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 打开菜单</span>
<span class="line"> */</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openMenu</span><span class="params">()</span> </span>&#123;</span>
<span class="line">    <span class="keyword">if</span> (isOpen) <span class="keyword">return</span>;</span>
<span class="line">    <span class="keyword">this</span>.smoothScrollTo(<span class="number">0</span>, <span class="number">0</span>);</span>
<span class="line">    isOpen = <span class="keyword">true</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="关闭菜单"><a href="#关闭菜单" class="headerlink" title="关闭菜单"></a>关闭菜单</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 关闭菜单</span>
<span class="line"> */</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeMenu</span><span class="params">()</span> </span>&#123;</span>
<span class="line">    <span class="keyword">if</span> (!isOpen) <span class="keyword">return</span>;</span>
<span class="line">    <span class="keyword">this</span>.smoothScrollTo(mMenuWidth, <span class="number">0</span>);</span>
<span class="line">    isOpen = <span class="keyword">false</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="切换菜单"><a href="#切换菜单" class="headerlink" title="切换菜单"></a>切换菜单</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 切换菜单</span>
<span class="line"> */</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toggle</span><span class="params">()</span> </span>&#123;</span>
<span class="line">    <span class="keyword">if</span> (isOpen) &#123;</span>
<span class="line">        closeMenu();</span>
<span class="line">    &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">        openMenu();</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="在主页面中引用自定义view"><a href="#在主页面中引用自定义view" class="headerlink" title="在主页面中引用自定义view"></a>在主页面中引用自定义view</h4><p><strong>activity_main.xml</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
</pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="line">&lt;RelativeLayout</span>
<span class="line">    xmlns:android="http://schemas.android.com/apk/res/android"</span>
<span class="line">    xmlns:qq_menu="http://schemas.android.com/apk/res-auto"</span>
<span class="line">    xmlns:tools="http://schemas.android.com/tools"</span>
<span class="line">    android:layout_width="match_parent"</span>
<span class="line">    android:layout_height="match_parent"</span>
<span class="line">    tools:context="com.earthchen.qq_menu.MainActivity"&gt;</span>
<span class="line"></span>
<span class="line">    &lt;com.earthchen.qq_menu.view.SlidingMenu</span>
<span class="line">        android:id="@+id/id_menu"</span>
<span class="line">        android:layout_width="match_parent"</span>
<span class="line">        android:layout_height="match_parent"</span>
<span class="line">        qq_menu:rightPadding="100dp"&gt;</span>
<span class="line">        </span>
<span class="line">        &lt;LinearLayout</span>
<span class="line">            android:layout_width="wrap_content"</span>
<span class="line">            android:layout_height="match_parent"</span>
<span class="line">            android:orientation="horizontal"&gt;</span>
<span class="line"></span>
<span class="line">            &lt;include layout="@layout/left_menu"/&gt;</span>
<span class="line"></span>
<span class="line">            &lt;LinearLayout</span>
<span class="line">                android:layout_width="match_parent"</span>
<span class="line">                android:layout_height="match_parent"</span>
<span class="line">                android:background="@drawable/main"&gt;</span>
<span class="line">                </span>
<span class="line">                &lt;Button</span>
<span class="line">                    android:layout_width="wrap_content"</span>
<span class="line">                    android:layout_height="wrap_content"</span>
<span class="line">                    android:onClick="toggleMenu"</span>
<span class="line">                    android:text="切换菜单"/&gt;</span>
<span class="line"></span>
<span class="line">            &lt;/LinearLayout&gt;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        &lt;/LinearLayout&gt;</span>
<span class="line"></span>
<span class="line">    &lt;/com.earthchen.qq_menu.view.SlidingMenu&gt;</span>
<span class="line">&lt;/RelativeLayout&gt;</span>
</pre></td></tr></table></figure></p>
<h4 id="在MainActivity中使用自定义控件"><a href="#在MainActivity中使用自定义控件" class="headerlink" title="在MainActivity中使用自定义控件"></a>在MainActivity中使用自定义控件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> SlidingMenu mLeftMenu;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</span>
<span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span>
<span class="line">        setContentView(R.layout.activity_main);</span>
<span class="line">        mLeftMenu = (SlidingMenu) findViewById(R.id.id_menu);</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toggleMenu</span><span class="params">(View view)</span> </span>&#123;</span>
<span class="line">        mLeftMenu.toggle();</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>以下即为最终运行的结果</p>
<p><img src="http://objects.earthchen.cn/qq_menu1.png" alt="qq_menu1"><br><img src="http://objects.earthchen.cn/qq_menu2.png" alt="qq_menu2"></p>
<p><br></p>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>Android studio2.2</strong>中编译成功运行，其他ide请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言队列的基本操作]]></title>
      <url>/2016/07/16/C%E8%AF%AD%E8%A8%80%E9%98%9F%E5%88%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>本篇介绍一下编程中比较重要的一个数据结构队列，队列有个很显著的标志，对其中的数据是先进先出，如果是顺序存储结构可以说就是一个受限的数组，对链式存储结构就只能说是符合先进先出的规则了，这种数据结构在我们真正的编程中还是相当常用的。实际中根据需要去定制自己的队列。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="顺序队列的操作"><a href="#顺序队列的操作" class="headerlink" title="顺序队列的操作"></a>顺序队列的操作</h3><p>首先我们来介绍一下顺序存储结构下的队列的定义和基本操作</p>
<h4 id="添加适当的头文件，定义一个顺序存储数据结构，"><a href="#添加适当的头文件，定义一个顺序存储数据结构，" class="headerlink" title="添加适当的头文件，定义一个顺序存储数据结构，"></a>添加适当的头文件，定义一个顺序存储数据结构，</h4><p>这里需要添加头文件和定义一个队列的顺序数据结构<br><a id="more"></a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span>
<span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span>
<span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span>
<span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span>
<span class="line">&#123;</span></span>
<span class="line">	ElemType *base;</span>
<span class="line">	<span class="keyword">int</span> front;</span>
<span class="line">	<span class="keyword">int</span> rear;</span>
<span class="line">&#125;SqQueue;</span>
</pre></td></tr></table></figure></p>
<h4 id="初始化一个队列（创建一个队列）"><a href="#初始化一个队列（创建一个队列）" class="headerlink" title="初始化一个队列（创建一个队列）"></a>初始化一个队列（创建一个队列）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"></span>
<span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(SqQueue *q)</span> </span>&#123;</span>
<span class="line">	q-&gt;base = (ElemType *)<span class="built_in">malloc</span>(MAXSIZE * <span class="keyword">sizeof</span>(ElemType));</span>
<span class="line">	<span class="keyword">if</span> (!q-&gt;base)</span>
<span class="line">	&#123;</span>
<span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span>
<span class="line">	&#125;</span>
<span class="line">	q-&gt;front = q-&gt;rear = <span class="number">0</span>;</span>
<span class="line">	<span class="keyword">return</span> OK;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="入队操作"><a href="#入队操作" class="headerlink" title="入队操作"></a>入队操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">InsertQueue</span><span class="params">(SqQueue *q, ElemType e)</span> </span>&#123;</span>
<span class="line">	<span class="keyword">if</span> ((q-&gt;rear + <span class="number">1</span>) % MAXSIZE == q-&gt;front)</span>
<span class="line">	&#123;</span>
<span class="line">		<span class="keyword">return</span> ERROR;</span>
<span class="line">	&#125;</span>
<span class="line">	q-&gt;base[q-&gt;rear] = e;</span>
<span class="line">	q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % MAXSIZE;</span>
<span class="line">	<span class="keyword">return</span> OK;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="出队操作"><a href="#出队操作" class="headerlink" title="出队操作"></a>出队操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">DeleteQueue</span><span class="params">(SqQueue *q, ElemType *e)</span> </span>&#123;</span>
<span class="line">	<span class="keyword">if</span> (q-&gt;front == q-&gt;rear)</span>
<span class="line">	&#123;</span>
<span class="line">		<span class="keyword">return</span> ERROR;</span>
<span class="line">	&#125;</span>
<span class="line">	*e = q-&gt;base[q-&gt;front];</span>
<span class="line">	q-&gt;front = (q-&gt;front + <span class="number">1</span>) % MAXSIZE;</span>
<span class="line">	<span class="keyword">return</span> OK;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span>
<span class="line">	SqQueue q;</span>
<span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>];</span>
<span class="line">	<span class="keyword">int</span> i;</span>
<span class="line">	InitQueue(&amp;q);</span>
<span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span>
<span class="line">	&#123;</span>
<span class="line">		InsertQueue(&amp;q, i + <span class="number">1</span>);</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span>
<span class="line">	&#123;</span>
<span class="line">		DeleteQueue(&amp;q, &amp;a[i]);</span>
<span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a[i]);</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="http://objects.earthchen.cn/c%E8%AF%AD%E8%A8%80%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%E7%BB%93%E6%9E%9C.png" alt="cmd顺序队列运行结果"><br>都是很基本的操作，在顺序队列中，可以从数组的方式去理解，这样将会让你理解起来更简单</p>
<h3 id="链式队列的操作"><a href="#链式队列的操作" class="headerlink" title="链式队列的操作"></a>链式队列的操作</h3><p>首先我们来介绍一下顺序存储结构下的队列的定义和基本操作</p>
<h4 id="添加适当的头文件，定义一个队列链式存储数据结构，"><a href="#添加适当的头文件，定义一个队列链式存储数据结构，" class="headerlink" title="添加适当的头文件，定义一个队列链式存储数据结构，"></a>添加适当的头文件，定义一个队列链式存储数据结构，</h4><p>这里需要添加头文件和定义一个队列的链式存储数据结构</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1;</span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0;</span></span>
<span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span>
<span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span>
<span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span></span>
<span class="line">&#123;</span></span>
<span class="line">	ElemType data;</span>
<span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span>
<span class="line">&#125;QNode, *QueuePrt;</span>
<span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span>
<span class="line">&#123;</span></span>
<span class="line">	<span class="comment">//对头，尾指针</span></span>
<span class="line">	QueuePrt front, rear;</span>
<span class="line">&#125;LinkQueue;</span>
</pre></td></tr></table></figure>
<h4 id="初始化一个队列（创建一个队列）-1"><a href="#初始化一个队列（创建一个队列）-1" class="headerlink" title="初始化一个队列（创建一个队列）"></a>初始化一个队列（创建一个队列）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(LinkQueue *q)</span> </span>&#123;</span>
<span class="line">	q-&gt;front = q-&gt;rear = (QueuePrt)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span>
<span class="line">	<span class="keyword">if</span> (!q-&gt;front)</span>
<span class="line">	&#123;</span>
<span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span>
<span class="line">	&#125;</span>
<span class="line">	q-&gt;front-&gt;next = <span class="literal">NULL</span>;</span>
<span class="line">	<span class="keyword">return</span> OK;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="入队操作-1"><a href="#入队操作-1" class="headerlink" title="入队操作"></a>入队操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">InsertQueue</span><span class="params">(LinkQueue *q, ElemType e)</span> </span>&#123;</span>
<span class="line">	QueuePrt p = (QueuePrt)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span>
<span class="line">	<span class="keyword">if</span> (!p)</span>
<span class="line">	&#123;</span>
<span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span>
<span class="line">	&#125;</span>
<span class="line">	p-&gt;data = e;</span>
<span class="line">	p-&gt;next = <span class="literal">NULL</span>;</span>
<span class="line">	q-&gt;rear-&gt;next = p;</span>
<span class="line">	q-&gt;rear = p;</span>
<span class="line">	<span class="keyword">return</span> OK;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="出队操作-1"><a href="#出队操作-1" class="headerlink" title="出队操作"></a>出队操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">DeleteQueue</span><span class="params">(LinkQueue *q, ElemType *e)</span> </span>&#123;</span>
<span class="line">	QueuePrt p;</span>
<span class="line">	<span class="keyword">if</span> (q-&gt;front == q-&gt;rear)</span>
<span class="line">	&#123;</span>
<span class="line">		<span class="keyword">return</span> ERROR;</span>
<span class="line">	&#125;</span>
<span class="line">	p = q-&gt;front-&gt;next;</span>
<span class="line">	*e = p-&gt;data;</span>
<span class="line">	q-&gt;front-&gt;next = p-&gt;next;</span>
<span class="line">	<span class="keyword">if</span> (q-&gt;rear == p)</span>
<span class="line">	&#123;</span>
<span class="line">		q-&gt;rear = q-&gt;front;</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="built_in">free</span>(p);</span>
<span class="line">	<span class="keyword">return</span> OK;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="主函数-1"><a href="#主函数-1" class="headerlink" title="主函数"></a>主函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span>
<span class="line">	LinkQueue q;</span>
<span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>];</span>
<span class="line">	<span class="keyword">int</span> i;</span>
<span class="line">	InitQueue(&amp;q);</span>
<span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span>
<span class="line">	&#123;</span>
<span class="line">		InsertQueue(&amp;q, i + <span class="number">1</span>);</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span>
<span class="line">	&#123;</span>
<span class="line">		DeleteQueue(&amp;q, &amp;a[i]);</span>
<span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a[i]);</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="http://objects.earthchen.cn/c%E8%AF%AD%E8%A8%80%E9%93%BE%E9%98%9F%E5%88%97%E7%BB%93%E6%9E%9C.png" alt="cmd顺序队列运行结果"><br>在链式存储结构中的队列同样还是相对很简单的，只要理解了先进先出的逻辑，和了解一下指针操作就可以很容易的写出队列的节本操作。</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>visual studio 2015</strong>中编译成功运行，其他ide请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言中缀表达式计算器]]></title>
      <url>/2016/07/15/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>本文将介绍中缀表达式计算器的详细写法,是<a href="/2016/10/07/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%98%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/">C语言把中缀表达式转换为后缀表达式</a>和<a href="/2016/10/07/C%E8%AF%AD%E8%A8%80%E9%80%86%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/">C语言逆波兰计算器</a>的结合   &nbsp;&nbsp;&nbsp;&nbsp;但本篇用了更精简的写法，但是也相对的提高了代码的理解难度，在阅读时，需自己详细斟酌</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="添加适当的头文件"><a href="#添加适当的头文件" class="headerlink" title="添加适当的头文件"></a>添加适当的头文件</h3><p>c语言的头文件比不可少，我们这里还是添加适当的头文件和宏定义并声明函数</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span>
<span class="line"> </span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LEN 80  </span></span>
<span class="line"><span class="function"><span class="keyword">void</span> <span class="title">convert2postfix</span><span class="params">(<span class="keyword">char</span> *src, <span class="keyword">char</span> *dst)</span></span>;</span>
<span class="line"><span class="function"><span class="keyword">float</span> <span class="title">cal</span><span class="params">(<span class="keyword">char</span> *src)</span></span>;</span>
</pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="中缀表达式转换为后缀表达式-操作符与操作数之间应有空格隔开"><a href="#中缀表达式转换为后缀表达式-操作符与操作数之间应有空格隔开" class="headerlink" title="中缀表达式转换为后缀表达式(操作符与操作数之间应有空格隔开)"></a>中缀表达式转换为后缀表达式(操作符与操作数之间应有空格隔开)</h3><p>这里是另一种方式的中缀表达式转后缀表达式，还有一种方式更容易理解一点，但是代码量相对更多，详情可见<a href="http://earthchen.coding.me/2016/10/07/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%98%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/" target="_blank" rel="external">C语言把中缀表达式转换为后缀表达式</a></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">convert2postfix</span><span class="params">(<span class="keyword">char</span> *src, <span class="keyword">char</span> *dst)</span> </span>&#123;</span>
<span class="line"> 	<span class="keyword">char</span> *psrc, *pdst;</span>
<span class="line"> 	<span class="keyword">char</span> <span class="built_in">stack</span>[MAX_LEN];</span>
<span class="line"> 	<span class="keyword">int</span> top;</span>
<span class="line"> </span>
<span class="line"> 	top = <span class="number">-1</span>;</span>
<span class="line"> 	psrc = src;</span>
<span class="line"> 	pdst = dst;</span>
<span class="line"> 	<span class="keyword">while</span> (*psrc != <span class="string">'\0'</span>) &#123;</span>
<span class="line"> 		<span class="keyword">if</span> (*psrc &gt;= <span class="string">'0'</span> &amp;&amp; *psrc &lt;= <span class="string">'9'</span>) &#123;</span>
<span class="line"> 			*pdst = *psrc;</span>
<span class="line"> 			pdst++;</span>
<span class="line"> 			<span class="comment">//加入分隔空格  </span></span>
<span class="line"> 			<span class="keyword">if</span> (!(*(psrc + <span class="number">1</span>) &gt;= <span class="string">'0'</span> &amp;&amp; *(psrc + <span class="number">1</span>) &lt;= <span class="string">'9'</span>) &amp;&amp; *(psrc + <span class="number">1</span>) != <span class="string">'.'</span>) &#123;</span>
<span class="line"> 				*pdst = <span class="string">' '</span>;</span>
<span class="line"> 				pdst++;</span>
<span class="line"> 			&#125;</span>
<span class="line"> 		&#125;</span>
<span class="line"> 		<span class="keyword">if</span> (*psrc == <span class="string">'.'</span>) &#123;</span>
<span class="line"> 			*pdst = *psrc;</span>
<span class="line"> 			pdst++;</span>
<span class="line"> 		&#125;</span>
<span class="line"> 		<span class="keyword">if</span> (*psrc == <span class="string">'('</span>) &#123;</span>
<span class="line"> 			<span class="built_in">stack</span>[++top] = *psrc;</span>
<span class="line"> 		&#125;</span>
<span class="line"> 		<span class="keyword">if</span> (*psrc == <span class="string">')'</span>) &#123;</span>
<span class="line"> 			<span class="keyword">while</span> (<span class="built_in">stack</span>[top] != <span class="string">'('</span>) &#123;</span>
<span class="line"> 				*pdst = <span class="built_in">stack</span>[top--];</span>
<span class="line"> 				pdst++;</span>
<span class="line"> 				<span class="comment">//加入分隔空格  </span></span>
<span class="line"> 				*pdst = <span class="string">' '</span>;</span>
<span class="line"> 				pdst++;</span>
<span class="line"> 			&#125;</span>
<span class="line"> 			<span class="comment">//弹出'('  </span></span>
<span class="line"> 			top--;</span>
<span class="line"> 		&#125;</span>
<span class="line"> 		<span class="keyword">if</span> (*psrc == <span class="string">'*'</span> || *psrc == <span class="string">'/'</span>) &#123;</span>
<span class="line"> 			<span class="keyword">if</span> (<span class="built_in">stack</span>[top] == <span class="string">'*'</span> || <span class="built_in">stack</span>[top] == <span class="string">'/'</span>) &#123;</span>
<span class="line"> 				*pdst = <span class="built_in">stack</span>[top--];</span>
<span class="line"> 				pdst++;</span>
<span class="line"> 				<span class="comment">//加入分隔空格  </span></span>
<span class="line"> 				*pdst = <span class="string">' '</span>;</span>
<span class="line"> 				pdst++;</span>
<span class="line"> 			&#125;</span>
<span class="line"> 			<span class="built_in">stack</span>[++top] = *psrc;</span>
<span class="line"> 		&#125;</span>
<span class="line"> 		<span class="keyword">if</span> (*psrc == <span class="string">'+'</span> || *psrc == <span class="string">'-'</span>) &#123;</span>
<span class="line"> 			<span class="keyword">while</span> (<span class="built_in">stack</span>[top] == <span class="string">'*'</span></span>
<span class="line"> 				|| <span class="built_in">stack</span>[top] == <span class="string">'/'</span></span>
<span class="line"> 				|| <span class="built_in">stack</span>[top] == <span class="string">'+'</span></span>
<span class="line"> 				|| <span class="built_in">stack</span>[top] == <span class="string">'-'</span>) &#123;</span>
<span class="line"> 				*pdst = <span class="built_in">stack</span>[top--];</span>
<span class="line"> 				pdst++;</span>
<span class="line"> 				<span class="comment">//加入分隔空格  </span></span>
<span class="line"> 				*pdst = <span class="string">' '</span>;</span>
<span class="line"> 				pdst++;</span>
<span class="line"> 			&#125;</span>
<span class="line"> 			<span class="built_in">stack</span>[++top] = *psrc;</span>
<span class="line"> 		&#125;</span>
<span class="line"> 		psrc++;</span>
<span class="line"> 	&#125;</span>
<span class="line"> 	<span class="comment">//扫描完成后，取出栈中所有运算符，写入后缀表达式数组。  </span></span>
<span class="line"> 	<span class="keyword">while</span> (top != <span class="number">-1</span>) &#123;</span>
<span class="line"> 		*pdst = <span class="built_in">stack</span>[top--];</span>
<span class="line"> 		*pdst++;</span>
<span class="line"> 		*pdst = <span class="string">' '</span>;</span>
<span class="line"> 		pdst++;</span>
<span class="line"> 	&#125;</span>
<span class="line"> 	*pdst = <span class="string">'\0'</span>;</span>
<span class="line"> &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="计算后缀表达式"><a href="#计算后缀表达式" class="headerlink" title="计算后缀表达式"></a>计算后缀表达式</h3><p>同上还有另一种比较好理解的方式 见<a href="/2016/10/07/C%E8%AF%AD%E8%A8%80%E9%80%86%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/">C语言逆波兰计算器</a></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">cal</span><span class="params">(<span class="keyword">char</span> *src)</span> </span>&#123;</span>
<span class="line">	<span class="keyword">float</span> <span class="built_in">stack</span>[MAX_LEN];</span>
<span class="line">	<span class="keyword">float</span> opd1, opd2;</span>
<span class="line">	<span class="keyword">int</span> top;</span>
<span class="line">	<span class="keyword">char</span> *p, *pre;</span>
<span class="line">	top = <span class="number">-1</span>;</span>
<span class="line"></span>
<span class="line">	p = src;</span>
<span class="line">	<span class="keyword">while</span> (*p != <span class="string">'\0'</span>) &#123;</span>
<span class="line">		<span class="keyword">if</span> (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) &#123;</span>
<span class="line">			pre = p;</span>
<span class="line">			<span class="keyword">while</span> ((*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) || *p == <span class="string">'.'</span>) &#123;</span>
<span class="line">				p++;</span>
<span class="line">			&#125;</span>
<span class="line">			*p = <span class="string">'\0'</span>;</span>
<span class="line">			<span class="built_in">stack</span>[++top] = atof(pre);</span>
<span class="line">		&#125;</span>
<span class="line">		<span class="keyword">if</span> (*p == <span class="string">'+'</span> || *p == <span class="string">'-'</span> || *p == <span class="string">'*'</span> || *p == <span class="string">'/'</span>) &#123;</span>
<span class="line">			opd2 = <span class="built_in">stack</span>[top--];</span>
<span class="line">			opd1 = <span class="built_in">stack</span>[top--];</span>
<span class="line">			<span class="keyword">switch</span> (*p) &#123;</span>
<span class="line">			<span class="keyword">case</span> <span class="string">'+'</span>:</span>
<span class="line">				<span class="built_in">stack</span>[++top] = opd1 + opd2;</span>
<span class="line">				<span class="keyword">break</span>;</span>
<span class="line">			<span class="keyword">case</span> <span class="string">'-'</span>:</span>
<span class="line">				<span class="built_in">stack</span>[++top] = opd1 - opd2;</span>
<span class="line">				<span class="keyword">break</span>;</span>
<span class="line">			<span class="keyword">case</span> <span class="string">'*'</span>:</span>
<span class="line">				<span class="built_in">stack</span>[++top] = opd1*opd2;</span>
<span class="line">				<span class="keyword">break</span>;</span>
<span class="line">			<span class="keyword">case</span> <span class="string">'/'</span>:</span>
<span class="line">				<span class="comment">//更严格一点，应该处理除数为0的情况  </span></span>
<span class="line">				<span class="built_in">stack</span>[++top] = opd1 / opd2;</span>
<span class="line">				<span class="keyword">break</span>;</span>
<span class="line">			&#125;</span>
<span class="line">		&#125;</span>
<span class="line">		p++;</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">return</span> <span class="built_in">stack</span>[top--];</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><p>输入中缀表达式作为一个字符串，调用中缀表达式转换和后缀表达式计算便可以很容易得出结果。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="function">nt <span class="title">main</span><span class="params">()</span> </span>&#123;</span>
<span class="line">	<span class="keyword">char</span> str1[MAX_LEN], str2[MAX_LEN];</span>
<span class="line">	<span class="keyword">float</span> res;</span>
<span class="line"></span>
<span class="line">	gets(str1);</span>
<span class="line">	convert2postfix(str1, str2);</span>
<span class="line">	</span>
<span class="line">	res = cal(str2);</span>
<span class="line">	<span class="built_in">printf</span>(<span class="string">"result:%.2f\n"</span>, res);</span>
<span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>本人用的是vs2015编译器，所以文中的scanf用了更安全的scanf_s，当然也可以用fgets 详情可以自行<a href="https://www.baidu.com/" target="_blank" rel="external">baidu</a>或者<a href="https://www.google.com" target="_blank" rel="external">Google</a></p>
<p><img src="http://objects.earthchen.cn/c%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%99%A8.png" alt="cmd 运行结果"><br>(1+4)*(4-5)=-5 结果正确 </p>
<p><br></p>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>visual studio 2015</strong>中编译成功运行，其他ide请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言中缀表达式转后缀表达式]]></title>
      <url>/2016/07/15/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%98%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>众所周知,计算机中不能直接用中缀表达式计算,形如(1+2)*(4-5)之类的，但是我们可以计算机可以很容易的通过后缀表达式来计算我们所输入的算式。所以我们就需要把中缀表达式转换为后缀表达式。下面是个人写的一点代码，大家可以参考。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="添加适当的头文件，定义一个栈数据结构，"><a href="#添加适当的头文件，定义一个栈数据结构，" class="headerlink" title="添加适当的头文件，定义一个栈数据结构，"></a>添加适当的头文件，定义一个栈数据结构，</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span>  STACK_INIT_SIZE 100</span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKINCREMENT 10</span></span>
<span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span>
<span class="line"></span>
<span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span>
<span class="line">&#123;</span></span>
<span class="line">	ElemType *base;</span>
<span class="line">	ElemType *top;</span>
<span class="line">	<span class="keyword">int</span> stackSize;</span>
<span class="line">&#125;SqStack;</span>
</pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="创建一个栈"><a href="#创建一个栈" class="headerlink" title="创建一个栈"></a>创建一个栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个栈</span></span>
<span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initStack</span><span class="params">(SqStack *s)</span> </span>&#123;</span>
<span class="line">	s-&gt;base = (ElemType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType));</span>
<span class="line">	<span class="keyword">if</span> (!s-&gt;base)</span>
<span class="line">	&#123;</span>
<span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span>
<span class="line">	&#125;</span>
<span class="line">	s-&gt;top = s-&gt;base;   <span class="comment">//最开始 栈底就是栈顶</span></span>
<span class="line">	s-&gt;stackSize = STACK_INIT_SIZE;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="入栈操作"><a href="#入栈操作" class="headerlink" title="入栈操作"></a>入栈操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(SqStack *s, ElemType e)</span> </span>&#123;</span>
<span class="line">	<span class="comment">//如果栈满  追加空间</span></span>
<span class="line">	<span class="keyword">if</span> (s-&gt;top - s-&gt;base &gt;= s-&gt;stackSize)</span>
<span class="line">	&#123;</span>
<span class="line">		s-&gt;base = (ElemType *)<span class="built_in">realloc</span>(s-&gt;base, (s-&gt;stackSize + STACKINCREMENT) * <span class="keyword">sizeof</span>(ElemType));</span>
<span class="line">		<span class="keyword">if</span> (!s-&gt;base)</span>
<span class="line">		&#123;</span>
<span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span>
<span class="line">		&#125;</span>
<span class="line">		s-&gt;top = s-&gt;base + s-&gt;stackSize;  <span class="comment">//设置栈顶</span></span>
<span class="line">		s-&gt;stackSize = s-&gt;stackSize + STACKINCREMENT;</span>
<span class="line">	&#125;</span>
<span class="line">	*(s-&gt;top) = e;</span>
<span class="line">	s-&gt;top++;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(SqStack *s, ElemType *e)</span> </span>&#123;</span>
<span class="line">	<span class="keyword">if</span> (s-&gt;top == s-&gt;base)</span>
<span class="line">	&#123;</span>
<span class="line">		<span class="keyword">return</span>;</span>
<span class="line">	&#125;</span>
<span class="line">	*e = *--(s-&gt;top);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="计算栈的当前容量-最大容量是s-stackSize"><a href="#计算栈的当前容量-最大容量是s-stackSize" class="headerlink" title="计算栈的当前容量(最大容量是s.stackSize)"></a>计算栈的当前容量(最大容量是s.stackSize)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLen</span><span class="params">(SqStack s)</span> </span>&#123;</span>
<span class="line">	<span class="keyword">return</span> (s.top - s.base);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span>
<span class="line">	<span class="keyword">char</span> cal[<span class="number">50</span>];</span>
<span class="line">	<span class="keyword">char</span> c, e;</span>
<span class="line">	SqStack s;</span>
<span class="line">	initStack(&amp;s);</span>
<span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入中缀表达式 输入#表示结束\n"</span>);</span>
<span class="line">	scanf_s(<span class="string">"%c"</span>, &amp;c);</span>
<span class="line">	<span class="keyword">while</span> (c != <span class="string">'#'</span>)</span>
<span class="line">	&#123;</span>
<span class="line">		<span class="keyword">while</span> (c&gt;=<span class="string">'0'</span> &amp;&amp; c&lt;=<span class="string">'9'</span>)</span>
<span class="line">		&#123;</span>
<span class="line">			<span class="built_in">printf</span>(<span class="string">"%c "</span>, c);</span>
<span class="line">			scanf_s(<span class="string">"%c"</span>, &amp;c);</span>
<span class="line">			<span class="keyword">if</span> (c&lt;<span class="string">'0'</span> || c&gt;<span class="string">'9'</span>)</span>
<span class="line">			&#123;</span>
<span class="line">				<span class="built_in">printf</span>(<span class="string">" "</span>);</span>
<span class="line">			&#125;</span>
<span class="line">		&#125;</span>
<span class="line">		<span class="keyword">if</span> (c == <span class="string">')'</span>)</span>
<span class="line">		&#123;</span>
<span class="line">			Pop(&amp;s, &amp;e);</span>
<span class="line">			<span class="keyword">while</span> (e != <span class="string">'('</span>)</span>
<span class="line">			&#123;</span>
<span class="line">				<span class="built_in">printf</span>(<span class="string">"%c "</span>, e);</span>
<span class="line">				Pop(&amp;s, &amp;e);</span>
<span class="line">			&#125;</span>
<span class="line">		&#125;</span>
<span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'+'</span> || c == <span class="string">'-'</span>)</span>
<span class="line">		&#123;</span>
<span class="line">			<span class="keyword">if</span> (!StackLen(s))</span>
<span class="line">			&#123;</span>
<span class="line">				Push(&amp;s, c);</span>
<span class="line">			&#125;</span>
<span class="line">			<span class="keyword">else</span> &#123;</span>
<span class="line">				<span class="keyword">do</span></span>
<span class="line">				&#123;</span>
<span class="line">					Pop(&amp;s, &amp;e);</span>
<span class="line">					<span class="keyword">if</span> (e == <span class="string">'('</span>)</span>
<span class="line">					&#123;</span>
<span class="line">						Push(&amp;s, e);</span>
<span class="line">					&#125;</span>
<span class="line">					<span class="keyword">else</span> &#123;</span>
<span class="line">						<span class="built_in">printf</span>(<span class="string">"%c "</span>, e);</span>
<span class="line">					&#125;</span>
<span class="line">				&#125; <span class="keyword">while</span> (StackLen(s) &amp;&amp; e!=<span class="string">'('</span>);</span>
<span class="line">				Push(&amp;s, c);</span>
<span class="line">			&#125;</span>
<span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (c==<span class="string">'*'</span> || c==<span class="string">'/'</span> || c==<span class="string">'('</span>)</span>
<span class="line">		&#123;</span>
<span class="line">			Push(&amp;s, c);</span>
<span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (c==<span class="string">'#'</span>)</span>
<span class="line">		&#123;</span>
<span class="line">			<span class="keyword">break</span>;</span>
<span class="line">		&#125;</span>
<span class="line">		<span class="keyword">else</span> &#123;</span>
<span class="line">			<span class="built_in">printf</span>(<span class="string">"出错，输入格式错误"</span>);</span>
<span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span>
<span class="line">		&#125;</span>
<span class="line">		scanf_s(<span class="string">"%c"</span>, &amp;c);</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">while</span> (StackLen(s))</span>
<span class="line">	&#123;</span>
<span class="line">		Pop(&amp;s, &amp;e);</span>
<span class="line">		<span class="built_in">printf</span>(<span class="string">"%c "</span>, e);</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">return</span> <span class="number">0</span>;cd</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="以下是运行结果-本人用的是vs2015编译器，所以文中的scanf用了更安全的scanf-s，-如有引用-请自觉替换成和自己的编译器想匹配的函数"><a href="#以下是运行结果-本人用的是vs2015编译器，所以文中的scanf用了更安全的scanf-s，-如有引用-请自觉替换成和自己的编译器想匹配的函数" class="headerlink" title="以下是运行结果 本人用的是vs2015编译器，所以文中的scanf用了更安全的scanf_s，  如有引用 请自觉替换成和自己的编译器想匹配的函数"></a>以下是运行结果 本人用的是vs2015编译器，所以文中的scanf用了更安全的scanf_s，  如有引用 请自觉替换成和自己的编译器想匹配的函数</h3><p><img src="http://objects.earthchen.cn/c%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="cmd 运行结果"><br>代码很简单 ，仔细看看研究一下指针就很容易看懂，</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>visual studio 2015</strong>中编译成功运行，其他ide请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言共享栈]]></title>
      <url>/2016/07/15/C%E8%AF%AD%E8%A8%80%E5%85%B1%E4%BA%AB%E6%A0%88/</url>
      <content type="html"><![CDATA[<p>栈的操作我相信大家都应该了解了弄懂了，  如果没弄懂希望可以去再去看看相关的资料，我博客中的<a href="/2016/10/18/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%98%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/">C语言中缀表达式转后缀表达式</a>中涉及到了一下栈的基本操作，有兴趣的朋友也可以看看。<br>所谓共享栈，就是两个栈共同使用一块内存空间，其中一个栈的栈底作为另一个栈的栈顶，反之亦然。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><blockquote>
<p>因为两个栈公用一个空间，假设一个栈为0#，规定其为空时top[0]==-1；另一个栈为1#规定其为空时，top[1]==MaxSize；<br>入栈时，先确定栈号是否合法，然后查看是对0#栈还是1#栈进行操作，入栈操作和顺序栈的入栈操作并无太大不同。<br>选定之后进行入栈操作。这里应该注意此共享栈是否已满，如果已满则不能进行入栈操作。如若入栈成功则返回0；入栈失败则返回-1；<br>出栈时，先确定栈号是否合法，然后查看是对0#栈还是1#栈进行操作，出栈操作和顺序栈的出栈操作并无太大不同。<br>选定之后进行出栈操作。如果出栈成功返回0；出栈失败返回-1；<br><a id="more"></a></p>
</blockquote>
<h3 id="添加适当的头文件，定义一个栈数据结构，"><a href="#添加适当的头文件，定义一个栈数据结构，" class="headerlink" title="添加适当的头文件，定义一个栈数据结构，"></a>添加适当的头文件，定义一个栈数据结构，</h3><p>共享栈也是栈，只不过有点特殊，在这里我们还是需要添加适当的头文件和定义恰当的数据结构</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MaxSize 100</span></span>
<span class="line"></span>
<span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span>
<span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span>
<span class="line">	ElemType data[MaxSize];</span>
<span class="line">	<span class="keyword">int</span> top[<span class="number">2</span>];</span>
<span class="line">&#125;SqStack;</span>
</pre></td></tr></table></figure>
<h3 id="初始化共享栈"><a href="#初始化共享栈" class="headerlink" title="初始化共享栈"></a>初始化共享栈</h3><p>由于我这里用的是顺序存储结构的栈结构（也就是数据），top也就是一个标记而已，分别代编栈1和栈2的标记<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SqStack *s)</span></span>
<span class="line"></span>&#123;</span>
<span class="line">	s-&gt;top[<span class="number">0</span>] = <span class="number">-1</span>;</span>
<span class="line">	s-&gt;top[<span class="number">1</span>] = MaxSize;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<h3 id="入栈操作"><a href="#入栈操作" class="headerlink" title="入栈操作"></a>入栈操作</h3><p>在入栈的时候，我们需要选择入的是两个栈中的哪一个栈，我们这里用0和1来区分</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Push</span><span class="params">(SqStack*s, ElemType x, <span class="keyword">int</span> n)</span></span>
<span class="line"></span>&#123;</span>
<span class="line">	<span class="keyword">if</span> (n &lt; <span class="number">0</span> || n&gt;<span class="number">1</span>) &#123;</span>
<span class="line">		<span class="built_in">printf</span>(<span class="string">"The stack number is false!\n"</span>);</span>
<span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">if</span> (s-&gt;top[<span class="number">1</span>] - s-&gt;top[<span class="number">0</span>] == <span class="number">1</span>) &#123;</span>
<span class="line">		<span class="built_in">printf</span>(<span class="string">"The stack is full!\n"</span>);</span>
<span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">switch</span> (n) &#123;</span>
<span class="line">	<span class="keyword">case</span> <span class="number">0</span>:s-&gt;data[++s-&gt;top[<span class="number">0</span>]] = x; <span class="keyword">break</span>;</span>
<span class="line">	<span class="keyword">case</span> <span class="number">1</span>:s-&gt;data[--s-&gt;top[<span class="number">1</span>]] = x; <span class="keyword">break</span>;</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h3><p>出栈和入栈一样，也需要选择出栈的具体是哪个栈</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(SqStack *s, ElemType* x, <span class="keyword">int</span> n)</span></span>
<span class="line"></span>&#123;</span>
<span class="line">	<span class="keyword">if</span> (n &lt; <span class="number">0</span> || n&gt;<span class="number">1</span>) &#123;</span>
<span class="line">		<span class="built_in">printf</span>(<span class="string">"The stack number is false!\n"</span>);</span>
<span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">switch</span> (n) &#123;</span>
<span class="line">	<span class="keyword">case</span> <span class="number">0</span>:</span>
<span class="line">		<span class="keyword">if</span> (s-&gt;top[<span class="number">0</span>] == <span class="number">-1</span>) &#123;</span>
<span class="line">			<span class="built_in">printf</span>(<span class="string">"The stack[0] is empty!\n"</span>);</span>
<span class="line">		&#125;</span>
<span class="line">		*x = s-&gt;data[s-&gt;top[<span class="number">0</span>]--];</span>
<span class="line">		<span class="keyword">break</span>;</span>
<span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span>
<span class="line">		<span class="keyword">if</span> (s-&gt;top[<span class="number">1</span>] == MaxSize) &#123;</span>
<span class="line">			<span class="built_in">printf</span>(<span class="string">"The stack[1] is empty!\n"</span>);</span>
<span class="line">		&#125;</span>
<span class="line">		*x = s-&gt;data[s-&gt;top[<span class="number">1</span>]++];</span>
<span class="line">		<span class="keyword">break</span>;</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>
<span class="line"></span>&#123;</span>
<span class="line">	SqStack s;</span>
<span class="line">	InitStack(&amp;s);</span>
<span class="line"></span>
<span class="line">	ElemType x = <span class="number">5</span>;</span>
<span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span>
<span class="line">	<span class="keyword">int</span> flagPush;</span>
<span class="line">	flagPush = Push(&amp;s, x, n);</span>
<span class="line">	<span class="keyword">if</span> (flagPush) &#123;</span>
<span class="line">		<span class="built_in">printf</span>(<span class="string">"Push false!\n"</span>);</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">else</span> &#123;</span>
<span class="line">		<span class="built_in">printf</span>(<span class="string">"Push %d success!\n"</span>, x);</span>
<span class="line">	&#125;</span>
<span class="line"></span>
<span class="line">	<span class="keyword">int</span> flagPop;</span>
<span class="line">	flagPop = Pop(&amp;s, &amp;x, n);</span>
<span class="line">	<span class="keyword">if</span> (flagPop) &#123;</span>
<span class="line">		<span class="built_in">printf</span>(<span class="string">"Pop false!\n"</span>);</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">else</span> &#123;</span>
<span class="line">		<span class="built_in">printf</span>(<span class="string">"Pop %d  success!\n"</span>, x);</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="http://objects.earthchen.cn/C%E8%AF%AD%E8%A8%80%E5%85%B1%E4%BA%AB%E6%A0%88%E7%BB%93%E6%9E%9C.png" alt="c语言共享栈运行结果"><br>以上就是共享栈的简单操作，我这里只测试他是否能够成功，如有需要，请研读代码后自行修改，如果一时看不懂，请多看几遍思路分析，把原理弄懂，代码还是想当简单的。</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>visual studio 2015</strong>中编译成功运行，其他ide请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言逆波兰表达式计算(后缀表达式计算器)]]></title>
      <url>/2016/07/15/C%E8%AF%AD%E8%A8%80%E9%80%86%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>刚开始学习c语言时，我们都学过输入一个数在输入一个操作数在输入要进行的计算方式，在输入另一个操作数，然后通过内置的+ - / <em>以及内置头文件 <em>*math.h</em></em>等操作进行计算<br>但是我们可不可以直接输入我们熟悉的算式才得出结果呢，答案是肯定的，我博客上一篇介绍了<a href="/2016/10/07/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%98%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/">C语言把中缀表达式转换为后缀表达式</a>有兴趣的读者可以去看看，有了上篇的知识，在加上本篇的内容就可以很容易做出一个中缀表达式计算器了有兴趣的读者可以看完本文去尝试一下，对自己的能力也是一种提升</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="添加适当的头文件，定义一个栈数据结构，"><a href="#添加适当的头文件，定义一个栈数据结构，" class="headerlink" title="添加适当的头文件，定义一个栈数据结构，"></a>添加适当的头文件，定义一个栈数据结构，</h3><p>和之前一样，这里还是需要添加头文件和定义栈的数据结构，所有的操作都是基于栈的操作</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span>  STACK_INIT_SIZE 100</span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKINCREMENT 10</span></span>
<span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ElemType;</span>
<span class="line"></span>
<span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span>
<span class="line">&#123;</span></span>
<span class="line">	ElemType *base;</span>
<span class="line">	ElemType *top;</span>
<span class="line">	<span class="keyword">int</span> stackSize;</span>
<span class="line">&#125;SqStack;</span>
</pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="创建一个栈"><a href="#创建一个栈" class="headerlink" title="创建一个栈"></a>创建一个栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个栈</span></span>
<span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initStack</span><span class="params">(SqStack *s)</span> </span>&#123;</span>
<span class="line">	s-&gt;base = (ElemType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType));</span>
<span class="line">	<span class="keyword">if</span> (!s-&gt;base)</span>
<span class="line">	&#123;</span>
<span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span>
<span class="line">	&#125;</span>
<span class="line">	s-&gt;top = s-&gt;base;   <span class="comment">//最开始 栈底就是栈顶</span></span>
<span class="line">	s-&gt;stackSize = STACK_INIT_SIZE;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="入栈操作"><a href="#入栈操作" class="headerlink" title="入栈操作"></a>入栈操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(SqStack *s, ElemType e)</span> </span>&#123;</span>
<span class="line">	<span class="comment">//如果栈满  追加空间</span></span>
<span class="line">	<span class="keyword">if</span> (s-&gt;top - s-&gt;base &gt;= s-&gt;stackSize)</span>
<span class="line">	&#123;</span>
<span class="line">		s-&gt;base = (ElemType *)<span class="built_in">realloc</span>(s-&gt;base, (s-&gt;stackSize + STACKINCREMENT) * <span class="keyword">sizeof</span>(ElemType));</span>
<span class="line">		<span class="keyword">if</span> (!s-&gt;base)</span>
<span class="line">		&#123;</span>
<span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span>
<span class="line">		&#125;</span>
<span class="line">		s-&gt;top = s-&gt;base + s-&gt;stackSize;  <span class="comment">//设置栈顶</span></span>
<span class="line">		s-&gt;stackSize = s-&gt;stackSize + STACKINCREMENT;</span>
<span class="line">	&#125;</span>
<span class="line">	*(s-&gt;top) = e;</span>
<span class="line">	s-&gt;top++;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(SqStack *s, ElemType *e)</span> </span>&#123;</span>
<span class="line">	<span class="keyword">if</span> (s-&gt;top == s-&gt;base)</span>
<span class="line">	&#123;</span>
<span class="line">		<span class="keyword">return</span>;</span>
<span class="line">	&#125;</span>
<span class="line">	*e = *--(s-&gt;top);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="计算栈的当前容量-最大容量是s-stackSize"><a href="#计算栈的当前容量-最大容量是s-stackSize" class="headerlink" title="计算栈的当前容量(最大容量是s.stackSize)"></a>计算栈的当前容量(最大容量是s.stackSize)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLen</span><span class="params">(SqStack s)</span> </span>&#123;</span>
<span class="line">	<span class="keyword">return</span> (s.top - s.base);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span>
<span class="line">	SqStack s;</span>
<span class="line">	<span class="keyword">char</span> c;</span>
<span class="line">	<span class="keyword">double</span> d, e;</span>
<span class="line">	<span class="keyword">char</span> str[<span class="number">100</span>];</span>
<span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span>
<span class="line">	initStack(&amp;s);</span>
<span class="line">	<span class="built_in">printf</span>(<span class="string">"请按逆波兰表达式输入计算机数据，数据与运算符中间用空格隔开,以#结束\n"</span>);</span>
<span class="line">	scanf_s(<span class="string">"%c"</span>, &amp;c);</span>
<span class="line">	<span class="keyword">while</span> (c != <span class="string">'#'</span>)</span>
<span class="line">	&#123;</span>
<span class="line">		<span class="keyword">while</span> (<span class="built_in">isdigit</span>(c) || c==<span class="string">'.'</span>)  <span class="comment">//字符是否是数字</span></span>
<span class="line">		&#123;</span>
<span class="line">			str[i++] = c;</span>
<span class="line">			str[i] = <span class="string">'\0'</span>;</span>
<span class="line">			scanf_s(<span class="string">"%c"</span>, &amp;c);</span>
<span class="line">			<span class="keyword">if</span> (c==<span class="string">' '</span>)</span>
<span class="line">			&#123;</span>
<span class="line">				d = atof(str);    <span class="comment">//将字符串转换成浮点型</span></span>
<span class="line">				Push(&amp;s, d);</span>
<span class="line">				i = <span class="number">0</span>;</span>
<span class="line">				<span class="keyword">break</span>;</span>
<span class="line">			&#125;</span>
<span class="line">		&#125;</span>
<span class="line">		<span class="keyword">switch</span> (c)</span>
<span class="line">		&#123;</span>
<span class="line">		<span class="keyword">case</span> <span class="string">'+'</span>:</span>
<span class="line">			Pop(&amp;s, &amp;e);</span>
<span class="line">			Pop(&amp;s, &amp;d);</span>
<span class="line">			Push(&amp;s, d + e);</span>
<span class="line">			<span class="keyword">break</span>;</span>
<span class="line">		<span class="keyword">case</span> <span class="string">'-'</span>:</span>
<span class="line">			Pop(&amp;s, &amp;e);</span>
<span class="line">			Pop(&amp;s, &amp;d);</span>
<span class="line">			Push(&amp;s, d - e);</span>
<span class="line">			<span class="keyword">break</span>;</span>
<span class="line">		<span class="keyword">case</span> <span class="string">'*'</span>:</span>
<span class="line">			Pop(&amp;s, &amp;e);</span>
<span class="line">			Pop(&amp;s, &amp;d);</span>
<span class="line">			Push(&amp;s, d * e);</span>
<span class="line">			<span class="keyword">break</span>;</span>
<span class="line">		<span class="keyword">case</span> <span class="string">'/'</span>:</span>
<span class="line">			Pop(&amp;s, &amp;e);</span>
<span class="line">			Pop(&amp;s, &amp;d);</span>
<span class="line">			<span class="keyword">if</span> (e != <span class="number">0</span>)</span>
<span class="line">			&#123;</span>
<span class="line">				Push(&amp;s, d / e);</span>
<span class="line">			&#125;</span>
<span class="line">			<span class="keyword">else</span> &#123;</span>
<span class="line">				<span class="built_in">printf</span>(<span class="string">"除数为0,错误"</span>);</span>
<span class="line">				<span class="keyword">return</span> <span class="number">-1</span>;</span>
<span class="line">			&#125;</span>
<span class="line">			<span class="keyword">break</span>;</span>
<span class="line">		<span class="keyword">default</span>:</span>
<span class="line">			<span class="keyword">break</span>;</span>
<span class="line">		&#125;</span>
<span class="line">		scanf_s(<span class="string">"%c"</span>, &amp;c);</span>
<span class="line">	&#125;</span>
<span class="line">	Pop(&amp;s, &amp;d);</span>
<span class="line">	<span class="built_in">printf</span>(<span class="string">"最终的计算结果为%lf\n"</span>, d);</span>
<span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>本人用的是vs2015编译器，所以文中的scanf用了更安全的scanf_s，  如有引用 请自行替换成和自己的编译器想匹配的函数</p>
<p><img src="http://objects.earthchen.cn/c%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="cmd 运行结果"><br>代码依然很简单，都是一些简单的指针操作，如果看不懂，请复习c语言的指针部分（其实指针搞清楚地址与值得对应关系就可以了）</p>
<table>
<thead>
<tr>
<th>函数形参</th>
<th>主函数中参数使用</th>
<th>函数中参数使用</th>
</tr>
</thead>
<tbody>
<tr>
<td>*l</td>
<td>&amp;l</td>
<td>l-&gt;next</td>
</tr>
<tr>
<td>l</td>
<td>l</td>
<td>l.next</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>visual studio 2015</strong>中编译成功运行，其他ide请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言二叉树的基本操作]]></title>
      <url>/2016/07/15/C%E8%AF%AD%E8%A8%80%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>树是数据结构中一门很重要的数据结构，在很多地方都能经常见到他的面孔，比如数据通信，压缩数据等都能见到树的身影。但是最常见的还是相对简单的二叉树，二叉树和常规树都可以进行相互转换。所以，二叉树的操作必不可少。我这里来简单介绍一下。<br>在数据结构中给的树和图中，我们最好使用递归来进行各种操作，会让代码更清晰易懂，代码也会更简洁。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="添加适当的头文件，定义hex一个栈数据结构，"><a href="#添加适当的头文件，定义hex一个栈数据结构，" class="headerlink" title="添加适当的头文件，定义hex一个栈数据结构，"></a>添加适当的头文件，定义hex一个栈数据结构，</h3><p>首先我们定义一个二叉树的数据结构</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span>
<span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span>
<span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span>
<span class="line">&#123;</span></span>
<span class="line">ElemType data;</span>
<span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span>
<span class="line">&#125;BiTNode, *BiTree;</span>
</pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="创建一个二叉树（前序）"><a href="#创建一个二叉树（前序）" class="headerlink" title="创建一个二叉树（前序）"></a>创建一个二叉树（前序）</h3><p>这里以前序作为例子，前中后序遍历的不同之在于递归的顺序</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatBiTree</span><span class="params">(BiTree *T)</span> </span>&#123;</span>
<span class="line">	ElemType c;</span>
<span class="line">	<span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c);</span>
<span class="line">	<span class="keyword">if</span> (<span class="string">'#'</span> == c)</span>
<span class="line">	&#123;</span>
<span class="line">		*T = <span class="literal">NULL</span>;</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">else</span></span>
<span class="line">	&#123;</span>
<span class="line">		*T = (BiTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span>
<span class="line">		(*T)-&gt;data = c;</span>
<span class="line">		creatBiTree(&amp;(*T)-&gt;lchild);</span>
<span class="line">		creatBiTree(&amp;(*T)-&gt;rchild);</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="遍历二叉树-前序遍历"><a href="#遍历二叉树-前序遍历" class="headerlink" title="遍历二叉树(前序遍历)"></a>遍历二叉树(前序遍历)</h3><p>这里依然以前序作为例子，前中后序遍历的不同之在于递归的顺序<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(BiTree T)</span> </span>&#123;</span>
<span class="line">	<span class="keyword">if</span> (T) &#123;</span>
<span class="line">		<span class="built_in">printf</span>(<span class="string">"%c\n"</span>, T-&gt;data);</span>
<span class="line">		preorder(T-&gt;lchild);</span>
<span class="line">		preorder(T-&gt;rchild);</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<h3 id="层次遍历二叉树"><a href="#层次遍历二叉树" class="headerlink" title="层次遍历二叉树"></a>层次遍历二叉树</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelorder</span><span class="params">(BiTree T)</span> </span>&#123;</span>
<span class="line">	<span class="comment">//用一个队列保存结点信息,这里的队列采用的是顺序队列中的数组实现</span></span>
<span class="line">	<span class="keyword">int</span> front = <span class="number">0</span>;</span>
<span class="line">	<span class="keyword">int</span> rear = <span class="number">0</span>;</span>
<span class="line">	BiTree BiQueue[MAXSIZE];</span>
<span class="line">	BiTree tempNode;</span>
<span class="line">	<span class="keyword">if</span> (!IsEmpty_BiTree(&amp;T)) &#123;</span>
<span class="line">		<span class="comment">//将根结点加入到队列中　</span></span>
<span class="line">		BiQueue[rear++] = T;</span>
<span class="line"></span>
<span class="line">		<span class="keyword">while</span> (front != rear) &#123;</span>
<span class="line">			<span class="comment">//取出队头元素，并使队头指针向后移动一位　</span></span>
<span class="line">			tempNode = BiQueue[front++];</span>
<span class="line">			<span class="comment">//判断左右子树是否为空,若为空，则加入队列　</span></span>
<span class="line">			<span class="keyword">if</span> (!IsEmpty_BiTree(&amp;(tempNode-&gt;lchild)))</span>
<span class="line">				BiQueue[rear++] = tempNode-&gt;lchild;</span>
<span class="line"></span>
<span class="line">			<span class="keyword">if</span> (!IsEmpty_BiTree(&amp;(tempNode-&gt;rchild)))</span>
<span class="line">				BiQueue[rear++] = tempNode-&gt;rchild;</span>
<span class="line"></span>
<span class="line">			<span class="comment">//输出队头结点元素　</span></span>
<span class="line">			<span class="comment">//Vist_BiTreeNode(tempNode-&gt;data);</span></span>
<span class="line">			<span class="built_in">printf</span>(<span class="string">"%c\n"</span>, tempNode-&gt;data);</span>
<span class="line"></span>
<span class="line">		&#125;</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="复制树"><a href="#复制树" class="headerlink" title="复制树"></a>复制树</h3><p>将二叉树复制给另一个二叉树</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copybitree</span><span class="params">(BiTree T, BiTree *newT)</span> </span>&#123;</span>
<span class="line">	<span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span>
<span class="line">	&#123;</span>
<span class="line">		*newT = <span class="literal">NULL</span>;</span>
<span class="line">		<span class="keyword">return</span>;</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">else</span></span>
<span class="line">	&#123;</span>
<span class="line">		*newT = (BiTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span>
<span class="line">		((*newT)-&gt;data) = (T-&gt;data);</span>
<span class="line">		copybitree(T-&gt;lchild, &amp;(*newT)-&gt;lchild);</span>
<span class="line">		copybitree(T-&gt;rchild, &amp;(*newT)-&gt;rchild);</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="计算结点个数"><a href="#计算结点个数" class="headerlink" title="计算结点个数"></a>计算结点个数</h3><p>计算二叉树的结点个数</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countleaf</span><span class="params">(BiTree T)</span> </span>&#123;</span>
<span class="line">	<span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span>
<span class="line">	&#123;</span>
<span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">else</span> &#123;</span>
<span class="line">		<span class="keyword">return</span> countleaf(T-&gt;lchild) + countleaf(T-&gt;rchild) + <span class="number">1</span>;</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="左、右子树交换"><a href="#左、右子树交换" class="headerlink" title="左、右子树交换"></a>左、右子树交换</h3><p>交换一颗二叉树的左右子树</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(BiTree T)</span> </span>
<span class="line"></span>&#123;</span>
<span class="line">	BiTree p;</span>
<span class="line">	<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span>
<span class="line">	&#123;</span>
<span class="line">		p = T-&gt;lchild;</span>
<span class="line">		T-&gt;lchild = T-&gt;rchild;</span>
<span class="line">		T-&gt;rchild = p;</span>
<span class="line">		exchange(T-&gt;lchild);</span>
<span class="line">		exchange(T-&gt;rchild);</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span>
<span class="line">	BiTree T=<span class="literal">NULL</span>,newT=<span class="literal">NULL</span>;</span>
<span class="line">	creatBiTree(&amp;T);</span>
<span class="line">	<span class="built_in">printf</span>(<span class="string">"前序遍历\n"</span>);</span>
<span class="line">	preorder(T);</span>
<span class="line">	<span class="built_in">printf</span>(<span class="string">"中序遍历\n"</span>);</span>
<span class="line">	inorder(T);</span>
<span class="line">	<span class="built_in">printf</span>(<span class="string">"中后遍历\n"</span>);</span>
<span class="line">	postorder(T);</span>
<span class="line">	<span class="built_in">printf</span>(<span class="string">"层序遍历\n"</span>);</span>
<span class="line">	levelorder(T);</span>
<span class="line">	<span class="built_in">printf</span>(<span class="string">"节点个数为%d\n"</span>, countleaf(T));</span>
<span class="line">	copybitree(T, &amp;newT);</span>
<span class="line">	<span class="built_in">printf</span>(<span class="string">"newT前序遍历\n"</span>);</span>
<span class="line">	preorder(newT);</span>
<span class="line">	exchange(T);</span>
<span class="line">	<span class="built_in">printf</span>(<span class="string">"交换左右子树之后前序遍历为"</span>);</span>
<span class="line">	preorder(T);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="http://objects.earthchen.cn/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="二叉树运行结果"><br>以上就是二叉树的一些基本操作，大量运用的递归的思想，希望读者能好好研读</p>
<blockquote>
<p>注：</p>
<ul>
<li>上述代码在<strong>visual studio 2015</strong>中编译成功运行，其他ide请自行测试</li>
<li>上述文字皆为个人看法，如有错误或建议请及时联系我</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
